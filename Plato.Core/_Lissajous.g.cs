// Autogenerated file: DO NOT EDIT
// Created on 2025-04-03 1:53:19 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Lissajous: IAngularCurve2D, IOpenShape
    {
        // Fields
        [DataMember] public readonly Angle Delta;
        [DataMember] public readonly Number A;
        [DataMember] public readonly Number B;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Lissajous WithDelta(Angle delta) => new Lissajous(delta, A, B);
        [MethodImpl(AggressiveInlining)] public Lissajous WithA(Number a) => new Lissajous(Delta, a, B);
        [MethodImpl(AggressiveInlining)] public Lissajous WithB(Number b) => new Lissajous(Delta, A, b);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Lissajous(Angle delta, Number a, Number b) { Delta = delta; A = a; B = b; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Lissajous Create(Angle delta, Number a, Number b) => new Lissajous(delta, a, b);

        // Static default implementation
        public static readonly Lissajous Default = default;

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Angle, Number, Number)(Lissajous self) => (self.Delta, self.A, self.B);
        [MethodImpl(AggressiveInlining)] public static implicit operator Lissajous((Angle, Number, Number) value) => new(value.Item1, value.Item2, value.Item3);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Angle delta, out Number a, out Number b) { delta = Delta; a = A; b = B;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Lissajous other) => Delta.Equals(other.Delta) && A.Equals(other.A) && B.Equals(other.B);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Lissajous other) => !Delta.Equals(other.Delta) && A.Equals(other.A) && B.Equals(other.B);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Lissajous other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Delta, A, B);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Delta\" = {Delta}, \"A\" = {A}, \"B\" = {B} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented interface functions
        [MethodImpl(AggressiveInlining)]  public Vector2 Eval(Angle t) => t.Lissajous(this.A, this.B, this.Delta);
[MethodImpl(AggressiveInlining)]  public Vector2 Eval(Number t) => this.Eval(t.Turns);
[MethodImpl(AggressiveInlining)]  public IArray<Vector2> Sample(Integer numPoints){
            var _var65 = this;
            return numPoints.LinearSpace.Map((x)  => _var65.Eval(x));
        }

[MethodImpl(AggressiveInlining)]  public PolyLine2D ToPolyLine2D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)false); } 

        // Unimplemented interface functions
    }
}
