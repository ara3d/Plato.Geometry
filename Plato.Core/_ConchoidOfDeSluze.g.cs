// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 8:08:08 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
public partial struct ConchoidOfDeSluze: IPolarCurve, IOpenShape
{
    // Fields
    [DataMember] public readonly Number A;

    // With functions 
    [MethodImpl(AggressiveInlining)] public ConchoidOfDeSluze WithA(Number a) => new ConchoidOfDeSluze(a);

    // Regular Constructor
    [MethodImpl(AggressiveInlining)] public ConchoidOfDeSluze(Number a) { A = a; }

    // Static factory function
    [MethodImpl(AggressiveInlining)] public static ConchoidOfDeSluze Create(Number a) => new ConchoidOfDeSluze(a);

    // Implicit converters to/from single field
    [MethodImpl(AggressiveInlining)] public static implicit operator Number(ConchoidOfDeSluze self) => self.A;
    [MethodImpl(AggressiveInlining)] public static implicit operator ConchoidOfDeSluze(Number value) => new ConchoidOfDeSluze(value);
    [MethodImpl(AggressiveInlining)] public static implicit operator ConchoidOfDeSluze(Integer value) => new ConchoidOfDeSluze(value);
    [MethodImpl(AggressiveInlining)] public static implicit operator ConchoidOfDeSluze(int value) => new Integer(value);
    [MethodImpl(AggressiveInlining)] public static implicit operator ConchoidOfDeSluze(float value) => new Number(value);
    [MethodImpl(AggressiveInlining)] public static implicit operator float(ConchoidOfDeSluze value) => value.A;

    // Object virtual function overrides: Equals, GetHashCode, ToString
    [MethodImpl(AggressiveInlining)] public Boolean Equals(ConchoidOfDeSluze other) => A.Equals(other.A);
    [MethodImpl(AggressiveInlining)] public Boolean NotEquals(ConchoidOfDeSluze other) => !A.Equals(other.A);
    [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is ConchoidOfDeSluze other ? Equals(other) : false;
    [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(A);
    [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"A\" = {A} }}";

    // Explicit implementation of interfaces by forwarding properties to fields

    // Implemented concept functions and type functions
    [MethodImpl(AggressiveInlining)]  public Number GetRadius(Angle t) => t.ConchoidOfDeSluze(this.A);
[MethodImpl(AggressiveInlining)]  public PolarCoordinate EvalPolar(Angle t) => (this.GetRadius(t), t);
[MethodImpl(AggressiveInlining)]  public Vector2 Eval(Angle t) => this.EvalPolar(t);
[MethodImpl(AggressiveInlining)]  public Vector2 Eval(Number t) => this.Eval(t.Turns);
[MethodImpl(AggressiveInlining)]  public IArray<Vector2> Sample(Integer numPoints){
    var _var401 = this;
    return numPoints.LinearSpace.Map((x) =>  => _var401.Eval(x);
;
}

[MethodImpl(AggressiveInlining)]  public PolyLine2D ToPolyLine2D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
[MethodImpl(AggressiveInlining)]  public Procedural<Number, TR> Combine<TR>(ConchoidOfDeSluze b, System.Func<TR, TR, TR> f){
    var _var404 = b;
    {
        var _var403 = this;
        {
            var _var402 = f;
            return (x) =>  => _var402.Invoke(_var403.Eval(x), _var404.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector2> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var406 = f;
    {
        var _var405 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var405.Eval(_var406.Invoke(x));
;
    }
}

public System.Func<Number, Vector2> Function { [MethodImpl(AggressiveInlining)] get {
    var _var407 = this;
    return (x) =>  => _var407.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Number, Vector2> Compose(ConchoidOfDeSluze b){
    var _var409 = this;
    {
        var _var408 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var408.Eval(_var409.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, TR> Combine<TR>(ConchoidOfDeSluze b, System.Func<TR, TR, TR> f){
    var _var412 = b;
    {
        var _var411 = this;
        {
            var _var410 = f;
            return (x) =>  => _var410.Invoke(_var411.Eval(x), _var412.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var414 = f;
    {
        var _var413 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var413.Eval(_var414.Invoke(x));
;
    }
}

public System.Func<Vector2, Number> Function { [MethodImpl(AggressiveInlining)] get {
    var _var415 = this;
    return (x) =>  => _var415.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Number> Compose(ConchoidOfDeSluze b){
    var _var417 = this;
    {
        var _var416 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var416.Eval(_var417.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Union(ConchoidOfDeSluze b) => this.Combine(b, (a, b) =>  => a.Max(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Intersection(ConchoidOfDeSluze b) => this.Combine(b, (a, b) =>  => a.Min(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Difference(ConchoidOfDeSluze b) => this.Combine(b, (a, b) =>  => a.Max(b.Negative);

public Procedural<Vector2, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) =>  => x.Negative;
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Boolean> Threshold(Number threshold){
    var _var418 = threshold;
    return this.Map((x) =>  => x.GreaterThanOrEquals(_var418);
;
}

public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)false); } 

    // Unimplemented concept functions
    [MethodImpl(AggressiveInlining)]  public Number Distance(Vector2 p) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public Number Eval(Vector2 t) => throw new NotImplementedException();
}
Plato.CSharpWriter.CSharpConcreteTypeWriter}
