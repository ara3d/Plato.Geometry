// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 8:08:08 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
public partial struct ConicSection: IPolarCurve, IOpenShape
{
    // Fields
    [DataMember] public readonly Number Eccentricity;
    [DataMember] public readonly Number SemiLatusRectum;

    // With functions 
    [MethodImpl(AggressiveInlining)] public ConicSection WithEccentricity(Number eccentricity) => new ConicSection(eccentricity, SemiLatusRectum);
    [MethodImpl(AggressiveInlining)] public ConicSection WithSemiLatusRectum(Number semiLatusRectum) => new ConicSection(Eccentricity, semiLatusRectum);

    // Regular Constructor
    [MethodImpl(AggressiveInlining)] public ConicSection(Number eccentricity, Number semiLatusRectum) { Eccentricity = eccentricity; SemiLatusRectum = semiLatusRectum; }

    // Static factory function
    [MethodImpl(AggressiveInlining)] public static ConicSection Create(Number eccentricity, Number semiLatusRectum) => new ConicSection(eccentricity, semiLatusRectum);

    // Implicit converters to/from value-tuples and deconstructor
    [MethodImpl(AggressiveInlining)] public static implicit operator (Number, Number)(ConicSection self) => (self.Eccentricity, self.SemiLatusRectum);
    [MethodImpl(AggressiveInlining)] public static implicit operator ConicSection((Number, Number) value) => new(value.Item1, value.Item2);
    [MethodImpl(AggressiveInlining)] public void Deconstruct(out Number eccentricity, out Number semiLatusRectum) { eccentricity = Eccentricity; semiLatusRectum = SemiLatusRectum;  }

    // Object virtual function overrides: Equals, GetHashCode, ToString
    [MethodImpl(AggressiveInlining)] public Boolean Equals(ConicSection other) => Eccentricity.Equals(other.Eccentricity) && SemiLatusRectum.Equals(other.SemiLatusRectum);
    [MethodImpl(AggressiveInlining)] public Boolean NotEquals(ConicSection other) => !Eccentricity.Equals(other.Eccentricity) && SemiLatusRectum.Equals(other.SemiLatusRectum);
    [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is ConicSection other ? Equals(other) : false;
    [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Eccentricity, SemiLatusRectum);
    [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Eccentricity\" = {Eccentricity}, \"SemiLatusRectum\" = {SemiLatusRectum} }}";

    // Explicit implementation of interfaces by forwarding properties to fields

    // Implemented concept functions and type functions
    [MethodImpl(AggressiveInlining)]  public Number GetRadius(Angle t) => t.ConicSection(this.SemiLatusRectum, this.Eccentricity);
[MethodImpl(AggressiveInlining)]  public PolarCoordinate EvalPolar(Angle t) => (this.GetRadius(t), t);
[MethodImpl(AggressiveInlining)]  public Vector2 Eval(Angle t) => this.EvalPolar(t);
[MethodImpl(AggressiveInlining)]  public Vector2 Eval(Number t) => this.Eval(t.Turns);
[MethodImpl(AggressiveInlining)]  public IArray<Vector2> Sample(Integer numPoints){
    var _var347 = this;
    return numPoints.LinearSpace.Map((x) =>  => _var347.Eval(x);
;
}

[MethodImpl(AggressiveInlining)]  public PolyLine2D ToPolyLine2D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
[MethodImpl(AggressiveInlining)]  public Procedural<Number, TR> Combine<TR>(ConicSection b, System.Func<TR, TR, TR> f){
    var _var350 = b;
    {
        var _var349 = this;
        {
            var _var348 = f;
            return (x) =>  => _var348.Invoke(_var349.Eval(x), _var350.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector2> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var352 = f;
    {
        var _var351 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var351.Eval(_var352.Invoke(x));
;
    }
}

public System.Func<Number, Vector2> Function { [MethodImpl(AggressiveInlining)] get {
    var _var353 = this;
    return (x) =>  => _var353.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Number, Vector2> Compose(ConicSection b){
    var _var355 = this;
    {
        var _var354 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var354.Eval(_var355.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, TR> Combine<TR>(ConicSection b, System.Func<TR, TR, TR> f){
    var _var358 = b;
    {
        var _var357 = this;
        {
            var _var356 = f;
            return (x) =>  => _var356.Invoke(_var357.Eval(x), _var358.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var360 = f;
    {
        var _var359 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var359.Eval(_var360.Invoke(x));
;
    }
}

public System.Func<Vector2, Number> Function { [MethodImpl(AggressiveInlining)] get {
    var _var361 = this;
    return (x) =>  => _var361.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Number> Compose(ConicSection b){
    var _var363 = this;
    {
        var _var362 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var362.Eval(_var363.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Union(ConicSection b) => this.Combine(b, (a, b) =>  => a.Max(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Intersection(ConicSection b) => this.Combine(b, (a, b) =>  => a.Min(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Difference(ConicSection b) => this.Combine(b, (a, b) =>  => a.Max(b.Negative);

public Procedural<Vector2, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) =>  => x.Negative;
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Boolean> Threshold(Number threshold){
    var _var364 = threshold;
    return this.Map((x) =>  => x.GreaterThanOrEquals(_var364);
;
}

public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)false); } 

    // Unimplemented concept functions
    [MethodImpl(AggressiveInlining)]  public Number Distance(Vector2 p) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public Number Eval(Vector2 t) => throw new NotImplementedException();
}
Plato.CSharpWriter.CSharpConcreteTypeWriter}
