// Autogenerated file: DO NOT EDIT
// Created on 2025-03-14 12:36:59 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct ConicSection: IPolarCurve, IOpenShape
    {
        // Fields
        [DataMember] public readonly Number Eccentricity;
        [DataMember] public readonly Number SemiLatusRectum;

        // With functions 
        [MethodImpl(AggressiveInlining)] public ConicSection WithEccentricity(Number eccentricity) => new ConicSection(eccentricity, SemiLatusRectum);
        [MethodImpl(AggressiveInlining)] public ConicSection WithSemiLatusRectum(Number semiLatusRectum) => new ConicSection(Eccentricity, semiLatusRectum);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public ConicSection(Number eccentricity, Number semiLatusRectum) { Eccentricity = eccentricity; SemiLatusRectum = semiLatusRectum; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static ConicSection Create(Number eccentricity, Number semiLatusRectum) => new ConicSection(eccentricity, semiLatusRectum);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Number, Number)(ConicSection self) => (self.Eccentricity, self.SemiLatusRectum);
        [MethodImpl(AggressiveInlining)] public static implicit operator ConicSection((Number, Number) value) => new(value.Item1, value.Item2);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Number eccentricity, out Number semiLatusRectum) { eccentricity = Eccentricity; semiLatusRectum = SemiLatusRectum;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(ConicSection other) => Eccentricity.Equals(other.Eccentricity) && SemiLatusRectum.Equals(other.SemiLatusRectum);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(ConicSection other) => !Eccentricity.Equals(other.Eccentricity) && SemiLatusRectum.Equals(other.SemiLatusRectum);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is ConicSection other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Eccentricity, SemiLatusRectum);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Eccentricity\" = {Eccentricity}, \"SemiLatusRectum\" = {SemiLatusRectum} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented interface functions
        // GetRadius(ConicSection, Angle):Number; [Self=ConicSection;]; <>
        [MethodImpl(AggressiveInlining)]  public Number GetRadius(Angle t) => t.ConicSection(this.SemiLatusRectum, this.Eccentricity);
// EvalPolar(ConicSection, Angle):PolarCoordinate; [IPolarCurve=ConicSection;Self=ConicSection;]; <>
        [MethodImpl(AggressiveInlining)]  public PolarCoordinate EvalPolar(Angle t) => (this.GetRadius(t), t);
// Eval(ConicSection, Angle):Vector2; [IPolarCurve=ConicSection;Self=ConicSection;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector2 Eval(Angle t) => this.EvalPolar(t);
// Eval(ConicSection, Number):Vector2; [IAngularCurve2D=ConicSection;IPolarCurve=ConicSection;Self=ConicSection;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector2 Eval(Number t) => this.Eval(t.Turns);
// Sample(ConicSection, Integer):_T0; [ICurve2D=ConicSection;IAngularCurve2D=ConicSection;IPolarCurve=ConicSection;Self=ConicSection;]; <_T0:IArray<Vector2>>
        [MethodImpl(AggressiveInlining)]  public _T0 Sample<_T0>(Integer numPoints){
            var _var71 = this;
            return numPoints.LinearSpace.Map((x)  => _var71.Eval(x));
        }

// ToPolyLine2D(ConicSection, Integer):PolyLine2D; [ICurve2D=ConicSection;IAngularCurve2D=ConicSection;IPolarCurve=ConicSection;Self=ConicSection;]; <>
        [MethodImpl(AggressiveInlining)]  public PolyLine2D ToPolyLine2D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
// Closed(ConicSection):Boolean; [IOpenShape=ConicSection;Self=ConicSection;]; <>
        public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)false); } 

        // Unimplemented concept functions
    }
}
