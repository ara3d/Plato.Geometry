// Autogenerated file: DO NOT EDIT
// Created on 2025-03-14 12:36:59 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Rect2D: IPolygon2D
    {
        // Fields
        [DataMember] public readonly Vector2 Center;
        [DataMember] public readonly Vector2 Size;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Rect2D WithCenter(Vector2 center) => new Rect2D(center, Size);
        [MethodImpl(AggressiveInlining)] public Rect2D WithSize(Vector2 size) => new Rect2D(Center, size);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Rect2D(Vector2 center, Vector2 size) { Center = center; Size = size; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Rect2D Create(Vector2 center, Vector2 size) => new Rect2D(center, size);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Vector2, Vector2)(Rect2D self) => (self.Center, self.Size);
        [MethodImpl(AggressiveInlining)] public static implicit operator Rect2D((Vector2, Vector2) value) => new(value.Item1, value.Item2);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Vector2 center, out Vector2 size) { center = Center; size = Size;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Rect2D other) => Center.Equals(other.Center) && Size.Equals(other.Size);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Rect2D other) => !Center.Equals(other.Center) && Size.Equals(other.Size);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Rect2D other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Center, Size);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Center\" = {Center}, \"Size\" = {Size} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented interface functions
        // Width(Rect2D):Number; [Self=Rect2D;]; <>
        public Number Width { [MethodImpl(AggressiveInlining)] get  => this.Size.X; } 
// Height(Rect2D):Number; [Self=Rect2D;]; <>
        public Number Height { [MethodImpl(AggressiveInlining)] get  => this.Size.Y; } 
// Left(Rect2D):Number; [Self=Rect2D;]; <>
        public Number Left { [MethodImpl(AggressiveInlining)] get  => this.Center.X.Subtract(this.Width.Half); } 
// Right(Rect2D):Number; [Self=Rect2D;]; <>
        public Number Right { [MethodImpl(AggressiveInlining)] get  => this.Left.Add(this.Width); } 
// Bottom(Rect2D):Number; [Self=Rect2D;]; <>
        public Number Bottom { [MethodImpl(AggressiveInlining)] get  => this.Center.Y.Subtract(this.Height.Half); } 
// Top(Rect2D):Number; [Self=Rect2D;]; <>
        public Number Top { [MethodImpl(AggressiveInlining)] get  => this.Bottom.Add(this.Height); } 
// BottomLeft(Rect2D):Vector2; [Self=Rect2D;]; <>
        public Vector2 BottomLeft { [MethodImpl(AggressiveInlining)] get  => (this.Left, this.Bottom); } 
// BottomRight(Rect2D):Vector2; [Self=Rect2D;]; <>
        public Vector2 BottomRight { [MethodImpl(AggressiveInlining)] get  => (this.Right, this.Bottom); } 
// TopRight(Rect2D):Vector2; [Self=Rect2D;]; <>
        public Vector2 TopRight { [MethodImpl(AggressiveInlining)] get  => (this.Right, this.Top); } 
// TopLeft(Rect2D):Vector2; [Self=Rect2D;]; <>
        public Vector2 TopLeft { [MethodImpl(AggressiveInlining)] get  => (this.Left, this.Top); } 
// Quad2D(Rect2D):Quad2D; [Self=Rect2D;]; <>
        public Quad2D Quad2D { [MethodImpl(AggressiveInlining)] get  => (this.BottomLeft, this.BottomRight, this.TopRight, this.TopLeft); } 
[MethodImpl(AggressiveInlining)]  public static implicit operator Quad2D(Rect2D x) => x.Quad2D;
        // Points(Rect2D):_T0; [Self=Rect2D;]; <_T0:IArray<Vector2>>
        public _T0 Points<_T0> { [MethodImpl(AggressiveInlining)] get  => this.Quad2D; } 
// Lines(Rect2D):_T0; [IPolyLine2D=Rect2D;IPolygon2D=Rect2D;Self=Rect2D;]; <_T0:IArray<Line2D>>
        public _T0 Lines<_T0> { [MethodImpl(AggressiveInlining)] get  => this.Points.WithNext((a, b)  => new Line2D(a, b), this.Closed); } 
// Sample(Rect2D, Integer):_T0; [ICurve2D=Rect2D;IPolyLine2D=Rect2D;IPolygon2D=Rect2D;Self=Rect2D;]; <_T0:IArray<Vector2>>
        [MethodImpl(AggressiveInlining)]  public _T0 Sample<_T0>(Integer numPoints){
            var _var89 = this;
            return numPoints.LinearSpace.Map((x)  => _var89.Eval(x));
        }

// ToPolyLine2D(Rect2D, Integer):PolyLine2D; [ICurve2D=Rect2D;IPolyLine2D=Rect2D;IPolygon2D=Rect2D;Self=Rect2D;]; <>
        [MethodImpl(AggressiveInlining)]  public PolyLine2D ToPolyLine2D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
// Closed(Rect2D):Boolean; [IClosedShape=Rect2D;IClosedShape2D=Rect2D;IPolygon2D=Rect2D;Self=Rect2D;]; <>
        public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 

        // Unimplemented concept functions
        // PrimitiveSize(Rect2D):Integer; [IPrimitiveGeometry=Rect2D;IPrimitiveGeometry2D=Rect2D;IPointGeometry2D=Rect2D;IPolyLine2D=Rect2D;IPolygon2D=Rect2D;Self=Rect2D;]; <>
        public Integer PrimitiveSize => throw new NotImplementedException();
// NumPrimitives(Rect2D):Integer; [IPrimitiveGeometry=Rect2D;IPrimitiveGeometry2D=Rect2D;IPointGeometry2D=Rect2D;IPolyLine2D=Rect2D;IPolygon2D=Rect2D;Self=Rect2D;]; <>
        public Integer NumPrimitives => throw new NotImplementedException();
// Corners(Rect2D):_T0; [IPrimitiveGeometry2D=Rect2D;IPointGeometry2D=Rect2D;IPolyLine2D=Rect2D;IPolygon2D=Rect2D;Self=Rect2D;]; <_T0:IArray<Vector2>>
        public _T0 Corners<_T0> => throw new NotImplementedException();
// Eval(Rect2D, Number):Vector2; [IProcedural=Rect2D;TOut=TRange;TIn=Number;ICurve=Rect2D;TRange=Vector2;ICurve2D=Rect2D;IPolyLine2D=Rect2D;IPolygon2D=Rect2D;Self=Rect2D;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector2 Eval(Number t) => throw new NotImplementedException();
}
}
