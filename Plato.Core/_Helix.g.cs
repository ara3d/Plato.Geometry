// Autogenerated file: DO NOT EDIT
// Created on 2025-03-14 12:36:59 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Helix: IAngularCurve3D, IOpenShape
    {
        // Fields
        [DataMember] public readonly Number Radius;
        [DataMember] public readonly Number Height;
        [DataMember] public readonly Number NumTurns;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Helix WithRadius(Number radius) => new Helix(radius, Height, NumTurns);
        [MethodImpl(AggressiveInlining)] public Helix WithHeight(Number height) => new Helix(Radius, height, NumTurns);
        [MethodImpl(AggressiveInlining)] public Helix WithNumTurns(Number numTurns) => new Helix(Radius, Height, numTurns);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Helix(Number radius, Number height, Number numTurns) { Radius = radius; Height = height; NumTurns = numTurns; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Helix Create(Number radius, Number height, Number numTurns) => new Helix(radius, height, numTurns);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Number, Number, Number)(Helix self) => (self.Radius, self.Height, self.NumTurns);
        [MethodImpl(AggressiveInlining)] public static implicit operator Helix((Number, Number, Number) value) => new(value.Item1, value.Item2, value.Item3);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Number radius, out Number height, out Number numTurns) { radius = Radius; height = Height; numTurns = NumTurns;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Helix other) => Radius.Equals(other.Radius) && Height.Equals(other.Height) && NumTurns.Equals(other.NumTurns);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Helix other) => !Radius.Equals(other.Radius) && Height.Equals(other.Height) && NumTurns.Equals(other.NumTurns);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Helix other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Radius, Height, NumTurns);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Radius\" = {Radius}, \"Height\" = {Height}, \"NumTurns\" = {NumTurns} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented interface functions
        // Eval(Helix, Angle):Vector3; [Self=Helix;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector3 Eval(Angle t) => t.Helix(this.NumTurns).Multiply((this.Radius, this.Radius, this.Height));
// Eval(Helix, Number):Vector3; [IAngularCurve3D=Helix;Self=Helix;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector3 Eval(Number t) => this.Eval(t.Turns);
// Sample(Helix, Integer):_T0; [ICurve3D=Helix;IAngularCurve3D=Helix;Self=Helix;]; <_T0:IArray<Vector3>>
        [MethodImpl(AggressiveInlining)]  public _T0 Sample<_T0>(Integer numPoints){
            var _var82 = this;
            return numPoints.LinearSpace.Map((x)  => _var82.Eval(x));
        }

// ToPolyLine3D(Helix, Integer):PolyLine3D; [ICurve3D=Helix;IAngularCurve3D=Helix;Self=Helix;]; <>
        [MethodImpl(AggressiveInlining)]  public PolyLine3D ToPolyLine3D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
// Closed(Helix):Boolean; [IOpenShape=Helix;Self=Helix;]; <>
        public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)false); } 

        // Unimplemented concept functions
    }
}
