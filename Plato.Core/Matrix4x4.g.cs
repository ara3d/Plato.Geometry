// Autogenerated file: DO NOT EDIT
// Created on 2025-01-17 3:12:39 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Matrix4x4: IValue<Matrix4x4>, IArray<Vector4>
    {
        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 Create(Vector4 row1, Vector4 row2, Vector4 row3, Vector4 row4) => new Matrix4x4(row1, row2, row3, row4);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Vector4, Vector4, Vector4, Vector4)(Matrix4x4 self) => (self.Row1, self.Row2, self.Row3, self.Row4);
        [MethodImpl(AggressiveInlining)] public static implicit operator Matrix4x4((Vector4, Vector4, Vector4, Vector4) value) => new(value.Item1, value.Item2, value.Item3, value.Item4);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Vector4 row1, out Vector4 row2, out Vector4 row3, out Vector4 row4) { row1 = Row1; row2 = Row2; row3 = Row3; row4 = Row4;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Matrix4x4 other) => Value.Equals(other.Value);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Matrix4x4 other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override string ToString() => Value.ToString();
        [MethodImpl(AggressiveInlining)] public static Boolean operator==(Matrix4x4 a, Matrix4x4 b) => a.Equals(b);
        [MethodImpl(AggressiveInlining)] public static Boolean operator!=(Matrix4x4 a, Matrix4x4 b) => !a.Equals(b);

        // Explicit implementation of interfaces by forwarding properties to fields

        // Array predefined functions
        [MethodImpl(AggressiveInlining)] public Matrix4x4(IReadOnlyList<Vector4> xs) : this(xs[0], xs[1], xs[2], xs[3]) { }
        [MethodImpl(AggressiveInlining)] public Matrix4x4(Vector4[] xs) : this(xs[0], xs[1], xs[2], xs[3]) { }
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 Create(IReadOnlyList<Vector4> xs) => new Matrix4x4(xs);
        // Implementation of IReadOnlyList
        [MethodImpl(AggressiveInlining)] public System.Collections.Generic.IEnumerator<Vector4> GetEnumerator() => new ArrayEnumerator<Vector4>(this);
        [MethodImpl(AggressiveInlining)] System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => GetEnumerator();
        Vector4 System.Collections.Generic.IReadOnlyList<Vector4>.this[int n] { [MethodImpl(AggressiveInlining)] get => At(n); }
        int System.Collections.Generic.IReadOnlyCollection<Vector4>.Count { [MethodImpl(AggressiveInlining)] get => this.Count; }

        // Implemented concept functions and type functions
        public static Matrix4x4 Identity { [MethodImpl(AggressiveInlining)] get  => (Vector4.UnitX, Vector4.UnitY, Vector4.UnitZ, Vector4.UnitW); } 
        public Number M11 { [MethodImpl(AggressiveInlining)] get  => this.Row1.X; } 
        public Number M12 { [MethodImpl(AggressiveInlining)] get  => this.Row1.Y; } 
        public Number M13 { [MethodImpl(AggressiveInlining)] get  => this.Row1.Z; } 
        public Number M14 { [MethodImpl(AggressiveInlining)] get  => this.Row1.W; } 
        public Number M21 { [MethodImpl(AggressiveInlining)] get  => this.Row2.X; } 
        public Number M22 { [MethodImpl(AggressiveInlining)] get  => this.Row2.Y; } 
        public Number M23 { [MethodImpl(AggressiveInlining)] get  => this.Row2.Z; } 
        public Number M24 { [MethodImpl(AggressiveInlining)] get  => this.Row2.W; } 
        public Number M31 { [MethodImpl(AggressiveInlining)] get  => this.Row3.X; } 
        public Number M32 { [MethodImpl(AggressiveInlining)] get  => this.Row3.Y; } 
        public Number M33 { [MethodImpl(AggressiveInlining)] get  => this.Row3.Z; } 
        public Number M34 { [MethodImpl(AggressiveInlining)] get  => this.Row3.W; } 
        public Number M41 { [MethodImpl(AggressiveInlining)] get  => this.Row4.X; } 
        public Number M42 { [MethodImpl(AggressiveInlining)] get  => this.Row4.Y; } 
        public Number M43 { [MethodImpl(AggressiveInlining)] get  => this.Row4.Z; } 
        public Number M44 { [MethodImpl(AggressiveInlining)] get  => this.Row4.W; } 
        public Vector4 Column1 { [MethodImpl(AggressiveInlining)] get  => (M11, M21, M31, M41); } 
        public Vector4 Column2 { [MethodImpl(AggressiveInlining)] get  => (M12, M22, M32, M42); } 
        public Vector4 Column3 { [MethodImpl(AggressiveInlining)] get  => (M13, M23, M33, M43); } 
        public Vector4 Column4 { [MethodImpl(AggressiveInlining)] get  => (M14, M24, M34, M44); } 
        [MethodImpl(AggressiveInlining)]  public Matrix4x4 WithTranslation(Vector3 v) => this.WithRow4(v.X, v.Y, v.Z, ((Number)1));
        public Vector3 Translation { [MethodImpl(AggressiveInlining)] get  => (this.M14, this.M24, this.M34); } 
        [MethodImpl(AggressiveInlining)]  public Vector3 Transform(Vector3 v) => v.Transform(this);
        [MethodImpl(AggressiveInlining)]  public Vector3 TransformNormal(Vector3 v) => v.TransformNormal(this);
        [MethodImpl(AggressiveInlining)]  public Vector3 Multiply(Vector3 v) => this.Transform(v);
        [MethodImpl(AggressiveInlining)]  public IArray<Matrix4x4> Repeat(Integer n){
            var _var319 = this;
            return n.MapRange((i) => _var319);
        }


        // Unimplemented concept functions
        public Integer Count { [MethodImpl(AggressiveInlining)] get => 4; }
        [MethodImpl(AggressiveInlining)]  public Vector4 At(Integer n) { [MethodImpl(AggressiveInlining)] get => n == 0 ? Row1 : n == 1 ? Row2 : n == 2 ? Row3 : n == 3 ? Row4 : throw new System.IndexOutOfRangeException(); }
        public Vector4 this[Integer n] => n == 0 ? Row1 : n == 1 ? Row2 : n == 2 ? Row3 : n == 3 ? Row4 : throw new System.IndexOutOfRangeException();
    }
}
