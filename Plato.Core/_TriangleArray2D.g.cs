// Autogenerated file: DO NOT EDIT
// Created on 2025-04-07 4:05:19 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct TriangleArray2D: ITriangleArray2D<TriangleArray2D>
    {
        // Fields
        [DataMember] public readonly IArray<Triangle2D> Triangles;

        // With functions 
        [MethodImpl(AggressiveInlining)] public TriangleArray2D WithTriangles(IArray<Triangle2D> triangles) => new TriangleArray2D(triangles);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public TriangleArray2D(IArray<Triangle2D> triangles) { Triangles = triangles; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static TriangleArray2D Create(IArray<Triangle2D> triangles) => new TriangleArray2D(triangles);

        // Static default implementation
        public static readonly TriangleArray2D Default = default;

        // Implicit converters to/from single field

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(TriangleArray2D other) => Triangles.Equals(other.Triangles);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(TriangleArray2D other) => !Triangles.Equals(other.Triangles);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is TriangleArray2D other ? Equals(other).Value : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Triangles);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Triangles\" = {Triangles} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented interface functions
        [MethodImpl(AggressiveInlining)]  public TriangleArray2D Deform(System.Func<Point2D, Point2D> f){
            var _var160 = f;
            return new TriangleArray2D(this.Triangles.Map((t)  => t.Deform(_var160)));
        }

public IArray<Integer> Indices { [MethodImpl(AggressiveInlining)] get  => this.Points.Indices; } 
public IArray<Vector2> Points { [MethodImpl(AggressiveInlining)] get  => this.Triangles.FlatMap((x)  => x.Points); } 
public IArray<Line2D> Lines { [MethodImpl(AggressiveInlining)] get  => this.Triangles.FlatMap((x)  => x.Lines); } 
public IArray<Triangle2D> Indices { [MethodImpl(AggressiveInlining)] get  => this.FaceIndices.FlatMap((fi)  => fi.Components); } 
public IArray<Triangle2D> Faces { [MethodImpl(AggressiveInlining)] get  => this.Triangles; } 
public Integer NumPrimitives { [MethodImpl(AggressiveInlining)] get  => this.Indices.Count.Divide(this.PrimitiveSize); } 
public Integer PrimitiveSize { [MethodImpl(AggressiveInlining)] get  => ((Integer)3); } 

        // Unimplemented interface functions
        public Bounds2D Bounds => throw new NotImplementedException();
public IArray<Point2D> Points => throw new NotImplementedException();
public IArray<Triangle2D> Primitives => throw new NotImplementedException();
}
}
