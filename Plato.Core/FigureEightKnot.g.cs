// Autogenerated file: DO NOT EDIT
// Created on 2025-01-29 8:54:01 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct FigureEightKnot: IAngularCurve3D, IClosedShape
    {
        // Fields

        // With functions 

        // Regular Constructor

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static FigureEightKnot Create() => new FigureEightKnot();

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is FigureEightKnot;
        [MethodImpl(AggressiveInlining)] public Boolean Equals(FigureEightKnot other) => true;
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(FigureEightKnot other) => false;
        [MethodImpl(AggressiveInlining)] public static Boolean operator==(FigureEightKnot a, FigureEightKnot b) => true;
        [MethodImpl(AggressiveInlining)] public static Boolean operator!=(FigureEightKnot a, FigureEightKnot b) => false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes();
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{  }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented concept functions and type functions
        [MethodImpl(AggressiveInlining)]  public Vector3 Eval(Angle t) => t.FigureEightKnot;
        [MethodImpl(AggressiveInlining)]  public Vector3 Eval(Number t) => this.Eval(t.Turns);
        [MethodImpl(AggressiveInlining)]  public IArray<Vector3> Sample(Integer numPoints){
            var _var67 = this;
            return numPoints.LinearSpace.Map((x) => _var67.Eval(x));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine3D ToPolyLine3D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
        public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 

        // Unimplemented concept functions
        [MethodImpl(AggressiveInlining)]  public Number Distance(Vector3 p) => throw new NotImplementedException();
    }
}
