// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 12:06:56 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct FigureEightKnot: IAngularCurve3D, IClosedShape
    {
        // Fields

        // With functions 

        // Regular Constructor

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static FigureEightKnot Create() => new FigureEightKnot();

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is FigureEightKnot;
        [MethodImpl(AggressiveInlining)] public Boolean Equals(FigureEightKnot other) => true;
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(FigureEightKnot other) => false;
        [MethodImpl(AggressiveInlining)] public static Boolean operator==(FigureEightKnot a, FigureEightKnot b) => true;
        [MethodImpl(AggressiveInlining)] public static Boolean operator!=(FigureEightKnot a, FigureEightKnot b) => false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes();
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{  }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented concept functions and type functions
        [MethodImpl(AggressiveInlining)]  public Vector3 Eval(Angle t) => t.FigureEightKnot;
        [MethodImpl(AggressiveInlining)]  public Vector3 Eval(Number t) => this.Eval(t.Turns);
        [MethodImpl(AggressiveInlining)]  public IArray<Vector3> Sample(Integer numPoints){
            var _var501 = this;
            return numPoints.LinearSpace.Map((x) => _var501.Eval(x));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine3D ToPolyLine3D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
        [MethodImpl(AggressiveInlining)]  public Procedural<Number, TR> Combine<TR>(FigureEightKnot b, System.Func<TR, TR, TR> f){
            var _var504 = b;
            {
                var _var503 = this;
                {
                    var _var502 = f;
                    return (x) => _var502.Invoke(_var503.Eval(x), _var504.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector3> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var506 = f;
            {
                var _var505 = this;
                return (x) => _var505.Eval(_var506.Invoke(x));
            }
        }

        public System.Func<Number, Vector3> Function { [MethodImpl(AggressiveInlining)] get {
            var _var507 = this;
            return (x) => _var507.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Number, Vector3> Compose(FigureEightKnot b){
            var _var509 = this;
            {
                var _var508 = b;
                return (x) => _var508.Eval(_var509.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, TR> Combine<TR>(FigureEightKnot b, System.Func<TR, TR, TR> f){
            var _var512 = b;
            {
                var _var511 = this;
                {
                    var _var510 = f;
                    return (x) => _var510.Invoke(_var511.Eval(x), _var512.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var514 = f;
            {
                var _var513 = this;
                return (x) => _var513.Eval(_var514.Invoke(x));
            }
        }

        public System.Func<Vector3, Number> Function { [MethodImpl(AggressiveInlining)] get {
            var _var515 = this;
            return (x) => _var515.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, Number> Compose(FigureEightKnot b){
            var _var517 = this;
            {
                var _var516 = b;
                return (x) => _var516.Eval(_var517.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Union(FigureEightKnot b) => this.Combine(b, (a, b) => a.Max(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Intersection(FigureEightKnot b) => this.Combine(b, (a, b) => a.Min(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Difference(FigureEightKnot b) => this.Combine(b, (a, b) => a.Max(b.Negative));
        public Procedural<Vector3, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) => x.Negative); } 
        public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 

        // Unimplemented concept functions
        [MethodImpl(AggressiveInlining)]  public Number Distance(Vector3 p) => throw new NotImplementedException();
        [MethodImpl(AggressiveInlining)]  public Number Eval(Vector3 t) => throw new NotImplementedException();
    }
}
