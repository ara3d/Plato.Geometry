// Autogenerated file: DO NOT EDIT
// Created on 2025-03-14 12:36:59 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct TriangleMesh3D: ITriangleMesh3D
    {
        // Fields
        [DataMember] public readonly IArray<Vector3> Points;
        [DataMember] public readonly IArray<Integer> Indices;

        // With functions 
        [MethodImpl(AggressiveInlining)] public TriangleMesh3D WithPoints(IArray<Vector3> points) => new TriangleMesh3D(points, Indices);
        [MethodImpl(AggressiveInlining)] public TriangleMesh3D WithIndices(IArray<Integer> indices) => new TriangleMesh3D(Points, indices);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public TriangleMesh3D(IArray<Vector3> points, IArray<Integer> indices) { Points = points; Indices = indices; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static TriangleMesh3D Create(IArray<Vector3> points, IArray<Integer> indices) => new TriangleMesh3D(points, indices);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (IArray<Vector3>, IArray<Integer>)(TriangleMesh3D self) => (self.Points, self.Indices);
        [MethodImpl(AggressiveInlining)] public static implicit operator TriangleMesh3D((IArray<Vector3>, IArray<Integer>) value) => new(value.Item1, value.Item2);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out IArray<Vector3> points, out IArray<Integer> indices) { points = Points; indices = Indices;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(TriangleMesh3D other) => Points.Equals(other.Points) && Indices.Equals(other.Indices);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(TriangleMesh3D other) => !Points.Equals(other.Points) && Indices.Equals(other.Indices);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is TriangleMesh3D other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Points, Indices);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Points\" = {Points}, \"Indices\" = {Indices} }}";

        // Explicit implementation of interfaces by forwarding properties to fields
        IArray<Integer> IIndexedGeometry.Indices { [MethodImpl(AggressiveInlining)] get => Indices; }

        // Implemented interface functions
        // Deform(TriangleMesh3D, Function1<Vector3, Vector3>):TriangleMesh3D; [Self=TriangleMesh3D;]; <>
        [MethodImpl(AggressiveInlining)]  public TriangleMesh3D Deform(System.Func<Vector3, Vector3> f) => (this.Points.Map(f), this.Indices);
// LineMesh3D(TriangleMesh3D):LineMesh3D; [ITriangleMesh3D=TriangleMesh3D;Self=TriangleMesh3D;]; <>
        public LineMesh3D LineMesh3D { [MethodImpl(AggressiveInlining)] get  => (this.Points, this.FaceIndices.FlatMap((a)  => Intrinsics.MakeArray(a.At(((Integer)0)), a.At(((Integer)1)), a.At(((Integer)1)), a.At(((Integer)2)), a.At(((Integer)2)), a.At(((Integer)0))))); } 
[MethodImpl(AggressiveInlining)]  public static implicit operator LineMesh3D(TriangleMesh3D g) => g.LineMesh3D;
        // Faces(TriangleMesh3D):_T0; [ITriangleMesh3D=TriangleMesh3D;Self=TriangleMesh3D;]; <_T0:IArray<Triangle3D>>
        public _T0 Faces<_T0> { [MethodImpl(AggressiveInlining)] get  => this.Triangles; } 
// Triangles(TriangleMesh3D):_T0; [ITriangleMesh3D=TriangleMesh3D;Self=TriangleMesh3D;]; <_T0:IArray<Triangle3D>>
        public _T0 Triangles<_T0> { [MethodImpl(AggressiveInlining)] get  => this.AllFaceVertices.Map((xs)  => new Triangle3D(xs.At(((Integer)0)), xs.At(((Integer)1)), xs.At(((Integer)2)))); } 
// Vertex(TriangleMesh3D, Integer):Vector3; [IIndexedGeometry3D=TriangleMesh3D;ITriangleMesh3D=TriangleMesh3D;Self=TriangleMesh3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector3 Vertex(Integer n) => this.Points.At(this.Indices.At(n));
// FaceVertices(TriangleMesh3D, Integer):_T0; [IIndexedGeometry3D=TriangleMesh3D;ITriangleMesh3D=TriangleMesh3D;Self=TriangleMesh3D;]; <_T0:IArray<Vector3>>
        [MethodImpl(AggressiveInlining)]  public _T0 FaceVertices<_T0>(Integer f){
            var _var155 = this;
            return this.FaceIndices.At(f).Map((i)  => _var155.Vertex(i));
        }

// AllFaceVertices(TriangleMesh3D):_T0; [IIndexedGeometry3D=TriangleMesh3D;ITriangleMesh3D=TriangleMesh3D;Self=TriangleMesh3D;]; <_T0:IArray2D<Vector3>>
        public _T0 AllFaceVertices<_T0> { [MethodImpl(AggressiveInlining)] get {
            var _var156 = this;
            return this.AllFaceIndices.Map((x)  => _var156.Vertex(x));
        }
         } 
// Vertices(TriangleMesh3D, _T0):_T1; [IIndexedGeometry3D=TriangleMesh3D;ITriangleMesh3D=TriangleMesh3D;Self=TriangleMesh3D;]; <_T0:IArray<Integer>, _T1:IArray<Vector3>>
        [MethodImpl(AggressiveInlining)]  public _T1 Vertices<_T0, _T1>(_T0 xs){
            var _var157 = this;
            return xs.Map((i)  => _var157.Vertex(i));
        }

// AllVertices(TriangleMesh3D):_T0; [IIndexedGeometry3D=TriangleMesh3D;ITriangleMesh3D=TriangleMesh3D;Self=TriangleMesh3D;]; <_T0:IArray<Vector3>>
        public _T0 AllVertices<_T0> { [MethodImpl(AggressiveInlining)] get  => this.Vertices(this.Indices); } 
// NumPrimitives(TriangleMesh3D):Integer; [IIndexedGeometry=TriangleMesh3D;IIndexedGeometry3D=TriangleMesh3D;ITriangleMesh3D=TriangleMesh3D;Self=TriangleMesh3D;]; <>
        public Integer NumPrimitives { [MethodImpl(AggressiveInlining)] get  => this.Indices.Count.Divide(this.PrimitiveSize); } 
// NumFaces(TriangleMesh3D):Integer; [IIndexedGeometry=TriangleMesh3D;IIndexedGeometry3D=TriangleMesh3D;ITriangleMesh3D=TriangleMesh3D;Self=TriangleMesh3D;]; <>
        public Integer NumFaces { [MethodImpl(AggressiveInlining)] get  => this.NumPrimitives; } 
// AllFaceIndices(TriangleMesh3D):_T0; [IIndexedGeometry=TriangleMesh3D;IIndexedGeometry3D=TriangleMesh3D;ITriangleMesh3D=TriangleMesh3D;Self=TriangleMesh3D;]; <_T0:IArray2D<Integer>>
        public _T0 AllFaceIndices<_T0> { [MethodImpl(AggressiveInlining)] get  => this.Indices.Slices(this.PrimitiveSize); } 
// PrimitiveSize(TriangleMesh3D):Integer; [ITriangleGeometry=TriangleMesh3D;ITriangleGeometry3D=TriangleMesh3D;ITriangleMesh3D=TriangleMesh3D;Self=TriangleMesh3D;]; <>
        public Integer PrimitiveSize { [MethodImpl(AggressiveInlining)] get  => ((Integer)3); } 
// FaceIndices(TriangleMesh3D):_T0; [ITriangleGeometry=TriangleMesh3D;ITriangleGeometry3D=TriangleMesh3D;ITriangleMesh3D=TriangleMesh3D;Self=TriangleMesh3D;]; <_T0:IArray<Integer3>>
        public _T0 FaceIndices<_T0> { [MethodImpl(AggressiveInlining)] get  => this.Indices.Integer3Array; } 

        // Unimplemented concept functions
        // Corners(TriangleMesh3D):_T0; [IPrimitiveGeometry3D=TriangleMesh3D;ITriangleGeometry3D=TriangleMesh3D;ITriangleMesh3D=TriangleMesh3D;Self=TriangleMesh3D;]; <_T0:IArray<Vector3>>
        public _T0 Corners<_T0> => throw new NotImplementedException();
}
}
