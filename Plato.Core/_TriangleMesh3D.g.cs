// Autogenerated file: DO NOT EDIT
// Created on 2025-04-08 12:25:04 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct TriangleMesh3D: ITriangleMesh3D<TriangleMesh3D>
    {
        // Fields
        [DataMember] public readonly IArray<Point3D> Points;
        [DataMember] public readonly IArray<Integer3> FaceIndices;

        // With functions 
        [MethodImpl(AggressiveInlining)] public TriangleMesh3D WithPoints(IArray<Point3D> points) => new TriangleMesh3D(points, FaceIndices);
        [MethodImpl(AggressiveInlining)] public TriangleMesh3D WithFaceIndices(IArray<Integer3> faceIndices) => new TriangleMesh3D(Points, faceIndices);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public TriangleMesh3D(IArray<Point3D> points, IArray<Integer3> faceIndices) { Points = points; FaceIndices = faceIndices; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static TriangleMesh3D Create(IArray<Point3D> points, IArray<Integer3> faceIndices) => new TriangleMesh3D(points, faceIndices);

        // Static default implementation
        public static readonly TriangleMesh3D Default = default;

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (IArray<Point3D>, IArray<Integer3>)(TriangleMesh3D self) => (self.Points, self.FaceIndices);
        [MethodImpl(AggressiveInlining)] public static implicit operator TriangleMesh3D((IArray<Point3D>, IArray<Integer3>) value) => new TriangleMesh3D(value.Item1, value.Item2);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out IArray<Point3D> points, out IArray<Integer3> faceIndices) { points = Points; faceIndices = FaceIndices;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(TriangleMesh3D other) => Points.Equals(other.Points) && FaceIndices.Equals(other.FaceIndices);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(TriangleMesh3D other) => !Points.Equals(other.Points) && FaceIndices.Equals(other.FaceIndices);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is TriangleMesh3D other ? Equals(other).Value : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Points, FaceIndices);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Points\" = {Points}, \"FaceIndices\" = {FaceIndices} }}";

        // Explicit implementation of interfaces by forwarding properties to fields
        IArray<Point3D> IPointGeometry3D<TriangleMesh3D>.Points { [MethodImpl(AggressiveInlining)] get => Points; }

        // Implemented interface functions
        [MethodImpl(AggressiveInlining)]  public TriangleMesh3D Deform(System.Func<Point3D, Point3D> f) => (this.Points.Map(f), this.FaceIndices);
public IArray<Integer> Indices { [MethodImpl(AggressiveInlining)] get  => this.FaceIndices.FlatMap((fi)  => fi.Components); } 
public IArray<Triangle3D> Faces { [MethodImpl(AggressiveInlining)] get  => this.Triangles; } 
public IArray<Triangle3D> Triangles { [MethodImpl(AggressiveInlining)] get {
            var _var136 = this;
            return this.FaceIndices.Map((f)  => _var136.Triangle(f));
        }
         } 
public Integer NumPrimitives { [MethodImpl(AggressiveInlining)] get  => this.Indices.Count.Divide(this.PrimitiveSize); } 
[MethodImpl(AggressiveInlining)]  public Point3D Point(Integer index) => this.Points.At(index);
[MethodImpl(AggressiveInlining)]  public Triangle3D Triangle(Integer3 f) => (this.Point(f.A), this.Point(f.B), this.Point(f.C));
[MethodImpl(AggressiveInlining)]  public Quad3D Quad(Integer4 f) => (this.Point(f.A), this.Point(f.B), this.Point(f.C), this.Point(f.D));
public Bounds3D Bounds { [MethodImpl(AggressiveInlining)] get  => this.Points.Bounds(); } 
[MethodImpl(AggressiveInlining)]  public TriangleMesh3D Deform<_T0>(_T0 t) where _T0 : ITransform3D{
            var _var137 = t;
            return this.Deform((v)  => v.Vector3.Transform(_var137.Matrix));
        }

[MethodImpl(AggressiveInlining)]  public TriangleMesh3D Scale(Vector3 v){
            var _var138 = v;
            return this.Deform((p)  => p.Vector3.Multiply(_var138));
        }

[MethodImpl(AggressiveInlining)]  public TriangleMesh3D Scale(Number s) => this.Scale((s, s, s));
[MethodImpl(AggressiveInlining)]  public TriangleMesh3D ScaleX(Number s) => this.Scale((s, ((Integer)1), ((Integer)1)));
[MethodImpl(AggressiveInlining)]  public TriangleMesh3D ScaleY(Number s) => this.Scale((((Integer)1), s, ((Integer)1)));
[MethodImpl(AggressiveInlining)]  public TriangleMesh3D ScaleZ(Number s) => this.Scale((((Integer)1), ((Integer)1), s));
[MethodImpl(AggressiveInlining)]  public TriangleMesh3D Rotate(Quaternion q){
            var _var139 = q;
            return this.Deform((v)  => _var139.Transform(v));
        }

[MethodImpl(AggressiveInlining)]  public TriangleMesh3D RotateX(Angle a) => this.Rotate(a.RotateX);
[MethodImpl(AggressiveInlining)]  public TriangleMesh3D RotateY(Angle a) => this.Rotate(a.RotateY);
[MethodImpl(AggressiveInlining)]  public TriangleMesh3D RotateZ(Angle a) => this.Rotate(a.RotateZ);
[MethodImpl(AggressiveInlining)]  public TriangleMesh3D Translate(Vector3 v){
            var _var140 = v;
            return this.Deform((p)  => p.Add(_var140));
        }

[MethodImpl(AggressiveInlining)]  public TriangleMesh3D TranslateX(Number s) => this.Translate(s.XVector3);
[MethodImpl(AggressiveInlining)]  public TriangleMesh3D TranslateY(Number s) => this.Translate(s.YVector3);
[MethodImpl(AggressiveInlining)]  public TriangleMesh3D TranslateZ(Number s) => this.Translate(s.ZVector3);
public Integer PrimitiveSize { [MethodImpl(AggressiveInlining)] get  => ((Integer)3); } 

        // Unimplemented interface functions
        public IArray<Triangle3D> Primitives => throw new NotImplementedException();
}
}
