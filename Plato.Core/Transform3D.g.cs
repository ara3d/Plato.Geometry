// Autogenerated file: DO NOT EDIT
// Created on 2025-01-16 5:04:08 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Transform3D: IValue<Transform3D>, ITransform3D<Transform3D>
    {
        // Fields
        [DataMember] public readonly Translation3D Translation;
        [DataMember] public readonly Rotation3D Rotation;
        [DataMember] public readonly Scale3D Scale;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Transform3D WithTranslation(Translation3D translation) => new Transform3D(translation, Rotation, Scale);
        [MethodImpl(AggressiveInlining)] public Transform3D WithRotation(Rotation3D rotation) => new Transform3D(Translation, rotation, Scale);
        [MethodImpl(AggressiveInlining)] public Transform3D WithScale(Scale3D scale) => new Transform3D(Translation, Rotation, scale);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Transform3D(Translation3D translation, Rotation3D rotation, Scale3D scale) { Translation = translation; Rotation = rotation; Scale = scale; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Transform3D Create(Translation3D translation, Rotation3D rotation, Scale3D scale) => new Transform3D(translation, rotation, scale);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Translation3D, Rotation3D, Scale3D)(Transform3D self) => (self.Translation, self.Rotation, self.Scale);
        [MethodImpl(AggressiveInlining)] public static implicit operator Transform3D((Translation3D, Rotation3D, Scale3D) value) => new(value.Item1, value.Item2, value.Item3);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Translation3D translation, out Rotation3D rotation, out Scale3D scale) { translation = Translation; rotation = Rotation; scale = Scale;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Transform3D other) => Translation.Equals(other.Translation) && Rotation.Equals(other.Rotation) && Scale.Equals(other.Scale);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Transform3D other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Translation, Rotation, Scale);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Translation\" = {Translation}, \"Rotation\" = {Rotation}, \"Scale\" = {Scale} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented concept functions and type functions
        [MethodImpl(AggressiveInlining)]  public Vector3 Transform(Vector3 v) => this.Rotation.Transform(v).Add(this.Translation).Multiply(this.Scale);
        [MethodImpl(AggressiveInlining)]  public Vector3 TransformNormal(Vector3 v) => this.Rotation.TransformNormal(v);
        public Matrix4x4 Matrix { [MethodImpl(AggressiveInlining)] get  => this.Scale.Matrix.Multiply(this.Rotation.Matrix.Multiply(this.Translation.Matrix)); } 
        [MethodImpl(AggressiveInlining)]  public IArray<Transform3D> Repeat(Integer n){
            var _var322 = this;
            return n.MapRange((i) => _var322);
        }

        public Matrix4x4 Matrix4x4 { [MethodImpl(AggressiveInlining)] get  => this.Matrix; } 
        [MethodImpl(AggressiveInlining)]  public static implicit operator Matrix4x4(Transform3D t) => t.Matrix4x4;

        // Unimplemented concept functions
        public Transform3D Invert => throw new NotImplementedException();
    }
}
