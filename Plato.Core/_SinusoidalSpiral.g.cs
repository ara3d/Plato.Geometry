// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 8:08:08 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
public partial struct SinusoidalSpiral: IPolarCurve, IOpenShape
{
    // Fields
    [DataMember] public readonly Number A;
    [DataMember] public readonly Number N;

    // With functions 
    [MethodImpl(AggressiveInlining)] public SinusoidalSpiral WithA(Number a) => new SinusoidalSpiral(a, N);
    [MethodImpl(AggressiveInlining)] public SinusoidalSpiral WithN(Number n) => new SinusoidalSpiral(A, n);

    // Regular Constructor
    [MethodImpl(AggressiveInlining)] public SinusoidalSpiral(Number a, Number n) { A = a; N = n; }

    // Static factory function
    [MethodImpl(AggressiveInlining)] public static SinusoidalSpiral Create(Number a, Number n) => new SinusoidalSpiral(a, n);

    // Implicit converters to/from value-tuples and deconstructor
    [MethodImpl(AggressiveInlining)] public static implicit operator (Number, Number)(SinusoidalSpiral self) => (self.A, self.N);
    [MethodImpl(AggressiveInlining)] public static implicit operator SinusoidalSpiral((Number, Number) value) => new(value.Item1, value.Item2);
    [MethodImpl(AggressiveInlining)] public void Deconstruct(out Number a, out Number n) { a = A; n = N;  }

    // Object virtual function overrides: Equals, GetHashCode, ToString
    [MethodImpl(AggressiveInlining)] public Boolean Equals(SinusoidalSpiral other) => A.Equals(other.A) && N.Equals(other.N);
    [MethodImpl(AggressiveInlining)] public Boolean NotEquals(SinusoidalSpiral other) => !A.Equals(other.A) && N.Equals(other.N);
    [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is SinusoidalSpiral other ? Equals(other) : false;
    [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(A, N);
    [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"A\" = {A}, \"N\" = {N} }}";

    // Explicit implementation of interfaces by forwarding properties to fields

    // Implemented concept functions and type functions
    [MethodImpl(AggressiveInlining)]  public Number GetRadius(Angle t) => t.SinusoidalSpiral(this.A, this.N);
[MethodImpl(AggressiveInlining)]  public PolarCoordinate EvalPolar(Angle t) => (this.GetRadius(t), t);
[MethodImpl(AggressiveInlining)]  public Vector2 Eval(Angle t) => this.EvalPolar(t);
[MethodImpl(AggressiveInlining)]  public Vector2 Eval(Number t) => this.Eval(t.Turns);
[MethodImpl(AggressiveInlining)]  public IArray<Vector2> Sample(Integer numPoints){
    var _var437 = this;
    return numPoints.LinearSpace.Map((x) =>  => _var437.Eval(x);
;
}

[MethodImpl(AggressiveInlining)]  public PolyLine2D ToPolyLine2D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
[MethodImpl(AggressiveInlining)]  public Procedural<Number, TR> Combine<TR>(SinusoidalSpiral b, System.Func<TR, TR, TR> f){
    var _var440 = b;
    {
        var _var439 = this;
        {
            var _var438 = f;
            return (x) =>  => _var438.Invoke(_var439.Eval(x), _var440.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector2> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var442 = f;
    {
        var _var441 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var441.Eval(_var442.Invoke(x));
;
    }
}

public System.Func<Number, Vector2> Function { [MethodImpl(AggressiveInlining)] get {
    var _var443 = this;
    return (x) =>  => _var443.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Number, Vector2> Compose(SinusoidalSpiral b){
    var _var445 = this;
    {
        var _var444 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var444.Eval(_var445.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, TR> Combine<TR>(SinusoidalSpiral b, System.Func<TR, TR, TR> f){
    var _var448 = b;
    {
        var _var447 = this;
        {
            var _var446 = f;
            return (x) =>  => _var446.Invoke(_var447.Eval(x), _var448.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var450 = f;
    {
        var _var449 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var449.Eval(_var450.Invoke(x));
;
    }
}

public System.Func<Vector2, Number> Function { [MethodImpl(AggressiveInlining)] get {
    var _var451 = this;
    return (x) =>  => _var451.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Number> Compose(SinusoidalSpiral b){
    var _var453 = this;
    {
        var _var452 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var452.Eval(_var453.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Union(SinusoidalSpiral b) => this.Combine(b, (a, b) =>  => a.Max(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Intersection(SinusoidalSpiral b) => this.Combine(b, (a, b) =>  => a.Min(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Difference(SinusoidalSpiral b) => this.Combine(b, (a, b) =>  => a.Max(b.Negative);

public Procedural<Vector2, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) =>  => x.Negative;
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Boolean> Threshold(Number threshold){
    var _var454 = threshold;
    return this.Map((x) =>  => x.GreaterThanOrEquals(_var454);
;
}

public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)false); } 

    // Unimplemented concept functions
    [MethodImpl(AggressiveInlining)]  public Number Distance(Vector2 p) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public Number Eval(Vector2 t) => throw new NotImplementedException();
}
Plato.CSharpWriter.CSharpConcreteTypeWriter}
