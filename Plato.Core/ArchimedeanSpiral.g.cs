// Autogenerated file: DO NOT EDIT
// Created on 2025-01-24 1:12:52 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct ArchimedeanSpiral: IPolarCurve, IOpenShape
    {
        // Fields
        [DataMember] public readonly Number A;
        [DataMember] public readonly Number B;

        // With functions 
        [MethodImpl(AggressiveInlining)] public ArchimedeanSpiral WithA(Number a) => new ArchimedeanSpiral(a, B);
        [MethodImpl(AggressiveInlining)] public ArchimedeanSpiral WithB(Number b) => new ArchimedeanSpiral(A, b);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public ArchimedeanSpiral(Number a, Number b) { A = a; B = b; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static ArchimedeanSpiral Create(Number a, Number b) => new ArchimedeanSpiral(a, b);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Number, Number)(ArchimedeanSpiral self) => (self.A, self.B);
        [MethodImpl(AggressiveInlining)] public static implicit operator ArchimedeanSpiral((Number, Number) value) => new(value.Item1, value.Item2);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Number a, out Number b) { a = A; b = B;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(ArchimedeanSpiral other) => A.Equals(other.A) && B.Equals(other.B);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(ArchimedeanSpiral other) => !A.Equals(other.A) && B.Equals(other.B);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is ArchimedeanSpiral other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(A, B);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"A\" = {A}, \"B\" = {B} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented concept functions and type functions
        [MethodImpl(AggressiveInlining)]  public Number GetRadius(Angle t) => t.ArchimedeanSpiral(this.A, this.B);
        [MethodImpl(AggressiveInlining)]  public PolarCoordinate EvalPolar(Angle t) => (this.GetRadius(t), t);
        [MethodImpl(AggressiveInlining)]  public Vector2 Eval(Angle t) => this.EvalPolar(t);
        [MethodImpl(AggressiveInlining)]  public Vector2 Eval(Number t) => this.Eval(t.Turns);
        [MethodImpl(AggressiveInlining)]  public IArray<Vector2> Sample(Integer numPoints){
            var _var56 = this;
            return numPoints.LinearSpace.Map((x) => _var56.Eval(x));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine2D ToPolyLine2D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
        public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)false); } 

        // Unimplemented concept functions
        [MethodImpl(AggressiveInlining)]  public Number Distance(Vector2 p) => throw new NotImplementedException();
    }
}
