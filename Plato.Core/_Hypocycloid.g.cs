// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 8:08:08 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
public partial struct Hypocycloid: IAngularCurve2D, IOpenShape
{
    // Fields
    [DataMember] public readonly Number Radius1;
    [DataMember] public readonly Number Radius2;

    // With functions 
    [MethodImpl(AggressiveInlining)] public Hypocycloid WithRadius1(Number radius1) => new Hypocycloid(radius1, Radius2);
    [MethodImpl(AggressiveInlining)] public Hypocycloid WithRadius2(Number radius2) => new Hypocycloid(Radius1, radius2);

    // Regular Constructor
    [MethodImpl(AggressiveInlining)] public Hypocycloid(Number radius1, Number radius2) { Radius1 = radius1; Radius2 = radius2; }

    // Static factory function
    [MethodImpl(AggressiveInlining)] public static Hypocycloid Create(Number radius1, Number radius2) => new Hypocycloid(radius1, radius2);

    // Implicit converters to/from value-tuples and deconstructor
    [MethodImpl(AggressiveInlining)] public static implicit operator (Number, Number)(Hypocycloid self) => (self.Radius1, self.Radius2);
    [MethodImpl(AggressiveInlining)] public static implicit operator Hypocycloid((Number, Number) value) => new(value.Item1, value.Item2);
    [MethodImpl(AggressiveInlining)] public void Deconstruct(out Number radius1, out Number radius2) { radius1 = Radius1; radius2 = Radius2;  }

    // Object virtual function overrides: Equals, GetHashCode, ToString
    [MethodImpl(AggressiveInlining)] public Boolean Equals(Hypocycloid other) => Radius1.Equals(other.Radius1) && Radius2.Equals(other.Radius2);
    [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Hypocycloid other) => !Radius1.Equals(other.Radius1) && Radius2.Equals(other.Radius2);
    [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Hypocycloid other ? Equals(other) : false;
    [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Radius1, Radius2);
    [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Radius1\" = {Radius1}, \"Radius2\" = {Radius2} }}";

    // Explicit implementation of interfaces by forwarding properties to fields

    // Implemented concept functions and type functions
    [MethodImpl(AggressiveInlining)]  public Vector2 Eval(Angle t) => t.Hypocycloid(this.Radius1, this.Radius2);
[MethodImpl(AggressiveInlining)]  public Vector2 Eval(Number t) => this.Eval(t.Turns);
[MethodImpl(AggressiveInlining)]  public IArray<Vector2> Sample(Integer numPoints){
    var _var167 = this;
    return numPoints.LinearSpace.Map((x) =>  => _var167.Eval(x);
;
}

[MethodImpl(AggressiveInlining)]  public PolyLine2D ToPolyLine2D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
[MethodImpl(AggressiveInlining)]  public Procedural<Number, TR> Combine<TR>(Hypocycloid b, System.Func<TR, TR, TR> f){
    var _var170 = b;
    {
        var _var169 = this;
        {
            var _var168 = f;
            return (x) =>  => _var168.Invoke(_var169.Eval(x), _var170.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector2> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var172 = f;
    {
        var _var171 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var171.Eval(_var172.Invoke(x));
;
    }
}

public System.Func<Number, Vector2> Function { [MethodImpl(AggressiveInlining)] get {
    var _var173 = this;
    return (x) =>  => _var173.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Number, Vector2> Compose(Hypocycloid b){
    var _var175 = this;
    {
        var _var174 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var174.Eval(_var175.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, TR> Combine<TR>(Hypocycloid b, System.Func<TR, TR, TR> f){
    var _var178 = b;
    {
        var _var177 = this;
        {
            var _var176 = f;
            return (x) =>  => _var176.Invoke(_var177.Eval(x), _var178.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var180 = f;
    {
        var _var179 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var179.Eval(_var180.Invoke(x));
;
    }
}

public System.Func<Vector2, Number> Function { [MethodImpl(AggressiveInlining)] get {
    var _var181 = this;
    return (x) =>  => _var181.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Number> Compose(Hypocycloid b){
    var _var183 = this;
    {
        var _var182 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var182.Eval(_var183.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Union(Hypocycloid b) => this.Combine(b, (a, b) =>  => a.Max(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Intersection(Hypocycloid b) => this.Combine(b, (a, b) =>  => a.Min(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Difference(Hypocycloid b) => this.Combine(b, (a, b) =>  => a.Max(b.Negative);

public Procedural<Vector2, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) =>  => x.Negative;
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Boolean> Threshold(Number threshold){
    var _var184 = threshold;
    return this.Map((x) =>  => x.GreaterThanOrEquals(_var184);
;
}

public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)false); } 

    // Unimplemented concept functions
    [MethodImpl(AggressiveInlining)]  public Number Distance(Vector2 p) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public Number Eval(Vector2 t) => throw new NotImplementedException();
}
Plato.CSharpWriter.CSharpConcreteTypeWriter}
