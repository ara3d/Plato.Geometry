// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 11:25:56 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Spiral: IOpenCurve2D
    {
        // Fields
        [DataMember] public readonly Number Radius1;
        [DataMember] public readonly Number Radius2;
        [DataMember] public readonly Number NumTurns;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Spiral WithRadius1(Number radius1) => new Spiral(radius1, Radius2, NumTurns);
        [MethodImpl(AggressiveInlining)] public Spiral WithRadius2(Number radius2) => new Spiral(Radius1, radius2, NumTurns);
        [MethodImpl(AggressiveInlining)] public Spiral WithNumTurns(Number numTurns) => new Spiral(Radius1, Radius2, numTurns);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Spiral(Number radius1, Number radius2, Number numTurns) { Radius1 = radius1; Radius2 = radius2; NumTurns = numTurns; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Spiral Create(Number radius1, Number radius2, Number numTurns) => new Spiral(radius1, radius2, numTurns);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Number, Number, Number)(Spiral self) => (self.Radius1, self.Radius2, self.NumTurns);
        [MethodImpl(AggressiveInlining)] public static implicit operator Spiral((Number, Number, Number) value) => new(value.Item1, value.Item2, value.Item3);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Number radius1, out Number radius2, out Number numTurns) { radius1 = Radius1; radius2 = Radius2; numTurns = NumTurns;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Spiral other) => Radius1.Equals(other.Radius1) && Radius2.Equals(other.Radius2) && NumTurns.Equals(other.NumTurns);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Spiral other) => !Radius1.Equals(other.Radius1) && Radius2.Equals(other.Radius2) && NumTurns.Equals(other.NumTurns);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Spiral other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Radius1, Radius2, NumTurns);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Radius1\" = {Radius1}, \"Radius2\" = {Radius2}, \"NumTurns\" = {NumTurns} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented concept functions and type functions
        [MethodImpl(AggressiveInlining)]  public Vector2 Eval(Number t) => t.Spiral(this.Radius1, this.Radius2, this.NumTurns);
        [MethodImpl(AggressiveInlining)]  public IArray<Vector2> Sample(Integer numPoints){
            var _var59 = this;
            return numPoints.LinearSpace.Map((x) => _var59.Eval(x));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine2D ToPolyLine2D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
        [MethodImpl(AggressiveInlining)]  public Procedural<Number, TR> Combine<TR>(Spiral b, System.Func<TR, TR, TR> f){
            var _var62 = b;
            {
                var _var61 = this;
                {
                    var _var60 = f;
                    return (x) => _var60.Invoke(_var61.Eval(x), _var62.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector2> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var64 = f;
            {
                var _var63 = this;
                return (x) => _var63.Eval(_var64.Invoke(x));
            }
        }

        public System.Func<Number, Vector2> Function { [MethodImpl(AggressiveInlining)] get {
            var _var65 = this;
            return (x) => _var65.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Number, Vector2> Compose(Spiral b){
            var _var67 = this;
            {
                var _var66 = b;
                return (x) => _var66.Eval(_var67.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, TR> Combine<TR>(Spiral b, System.Func<TR, TR, TR> f){
            var _var70 = b;
            {
                var _var69 = this;
                {
                    var _var68 = f;
                    return (x) => _var68.Invoke(_var69.Eval(x), _var70.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var72 = f;
            {
                var _var71 = this;
                return (x) => _var71.Eval(_var72.Invoke(x));
            }
        }

        public System.Func<Vector2, Number> Function { [MethodImpl(AggressiveInlining)] get {
            var _var73 = this;
            return (x) => _var73.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Number> Compose(Spiral b){
            var _var75 = this;
            {
                var _var74 = b;
                return (x) => _var74.Eval(_var75.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Union(Spiral b) => this.Combine(b, (a, b) => a.Max(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Intersection(Spiral b) => this.Combine(b, (a, b) => a.Min(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Difference(Spiral b) => this.Combine(b, (a, b) => a.Max(b.Negative));
        public Procedural<Vector2, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) => x.Negative); } 
        public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)false); } 

        // Unimplemented concept functions
        [MethodImpl(AggressiveInlining)]  public Number Distance(Vector2 p) => throw new NotImplementedException();
        [MethodImpl(AggressiveInlining)]  public Number Eval(Vector2 t) => throw new NotImplementedException();
    }
}
