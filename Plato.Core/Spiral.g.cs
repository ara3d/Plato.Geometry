// Autogenerated file: DO NOT EDIT
// Created on 2025-01-24 1:12:52 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Spiral: IOpenCurve2D
    {
        // Fields
        [DataMember] public readonly Number Radius1;
        [DataMember] public readonly Number Radius2;
        [DataMember] public readonly Number NumTurns;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Spiral WithRadius1(Number radius1) => new Spiral(radius1, Radius2, NumTurns);
        [MethodImpl(AggressiveInlining)] public Spiral WithRadius2(Number radius2) => new Spiral(Radius1, radius2, NumTurns);
        [MethodImpl(AggressiveInlining)] public Spiral WithNumTurns(Number numTurns) => new Spiral(Radius1, Radius2, numTurns);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Spiral(Number radius1, Number radius2, Number numTurns) { Radius1 = radius1; Radius2 = radius2; NumTurns = numTurns; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Spiral Create(Number radius1, Number radius2, Number numTurns) => new Spiral(radius1, radius2, numTurns);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Number, Number, Number)(Spiral self) => (self.Radius1, self.Radius2, self.NumTurns);
        [MethodImpl(AggressiveInlining)] public static implicit operator Spiral((Number, Number, Number) value) => new(value.Item1, value.Item2, value.Item3);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Number radius1, out Number radius2, out Number numTurns) { radius1 = Radius1; radius2 = Radius2; numTurns = NumTurns;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Spiral other) => Radius1.Equals(other.Radius1) && Radius2.Equals(other.Radius2) && NumTurns.Equals(other.NumTurns);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Spiral other) => !Radius1.Equals(other.Radius1) && Radius2.Equals(other.Radius2) && NumTurns.Equals(other.NumTurns);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Spiral other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Radius1, Radius2, NumTurns);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Radius1\" = {Radius1}, \"Radius2\" = {Radius2}, \"NumTurns\" = {NumTurns} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented concept functions and type functions
        [MethodImpl(AggressiveInlining)]  public Vector2 Eval(Number t) => t.Spiral(this.Radius1, this.Radius2, this.NumTurns);
        [MethodImpl(AggressiveInlining)]  public IArray<Vector2> Sample(Integer numPoints){
            var _var41 = this;
            return numPoints.LinearSpace.Map((x) => _var41.Eval(x));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine2D ToPolyLine2D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
        public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)false); } 

        // Unimplemented concept functions
        [MethodImpl(AggressiveInlining)]  public Number Distance(Vector2 p) => throw new NotImplementedException();
    }
}
