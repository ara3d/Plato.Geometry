// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 12:06:56 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Bounds3D: IBounds<Vector3>, IDeformable3D<Bounds3D>
    {
        // Fields
        [DataMember] public readonly Vector3 Min;
        [DataMember] public readonly Vector3 Max;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Bounds3D WithMin(Vector3 min) => new Bounds3D(min, Max);
        [MethodImpl(AggressiveInlining)] public Bounds3D WithMax(Vector3 max) => new Bounds3D(Min, max);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Bounds3D(Vector3 min, Vector3 max) { Min = min; Max = max; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Bounds3D Create(Vector3 min, Vector3 max) => new Bounds3D(min, max);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Vector3, Vector3)(Bounds3D self) => (self.Min, self.Max);
        [MethodImpl(AggressiveInlining)] public static implicit operator Bounds3D((Vector3, Vector3) value) => new(value.Item1, value.Item2);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Vector3 min, out Vector3 max) { min = Min; max = Max;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Bounds3D other) => Min.Equals(other.Min) && Max.Equals(other.Max);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Bounds3D other) => !Min.Equals(other.Min) && Max.Equals(other.Max);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Bounds3D other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Min, Max);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Min\" = {Min}, \"Max\" = {Max} }}";

        // Explicit implementation of interfaces by forwarding properties to fields
        Vector3 IBounds<Vector3>.Min { [MethodImpl(AggressiveInlining)] get => Min; }
        Vector3 IBounds<Vector3>.Max { [MethodImpl(AggressiveInlining)] get => Max; }

        // Implemented concept functions and type functions
        public Vector3 Center { [MethodImpl(AggressiveInlining)] get  => this.Min.Add(this.Max).Half; } 
        public IArray<Vector3> Corners { [MethodImpl(AggressiveInlining)] get  => Intrinsics.MakeArray<Vector3>((this.Min.X, this.Min.Y, this.Min.Z), (this.Max.X, this.Min.Y, this.Min.Z), (this.Min.X, this.Max.Y, this.Min.Z), (this.Max.X, this.Max.Y, this.Min.Z), (this.Min.X, this.Min.Y, this.Max.Z), (this.Max.X, this.Min.Y, this.Max.Z), (this.Min.X, this.Max.Y, this.Max.Z), (this.Max.X, this.Max.Y, this.Max.Z)); } 
        public static Bounds3D Empty { [MethodImpl(AggressiveInlining)] get  => (Constants.MaxNumber, Constants.MinNumber); } 
        [MethodImpl(AggressiveInlining)]  public Bounds3D Deform(System.Func<Vector3, Vector3> f) => this.Corners.Map(f).Bounds();
        public Vector3 Size { [MethodImpl(AggressiveInlining)] get  => this.Max.Subtract(this.Min); } 
        [MethodImpl(AggressiveInlining)]  public Vector3 Lerp(Number amount) => this.Min.Lerp(this.Max, amount);
        [MethodImpl(AggressiveInlining)]  public Boolean Contains(Vector3 value) => value.Between(this.Min, this.Max);
        [MethodImpl(AggressiveInlining)]  public Boolean Contains(Bounds3D y) => this.Contains(y.Min).And(this.Contains(y.Max));
        [MethodImpl(AggressiveInlining)]  public Boolean Overlaps(Bounds3D y) => this.Contains(y.Min).Or(this.Contains(y.Max).Or(y.Contains(this.Min).Or(y.Contains(this.Max))));
        [MethodImpl(AggressiveInlining)]  public Bounds3D Recenter(Vector3 c) => (c.Subtract(this.Size.Half), c.Add(this.Size.Half));
        [MethodImpl(AggressiveInlining)]  public Bounds3D Clamp(Bounds3D y) => (this.Clamp(y.Min), this.Clamp(y.Max));
        [MethodImpl(AggressiveInlining)]  public Vector3 Clamp(Vector3 value) => value.Clamp(this.Min, this.Max);
        [MethodImpl(AggressiveInlining)]  public Bounds3D Include(Vector3 value) => (this.Min.Min(value), this.Max.Max(value));
        [MethodImpl(AggressiveInlining)]  public Bounds3D Include(Bounds3D y) => this.Include(y.Min).Include(y.Max);
        [MethodImpl(AggressiveInlining)]  public Bounds3D Deform(IdentityTransform3D t){
            var _var625 = t;
            return this.Deform((v) => _var625.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public Bounds3D Deform(MatrixTransform3D t){
            var _var626 = t;
            return this.Deform((v) => _var626.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public Bounds3D Deform(Translation3D t){
            var _var627 = t;
            return this.Deform((v) => _var627.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public Bounds3D Deform(Rotation3D t){
            var _var628 = t;
            return this.Deform((v) => _var628.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public Bounds3D Deform(LookRotation t){
            var _var629 = t;
            return this.Deform((v) => _var629.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public Bounds3D Deform(Scaling3D t){
            var _var630 = t;
            return this.Deform((v) => _var630.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public Bounds3D Deform(TRSTransform3D t){
            var _var631 = t;
            return this.Deform((v) => _var631.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public Bounds3D Deform(Pose3D t){
            var _var632 = t;
            return this.Deform((v) => _var632.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public Bounds3D Deform(AxisAngle t){
            var _var633 = t;
            return this.Deform((v) => _var633.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public Bounds3D Deform(EulerAngles t){
            var _var634 = t;
            return this.Deform((v) => _var634.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public Bounds3D Deform(Perspective3D t){
            var _var635 = t;
            return this.Deform((v) => _var635.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public Bounds3D Deform(Orthographic3D t){
            var _var636 = t;
            return this.Deform((v) => _var636.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public Bounds3D Deform(PlaneProjection t){
            var _var637 = t;
            return this.Deform((v) => _var637.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public Bounds3D Translate(Vector3 v){
            var _var638 = v;
            return this.Deform((p) => p.Add(_var638));
        }

        [MethodImpl(AggressiveInlining)]  public Bounds3D Rotate(Quaternion q) => this.Deform(q);
        [MethodImpl(AggressiveInlining)]  public Bounds3D Scale(Vector3 v){
            var _var639 = v;
            return this.Deform((p) => p.Multiply(_var639));
        }

        [MethodImpl(AggressiveInlining)]  public Bounds3D Scale(Number s){
            var _var640 = s;
            return this.Deform((p) => p.Multiply(_var640));
        }

        [MethodImpl(AggressiveInlining)]  public Bounds3D RotateX(Angle a) => this.Rotate(a.RotateX);
        [MethodImpl(AggressiveInlining)]  public Bounds3D RotateY(Angle a) => this.Rotate(a.RotateY);
        [MethodImpl(AggressiveInlining)]  public Bounds3D RotateZ(Angle a) => this.Rotate(a.RotateZ);
        [MethodImpl(AggressiveInlining)]  public Bounds3D TranslateX(Number s){
            var _var641 = s;
            return this.Deform((p) => p.Add((_var641, ((Integer)0), ((Integer)0))));
        }

        [MethodImpl(AggressiveInlining)]  public Bounds3D TranslateY(Number s){
            var _var642 = s;
            return this.Deform((p) => p.Add((((Integer)0), _var642, ((Integer)0))));
        }

        [MethodImpl(AggressiveInlining)]  public Bounds3D TranslateZ(Number s){
            var _var643 = s;
            return this.Deform((p) => p.Add((((Integer)0), ((Integer)0), _var643)));
        }

        [MethodImpl(AggressiveInlining)]  public Bounds3D ScaleX(Number s){
            var _var644 = s;
            return this.Deform((p) => p.Multiply((_var644, ((Integer)1), ((Integer)1))));
        }

        [MethodImpl(AggressiveInlining)]  public Bounds3D ScaleY(Number s){
            var _var645 = s;
            return this.Deform((p) => p.Multiply((((Integer)1), _var645, ((Integer)1))));
        }

        [MethodImpl(AggressiveInlining)]  public Bounds3D ScaleZ(Number s){
            var _var646 = s;
            return this.Deform((p) => p.Multiply((((Integer)1), ((Integer)1), _var646)));
        }


        // Unimplemented concept functions
    }
}
