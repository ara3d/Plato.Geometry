// Autogenerated file: DO NOT EDIT
// Created on 2025-03-14 12:36:59 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Bounds3D: IBounds<Vector3>, IDeformable3D<Bounds3D>
    {
        // Fields
        [DataMember] public readonly Vector3 Min;
        [DataMember] public readonly Vector3 Max;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Bounds3D WithMin(Vector3 min) => new Bounds3D(min, Max);
        [MethodImpl(AggressiveInlining)] public Bounds3D WithMax(Vector3 max) => new Bounds3D(Min, max);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Bounds3D(Vector3 min, Vector3 max) { Min = min; Max = max; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Bounds3D Create(Vector3 min, Vector3 max) => new Bounds3D(min, max);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Vector3, Vector3)(Bounds3D self) => (self.Min, self.Max);
        [MethodImpl(AggressiveInlining)] public static implicit operator Bounds3D((Vector3, Vector3) value) => new(value.Item1, value.Item2);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Vector3 min, out Vector3 max) { min = Min; max = Max;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Bounds3D other) => Min.Equals(other.Min) && Max.Equals(other.Max);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Bounds3D other) => !Min.Equals(other.Min) && Max.Equals(other.Max);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Bounds3D other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Min, Max);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Min\" = {Min}, \"Max\" = {Max} }}";

        // Explicit implementation of interfaces by forwarding properties to fields
        Vector3 IBounds<Vector3>.Min { [MethodImpl(AggressiveInlining)] get => Min; }
        Vector3 IBounds<Vector3>.Max { [MethodImpl(AggressiveInlining)] get => Max; }

        // Implemented interface functions
        // Center(Bounds3D):Vector3; [Self=Bounds3D;]; <>
        public Vector3 Center { [MethodImpl(AggressiveInlining)] get  => this.Min.Add(this.Max).Half; } 
// Corners(Bounds3D):_T0; [Self=Bounds3D;]; <_T0:IArray<Vector3>>
        public _T0 Corners<_T0> { [MethodImpl(AggressiveInlining)] get  => Intrinsics.MakeArray((this.Min.X, this.Min.Y, this.Min.Z), (this.Max.X, this.Min.Y, this.Min.Z), (this.Min.X, this.Max.Y, this.Min.Z), (this.Max.X, this.Max.Y, this.Min.Z), (this.Min.X, this.Min.Y, this.Max.Z), (this.Max.X, this.Min.Y, this.Max.Z), (this.Min.X, this.Max.Y, this.Max.Z), (this.Max.X, this.Max.Y, this.Max.Z)); } 
// Empty(Bounds3D):Bounds3D; [Self=Bounds3D;]; <>
        public static Bounds3D Empty { [MethodImpl(AggressiveInlining)] get  => (Constants.MaxNumber, Constants.MinNumber); } 
// Deform(Bounds3D, Function1<Vector3, Vector3>):Bounds3D; [Self=Bounds3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Bounds3D Deform(System.Func<Vector3, Vector3> f) => this.Corners.Map(f).Bounds();
// Size(Bounds3D):Vector3; [$T=Vector3;IBounds=Bounds3D;T=Vector3;Self=Bounds3D;]; <>
        public Vector3 Size { [MethodImpl(AggressiveInlining)] get  => this.Max.Subtract(this.Min); } 
// Lerp(Bounds3D, Number):Vector3; [$T=Vector3;IBounds=Bounds3D;T=Vector3;Self=Bounds3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector3 Lerp(Number amount) => this.Min.Lerp(this.Max, amount);
// Contains(Bounds3D, Vector3):Boolean; [$T=Vector3;IBounds=Bounds3D;T=Vector3;Self=Bounds3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Boolean Contains(Vector3 value) => value.Between(this.Min, this.Max);
// Contains(Bounds3D, Bounds3D):Boolean; [$T=Vector3;IBounds=Bounds3D;T=Vector3;Self=Bounds3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Boolean Contains(Bounds3D y) => this.Contains(y.Min).And(this.Contains(y.Max));
// Overlaps(Bounds3D, Bounds3D):Boolean; [$T=Vector3;IBounds=Bounds3D;T=Vector3;Self=Bounds3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Boolean Overlaps(Bounds3D y) => this.Contains(y.Min).Or(this.Contains(y.Max).Or(y.Contains(this.Min).Or(y.Contains(this.Max))));
// Recenter(Bounds3D, Vector3):Bounds3D; [$T=Vector3;IBounds=Bounds3D;T=Vector3;Self=Bounds3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Bounds3D Recenter(Vector3 c) => (c.Subtract(this.Size.Half), c.Add(this.Size.Half));
// Clamp(Bounds3D, Bounds3D):Bounds3D; [$T=Vector3;IBounds=Bounds3D;T=Vector3;Self=Bounds3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Bounds3D Clamp(Bounds3D y) => (this.Clamp(y.Min), this.Clamp(y.Max));
// Clamp(Bounds3D, Vector3):Vector3; [$T=Vector3;IBounds=Bounds3D;T=Vector3;Self=Bounds3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector3 Clamp(Vector3 value) => value.Clamp(this.Min, this.Max);
// Include(Bounds3D, Vector3):Bounds3D; [$T=Vector3;IBounds=Bounds3D;T=Vector3;Self=Bounds3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Bounds3D Include(Vector3 value) => (this.Min.Min(value), this.Max.Max(value));
// Include(Bounds3D, Bounds3D):Bounds3D; [$T=Vector3;IBounds=Bounds3D;T=Vector3;Self=Bounds3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Bounds3D Include(Bounds3D y) => this.Include(y.Min).Include(y.Max);
// Deform(Bounds3D, _T0):Bounds3D; [IDeformable3D=Bounds3D;Self=Bounds3D;]; <_T0:ITransform3D>
        [MethodImpl(AggressiveInlining)]  public Bounds3D Deform<_T0>(_T0 t){
            var _var91 = t;
            return this.Deform((v)  => _var91.Transform(v));
        }

// Translate(Bounds3D, Vector3):Bounds3D; [IDeformable3D=Bounds3D;Self=Bounds3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Bounds3D Translate(Vector3 v){
            var _var92 = v;
            return this.Deform((p)  => p.Add(_var92));
        }

// Rotate(Bounds3D, Quaternion):Bounds3D; [IDeformable3D=Bounds3D;Self=Bounds3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Bounds3D Rotate(Quaternion q){
            var _var93 = q;
            return this.Deform((v)  => _var93.Transform(v));
        }

// Scale(Bounds3D, Vector3):Bounds3D; [IDeformable3D=Bounds3D;Self=Bounds3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Bounds3D Scale(Vector3 v){
            var _var94 = v;
            return this.Deform((p)  => p.Multiply(_var94));
        }

// Scale(Bounds3D, Number):Bounds3D; [IDeformable3D=Bounds3D;Self=Bounds3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Bounds3D Scale(Number s){
            var _var95 = s;
            return this.Deform((p)  => p.Multiply(_var95));
        }

// RotateX(Bounds3D, Angle):Bounds3D; [IDeformable3D=Bounds3D;Self=Bounds3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Bounds3D RotateX(Angle a) => this.Rotate(a.RotateX);
// RotateY(Bounds3D, Angle):Bounds3D; [IDeformable3D=Bounds3D;Self=Bounds3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Bounds3D RotateY(Angle a) => this.Rotate(a.RotateY);
// RotateZ(Bounds3D, Angle):Bounds3D; [IDeformable3D=Bounds3D;Self=Bounds3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Bounds3D RotateZ(Angle a) => this.Rotate(a.RotateZ);
// TranslateX(Bounds3D, Number):Bounds3D; [IDeformable3D=Bounds3D;Self=Bounds3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Bounds3D TranslateX(Number s){
            var _var96 = s;
            return this.Deform((p)  => p.Add((_var96, ((Integer)0), ((Integer)0))));
        }

// TranslateY(Bounds3D, Number):Bounds3D; [IDeformable3D=Bounds3D;Self=Bounds3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Bounds3D TranslateY(Number s){
            var _var97 = s;
            return this.Deform((p)  => p.Add((((Integer)0), _var97, ((Integer)0))));
        }

// TranslateZ(Bounds3D, Number):Bounds3D; [IDeformable3D=Bounds3D;Self=Bounds3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Bounds3D TranslateZ(Number s){
            var _var98 = s;
            return this.Deform((p)  => p.Add((((Integer)0), ((Integer)0), _var98)));
        }

// ScaleX(Bounds3D, Number):Bounds3D; [IDeformable3D=Bounds3D;Self=Bounds3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Bounds3D ScaleX(Number s){
            var _var99 = s;
            return this.Deform((p)  => p.Multiply((_var99, ((Integer)1), ((Integer)1))));
        }

// ScaleY(Bounds3D, Number):Bounds3D; [IDeformable3D=Bounds3D;Self=Bounds3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Bounds3D ScaleY(Number s){
            var _var100 = s;
            return this.Deform((p)  => p.Multiply((((Integer)1), _var100, ((Integer)1))));
        }

// ScaleZ(Bounds3D, Number):Bounds3D; [IDeformable3D=Bounds3D;Self=Bounds3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Bounds3D ScaleZ(Number s){
            var _var101 = s;
            return this.Deform((p)  => p.Multiply((((Integer)1), ((Integer)1), _var101)));
        }


        // Unimplemented concept functions
    }
}
