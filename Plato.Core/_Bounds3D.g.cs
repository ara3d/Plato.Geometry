// Autogenerated file: DO NOT EDIT
// Created on 2025-04-07 4:05:19 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Bounds3D: IBounds<Point3D>, IDeformable3D<Bounds3D>, IArrayLike<Bounds3D, Point3D>
    {
        // Fields
        [DataMember] public readonly Point3D Min;
        [DataMember] public readonly Point3D Max;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Bounds3D WithMin(Point3D min) => new Bounds3D(min, Max);
        [MethodImpl(AggressiveInlining)] public Bounds3D WithMax(Point3D max) => new Bounds3D(Min, max);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Bounds3D(Point3D min, Point3D max) { Min = min; Max = max; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Bounds3D Create(Point3D min, Point3D max) => new Bounds3D(min, max);

        // Static default implementation
        public static readonly Bounds3D Default = default;

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Point3D, Point3D)(Bounds3D self) => (self.Min, self.Max);
        [MethodImpl(AggressiveInlining)] public static implicit operator Bounds3D((Point3D, Point3D) value) => new Bounds3D(value.Item1, value.Item2);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Point3D min, out Point3D max) { min = Min; max = Max;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Bounds3D other) => Min.Equals(other.Min) && Max.Equals(other.Max);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Bounds3D other) => !Min.Equals(other.Min) && Max.Equals(other.Max);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Bounds3D other ? Equals(other).Value : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Min, Max);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Min\" = {Min}, \"Max\" = {Max} }}";

        // Explicit implementation of interfaces by forwarding properties to fields
        Point3D IBounds<Point3D>.Min { [MethodImpl(AggressiveInlining)] get => Min; }
        Point3D IBounds<Point3D>.Max { [MethodImpl(AggressiveInlining)] get => Max; }

        // IArrayLike predefined functions
        public Integer NumComponents { [MethodImpl(AggressiveInlining)] get => 2; }
        public IArray<Point3D> Components { [MethodImpl(AggressiveInlining)] get => Intrinsics.MakeArray<Point3D>(Min, Max); }
        [MethodImpl(AggressiveInlining)] public static Bounds3D CreateFromComponents(IArray<Point3D> numbers) => new Bounds3D(numbers[0], numbers[1]);

        [MethodImpl(AggressiveInlining)] public static Bounds3D CreateFromComponent(Point3D x) => new Bounds3D(x, x);

        // Implemented interface functions
        // AMBIGUOUS FUNCTIONS 2
        public Point3D Center { [MethodImpl(AggressiveInlining)] get  => this.Min.Add(this.Max).Half; } 
public IArray<Point3D> Corners { [MethodImpl(AggressiveInlining)] get  => Intrinsics.MakeArray<Point3D>((this.Min.X, this.Min.Y, this.Min.Z), (this.Max.X, this.Min.Y, this.Min.Z), (this.Min.X, this.Max.Y, this.Min.Z), (this.Max.X, this.Max.Y, this.Min.Z), (this.Min.X, this.Min.Y, this.Max.Z), (this.Max.X, this.Min.Y, this.Max.Z), (this.Min.X, this.Max.Y, this.Max.Z), (this.Max.X, this.Max.Y, this.Max.Z)); } 
public static Bounds3D Empty { [MethodImpl(AggressiveInlining)] get  => (Constants.MaxNumber, Constants.MinNumber); } 
[MethodImpl(AggressiveInlining)]  public Bounds3D Deform(System.Func<Point3D, Point3D> f) => this.Corners.Map(f).Bounds();
public Point3D Size { [MethodImpl(AggressiveInlining)] get  => this.Max.Subtract(this.Min); } 
[MethodImpl(AggressiveInlining)]  public Point3D Lerp(Number amount) => this.Min.Lerp(this.Max, amount);
[MethodImpl(AggressiveInlining)]  public Boolean Contains(Point3D value) => value.Between(this.Min, this.Max);
[MethodImpl(AggressiveInlining)]  public Boolean Contains(Bounds3D y) => this.Contains(y.Min).And(this.Contains(y.Max));
[MethodImpl(AggressiveInlining)]  public Boolean Overlaps(Bounds3D y) => this.Contains(y.Min).Or(this.Contains(y.Max).Or(y.Contains(this.Min).Or(y.Contains(this.Max))));
[MethodImpl(AggressiveInlining)]  public Bounds3D Recenter(Point3D c) => (c.Subtract(this.Size.Half), c.Add(this.Size.Half));
[MethodImpl(AggressiveInlining)]  public Bounds3D Clamp(Bounds3D y) => (this.Clamp(y.Min), this.Clamp(y.Max));
[MethodImpl(AggressiveInlining)]  public Point3D Clamp(Point3D value) => value.Clamp(this.Min, this.Max);
[MethodImpl(AggressiveInlining)]  public Bounds3D Include(Point3D value) => (this.Min.Min(value), this.Max.Max(value));
[MethodImpl(AggressiveInlining)]  public Bounds3D Include(Bounds3D y) => this.Include(y.Min).Include(y.Max);
[MethodImpl(AggressiveInlining)]  public Bounds3D Deform<_T0>(_T0 t) where _T0 : ITransform3D{
            var _var106 = t;
            return this.Deform((v)  => _var106.Transform(v));
        }

[MethodImpl(AggressiveInlining)]  public Bounds3D Scale(Vector3 v){
            var _var107 = v;
            return this.Deform((p)  => p.Vector3.Multiply(_var107));
        }

[MethodImpl(AggressiveInlining)]  public Bounds3D Scale(Number s) => this.Scale((s, s, s));
[MethodImpl(AggressiveInlining)]  public Bounds3D ScaleX(Number s) => this.Scale((s, ((Integer)1), ((Integer)1)));
[MethodImpl(AggressiveInlining)]  public Bounds3D ScaleY(Number s) => this.Scale((((Integer)1), s, ((Integer)1)));
[MethodImpl(AggressiveInlining)]  public Bounds3D ScaleZ(Number s) => this.Scale((((Integer)1), ((Integer)1), s));
[MethodImpl(AggressiveInlining)]  public Bounds3D Rotate(Quaternion q){
            var _var108 = q;
            return this.Deform((v)  => _var108.Transform(v));
        }

[MethodImpl(AggressiveInlining)]  public Bounds3D RotateX(Angle a) => this.Rotate(a.RotateX);
[MethodImpl(AggressiveInlining)]  public Bounds3D RotateY(Angle a) => this.Rotate(a.RotateY);
[MethodImpl(AggressiveInlining)]  public Bounds3D RotateZ(Angle a) => this.Rotate(a.RotateZ);
[MethodImpl(AggressiveInlining)]  public Bounds3D Translate(Vector3 v){
            var _var109 = v;
            return this.Deform((p)  => p.Add(_var109));
        }

[MethodImpl(AggressiveInlining)]  public Bounds3D TranslateX(Number s) => this.Translate(s.XVector3);
[MethodImpl(AggressiveInlining)]  public Bounds3D TranslateY(Number s) => this.Translate(s.YVector3);
[MethodImpl(AggressiveInlining)]  public Bounds3D TranslateZ(Number s) => this.Translate(s.ZVector3);
[MethodImpl(AggressiveInlining)]  public Point3D At(Integer n) => this.Components.At(n);
public Point3D this[Integer n] { [MethodImpl(AggressiveInlining)]  get => At(n); }
        [MethodImpl(AggressiveInlining)]  public Bounds3D MapComponents(System.Func<Point3D, Point3D> f) => Bounds3D.CreateFromComponents(this.Components.Map(f));
[MethodImpl(AggressiveInlining)]  public Bounds3D ZipComponents(Bounds3D b, System.Func<Point3D, Point3D, Point3D> f) => Bounds3D.CreateFromComponents(this.Components.Zip(b.Components, f));
[MethodImpl(AggressiveInlining)]  public Bounds3D ZipComponents(Bounds3D b, Bounds3D c, System.Func<Point3D, Point3D, Point3D, Point3D> f) => Bounds3D.CreateFromComponents(this.Components.Zip(b.Components, c.Components, f));
[MethodImpl(AggressiveInlining)]  public Boolean AllZipComponents(Bounds3D b, System.Func<Point3D, Point3D, Boolean> f) => this.Components.Zip(b.Components, f).All((x)  => x);
[MethodImpl(AggressiveInlining)]  public Boolean AllZipComponents(Bounds3D b, Bounds3D c, System.Func<Point3D, Point3D, Point3D, Boolean> f) => this.Components.Zip(b.Components, c.Components, f).All((x)  => x);
[MethodImpl(AggressiveInlining)]  public Boolean AnyZipComponents(Bounds3D b, System.Func<Point3D, Point3D, Boolean> f) => this.Components.Zip(b.Components, f).Any((x)  => x);
[MethodImpl(AggressiveInlining)]  public Boolean AnyZipComponents(Bounds3D b, Bounds3D c, System.Func<Point3D, Point3D, Point3D, Boolean> f) => this.Components.Zip(b.Components, c.Components, f).Any((x)  => x);
[MethodImpl(AggressiveInlining)]  public Boolean AllComponents(System.Func<Point3D, Boolean> predicate) => this.Components.All(predicate);
[MethodImpl(AggressiveInlining)]  public Boolean AnyComponent(System.Func<Point3D, Boolean> predicate) => this.Components.Any(predicate);

        // Unimplemented interface functions
    }
}
