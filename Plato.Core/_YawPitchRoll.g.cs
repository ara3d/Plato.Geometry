// Autogenerated file: DO NOT EDIT
// Created on 2025-04-07 4:05:19 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct YawPitchRoll: IRotation3D
    {
        // Fields
        [DataMember] public readonly Angle Yaw;
        [DataMember] public readonly Angle Pitch;
        [DataMember] public readonly Angle Roll;

        // With functions 
        [MethodImpl(AggressiveInlining)] public YawPitchRoll WithYaw(Angle yaw) => new YawPitchRoll(yaw, Pitch, Roll);
        [MethodImpl(AggressiveInlining)] public YawPitchRoll WithPitch(Angle pitch) => new YawPitchRoll(Yaw, pitch, Roll);
        [MethodImpl(AggressiveInlining)] public YawPitchRoll WithRoll(Angle roll) => new YawPitchRoll(Yaw, Pitch, roll);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public YawPitchRoll(Angle yaw, Angle pitch, Angle roll) { Yaw = yaw; Pitch = pitch; Roll = roll; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static YawPitchRoll Create(Angle yaw, Angle pitch, Angle roll) => new YawPitchRoll(yaw, pitch, roll);

        // Static default implementation
        public static readonly YawPitchRoll Default = default;

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Angle, Angle, Angle)(YawPitchRoll self) => (self.Yaw, self.Pitch, self.Roll);
        [MethodImpl(AggressiveInlining)] public static implicit operator YawPitchRoll((Angle, Angle, Angle) value) => new YawPitchRoll(value.Item1, value.Item2, value.Item3);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Angle yaw, out Angle pitch, out Angle roll) { yaw = Yaw; pitch = Pitch; roll = Roll;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(YawPitchRoll other) => Yaw.Equals(other.Yaw) && Pitch.Equals(other.Pitch) && Roll.Equals(other.Roll);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(YawPitchRoll other) => !Yaw.Equals(other.Yaw) && Pitch.Equals(other.Pitch) && Roll.Equals(other.Roll);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is YawPitchRoll other ? Equals(other).Value : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Yaw, Pitch, Roll);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Yaw\" = {Yaw}, \"Pitch\" = {Pitch}, \"Roll\" = {Roll} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented interface functions
        public Quaternion Quaternion { [MethodImpl(AggressiveInlining)] get  => Quaternion.CreateFromYawPitchRoll(this.Yaw, this.Pitch, this.Roll); } 
[MethodImpl(AggressiveInlining)]  public static implicit operator Quaternion(YawPitchRoll e) => e.Quaternion;
        public static YawPitchRoll Identity { [MethodImpl(AggressiveInlining)] get  => (((Number)0), ((Number)0), ((Number)0)); } 
public static YawPitch Identity { [MethodImpl(AggressiveInlining)] get  => (((Number)0), ((Number)0)); } 
public Matrix4x4 Matrix { [MethodImpl(AggressiveInlining)] get  => this.Quaternion.Matrix; } 
[MethodImpl(AggressiveInlining)]  public Point3D Multiply(Point3D v) => this.TransformPoint(v);
[MethodImpl(AggressiveInlining)]  public static Point3D operator *(YawPitchRoll x, Point3D v) => x.Multiply(v);
        [MethodImpl(AggressiveInlining)]  public Vector3 Multiply(Vector3 v) => this.TransformNormal(v);
[MethodImpl(AggressiveInlining)]  public static Vector3 operator *(YawPitchRoll x, Vector3 v) => x.Multiply(v);
        [MethodImpl(AggressiveInlining)]  public MatrixTransform3D Multiply(Matrix4x4 m) => this.Compose(y);
[MethodImpl(AggressiveInlining)]  public static MatrixTransform3D operator *(YawPitchRoll x, Matrix4x4 m) => x.Multiply(m);
        [MethodImpl(AggressiveInlining)]  public Point3D TransformPoint(Point3D v) => v.Vector.Transform(this.Matrix);
[MethodImpl(AggressiveInlining)]  public Vector3 TransformNormal(Vector3 v) => v.Vector.TransformNormal(this.Matrix);
public Matrix4x4 Matrix4x4 { [MethodImpl(AggressiveInlining)] get  => this.Matrix; } 
[MethodImpl(AggressiveInlining)]  public static implicit operator Matrix4x4(YawPitchRoll t) => t.Matrix4x4;
        public MatrixTransform3D MatrixTransform3D { [MethodImpl(AggressiveInlining)] get  => this.Matrix; } 
[MethodImpl(AggressiveInlining)]  public static implicit operator MatrixTransform3D(YawPitchRoll t) => t.MatrixTransform3D;
        public MatrixTransform3D Invert { [MethodImpl(AggressiveInlining)] get  => this.Matrix.Invert; } 
[MethodImpl(AggressiveInlining)]  public MatrixTransform3D Compose(Matrix4x4 m) => this.Matrix.Multiply(m);
public Rotation3D Rotation { [MethodImpl(AggressiveInlining)] get  => this.Matrix.Rotation; } 
public Translation3D Translation { [MethodImpl(AggressiveInlining)] get  => this.Matrix.Translation; } 
public Pose3D Pose { [MethodImpl(AggressiveInlining)] get  => (this.Matrix.Translation, this.Matrix.Rotation); } 

        // Unimplemented interface functions
    }
}
