// Autogenerated file: DO NOT EDIT
// Created on 2025-04-08 12:25:04 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct PolarCoordinate: ICoordinate
    {
        // Fields
        [DataMember] public readonly Number Radius;
        [DataMember] public readonly Angle Angle;

        // With functions 
        [MethodImpl(AggressiveInlining)] public PolarCoordinate WithRadius(Number radius) => new PolarCoordinate(radius, Angle);
        [MethodImpl(AggressiveInlining)] public PolarCoordinate WithAngle(Angle angle) => new PolarCoordinate(Radius, angle);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public PolarCoordinate(Number radius, Angle angle) { Radius = radius; Angle = angle; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static PolarCoordinate Create(Number radius, Angle angle) => new PolarCoordinate(radius, angle);

        // Static default implementation
        public static readonly PolarCoordinate Default = default;

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Number, Angle)(PolarCoordinate self) => (self.Radius, self.Angle);
        [MethodImpl(AggressiveInlining)] public static implicit operator PolarCoordinate((Number, Angle) value) => new PolarCoordinate(value.Item1, value.Item2);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Number radius, out Angle angle) { radius = Radius; angle = Angle;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(PolarCoordinate other) => Radius.Equals(other.Radius) && Angle.Equals(other.Angle);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(PolarCoordinate other) => !Radius.Equals(other.Radius) && Angle.Equals(other.Angle);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is PolarCoordinate other ? Equals(other).Value : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Radius, Angle);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Radius\" = {Radius}, \"Angle\" = {Angle} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented interface functions
        public Point2D Point2D { [MethodImpl(AggressiveInlining)] get  => new Vector2(this.Angle.Cos, this.Angle.Sin).Multiply(this.Radius); } 
[MethodImpl(AggressiveInlining)]  public static implicit operator Point2D(PolarCoordinate coord) => coord.Point2D;

        // Unimplemented interface functions
    }
}
