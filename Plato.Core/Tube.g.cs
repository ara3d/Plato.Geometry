// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 12:06:56 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Tube: ISolid
    {
        // Fields
        [DataMember] public readonly Number Height;
        [DataMember] public readonly Number InnerRadius;
        [DataMember] public readonly Number OuterRadius;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Tube WithHeight(Number height) => new Tube(height, InnerRadius, OuterRadius);
        [MethodImpl(AggressiveInlining)] public Tube WithInnerRadius(Number innerRadius) => new Tube(Height, innerRadius, OuterRadius);
        [MethodImpl(AggressiveInlining)] public Tube WithOuterRadius(Number outerRadius) => new Tube(Height, InnerRadius, outerRadius);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Tube(Number height, Number innerRadius, Number outerRadius) { Height = height; InnerRadius = innerRadius; OuterRadius = outerRadius; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Tube Create(Number height, Number innerRadius, Number outerRadius) => new Tube(height, innerRadius, outerRadius);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Number, Number, Number)(Tube self) => (self.Height, self.InnerRadius, self.OuterRadius);
        [MethodImpl(AggressiveInlining)] public static implicit operator Tube((Number, Number, Number) value) => new(value.Item1, value.Item2, value.Item3);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Number height, out Number innerRadius, out Number outerRadius) { height = Height; innerRadius = InnerRadius; outerRadius = OuterRadius;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Tube other) => Height.Equals(other.Height) && InnerRadius.Equals(other.InnerRadius) && OuterRadius.Equals(other.OuterRadius);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Tube other) => !Height.Equals(other.Height) && InnerRadius.Equals(other.InnerRadius) && OuterRadius.Equals(other.OuterRadius);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Tube other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Height, InnerRadius, OuterRadius);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Height\" = {Height}, \"InnerRadius\" = {InnerRadius}, \"OuterRadius\" = {OuterRadius} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented concept functions and type functions
        public Boolean ClosedX { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 
        public Boolean ClosedY { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, TR> Combine<TR>(Tube b, System.Func<TR, TR, TR> f){
            var _var1004 = b;
            {
                var _var1003 = this;
                {
                    var _var1002 = f;
                    return (x) => _var1002.Invoke(_var1003.Eval(x), _var1004.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector3> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var1006 = f;
            {
                var _var1005 = this;
                return (x) => _var1005.Eval(_var1006.Invoke(x));
            }
        }

        public System.Func<Vector2, Vector3> Function { [MethodImpl(AggressiveInlining)] get {
            var _var1007 = this;
            return (x) => _var1007.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Vector3> Compose(Tube b){
            var _var1009 = this;
            {
                var _var1008 = b;
                return (x) => _var1008.Eval(_var1009.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, TR> Combine<TR>(Tube b, System.Func<TR, TR, TR> f){
            var _var1012 = b;
            {
                var _var1011 = this;
                {
                    var _var1010 = f;
                    return (x) => _var1010.Invoke(_var1011.Eval(x), _var1012.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var1014 = f;
            {
                var _var1013 = this;
                return (x) => _var1013.Eval(_var1014.Invoke(x));
            }
        }

        public System.Func<Vector3, Number> Function { [MethodImpl(AggressiveInlining)] get {
            var _var1015 = this;
            return (x) => _var1015.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, Number> Compose(Tube b){
            var _var1017 = this;
            {
                var _var1016 = b;
                return (x) => _var1016.Eval(_var1017.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Union(Tube b) => this.Combine(b, (a, b) => a.Max(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Intersection(Tube b) => this.Combine(b, (a, b) => a.Min(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Difference(Tube b) => this.Combine(b, (a, b) => a.Max(b.Negative));
        public Procedural<Vector3, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) => x.Negative); } 

        // Unimplemented concept functions
        [MethodImpl(AggressiveInlining)]  public Number Distance(Vector3 p) => throw new NotImplementedException();
        [MethodImpl(AggressiveInlining)]  public Number Eval(Vector3 t) => throw new NotImplementedException();
        [MethodImpl(AggressiveInlining)]  public Vector3 Eval(Vector2 t) => throw new NotImplementedException();
    }
}
