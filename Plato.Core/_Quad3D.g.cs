// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 8:08:08 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
public partial struct Quad3D: IPolygon3D, IDeformable3D<Quad3D>
{
    // Fields
    [DataMember] public readonly Vector3 A;
    [DataMember] public readonly Vector3 B;
    [DataMember] public readonly Vector3 C;
    [DataMember] public readonly Vector3 D;

    // With functions 
    [MethodImpl(AggressiveInlining)] public Quad3D WithA(Vector3 a) => new Quad3D(a, B, C, D);
    [MethodImpl(AggressiveInlining)] public Quad3D WithB(Vector3 b) => new Quad3D(A, b, C, D);
    [MethodImpl(AggressiveInlining)] public Quad3D WithC(Vector3 c) => new Quad3D(A, B, c, D);
    [MethodImpl(AggressiveInlining)] public Quad3D WithD(Vector3 d) => new Quad3D(A, B, C, d);

    // Regular Constructor
    [MethodImpl(AggressiveInlining)] public Quad3D(Vector3 a, Vector3 b, Vector3 c, Vector3 d) { A = a; B = b; C = c; D = d; }

    // Static factory function
    [MethodImpl(AggressiveInlining)] public static Quad3D Create(Vector3 a, Vector3 b, Vector3 c, Vector3 d) => new Quad3D(a, b, c, d);

    // Implicit converters to/from value-tuples and deconstructor
    [MethodImpl(AggressiveInlining)] public static implicit operator (Vector3, Vector3, Vector3, Vector3)(Quad3D self) => (self.A, self.B, self.C, self.D);
    [MethodImpl(AggressiveInlining)] public static implicit operator Quad3D((Vector3, Vector3, Vector3, Vector3) value) => new(value.Item1, value.Item2, value.Item3, value.Item4);
    [MethodImpl(AggressiveInlining)] public void Deconstruct(out Vector3 a, out Vector3 b, out Vector3 c, out Vector3 d) { a = A; b = B; c = C; d = D;  }

    // Object virtual function overrides: Equals, GetHashCode, ToString
    [MethodImpl(AggressiveInlining)] public Boolean Equals(Quad3D other) => A.Equals(other.A) && B.Equals(other.B) && C.Equals(other.C) && D.Equals(other.D);
    [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Quad3D other) => !A.Equals(other.A) && B.Equals(other.B) && C.Equals(other.C) && D.Equals(other.D);
    [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Quad3D other ? Equals(other) : false;
    [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(A, B, C, D);
    [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"A\" = {A}, \"B\" = {B}, \"C\" = {C}, \"D\" = {D} }}";

    // Explicit implementation of interfaces by forwarding properties to fields

    // Implemented concept functions and type functions
    public Quad3D Flip { [MethodImpl(AggressiveInlining)] get  => (this.D, this.C, this.B, this.A); } 
public Vector3 Center { [MethodImpl(AggressiveInlining)] get  => this.A.Add(this.B.Add(this.C.Add(this.D))).Divide(((Number)4)); } 
public Line3D LineA { [MethodImpl(AggressiveInlining)] get  => (this.A, this.B); } 
public Line3D LineB { [MethodImpl(AggressiveInlining)] get  => (this.B, this.C); } 
public Line3D LineC { [MethodImpl(AggressiveInlining)] get  => (this.C, this.D); } 
public Line3D LineD { [MethodImpl(AggressiveInlining)] get  => (this.D, this.A); } 
public Triangle3D TriangleA { [MethodImpl(AggressiveInlining)] get  => (this.A, this.B, this.C); } 
public Triangle3D TriangleB { [MethodImpl(AggressiveInlining)] get  => (this.C, this.D, this.A); } 
public LineArray3D LineArray3D { [MethodImpl(AggressiveInlining)] get  => new LineArray3D(this.Lines); } 
[MethodImpl(AggressiveInlining)]  public static implicit operator LineArray3D(Quad3D q) => q.LineArray3D;
    public TriangleArray3D TriangleArray3D { [MethodImpl(AggressiveInlining)] get  => new TriangleArray3D(this.Triangles); } 
[MethodImpl(AggressiveInlining)]  public static implicit operator TriangleArray3D(Quad3D q) => q.TriangleArray3D;
    public QuadArray3D QuadArray3D { [MethodImpl(AggressiveInlining)] get  => new QuadArray3D(Intrinsics.MakeArray(this)); } 
[MethodImpl(AggressiveInlining)]  public static implicit operator QuadArray3D(Quad3D q) => q.QuadArray3D;
    public TriangleMesh3D TriangleMesh3D { [MethodImpl(AggressiveInlining)] get  => this.TriangleArray3D; } 
[MethodImpl(AggressiveInlining)]  public static implicit operator TriangleMesh3D(Quad3D g) => g.TriangleMesh3D;
    public IArray<Vector3> Points { [MethodImpl(AggressiveInlining)] get  => Intrinsics.MakeArray<Vector3>(this.A, this.B, this.C, this.D); } 
public IArray<Line3D> Lines { [MethodImpl(AggressiveInlining)] get  => Intrinsics.MakeArray<Line3D>(new Line3D(this.A, this.B), new Line3D(this.B, this.C), new Line3D(this.C, this.D), new Line3D(this.D, this.A)); } 
public IArray<Triangle3D> Triangles { [MethodImpl(AggressiveInlining)] get  => Intrinsics.MakeArray<Triangle3D>(new Triangle3D(this.A, this.B, this.C), new Triangle3D(this.C, this.D, this.A)); } 
[MethodImpl(AggressiveInlining)]  public Quad3D Deform(System.Func<Vector3, Vector3> f) => (f.Invoke(this.A), f.Invoke(this.B), f.Invoke(this.C), f.Invoke(this.D));
[MethodImpl(AggressiveInlining)]  public IArray<Vector3> Sample(Integer numPoints){
    var _var787 = this;
    return numPoints.LinearSpace.Map((x) =>  => _var787.Eval(x);
;
}

[MethodImpl(AggressiveInlining)]  public PolyLine3D ToPolyLine3D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
[MethodImpl(AggressiveInlining)]  public Procedural<Number, TR> Combine<TR>(Quad3D b, System.Func<TR, TR, TR> f){
    var _var790 = b;
    {
        var _var789 = this;
        {
            var _var788 = f;
            return (x) =>  => _var788.Invoke(_var789.Eval(x), _var790.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector3> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var792 = f;
    {
        var _var791 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var791.Eval(_var792.Invoke(x));
;
    }
}

public System.Func<Number, Vector3> Function { [MethodImpl(AggressiveInlining)] get {
    var _var793 = this;
    return (x) =>  => _var793.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Number, Vector3> Compose(Quad3D b){
    var _var795 = this;
    {
        var _var794 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var794.Eval(_var795.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, TR> Combine<TR>(Quad3D b, System.Func<TR, TR, TR> f){
    var _var798 = b;
    {
        var _var797 = this;
        {
            var _var796 = f;
            return (x) =>  => _var796.Invoke(_var797.Eval(x), _var798.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var800 = f;
    {
        var _var799 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var799.Eval(_var800.Invoke(x));
;
    }
}

public System.Func<Vector3, Number> Function { [MethodImpl(AggressiveInlining)] get {
    var _var801 = this;
    return (x) =>  => _var801.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, Number> Compose(Quad3D b){
    var _var803 = this;
    {
        var _var802 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var802.Eval(_var803.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Union(Quad3D b) => this.Combine(b, (a, b) =>  => a.Max(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Intersection(Quad3D b) => this.Combine(b, (a, b) =>  => a.Min(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Difference(Quad3D b) => this.Combine(b, (a, b) =>  => a.Max(b.Negative);

public Procedural<Vector3, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) =>  => x.Negative;
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, Boolean> Threshold(Number threshold){
    var _var804 = threshold;
    return this.Map((x) =>  => x.GreaterThanOrEquals(_var804);
;
}

public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 
[MethodImpl(AggressiveInlining)]  public Quad3D Deform(IdentityTransform3D t){
    var _var805 = t;
    return this.Deform((v) =>  => _var805.Transform(v);
;
}

[MethodImpl(AggressiveInlining)]  public Quad3D Deform(MatrixTransform3D t){
    var _var806 = t;
    return this.Deform((v) =>  => _var806.Transform(v);
;
}

[MethodImpl(AggressiveInlining)]  public Quad3D Deform(Translation3D t){
    var _var807 = t;
    return this.Deform((v) =>  => _var807.Transform(v);
;
}

[MethodImpl(AggressiveInlining)]  public Quad3D Deform(Rotation3D t){
    var _var808 = t;
    return this.Deform((v) =>  => _var808.Transform(v);
;
}

[MethodImpl(AggressiveInlining)]  public Quad3D Deform(LookRotation t){
    var _var809 = t;
    return this.Deform((v) =>  => _var809.Transform(v);
;
}

[MethodImpl(AggressiveInlining)]  public Quad3D Deform(Scaling3D t){
    var _var810 = t;
    return this.Deform((v) =>  => _var810.Transform(v);
;
}

[MethodImpl(AggressiveInlining)]  public Quad3D Deform(TRSTransform3D t){
    var _var811 = t;
    return this.Deform((v) =>  => _var811.Transform(v);
;
}

[MethodImpl(AggressiveInlining)]  public Quad3D Deform(Pose3D t){
    var _var812 = t;
    return this.Deform((v) =>  => _var812.Transform(v);
;
}

[MethodImpl(AggressiveInlining)]  public Quad3D Deform(AxisAngle t){
    var _var813 = t;
    return this.Deform((v) =>  => _var813.Transform(v);
;
}

[MethodImpl(AggressiveInlining)]  public Quad3D Deform(EulerAngles t){
    var _var814 = t;
    return this.Deform((v) =>  => _var814.Transform(v);
;
}

[MethodImpl(AggressiveInlining)]  public Quad3D Deform(Perspective3D t){
    var _var815 = t;
    return this.Deform((v) =>  => _var815.Transform(v);
;
}

[MethodImpl(AggressiveInlining)]  public Quad3D Deform(Orthographic3D t){
    var _var816 = t;
    return this.Deform((v) =>  => _var816.Transform(v);
;
}

[MethodImpl(AggressiveInlining)]  public Quad3D Deform(PlaneProjection t){
    var _var817 = t;
    return this.Deform((v) =>  => _var817.Transform(v);
;
}

[MethodImpl(AggressiveInlining)]  public Quad3D Translate(Vector3 v){
    var _var818 = v;
    return this.Deform((p) =>  => p.Add(_var818);
;
}

[MethodImpl(AggressiveInlining)]  public Quad3D Rotate(Quaternion q) => this.Deform(q);
[MethodImpl(AggressiveInlining)]  public Quad3D Scale(Vector3 v){
    var _var819 = v;
    return this.Deform((p) =>  => p.Multiply(_var819);
;
}

[MethodImpl(AggressiveInlining)]  public Quad3D Scale(Number s){
    var _var820 = s;
    return this.Deform((p) =>  => p.Multiply(_var820);
;
}

[MethodImpl(AggressiveInlining)]  public Quad3D RotateX(Angle a) => this.Rotate(a.RotateX);
[MethodImpl(AggressiveInlining)]  public Quad3D RotateY(Angle a) => this.Rotate(a.RotateY);
[MethodImpl(AggressiveInlining)]  public Quad3D RotateZ(Angle a) => this.Rotate(a.RotateZ);
[MethodImpl(AggressiveInlining)]  public Quad3D TranslateX(Number s){
    var _var821 = s;
    return this.Deform((p) =>  => p.Add((_var821, ((Integer)0), ((Integer)0)));
;
}

[MethodImpl(AggressiveInlining)]  public Quad3D TranslateY(Number s){
    var _var822 = s;
    return this.Deform((p) =>  => p.Add((((Integer)0), _var822, ((Integer)0)));
;
}

[MethodImpl(AggressiveInlining)]  public Quad3D TranslateZ(Number s){
    var _var823 = s;
    return this.Deform((p) =>  => p.Add((((Integer)0), ((Integer)0), _var823));
;
}

[MethodImpl(AggressiveInlining)]  public Quad3D ScaleX(Number s){
    var _var824 = s;
    return this.Deform((p) =>  => p.Multiply((_var824, ((Integer)1), ((Integer)1)));
;
}

[MethodImpl(AggressiveInlining)]  public Quad3D ScaleY(Number s){
    var _var825 = s;
    return this.Deform((p) =>  => p.Multiply((((Integer)1), _var825, ((Integer)1)));
;
}

[MethodImpl(AggressiveInlining)]  public Quad3D ScaleZ(Number s){
    var _var826 = s;
    return this.Deform((p) =>  => p.Multiply((((Integer)1), ((Integer)1), _var826));
;
}


    // Unimplemented concept functions
    [MethodImpl(AggressiveInlining)]  public Number Distance(Vector3 p) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public Number Eval(Vector3 t) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public Vector3 Eval(Number t) => throw new NotImplementedException();
public IArray<Vector3> Corners => throw new NotImplementedException();
public Integer PrimitiveSize => throw new NotImplementedException();
public Integer NumPrimitives => throw new NotImplementedException();
}
Plato.CSharpWriter.CSharpConcreteTypeWriter}
