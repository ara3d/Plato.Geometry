// Autogenerated file: DO NOT EDIT
// Created on 2025-03-14 12:36:59 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Quad3D: IPolygon3D, IDeformable3D<Quad3D>
    {
        // Fields
        [DataMember] public readonly Vector3 A;
        [DataMember] public readonly Vector3 B;
        [DataMember] public readonly Vector3 C;
        [DataMember] public readonly Vector3 D;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Quad3D WithA(Vector3 a) => new Quad3D(a, B, C, D);
        [MethodImpl(AggressiveInlining)] public Quad3D WithB(Vector3 b) => new Quad3D(A, b, C, D);
        [MethodImpl(AggressiveInlining)] public Quad3D WithC(Vector3 c) => new Quad3D(A, B, c, D);
        [MethodImpl(AggressiveInlining)] public Quad3D WithD(Vector3 d) => new Quad3D(A, B, C, d);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Quad3D(Vector3 a, Vector3 b, Vector3 c, Vector3 d) { A = a; B = b; C = c; D = d; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Quad3D Create(Vector3 a, Vector3 b, Vector3 c, Vector3 d) => new Quad3D(a, b, c, d);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Vector3, Vector3, Vector3, Vector3)(Quad3D self) => (self.A, self.B, self.C, self.D);
        [MethodImpl(AggressiveInlining)] public static implicit operator Quad3D((Vector3, Vector3, Vector3, Vector3) value) => new(value.Item1, value.Item2, value.Item3, value.Item4);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Vector3 a, out Vector3 b, out Vector3 c, out Vector3 d) { a = A; b = B; c = C; d = D;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Quad3D other) => A.Equals(other.A) && B.Equals(other.B) && C.Equals(other.C) && D.Equals(other.D);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Quad3D other) => !A.Equals(other.A) && B.Equals(other.B) && C.Equals(other.C) && D.Equals(other.D);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Quad3D other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(A, B, C, D);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"A\" = {A}, \"B\" = {B}, \"C\" = {C}, \"D\" = {D} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented interface functions
        // Flip(Quad3D):Quad3D; [Self=Quad3D;]; <>
        public Quad3D Flip { [MethodImpl(AggressiveInlining)] get  => (this.D, this.C, this.B, this.A); } 
// Center(Quad3D):Vector3; [Self=Quad3D;]; <>
        public Vector3 Center { [MethodImpl(AggressiveInlining)] get  => this.A.Add(this.B.Add(this.C.Add(this.D))).Divide(((Number)4)); } 
// LineA(Quad3D):Line3D; [Self=Quad3D;]; <>
        public Line3D LineA { [MethodImpl(AggressiveInlining)] get  => (this.A, this.B); } 
// LineB(Quad3D):Line3D; [Self=Quad3D;]; <>
        public Line3D LineB { [MethodImpl(AggressiveInlining)] get  => (this.B, this.C); } 
// LineC(Quad3D):Line3D; [Self=Quad3D;]; <>
        public Line3D LineC { [MethodImpl(AggressiveInlining)] get  => (this.C, this.D); } 
// LineD(Quad3D):Line3D; [Self=Quad3D;]; <>
        public Line3D LineD { [MethodImpl(AggressiveInlining)] get  => (this.D, this.A); } 
// TriangleA(Quad3D):Triangle3D; [Self=Quad3D;]; <>
        public Triangle3D TriangleA { [MethodImpl(AggressiveInlining)] get  => (this.A, this.B, this.C); } 
// TriangleB(Quad3D):Triangle3D; [Self=Quad3D;]; <>
        public Triangle3D TriangleB { [MethodImpl(AggressiveInlining)] get  => (this.C, this.D, this.A); } 
// LineArray3D(Quad3D):LineArray3D; [Self=Quad3D;]; <>
        public LineArray3D LineArray3D { [MethodImpl(AggressiveInlining)] get  => new LineArray3D(this.Lines); } 
[MethodImpl(AggressiveInlining)]  public static implicit operator LineArray3D(Quad3D q) => q.LineArray3D;
        // TriangleArray3D(Quad3D):TriangleArray3D; [Self=Quad3D;]; <>
        public TriangleArray3D TriangleArray3D { [MethodImpl(AggressiveInlining)] get  => new TriangleArray3D(this.Triangles); } 
[MethodImpl(AggressiveInlining)]  public static implicit operator TriangleArray3D(Quad3D q) => q.TriangleArray3D;
        // QuadArray3D(Quad3D):QuadArray3D; [Self=Quad3D;]; <>
        public QuadArray3D QuadArray3D { [MethodImpl(AggressiveInlining)] get  => new QuadArray3D(Intrinsics.MakeArray(this)); } 
[MethodImpl(AggressiveInlining)]  public static implicit operator QuadArray3D(Quad3D q) => q.QuadArray3D;
        // TriangleMesh3D(Quad3D):TriangleMesh3D; [Self=Quad3D;]; <>
        public TriangleMesh3D TriangleMesh3D { [MethodImpl(AggressiveInlining)] get  => this.TriangleArray3D; } 
[MethodImpl(AggressiveInlining)]  public static implicit operator TriangleMesh3D(Quad3D g) => g.TriangleMesh3D;
        // Points(Quad3D):_T0; [Self=Quad3D;]; <_T0:IArray<Vector3>>
        public _T0 Points<_T0> { [MethodImpl(AggressiveInlining)] get  => Intrinsics.MakeArray(this.A, this.B, this.C, this.D); } 
// Lines(Quad3D):_T0; [Self=Quad3D;]; <_T0:IArray<Line3D>>
        public _T0 Lines<_T0> { [MethodImpl(AggressiveInlining)] get  => Intrinsics.MakeArray(new Line3D(this.A, this.B), new Line3D(this.B, this.C), new Line3D(this.C, this.D), new Line3D(this.D, this.A)); } 
// Triangles(Quad3D):_T0; [Self=Quad3D;]; <_T0:IArray<Triangle3D>>
        public _T0 Triangles<_T0> { [MethodImpl(AggressiveInlining)] get  => Intrinsics.MakeArray(new Triangle3D(this.A, this.B, this.C), new Triangle3D(this.C, this.D, this.A)); } 
// Deform(Quad3D, Function1<Vector3, Vector3>):Quad3D; [Self=Quad3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Quad3D Deform(System.Func<Vector3, Vector3> f) => (f.Invoke(this.A), f.Invoke(this.B), f.Invoke(this.C), f.Invoke(this.D));
// Sample(Quad3D, Integer):_T0; [ICurve3D=Quad3D;IPolyLine3D=Quad3D;IPolygon3D=Quad3D;Self=Quad3D;]; <_T0:IArray<Vector3>>
        [MethodImpl(AggressiveInlining)]  public _T0 Sample<_T0>(Integer numPoints){
            var _var140 = this;
            return numPoints.LinearSpace.Map((x)  => _var140.Eval(x));
        }

// ToPolyLine3D(Quad3D, Integer):PolyLine3D; [ICurve3D=Quad3D;IPolyLine3D=Quad3D;IPolygon3D=Quad3D;Self=Quad3D;]; <>
        [MethodImpl(AggressiveInlining)]  public PolyLine3D ToPolyLine3D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
// Closed(Quad3D):Boolean; [IClosedShape=Quad3D;IClosedShape3D=Quad3D;IPolygon3D=Quad3D;Self=Quad3D;]; <>
        public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 
// Deform(Quad3D, _T0):Quad3D; [IDeformable3D=Quad3D;Self=Quad3D;]; <_T0:ITransform3D>
        [MethodImpl(AggressiveInlining)]  public Quad3D Deform<_T0>(_T0 t){
            var _var141 = t;
            return this.Deform((v)  => _var141.Transform(v));
        }

// Translate(Quad3D, Vector3):Quad3D; [IDeformable3D=Quad3D;Self=Quad3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Quad3D Translate(Vector3 v){
            var _var142 = v;
            return this.Deform((p)  => p.Add(_var142));
        }

// Rotate(Quad3D, Quaternion):Quad3D; [IDeformable3D=Quad3D;Self=Quad3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Quad3D Rotate(Quaternion q){
            var _var143 = q;
            return this.Deform((v)  => _var143.Transform(v));
        }

// Scale(Quad3D, Vector3):Quad3D; [IDeformable3D=Quad3D;Self=Quad3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Quad3D Scale(Vector3 v){
            var _var144 = v;
            return this.Deform((p)  => p.Multiply(_var144));
        }

// Scale(Quad3D, Number):Quad3D; [IDeformable3D=Quad3D;Self=Quad3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Quad3D Scale(Number s){
            var _var145 = s;
            return this.Deform((p)  => p.Multiply(_var145));
        }

// RotateX(Quad3D, Angle):Quad3D; [IDeformable3D=Quad3D;Self=Quad3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Quad3D RotateX(Angle a) => this.Rotate(a.RotateX);
// RotateY(Quad3D, Angle):Quad3D; [IDeformable3D=Quad3D;Self=Quad3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Quad3D RotateY(Angle a) => this.Rotate(a.RotateY);
// RotateZ(Quad3D, Angle):Quad3D; [IDeformable3D=Quad3D;Self=Quad3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Quad3D RotateZ(Angle a) => this.Rotate(a.RotateZ);
// TranslateX(Quad3D, Number):Quad3D; [IDeformable3D=Quad3D;Self=Quad3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Quad3D TranslateX(Number s){
            var _var146 = s;
            return this.Deform((p)  => p.Add((_var146, ((Integer)0), ((Integer)0))));
        }

// TranslateY(Quad3D, Number):Quad3D; [IDeformable3D=Quad3D;Self=Quad3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Quad3D TranslateY(Number s){
            var _var147 = s;
            return this.Deform((p)  => p.Add((((Integer)0), _var147, ((Integer)0))));
        }

// TranslateZ(Quad3D, Number):Quad3D; [IDeformable3D=Quad3D;Self=Quad3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Quad3D TranslateZ(Number s){
            var _var148 = s;
            return this.Deform((p)  => p.Add((((Integer)0), ((Integer)0), _var148)));
        }

// ScaleX(Quad3D, Number):Quad3D; [IDeformable3D=Quad3D;Self=Quad3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Quad3D ScaleX(Number s){
            var _var149 = s;
            return this.Deform((p)  => p.Multiply((_var149, ((Integer)1), ((Integer)1))));
        }

// ScaleY(Quad3D, Number):Quad3D; [IDeformable3D=Quad3D;Self=Quad3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Quad3D ScaleY(Number s){
            var _var150 = s;
            return this.Deform((p)  => p.Multiply((((Integer)1), _var150, ((Integer)1))));
        }

// ScaleZ(Quad3D, Number):Quad3D; [IDeformable3D=Quad3D;Self=Quad3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Quad3D ScaleZ(Number s){
            var _var151 = s;
            return this.Deform((p)  => p.Multiply((((Integer)1), ((Integer)1), _var151)));
        }


        // Unimplemented concept functions
        // PrimitiveSize(Quad3D):Integer; [IPrimitiveGeometry=Quad3D;IPrimitiveGeometry3D=Quad3D;IPointGeometry3D=Quad3D;IPolyLine3D=Quad3D;IPolygon3D=Quad3D;Self=Quad3D;]; <>
        public Integer PrimitiveSize => throw new NotImplementedException();
// NumPrimitives(Quad3D):Integer; [IPrimitiveGeometry=Quad3D;IPrimitiveGeometry3D=Quad3D;IPointGeometry3D=Quad3D;IPolyLine3D=Quad3D;IPolygon3D=Quad3D;Self=Quad3D;]; <>
        public Integer NumPrimitives => throw new NotImplementedException();
// Corners(Quad3D):_T0; [IPrimitiveGeometry3D=Quad3D;IPointGeometry3D=Quad3D;IPolyLine3D=Quad3D;IPolygon3D=Quad3D;Self=Quad3D;]; <_T0:IArray<Vector3>>
        public _T0 Corners<_T0> => throw new NotImplementedException();
// Eval(Quad3D, Number):Vector3; [IProcedural=Quad3D;TOut=TRange;TIn=Number;ICurve=Quad3D;TRange=Vector3;ICurve3D=Quad3D;IPolyLine3D=Quad3D;IPolygon3D=Quad3D;Self=Quad3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector3 Eval(Number t) => throw new NotImplementedException();
}
}
