// Autogenerated file: DO NOT EDIT
// Created on 2025-04-08 12:25:04 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Bounds2D: IBounds<Point2D, Vector2>, IArrayLike<Bounds2D, Point2D>
    {
        // Fields
        [DataMember] public readonly Point2D Min;
        [DataMember] public readonly Point2D Max;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Bounds2D WithMin(Point2D min) => new Bounds2D(min, Max);
        [MethodImpl(AggressiveInlining)] public Bounds2D WithMax(Point2D max) => new Bounds2D(Min, max);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Bounds2D(Point2D min, Point2D max) { Min = min; Max = max; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Bounds2D Create(Point2D min, Point2D max) => new Bounds2D(min, max);

        // Static default implementation
        public static readonly Bounds2D Default = default;

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Point2D, Point2D)(Bounds2D self) => (self.Min, self.Max);
        [MethodImpl(AggressiveInlining)] public static implicit operator Bounds2D((Point2D, Point2D) value) => new Bounds2D(value.Item1, value.Item2);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Point2D min, out Point2D max) { min = Min; max = Max;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Bounds2D other) => Min.Equals(other.Min) && Max.Equals(other.Max);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Bounds2D other) => !Min.Equals(other.Min) && Max.Equals(other.Max);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Bounds2D other ? Equals(other).Value : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Min, Max);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Min\" = {Min}, \"Max\" = {Max} }}";

        // Explicit implementation of interfaces by forwarding properties to fields
        Point2D IBounds<Point2D, Vector2>.Min { [MethodImpl(AggressiveInlining)] get => Min; }
        Point2D IBounds<Point2D, Vector2>.Max { [MethodImpl(AggressiveInlining)] get => Max; }

        // IArrayLike predefined functions
        public Integer NumComponents { [MethodImpl(AggressiveInlining)] get => 2; }
        public IArray<Point2D> Components { [MethodImpl(AggressiveInlining)] get => Intrinsics.MakeArray<Point2D>(Min, Max); }
        [MethodImpl(AggressiveInlining)] public static Bounds2D CreateFromComponents(IArray<Point2D> numbers) => new Bounds2D(numbers[0], numbers[1]);

        [MethodImpl(AggressiveInlining)] public static Bounds2D CreateFromComponent(Point2D x) => new Bounds2D(x, x);

        // Implemented interface functions
        // AMBIGUOUS FUNCTIONS 2
        public Point2D Center { [MethodImpl(AggressiveInlining)] get  => this.Min.Average(this.Max); } 
public IArray<Point2D> Corners { [MethodImpl(AggressiveInlining)] get  => Intrinsics.MakeArray<Point2D>((this.Min.X, this.Min.Y), (this.Max.X, this.Min.Y), (this.Min.X, this.Max.Y), (this.Max.X, this.Max.Y), (this.Min.X, this.Min.Y), (this.Max.X, this.Min.Y), (this.Min.X, this.Max.Y), (this.Max.X, this.Max.Y)); } 
public static Bounds2D Empty { [MethodImpl(AggressiveInlining)] get  => (Constants.MaxPoint2D, Constants.MinPoint2D); } 
public Bounds3D To3D { [MethodImpl(AggressiveInlining)] get  => (this.Min.To3D, this.Max.To3D); } 
public Bounds3D Bounds3D { [MethodImpl(AggressiveInlining)] get  => this.To3D; } 
[MethodImpl(AggressiveInlining)]  public static implicit operator Bounds3D(Bounds2D x) => x.Bounds3D;
        [MethodImpl(AggressiveInlining)]  public Bounds2D Deform(System.Func<Point2D, Point2D> f) => this.Corners.Map(f).Bounds();
public Vector2 Size { [MethodImpl(AggressiveInlining)] get  => this.Max.Subtract(this.Min); } 
[MethodImpl(AggressiveInlining)]  public Point2D Lerp(Number amount) => this.Min.Lerp(this.Max, amount);
[MethodImpl(AggressiveInlining)]  public Boolean Contains(Point2D value) => value.Between(this.Min, this.Max);
[MethodImpl(AggressiveInlining)]  public Boolean Contains(Bounds2D y) => this.Contains(y.Min).And(this.Contains(y.Max));
[MethodImpl(AggressiveInlining)]  public Boolean Overlaps(Bounds2D y) => this.Contains(y.Min).Or(this.Contains(y.Max).Or(y.Contains(this.Min).Or(y.Contains(this.Max))));
[MethodImpl(AggressiveInlining)]  public Bounds2D Recenter(Point2D c) => (c.Subtract(this.Size.Half), c.Add(this.Size.Half));
[MethodImpl(AggressiveInlining)]  public Bounds2D Clamp(Bounds2D y) => (this.Clamp(y.Min), this.Clamp(y.Max));
[MethodImpl(AggressiveInlining)]  public Point2D Clamp(Point2D value) => value.Clamp(this.Min, this.Max);
[MethodImpl(AggressiveInlining)]  public Bounds2D Include(Point2D value) => (this.Min.Min(value), this.Max.Max(value));
[MethodImpl(AggressiveInlining)]  public Bounds2D Include(Bounds2D y) => this.Include(y.Min).Include(y.Max);
[MethodImpl(AggressiveInlining)]  public Point2D At(Integer n) => this.Components.At(n);
public Point2D this[Integer n] { [MethodImpl(AggressiveInlining)]  get => At(n); }
        [MethodImpl(AggressiveInlining)]  public Bounds2D MapComponents(System.Func<Point2D, Point2D> f) => Bounds2D.CreateFromComponents(this.Components.Map(f));
[MethodImpl(AggressiveInlining)]  public Bounds2D ZipComponents(Bounds2D b, System.Func<Point2D, Point2D, Point2D> f) => Bounds2D.CreateFromComponents(this.Components.Zip(b.Components, f));
[MethodImpl(AggressiveInlining)]  public Bounds2D ZipComponents(Bounds2D b, Bounds2D c, System.Func<Point2D, Point2D, Point2D, Point2D> f) => Bounds2D.CreateFromComponents(this.Components.Zip(b.Components, c.Components, f));
[MethodImpl(AggressiveInlining)]  public Boolean AllZipComponents(Bounds2D b, System.Func<Point2D, Point2D, Boolean> f) => this.Components.Zip(b.Components, f).All((x)  => x);
[MethodImpl(AggressiveInlining)]  public Boolean AllZipComponents(Bounds2D b, Bounds2D c, System.Func<Point2D, Point2D, Point2D, Boolean> f) => this.Components.Zip(b.Components, c.Components, f).All((x)  => x);
[MethodImpl(AggressiveInlining)]  public Boolean AnyZipComponents(Bounds2D b, System.Func<Point2D, Point2D, Boolean> f) => this.Components.Zip(b.Components, f).Any((x)  => x);
[MethodImpl(AggressiveInlining)]  public Boolean AnyZipComponents(Bounds2D b, Bounds2D c, System.Func<Point2D, Point2D, Point2D, Boolean> f) => this.Components.Zip(b.Components, c.Components, f).Any((x)  => x);
[MethodImpl(AggressiveInlining)]  public Boolean AllComponents(System.Func<Point2D, Boolean> predicate) => this.Components.All(predicate);
[MethodImpl(AggressiveInlining)]  public Boolean AnyComponent(System.Func<Point2D, Boolean> predicate) => this.Components.Any(predicate);

        // Unimplemented interface functions
    }
}
