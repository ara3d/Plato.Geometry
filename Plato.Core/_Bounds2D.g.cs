// Autogenerated file: DO NOT EDIT
// Created on 2025-03-14 12:36:59 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Bounds2D: IBounds<Vector2>
    {
        // Fields
        [DataMember] public readonly Vector2 Min;
        [DataMember] public readonly Vector2 Max;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Bounds2D WithMin(Vector2 min) => new Bounds2D(min, Max);
        [MethodImpl(AggressiveInlining)] public Bounds2D WithMax(Vector2 max) => new Bounds2D(Min, max);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Bounds2D(Vector2 min, Vector2 max) { Min = min; Max = max; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Bounds2D Create(Vector2 min, Vector2 max) => new Bounds2D(min, max);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Vector2, Vector2)(Bounds2D self) => (self.Min, self.Max);
        [MethodImpl(AggressiveInlining)] public static implicit operator Bounds2D((Vector2, Vector2) value) => new(value.Item1, value.Item2);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Vector2 min, out Vector2 max) { min = Min; max = Max;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Bounds2D other) => Min.Equals(other.Min) && Max.Equals(other.Max);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Bounds2D other) => !Min.Equals(other.Min) && Max.Equals(other.Max);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Bounds2D other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Min, Max);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Min\" = {Min}, \"Max\" = {Max} }}";

        // Explicit implementation of interfaces by forwarding properties to fields
        Vector2 IBounds<Vector2>.Min { [MethodImpl(AggressiveInlining)] get => Min; }
        Vector2 IBounds<Vector2>.Max { [MethodImpl(AggressiveInlining)] get => Max; }

        // Implemented interface functions
        // To3D(Bounds2D):Bounds3D; [Self=Bounds2D;]; <>
        public Bounds3D To3D { [MethodImpl(AggressiveInlining)] get  => (this.Min.To3D, this.Max.To3D); } 
// Bounds3D(Bounds2D):Bounds3D; [Self=Bounds2D;]; <>
        public Bounds3D Bounds3D { [MethodImpl(AggressiveInlining)] get  => this.To3D; } 
[MethodImpl(AggressiveInlining)]  public static implicit operator Bounds3D(Bounds2D x) => x.Bounds3D;
        // Size(Bounds2D):Vector2; [$T=Vector2;IBounds=Bounds2D;T=Vector2;Self=Bounds2D;]; <>
        public Vector2 Size { [MethodImpl(AggressiveInlining)] get  => this.Max.Subtract(this.Min); } 
// Lerp(Bounds2D, Number):Vector2; [$T=Vector2;IBounds=Bounds2D;T=Vector2;Self=Bounds2D;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector2 Lerp(Number amount) => this.Min.Lerp(this.Max, amount);
// Center(Bounds2D):Vector2; [$T=Vector2;IBounds=Bounds2D;T=Vector2;Self=Bounds2D;]; <>
        public Vector2 Center { [MethodImpl(AggressiveInlining)] get  => this.Lerp(((Number)0.5)); } 
// Contains(Bounds2D, Vector2):Boolean; [$T=Vector2;IBounds=Bounds2D;T=Vector2;Self=Bounds2D;]; <>
        [MethodImpl(AggressiveInlining)]  public Boolean Contains(Vector2 value) => value.Between(this.Min, this.Max);
// Contains(Bounds2D, Bounds2D):Boolean; [$T=Vector2;IBounds=Bounds2D;T=Vector2;Self=Bounds2D;]; <>
        [MethodImpl(AggressiveInlining)]  public Boolean Contains(Bounds2D y) => this.Contains(y.Min).And(this.Contains(y.Max));
// Overlaps(Bounds2D, Bounds2D):Boolean; [$T=Vector2;IBounds=Bounds2D;T=Vector2;Self=Bounds2D;]; <>
        [MethodImpl(AggressiveInlining)]  public Boolean Overlaps(Bounds2D y) => this.Contains(y.Min).Or(this.Contains(y.Max).Or(y.Contains(this.Min).Or(y.Contains(this.Max))));
// Recenter(Bounds2D, Vector2):Bounds2D; [$T=Vector2;IBounds=Bounds2D;T=Vector2;Self=Bounds2D;]; <>
        [MethodImpl(AggressiveInlining)]  public Bounds2D Recenter(Vector2 c) => (c.Subtract(this.Size.Half), c.Add(this.Size.Half));
// Clamp(Bounds2D, Bounds2D):Bounds2D; [$T=Vector2;IBounds=Bounds2D;T=Vector2;Self=Bounds2D;]; <>
        [MethodImpl(AggressiveInlining)]  public Bounds2D Clamp(Bounds2D y) => (this.Clamp(y.Min), this.Clamp(y.Max));
// Clamp(Bounds2D, Vector2):Vector2; [$T=Vector2;IBounds=Bounds2D;T=Vector2;Self=Bounds2D;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector2 Clamp(Vector2 value) => value.Clamp(this.Min, this.Max);
// Include(Bounds2D, Vector2):Bounds2D; [$T=Vector2;IBounds=Bounds2D;T=Vector2;Self=Bounds2D;]; <>
        [MethodImpl(AggressiveInlining)]  public Bounds2D Include(Vector2 value) => (this.Min.Min(value), this.Max.Max(value));
// Include(Bounds2D, Bounds2D):Bounds2D; [$T=Vector2;IBounds=Bounds2D;T=Vector2;Self=Bounds2D;]; <>
        [MethodImpl(AggressiveInlining)]  public Bounds2D Include(Bounds2D y) => this.Include(y.Min).Include(y.Max);

        // Unimplemented concept functions
    }
}
