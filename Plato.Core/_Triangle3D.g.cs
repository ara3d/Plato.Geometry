// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 8:08:08 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
public partial struct Triangle3D: IPolygon3D, IDeformable3D<Triangle3D>
{
    // Fields
    [DataMember] public readonly Vector3 A;
    [DataMember] public readonly Vector3 B;
    [DataMember] public readonly Vector3 C;

    // With functions 
    [MethodImpl(AggressiveInlining)] public Triangle3D WithA(Vector3 a) => new Triangle3D(a, B, C);
    [MethodImpl(AggressiveInlining)] public Triangle3D WithB(Vector3 b) => new Triangle3D(A, b, C);
    [MethodImpl(AggressiveInlining)] public Triangle3D WithC(Vector3 c) => new Triangle3D(A, B, c);

    // Regular Constructor
    [MethodImpl(AggressiveInlining)] public Triangle3D(Vector3 a, Vector3 b, Vector3 c) { A = a; B = b; C = c; }

    // Static factory function
    [MethodImpl(AggressiveInlining)] public static Triangle3D Create(Vector3 a, Vector3 b, Vector3 c) => new Triangle3D(a, b, c);

    // Implicit converters to/from value-tuples and deconstructor
    [MethodImpl(AggressiveInlining)] public static implicit operator (Vector3, Vector3, Vector3)(Triangle3D self) => (self.A, self.B, self.C);
    [MethodImpl(AggressiveInlining)] public static implicit operator Triangle3D((Vector3, Vector3, Vector3) value) => new(value.Item1, value.Item2, value.Item3);
    [MethodImpl(AggressiveInlining)] public void Deconstruct(out Vector3 a, out Vector3 b, out Vector3 c) { a = A; b = B; c = C;  }

    // Object virtual function overrides: Equals, GetHashCode, ToString
    [MethodImpl(AggressiveInlining)] public Boolean Equals(Triangle3D other) => A.Equals(other.A) && B.Equals(other.B) && C.Equals(other.C);
    [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Triangle3D other) => !A.Equals(other.A) && B.Equals(other.B) && C.Equals(other.C);
    [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Triangle3D other ? Equals(other) : false;
    [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(A, B, C);
    [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"A\" = {A}, \"B\" = {B}, \"C\" = {C} }}";

    // Explicit implementation of interfaces by forwarding properties to fields

    // Implemented concept functions and type functions
    public Triangle3D Flip { [MethodImpl(AggressiveInlining)] get  => (this.C, this.B, this.A); } 
public Vector3 Normal { [MethodImpl(AggressiveInlining)] get  => this.B.Subtract(this.A).Cross(this.C.Subtract(this.A)).Normalize; } 
public Vector3 Center { [MethodImpl(AggressiveInlining)] get  => this.A.Add(this.B.Add(this.C)).Divide(((Number)3)); } 
public Plane Plane { [MethodImpl(AggressiveInlining)] get  => (this.Normal, this.Normal.Dot(this.A)); } 
[MethodImpl(AggressiveInlining)]  public static implicit operator Plane(Triangle3D t) => t.Plane;
    public Line3D LineA { [MethodImpl(AggressiveInlining)] get  => (this.A, this.B); } 
public Line3D LineB { [MethodImpl(AggressiveInlining)] get  => (this.B, this.C); } 
public Line3D LineC { [MethodImpl(AggressiveInlining)] get  => (this.C, this.A); } 
[MethodImpl(AggressiveInlining)]  public Vector3 Barycentric(Vector2 uv) => this.A.Barycentric(this.B, this.C, uv);
public LineArray3D LineArray3D { [MethodImpl(AggressiveInlining)] get  => new LineArray3D(this.Lines); } 
[MethodImpl(AggressiveInlining)]  public static implicit operator LineArray3D(Triangle3D t) => t.LineArray3D;
    public TriangleArray3D TriangleArray3D { [MethodImpl(AggressiveInlining)] get  => new TriangleArray3D(Intrinsics.MakeArray(this)); } 
[MethodImpl(AggressiveInlining)]  public static implicit operator TriangleArray3D(Triangle3D t) => t.TriangleArray3D;
    public TriangleMesh3D TriangleMesh3D { [MethodImpl(AggressiveInlining)] get  => this.TriangleArray3D; } 
[MethodImpl(AggressiveInlining)]  public static implicit operator TriangleMesh3D(Triangle3D g) => g.TriangleMesh3D;
    public IArray<Vector3> Points { [MethodImpl(AggressiveInlining)] get  => Intrinsics.MakeArray<Vector3>(this.A, this.B, this.C); } 
public IArray<Line3D> Lines { [MethodImpl(AggressiveInlining)] get  => Intrinsics.MakeArray<Line3D>(new Line3D(this.A, this.B), new Line3D(this.B, this.C), new Line3D(this.C, this.A)); } 
[MethodImpl(AggressiveInlining)]  public Triangle3D Deform(System.Func<Vector3, Vector3> f) => (f.Invoke(this.A), f.Invoke(this.B), f.Invoke(this.C));
[MethodImpl(AggressiveInlining)]  public IArray<Vector3> Sample(Integer numPoints){
    var _var747 = this;
    return numPoints.LinearSpace.Map((x) =>  => _var747.Eval(x);
;
}

[MethodImpl(AggressiveInlining)]  public PolyLine3D ToPolyLine3D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
[MethodImpl(AggressiveInlining)]  public Procedural<Number, TR> Combine<TR>(Triangle3D b, System.Func<TR, TR, TR> f){
    var _var750 = b;
    {
        var _var749 = this;
        {
            var _var748 = f;
            return (x) =>  => _var748.Invoke(_var749.Eval(x), _var750.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector3> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var752 = f;
    {
        var _var751 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var751.Eval(_var752.Invoke(x));
;
    }
}

public System.Func<Number, Vector3> Function { [MethodImpl(AggressiveInlining)] get {
    var _var753 = this;
    return (x) =>  => _var753.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Number, Vector3> Compose(Triangle3D b){
    var _var755 = this;
    {
        var _var754 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var754.Eval(_var755.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, TR> Combine<TR>(Triangle3D b, System.Func<TR, TR, TR> f){
    var _var758 = b;
    {
        var _var757 = this;
        {
            var _var756 = f;
            return (x) =>  => _var756.Invoke(_var757.Eval(x), _var758.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var760 = f;
    {
        var _var759 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var759.Eval(_var760.Invoke(x));
;
    }
}

public System.Func<Vector3, Number> Function { [MethodImpl(AggressiveInlining)] get {
    var _var761 = this;
    return (x) =>  => _var761.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, Number> Compose(Triangle3D b){
    var _var763 = this;
    {
        var _var762 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var762.Eval(_var763.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Union(Triangle3D b) => this.Combine(b, (a, b) =>  => a.Max(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Intersection(Triangle3D b) => this.Combine(b, (a, b) =>  => a.Min(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Difference(Triangle3D b) => this.Combine(b, (a, b) =>  => a.Max(b.Negative);

public Procedural<Vector3, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) =>  => x.Negative;
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, Boolean> Threshold(Number threshold){
    var _var764 = threshold;
    return this.Map((x) =>  => x.GreaterThanOrEquals(_var764);
;
}

public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 
[MethodImpl(AggressiveInlining)]  public Triangle3D Deform(IdentityTransform3D t){
    var _var765 = t;
    return this.Deform((v) =>  => _var765.Transform(v);
;
}

[MethodImpl(AggressiveInlining)]  public Triangle3D Deform(MatrixTransform3D t){
    var _var766 = t;
    return this.Deform((v) =>  => _var766.Transform(v);
;
}

[MethodImpl(AggressiveInlining)]  public Triangle3D Deform(Translation3D t){
    var _var767 = t;
    return this.Deform((v) =>  => _var767.Transform(v);
;
}

[MethodImpl(AggressiveInlining)]  public Triangle3D Deform(Rotation3D t){
    var _var768 = t;
    return this.Deform((v) =>  => _var768.Transform(v);
;
}

[MethodImpl(AggressiveInlining)]  public Triangle3D Deform(LookRotation t){
    var _var769 = t;
    return this.Deform((v) =>  => _var769.Transform(v);
;
}

[MethodImpl(AggressiveInlining)]  public Triangle3D Deform(Scaling3D t){
    var _var770 = t;
    return this.Deform((v) =>  => _var770.Transform(v);
;
}

[MethodImpl(AggressiveInlining)]  public Triangle3D Deform(TRSTransform3D t){
    var _var771 = t;
    return this.Deform((v) =>  => _var771.Transform(v);
;
}

[MethodImpl(AggressiveInlining)]  public Triangle3D Deform(Pose3D t){
    var _var772 = t;
    return this.Deform((v) =>  => _var772.Transform(v);
;
}

[MethodImpl(AggressiveInlining)]  public Triangle3D Deform(AxisAngle t){
    var _var773 = t;
    return this.Deform((v) =>  => _var773.Transform(v);
;
}

[MethodImpl(AggressiveInlining)]  public Triangle3D Deform(EulerAngles t){
    var _var774 = t;
    return this.Deform((v) =>  => _var774.Transform(v);
;
}

[MethodImpl(AggressiveInlining)]  public Triangle3D Deform(Perspective3D t){
    var _var775 = t;
    return this.Deform((v) =>  => _var775.Transform(v);
;
}

[MethodImpl(AggressiveInlining)]  public Triangle3D Deform(Orthographic3D t){
    var _var776 = t;
    return this.Deform((v) =>  => _var776.Transform(v);
;
}

[MethodImpl(AggressiveInlining)]  public Triangle3D Deform(PlaneProjection t){
    var _var777 = t;
    return this.Deform((v) =>  => _var777.Transform(v);
;
}

[MethodImpl(AggressiveInlining)]  public Triangle3D Translate(Vector3 v){
    var _var778 = v;
    return this.Deform((p) =>  => p.Add(_var778);
;
}

[MethodImpl(AggressiveInlining)]  public Triangle3D Rotate(Quaternion q) => this.Deform(q);
[MethodImpl(AggressiveInlining)]  public Triangle3D Scale(Vector3 v){
    var _var779 = v;
    return this.Deform((p) =>  => p.Multiply(_var779);
;
}

[MethodImpl(AggressiveInlining)]  public Triangle3D Scale(Number s){
    var _var780 = s;
    return this.Deform((p) =>  => p.Multiply(_var780);
;
}

[MethodImpl(AggressiveInlining)]  public Triangle3D RotateX(Angle a) => this.Rotate(a.RotateX);
[MethodImpl(AggressiveInlining)]  public Triangle3D RotateY(Angle a) => this.Rotate(a.RotateY);
[MethodImpl(AggressiveInlining)]  public Triangle3D RotateZ(Angle a) => this.Rotate(a.RotateZ);
[MethodImpl(AggressiveInlining)]  public Triangle3D TranslateX(Number s){
    var _var781 = s;
    return this.Deform((p) =>  => p.Add((_var781, ((Integer)0), ((Integer)0)));
;
}

[MethodImpl(AggressiveInlining)]  public Triangle3D TranslateY(Number s){
    var _var782 = s;
    return this.Deform((p) =>  => p.Add((((Integer)0), _var782, ((Integer)0)));
;
}

[MethodImpl(AggressiveInlining)]  public Triangle3D TranslateZ(Number s){
    var _var783 = s;
    return this.Deform((p) =>  => p.Add((((Integer)0), ((Integer)0), _var783));
;
}

[MethodImpl(AggressiveInlining)]  public Triangle3D ScaleX(Number s){
    var _var784 = s;
    return this.Deform((p) =>  => p.Multiply((_var784, ((Integer)1), ((Integer)1)));
;
}

[MethodImpl(AggressiveInlining)]  public Triangle3D ScaleY(Number s){
    var _var785 = s;
    return this.Deform((p) =>  => p.Multiply((((Integer)1), _var785, ((Integer)1)));
;
}

[MethodImpl(AggressiveInlining)]  public Triangle3D ScaleZ(Number s){
    var _var786 = s;
    return this.Deform((p) =>  => p.Multiply((((Integer)1), ((Integer)1), _var786));
;
}


    // Unimplemented concept functions
    [MethodImpl(AggressiveInlining)]  public Number Distance(Vector3 p) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public Number Eval(Vector3 t) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public Vector3 Eval(Number t) => throw new NotImplementedException();
public IArray<Vector3> Corners => throw new NotImplementedException();
public Integer PrimitiveSize => throw new NotImplementedException();
public Integer NumPrimitives => throw new NotImplementedException();
}
Plato.CSharpWriter.CSharpConcreteTypeWriter}
