// Autogenerated file: DO NOT EDIT
// Created on 2025-04-08 12:25:04 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Triangle3D: IPolygon3D<Triangle3D>, IDeformable3D<Triangle3D>, IArrayLike<Triangle3D, Point3D>
    {
        // Fields
        [DataMember] public readonly Point3D A;
        [DataMember] public readonly Point3D B;
        [DataMember] public readonly Point3D C;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Triangle3D WithA(Point3D a) => new Triangle3D(a, B, C);
        [MethodImpl(AggressiveInlining)] public Triangle3D WithB(Point3D b) => new Triangle3D(A, b, C);
        [MethodImpl(AggressiveInlining)] public Triangle3D WithC(Point3D c) => new Triangle3D(A, B, c);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Triangle3D(Point3D a, Point3D b, Point3D c) { A = a; B = b; C = c; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Triangle3D Create(Point3D a, Point3D b, Point3D c) => new Triangle3D(a, b, c);

        // Static default implementation
        public static readonly Triangle3D Default = default;

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Point3D, Point3D, Point3D)(Triangle3D self) => (self.A, self.B, self.C);
        [MethodImpl(AggressiveInlining)] public static implicit operator Triangle3D((Point3D, Point3D, Point3D) value) => new Triangle3D(value.Item1, value.Item2, value.Item3);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Point3D a, out Point3D b, out Point3D c) { a = A; b = B; c = C;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Triangle3D other) => A.Equals(other.A) && B.Equals(other.B) && C.Equals(other.C);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Triangle3D other) => !A.Equals(other.A) && B.Equals(other.B) && C.Equals(other.C);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Triangle3D other ? Equals(other).Value : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(A, B, C);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"A\" = {A}, \"B\" = {B}, \"C\" = {C} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // IArrayLike predefined functions
        public Integer NumComponents { [MethodImpl(AggressiveInlining)] get => 3; }
        public IArray<Point3D> Components { [MethodImpl(AggressiveInlining)] get => Intrinsics.MakeArray<Point3D>(A, B, C); }
        [MethodImpl(AggressiveInlining)] public static Triangle3D CreateFromComponents(IArray<Point3D> numbers) => new Triangle3D(numbers[0], numbers[1], numbers[2]);

        [MethodImpl(AggressiveInlining)] public static Triangle3D CreateFromComponent(Point3D x) => new Triangle3D(x, x, x);

        // Implemented interface functions
        public Number Area { [MethodImpl(AggressiveInlining)] get  => this.CrossProductA.Magnitude; } 
public Vector3 CrossProductA { [MethodImpl(AggressiveInlining)] get  => this.B.Subtract(this.A).Cross(this.C.Subtract(this.A)); } 
public Triangle3D Flip { [MethodImpl(AggressiveInlining)] get  => (this.C, this.B, this.A); } 
public Vector3 Normal { [MethodImpl(AggressiveInlining)] get  => this.CrossProductA.Normalize; } 
public Point3D Center { [MethodImpl(AggressiveInlining)] get  => this.A.Add(this.B.Add(this.C)).Divide(((Number)3)); } 
public Plane Plane { [MethodImpl(AggressiveInlining)] get  => (this.Normal, this.Normal.Dot(this.A)); } 
[MethodImpl(AggressiveInlining)]  public static implicit operator Plane(Triangle3D t) => t.Plane;
        public Line3D LineA { [MethodImpl(AggressiveInlining)] get  => (this.A, this.B); } 
public Line3D LineB { [MethodImpl(AggressiveInlining)] get  => (this.B, this.C); } 
public Line3D LineC { [MethodImpl(AggressiveInlining)] get  => (this.C, this.A); } 
[MethodImpl(AggressiveInlining)]  public Point3D Barycentric(Vector2 uv) => this.A.Vector3.Barycentric(this.B, this.C, uv);
public IArray<Point3D> Points { [MethodImpl(AggressiveInlining)] get  => Intrinsics.MakeArray<Point3D>(this.A, this.B, this.C); } 
// AMBIGUOUS FUNCTIONS 2
        public IArray<Line3D> Lines { [MethodImpl(AggressiveInlining)] get  => Intrinsics.MakeArray<Line3D>(this.LineA, this.LineB, this.LineC); } 
[MethodImpl(AggressiveInlining)]  public Triangle3D Deform(System.Func<Point3D, Point3D> f) => (f.Invoke(this.A), f.Invoke(this.B), f.Invoke(this.C));
[MethodImpl(AggressiveInlining)]  public Point3D Point(Integer index) => this.Points.At(index);
[MethodImpl(AggressiveInlining)]  public Triangle3D Triangle(Integer3 f) => (this.Point(f.A), this.Point(f.B), this.Point(f.C));
[MethodImpl(AggressiveInlining)]  public Quad3D Quad(Integer4 f) => (this.Point(f.A), this.Point(f.B), this.Point(f.C), this.Point(f.D));
public Bounds3D Bounds { [MethodImpl(AggressiveInlining)] get  => this.Points.Bounds(); } 
[MethodImpl(AggressiveInlining)]  public Triangle3D Deform<_T0>(_T0 t) where _T0 : ITransform3D{
            var _var125 = t;
            return this.Deform((v)  => v.Vector3.Transform(_var125.Matrix));
        }

[MethodImpl(AggressiveInlining)]  public Triangle3D Scale(Vector3 v){
            var _var126 = v;
            return this.Deform((p)  => p.Vector3.Multiply(_var126));
        }

[MethodImpl(AggressiveInlining)]  public Triangle3D Scale(Number s) => this.Scale((s, s, s));
[MethodImpl(AggressiveInlining)]  public Triangle3D ScaleX(Number s) => this.Scale((s, ((Integer)1), ((Integer)1)));
[MethodImpl(AggressiveInlining)]  public Triangle3D ScaleY(Number s) => this.Scale((((Integer)1), s, ((Integer)1)));
[MethodImpl(AggressiveInlining)]  public Triangle3D ScaleZ(Number s) => this.Scale((((Integer)1), ((Integer)1), s));
[MethodImpl(AggressiveInlining)]  public Triangle3D Rotate(Quaternion q){
            var _var127 = q;
            return this.Deform((v)  => _var127.Transform(v));
        }

[MethodImpl(AggressiveInlining)]  public Triangle3D RotateX(Angle a) => this.Rotate(a.RotateX);
[MethodImpl(AggressiveInlining)]  public Triangle3D RotateY(Angle a) => this.Rotate(a.RotateY);
[MethodImpl(AggressiveInlining)]  public Triangle3D RotateZ(Angle a) => this.Rotate(a.RotateZ);
[MethodImpl(AggressiveInlining)]  public Triangle3D Translate(Vector3 v){
            var _var128 = v;
            return this.Deform((p)  => p.Add(_var128));
        }

[MethodImpl(AggressiveInlining)]  public Triangle3D TranslateX(Number s) => this.Translate(s.XVector3);
[MethodImpl(AggressiveInlining)]  public Triangle3D TranslateY(Number s) => this.Translate(s.YVector3);
[MethodImpl(AggressiveInlining)]  public Triangle3D TranslateZ(Number s) => this.Translate(s.ZVector3);
[MethodImpl(AggressiveInlining)]  public IArray<Point3D> Sample(Integer numPoints){
            var _var129 = this;
            return numPoints.LinearSpace.Map((x)  => _var129.Eval(x));
        }

[MethodImpl(AggressiveInlining)]  public PolyLine3D ToPolyLine3D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 
[MethodImpl(AggressiveInlining)]  public Point3D At(Integer n) => this.Components.At(n);
public Point3D this[Integer n] { [MethodImpl(AggressiveInlining)]  get => At(n); }
        [MethodImpl(AggressiveInlining)]  public Triangle3D MapComponents(System.Func<Point3D, Point3D> f) => Triangle3D.CreateFromComponents(this.Components.Map(f));
[MethodImpl(AggressiveInlining)]  public Triangle3D ZipComponents(Triangle3D b, System.Func<Point3D, Point3D, Point3D> f) => Triangle3D.CreateFromComponents(this.Components.Zip(b.Components, f));
[MethodImpl(AggressiveInlining)]  public Triangle3D ZipComponents(Triangle3D b, Triangle3D c, System.Func<Point3D, Point3D, Point3D, Point3D> f) => Triangle3D.CreateFromComponents(this.Components.Zip(b.Components, c.Components, f));
[MethodImpl(AggressiveInlining)]  public Boolean AllZipComponents(Triangle3D b, System.Func<Point3D, Point3D, Boolean> f) => this.Components.Zip(b.Components, f).All((x)  => x);
[MethodImpl(AggressiveInlining)]  public Boolean AllZipComponents(Triangle3D b, Triangle3D c, System.Func<Point3D, Point3D, Point3D, Boolean> f) => this.Components.Zip(b.Components, c.Components, f).All((x)  => x);
[MethodImpl(AggressiveInlining)]  public Boolean AnyZipComponents(Triangle3D b, System.Func<Point3D, Point3D, Boolean> f) => this.Components.Zip(b.Components, f).Any((x)  => x);
[MethodImpl(AggressiveInlining)]  public Boolean AnyZipComponents(Triangle3D b, Triangle3D c, System.Func<Point3D, Point3D, Point3D, Boolean> f) => this.Components.Zip(b.Components, c.Components, f).Any((x)  => x);
[MethodImpl(AggressiveInlining)]  public Boolean AllComponents(System.Func<Point3D, Boolean> predicate) => this.Components.All(predicate);
[MethodImpl(AggressiveInlining)]  public Boolean AnyComponent(System.Func<Point3D, Boolean> predicate) => this.Components.Any(predicate);

        // Unimplemented interface functions
        [MethodImpl(AggressiveInlining)]  public Point3D Eval(Number t) => throw new NotImplementedException();
}
}
