// Autogenerated file: DO NOT EDIT
// Created on 2025-04-08 12:25:04 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Ray2D: IValue
    {
        // Fields
        [DataMember] public readonly Point2D Origin;
        [DataMember] public readonly Vector2 Direction;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Ray2D WithOrigin(Point2D origin) => new Ray2D(origin, Direction);
        [MethodImpl(AggressiveInlining)] public Ray2D WithDirection(Vector2 direction) => new Ray2D(Origin, direction);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Ray2D(Point2D origin, Vector2 direction) { Origin = origin; Direction = direction; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Ray2D Create(Point2D origin, Vector2 direction) => new Ray2D(origin, direction);

        // Static default implementation
        public static readonly Ray2D Default = default;

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Point2D, Vector2)(Ray2D self) => (self.Origin, self.Direction);
        [MethodImpl(AggressiveInlining)] public static implicit operator Ray2D((Point2D, Vector2) value) => new Ray2D(value.Item1, value.Item2);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Point2D origin, out Vector2 direction) { origin = Origin; direction = Direction;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Ray2D other) => Origin.Equals(other.Origin) && Direction.Equals(other.Direction);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Ray2D other) => !Origin.Equals(other.Origin) && Direction.Equals(other.Direction);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Ray2D other ? Equals(other).Value : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Origin, Direction);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Origin\" = {Origin}, \"Direction\" = {Direction} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented interface functions
        public Ray3D To3D { [MethodImpl(AggressiveInlining)] get  => (this.Origin.To3D, this.Direction.To3D); } 
public Ray3D Ray3D { [MethodImpl(AggressiveInlining)] get  => this.To3D; } 
[MethodImpl(AggressiveInlining)]  public static implicit operator Ray3D(Ray2D x) => x.Ray3D;
        [MethodImpl(AggressiveInlining)]  public Ray2D Deform(System.Func<Point2D, Point2D> f) => (f.Invoke(this.Origin), f.Invoke(this.Origin.Add(this.Direction)).Vector2.Normalize);

        // Unimplemented interface functions
    }
}
