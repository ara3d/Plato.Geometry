// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 8:08:08 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
public partial struct TschirnhausenCubic: IPolarCurve, IOpenShape
{
    // Fields
    [DataMember] public readonly Number A;

    // With functions 
    [MethodImpl(AggressiveInlining)] public TschirnhausenCubic WithA(Number a) => new TschirnhausenCubic(a);

    // Regular Constructor
    [MethodImpl(AggressiveInlining)] public TschirnhausenCubic(Number a) { A = a; }

    // Static factory function
    [MethodImpl(AggressiveInlining)] public static TschirnhausenCubic Create(Number a) => new TschirnhausenCubic(a);

    // Implicit converters to/from single field
    [MethodImpl(AggressiveInlining)] public static implicit operator Number(TschirnhausenCubic self) => self.A;
    [MethodImpl(AggressiveInlining)] public static implicit operator TschirnhausenCubic(Number value) => new TschirnhausenCubic(value);
    [MethodImpl(AggressiveInlining)] public static implicit operator TschirnhausenCubic(Integer value) => new TschirnhausenCubic(value);
    [MethodImpl(AggressiveInlining)] public static implicit operator TschirnhausenCubic(int value) => new Integer(value);
    [MethodImpl(AggressiveInlining)] public static implicit operator TschirnhausenCubic(float value) => new Number(value);
    [MethodImpl(AggressiveInlining)] public static implicit operator float(TschirnhausenCubic value) => value.A;

    // Object virtual function overrides: Equals, GetHashCode, ToString
    [MethodImpl(AggressiveInlining)] public Boolean Equals(TschirnhausenCubic other) => A.Equals(other.A);
    [MethodImpl(AggressiveInlining)] public Boolean NotEquals(TschirnhausenCubic other) => !A.Equals(other.A);
    [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is TschirnhausenCubic other ? Equals(other) : false;
    [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(A);
    [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"A\" = {A} }}";

    // Explicit implementation of interfaces by forwarding properties to fields

    // Implemented concept functions and type functions
    [MethodImpl(AggressiveInlining)]  public Number GetRadius(Angle t) => t.TschirnhausenCubic(this.A);
[MethodImpl(AggressiveInlining)]  public PolarCoordinate EvalPolar(Angle t) => (this.GetRadius(t), t);
[MethodImpl(AggressiveInlining)]  public Vector2 Eval(Angle t) => this.EvalPolar(t);
[MethodImpl(AggressiveInlining)]  public Vector2 Eval(Number t) => this.Eval(t.Turns);
[MethodImpl(AggressiveInlining)]  public IArray<Vector2> Sample(Integer numPoints){
    var _var419 = this;
    return numPoints.LinearSpace.Map((x) =>  => _var419.Eval(x);
;
}

[MethodImpl(AggressiveInlining)]  public PolyLine2D ToPolyLine2D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
[MethodImpl(AggressiveInlining)]  public Procedural<Number, TR> Combine<TR>(TschirnhausenCubic b, System.Func<TR, TR, TR> f){
    var _var422 = b;
    {
        var _var421 = this;
        {
            var _var420 = f;
            return (x) =>  => _var420.Invoke(_var421.Eval(x), _var422.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector2> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var424 = f;
    {
        var _var423 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var423.Eval(_var424.Invoke(x));
;
    }
}

public System.Func<Number, Vector2> Function { [MethodImpl(AggressiveInlining)] get {
    var _var425 = this;
    return (x) =>  => _var425.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Number, Vector2> Compose(TschirnhausenCubic b){
    var _var427 = this;
    {
        var _var426 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var426.Eval(_var427.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, TR> Combine<TR>(TschirnhausenCubic b, System.Func<TR, TR, TR> f){
    var _var430 = b;
    {
        var _var429 = this;
        {
            var _var428 = f;
            return (x) =>  => _var428.Invoke(_var429.Eval(x), _var430.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var432 = f;
    {
        var _var431 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var431.Eval(_var432.Invoke(x));
;
    }
}

public System.Func<Vector2, Number> Function { [MethodImpl(AggressiveInlining)] get {
    var _var433 = this;
    return (x) =>  => _var433.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Number> Compose(TschirnhausenCubic b){
    var _var435 = this;
    {
        var _var434 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var434.Eval(_var435.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Union(TschirnhausenCubic b) => this.Combine(b, (a, b) =>  => a.Max(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Intersection(TschirnhausenCubic b) => this.Combine(b, (a, b) =>  => a.Min(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Difference(TschirnhausenCubic b) => this.Combine(b, (a, b) =>  => a.Max(b.Negative);

public Procedural<Vector2, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) =>  => x.Negative;
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Boolean> Threshold(Number threshold){
    var _var436 = threshold;
    return this.Map((x) =>  => x.GreaterThanOrEquals(_var436);
;
}

public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)false); } 

    // Unimplemented concept functions
    [MethodImpl(AggressiveInlining)]  public Number Distance(Vector2 p) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public Number Eval(Vector2 t) => throw new NotImplementedException();
}
Plato.CSharpWriter.CSharpConcreteTypeWriter}
