// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 8:08:08 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
public partial struct ArchimedeanSpiral: IPolarCurve, IOpenShape
{
    // Fields
    [DataMember] public readonly Number A;
    [DataMember] public readonly Number B;

    // With functions 
    [MethodImpl(AggressiveInlining)] public ArchimedeanSpiral WithA(Number a) => new ArchimedeanSpiral(a, B);
    [MethodImpl(AggressiveInlining)] public ArchimedeanSpiral WithB(Number b) => new ArchimedeanSpiral(A, b);

    // Regular Constructor
    [MethodImpl(AggressiveInlining)] public ArchimedeanSpiral(Number a, Number b) { A = a; B = b; }

    // Static factory function
    [MethodImpl(AggressiveInlining)] public static ArchimedeanSpiral Create(Number a, Number b) => new ArchimedeanSpiral(a, b);

    // Implicit converters to/from value-tuples and deconstructor
    [MethodImpl(AggressiveInlining)] public static implicit operator (Number, Number)(ArchimedeanSpiral self) => (self.A, self.B);
    [MethodImpl(AggressiveInlining)] public static implicit operator ArchimedeanSpiral((Number, Number) value) => new(value.Item1, value.Item2);
    [MethodImpl(AggressiveInlining)] public void Deconstruct(out Number a, out Number b) { a = A; b = B;  }

    // Object virtual function overrides: Equals, GetHashCode, ToString
    [MethodImpl(AggressiveInlining)] public Boolean Equals(ArchimedeanSpiral other) => A.Equals(other.A) && B.Equals(other.B);
    [MethodImpl(AggressiveInlining)] public Boolean NotEquals(ArchimedeanSpiral other) => !A.Equals(other.A) && B.Equals(other.B);
    [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is ArchimedeanSpiral other ? Equals(other) : false;
    [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(A, B);
    [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"A\" = {A}, \"B\" = {B} }}";

    // Explicit implementation of interfaces by forwarding properties to fields

    // Implemented concept functions and type functions
    [MethodImpl(AggressiveInlining)]  public Number GetRadius(Angle t) => t.ArchimedeanSpiral(this.A, this.B);
[MethodImpl(AggressiveInlining)]  public PolarCoordinate EvalPolar(Angle t) => (this.GetRadius(t), t);
[MethodImpl(AggressiveInlining)]  public Vector2 Eval(Angle t) => this.EvalPolar(t);
[MethodImpl(AggressiveInlining)]  public Vector2 Eval(Number t) => this.Eval(t.Turns);
[MethodImpl(AggressiveInlining)]  public IArray<Vector2> Sample(Integer numPoints){
    var _var329 = this;
    return numPoints.LinearSpace.Map((x) =>  => _var329.Eval(x);
;
}

[MethodImpl(AggressiveInlining)]  public PolyLine2D ToPolyLine2D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
[MethodImpl(AggressiveInlining)]  public Procedural<Number, TR> Combine<TR>(ArchimedeanSpiral b, System.Func<TR, TR, TR> f){
    var _var332 = b;
    {
        var _var331 = this;
        {
            var _var330 = f;
            return (x) =>  => _var330.Invoke(_var331.Eval(x), _var332.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector2> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var334 = f;
    {
        var _var333 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var333.Eval(_var334.Invoke(x));
;
    }
}

public System.Func<Number, Vector2> Function { [MethodImpl(AggressiveInlining)] get {
    var _var335 = this;
    return (x) =>  => _var335.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Number, Vector2> Compose(ArchimedeanSpiral b){
    var _var337 = this;
    {
        var _var336 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var336.Eval(_var337.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, TR> Combine<TR>(ArchimedeanSpiral b, System.Func<TR, TR, TR> f){
    var _var340 = b;
    {
        var _var339 = this;
        {
            var _var338 = f;
            return (x) =>  => _var338.Invoke(_var339.Eval(x), _var340.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var342 = f;
    {
        var _var341 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var341.Eval(_var342.Invoke(x));
;
    }
}

public System.Func<Vector2, Number> Function { [MethodImpl(AggressiveInlining)] get {
    var _var343 = this;
    return (x) =>  => _var343.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Number> Compose(ArchimedeanSpiral b){
    var _var345 = this;
    {
        var _var344 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var344.Eval(_var345.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Union(ArchimedeanSpiral b) => this.Combine(b, (a, b) =>  => a.Max(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Intersection(ArchimedeanSpiral b) => this.Combine(b, (a, b) =>  => a.Min(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Difference(ArchimedeanSpiral b) => this.Combine(b, (a, b) =>  => a.Max(b.Negative);

public Procedural<Vector2, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) =>  => x.Negative;
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Boolean> Threshold(Number threshold){
    var _var346 = threshold;
    return this.Map((x) =>  => x.GreaterThanOrEquals(_var346);
;
}

public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)false); } 

    // Unimplemented concept functions
    [MethodImpl(AggressiveInlining)]  public Number Distance(Vector2 p) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public Number Eval(Vector2 t) => throw new NotImplementedException();
}
Plato.CSharpWriter.CSharpConcreteTypeWriter}
