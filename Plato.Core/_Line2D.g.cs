// Autogenerated file: DO NOT EDIT
// Created on 2025-04-08 12:25:04 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Line2D: IArrayLike<Line2D, Point2D>, IInterval<Point2D>
    {
        // Fields
        [DataMember] public readonly Point2D A;
        [DataMember] public readonly Point2D B;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Line2D WithA(Point2D a) => new Line2D(a, B);
        [MethodImpl(AggressiveInlining)] public Line2D WithB(Point2D b) => new Line2D(A, b);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Line2D(Point2D a, Point2D b) { A = a; B = b; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Line2D Create(Point2D a, Point2D b) => new Line2D(a, b);

        // Static default implementation
        public static readonly Line2D Default = default;

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Point2D, Point2D)(Line2D self) => (self.A, self.B);
        [MethodImpl(AggressiveInlining)] public static implicit operator Line2D((Point2D, Point2D) value) => new Line2D(value.Item1, value.Item2);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Point2D a, out Point2D b) { a = A; b = B;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Line2D other) => A.Equals(other.A) && B.Equals(other.B);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Line2D other) => !A.Equals(other.A) && B.Equals(other.B);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Line2D other ? Equals(other).Value : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(A, B);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"A\" = {A}, \"B\" = {B} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // IArrayLike predefined functions
        public Integer NumComponents { [MethodImpl(AggressiveInlining)] get => 2; }
        public IArray<Point2D> Components { [MethodImpl(AggressiveInlining)] get => Intrinsics.MakeArray<Point2D>(A, B); }
        [MethodImpl(AggressiveInlining)] public static Line2D CreateFromComponents(IArray<Point2D> numbers) => new Line2D(numbers[0], numbers[1]);

        [MethodImpl(AggressiveInlining)] public static Line2D CreateFromComponent(Point2D x) => new Line2D(x, x);

        // Implemented interface functions
        public Number Length { [MethodImpl(AggressiveInlining)] get  => this.B.Subtract(this.A).Length; } 
public Vector2 Direction { [MethodImpl(AggressiveInlining)] get  => this.B.Subtract(this.A); } 
public Ray2D Ray2D { [MethodImpl(AggressiveInlining)] get  => (this.A, this.Direction); } 
[MethodImpl(AggressiveInlining)]  public static implicit operator Ray2D(Line2D x) => x.Ray2D;
        // AMBIGUOUS FUNCTIONS 2
        public Line2D Reverse { [MethodImpl(AggressiveInlining)] get  => (this.B, this.A); } 
public Point2D Start { [MethodImpl(AggressiveInlining)] get  => this.A; } 
public Point2D End { [MethodImpl(AggressiveInlining)] get  => this.B; } 
// AMBIGUOUS FUNCTIONS 2
        public Point2D Center { [MethodImpl(AggressiveInlining)] get  => this.A.Average(this.B); } 
[MethodImpl(AggressiveInlining)]  public Point2D Eval(Number t) => this.A.Lerp(this.B, t);
public Line3D To3D { [MethodImpl(AggressiveInlining)] get  => (this.A.To3D, this.B.To3D); } 
public Line3D Line3D { [MethodImpl(AggressiveInlining)] get  => this.To3D; } 
[MethodImpl(AggressiveInlining)]  public static implicit operator Line3D(Line2D x) => x.Line3D;
        public IArray<Point2D> Points { [MethodImpl(AggressiveInlining)] get  => Intrinsics.MakeArray<Point2D>(this.A, this.B); } 
[MethodImpl(AggressiveInlining)]  public Line2D Deform(System.Func<Point2D, Point2D> f) => (f.Invoke(this.A), f.Invoke(this.B));
[MethodImpl(AggressiveInlining)]  public Point2D At(Integer n) => this.Components.At(n);
public Point2D this[Integer n] { [MethodImpl(AggressiveInlining)]  get => At(n); }
        [MethodImpl(AggressiveInlining)]  public Line2D MapComponents(System.Func<Point2D, Point2D> f) => Line2D.CreateFromComponents(this.Components.Map(f));
[MethodImpl(AggressiveInlining)]  public Line2D ZipComponents(Line2D b, System.Func<Point2D, Point2D, Point2D> f) => Line2D.CreateFromComponents(this.Components.Zip(b.Components, f));
[MethodImpl(AggressiveInlining)]  public Line2D ZipComponents(Line2D b, Line2D c, System.Func<Point2D, Point2D, Point2D, Point2D> f) => Line2D.CreateFromComponents(this.Components.Zip(b.Components, c.Components, f));
[MethodImpl(AggressiveInlining)]  public Boolean AllZipComponents(Line2D b, System.Func<Point2D, Point2D, Boolean> f) => this.Components.Zip(b.Components, f).All((x)  => x);
[MethodImpl(AggressiveInlining)]  public Boolean AllZipComponents(Line2D b, Line2D c, System.Func<Point2D, Point2D, Point2D, Boolean> f) => this.Components.Zip(b.Components, c.Components, f).All((x)  => x);
[MethodImpl(AggressiveInlining)]  public Boolean AnyZipComponents(Line2D b, System.Func<Point2D, Point2D, Boolean> f) => this.Components.Zip(b.Components, f).Any((x)  => x);
[MethodImpl(AggressiveInlining)]  public Boolean AnyZipComponents(Line2D b, Line2D c, System.Func<Point2D, Point2D, Point2D, Boolean> f) => this.Components.Zip(b.Components, c.Components, f).Any((x)  => x);
[MethodImpl(AggressiveInlining)]  public Boolean AllComponents(System.Func<Point2D, Boolean> predicate) => this.Components.All(predicate);
[MethodImpl(AggressiveInlining)]  public Boolean AnyComponent(System.Func<Point2D, Boolean> predicate) => this.Components.Any(predicate);
public Point2D Size { [MethodImpl(AggressiveInlining)] get  => this.End.Subtract(this.Start); } 
[MethodImpl(AggressiveInlining)]  public Point2D Lerp(Number amount) => this.Start.Lerp(this.End, amount);
[MethodImpl(AggressiveInlining)]  public Boolean Contains(Point2D value) => value.Between(this.Start, this.End);
[MethodImpl(AggressiveInlining)]  public Boolean Contains(Line2D y) => this.Contains(y.Start).And(this.Contains(y.End));
[MethodImpl(AggressiveInlining)]  public Boolean Overlaps(Line2D y) => this.Contains(y.Start).Or(this.Contains(y.End).Or(y.Contains(this.Start).Or(y.Contains(this.End))));
[MethodImpl(AggressiveInlining)]  public Tuple2<Line2D, Line2D> SplitAt(Number t) => (this.Left(t), this.Right(t));
public Tuple2<Line2D, Line2D> Split { [MethodImpl(AggressiveInlining)] get  => this.SplitAt(((Number)0.5)); } 
[MethodImpl(AggressiveInlining)]  public Line2D Left(Number t) => (this.Start, this.Lerp(t));
[MethodImpl(AggressiveInlining)]  public Line2D Right(Number t) => (this.Lerp(t), this.End);
[MethodImpl(AggressiveInlining)]  public Line2D MoveTo(Point2D v) => (v, v.Add(this.Size));
public Line2D LeftHalf { [MethodImpl(AggressiveInlining)] get  => this.Left(((Number)0.5)); } 
public Line2D RightHalf { [MethodImpl(AggressiveInlining)] get  => this.Right(((Number)0.5)); } 
[MethodImpl(AggressiveInlining)]  public Line2D Recenter(Point2D c) => (c.Subtract(this.Size.Half), c.Add(this.Size.Half));
[MethodImpl(AggressiveInlining)]  public Line2D Clamp(Line2D y) => (this.Clamp(y.Start), this.Clamp(y.End));
[MethodImpl(AggressiveInlining)]  public Point2D Clamp(Point2D value) => value.Clamp(this.Start, this.End);
[MethodImpl(AggressiveInlining)]  public IArray<Point2D> LinearSpace(Integer count){
            var _var95 = this;
            return count.LinearSpace.Map((x)  => _var95.Lerp(x));
        }

[MethodImpl(AggressiveInlining)]  public IArray<Point2D> LinearSpaceExclusive(Integer count){
            var _var96 = this;
            return count.LinearSpaceExclusive.Map((x)  => _var96.Lerp(x));
        }

[MethodImpl(AggressiveInlining)]  public Line2D Subdivide(Number start, Number end) => (this.Lerp(start), this.Lerp(end));
[MethodImpl(AggressiveInlining)]  public Line2D Subdivide(NumberInterval subInterval) => this.Subdivide(subInterval.Start, subInterval.End);
[MethodImpl(AggressiveInlining)]  public IArray<Line2D> Subdivide(Integer count){
            var _var97 = this;
            return count.Intervals.Map((i)  => _var97.Subdivide(i));
        }


        // Unimplemented interface functions
    }
}
