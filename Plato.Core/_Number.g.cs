// Autogenerated file: DO NOT EDIT
// Created on 2025-03-18 2:15:23 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Number: IRealNumber<Number>
    {
        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Number Create() => new Number();

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Number other) => Value.Equals(other.Value);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Number other) => !Value.Equals(other.Value);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Number other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public static Boolean operator==(Number a, Number b) => a.Equals(b);
        [MethodImpl(AggressiveInlining)] public static Boolean operator!=(Number a, Number b) => !a.Equals(b);
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Value.GetHashCode();
        [MethodImpl(AggressiveInlining)] public override string ToString() => Value.ToString();

        // Explicit implementation of interfaces by forwarding properties to fields

        // IVectorSpace predefined functions
        public Integer NumComponents { [MethodImpl(AggressiveInlining)] get => 1; }
        public IArray<Number> Components { [MethodImpl(AggressiveInlining)] get => Intrinsics.MakeArray<Number>(Value); }
        [MethodImpl(AggressiveInlining)] public Number CreateFromComponents(IArray<Number> numbers) => new Number(numbers[0]);

        [MethodImpl(AggressiveInlining)] public Number CreateFromNumber(Number x) => new Number(x);

        // Implemented interface functions
        [MethodImpl(AggressiveInlining)]  public _T0 Linear<_T0>(_T0 m, _T0 b) where _T0 : INumerical<_T0> => m.Multiply(this).Add(b);
[MethodImpl(AggressiveInlining)]  public _T0 Quadratic<_T0>(_T0 a, _T0 b, _T0 c) where _T0 : INumerical<_T0> => a.Multiply(this.Sqr).Add(b.Multiply(this).Add(c));
[MethodImpl(AggressiveInlining)]  public _T0 Cubic<_T0>(_T0 a, _T0 b, _T0 c, _T0 d) where _T0 : INumerical<_T0> => a.Multiply(this.Cube).Add(b.Multiply(this.Sqr).Add(c.Multiply(this).Add(d)));
[MethodImpl(AggressiveInlining)]  public _T0 Quartic<_T0>(_T0 a, _T0 b, _T0 c, _T0 d, _T0 e) where _T0 : INumerical<_T0> => a.Multiply(this.Pow(((Integer)4))).Add(b.Multiply(this.Cube).Add(c.Multiply(this.Sqr).Add(d.Multiply(this).Add(e))));
[MethodImpl(AggressiveInlining)]  public _T0 LinearDerivative<_T0>(_T0 m, _T0 b) where _T0 : INumerical<_T0> => m;
[MethodImpl(AggressiveInlining)]  public _T0 LinearSecondDerivative<_T0>(_T0 m, _T0 b) where _T0 : INumerical<_T0> => m.Zero;
[MethodImpl(AggressiveInlining)]  public _T0 QuadraticDerivative<_T0>(_T0 a, _T0 b, _T0 c) where _T0 : INumerical<_T0> => a.Multiply(((Number)2)).Multiply(this).Add(b);
[MethodImpl(AggressiveInlining)]  public _T0 QuadraticSecondDerivative<_T0>(_T0 a, _T0 b, _T0 c) where _T0 : INumerical<_T0> => a.Multiply(((Number)2));
[MethodImpl(AggressiveInlining)]  public _T0 CubicDerivative<_T0>(_T0 a, _T0 b, _T0 c, _T0 d) where _T0 : INumerical<_T0> => a.Multiply(((Number)3)).Multiply(this.Sqr).Add(b.Multiply(((Number)2)).Multiply(this).Add(c));
[MethodImpl(AggressiveInlining)]  public _T0 CubicSecondDerivative<_T0>(_T0 a, _T0 b, _T0 c, _T0 d) where _T0 : INumerical<_T0> => a.Multiply(((Number)6)).Multiply(this).Add(b.Multiply(((Number)2)));
[MethodImpl(AggressiveInlining)]  public _T0 QuarticDerivative<_T0>(_T0 a, _T0 b, _T0 c, _T0 d, _T0 e) where _T0 : INumerical<_T0> => a.Multiply(((Number)4)).Multiply(this.Pow(((Integer)3))).Add(b.Multiply(((Number)3)).Multiply(this.Sqr).Add(c.Multiply(((Number)2)).Multiply(this).Add(d)));
[MethodImpl(AggressiveInlining)]  public _T0 QuarticSecondDerivative<_T0>(_T0 a, _T0 b, _T0 c, _T0 d, _T0 e) where _T0 : INumerical<_T0> => a.Multiply(((Number)12)).Multiply(this.Sqr).Add(b.Multiply(((Number)6)).Multiply(this).Add(c.Multiply(((Number)2))));
[MethodImpl(AggressiveInlining)]  public _T0 CubicBezier<_T0>(_T0 a, _T0 b, _T0 c, _T0 d) where _T0 : INumerical<_T0> => a.Multiply(((Number)1).Subtract(this).Cube).Add(b.Multiply(((Number)3).Multiply(((Number)1).Subtract(this).Sqr.Multiply(this))).Add(c.Multiply(((Number)3).Multiply(((Number)1).Subtract(this).Multiply(this.Sqr))).Add(d.Multiply(this.Cube))));
[MethodImpl(AggressiveInlining)]  public _T0 CubicBezierDerivative<_T0>(_T0 a, _T0 b, _T0 c, _T0 d) where _T0 : INumerical<_T0> => b.Subtract(a).Multiply(((Number)3).Multiply(((Number)1).Subtract(this).Sqr)).Add(c.Subtract(b).Multiply(((Number)6).Multiply(((Number)1).Subtract(this).Multiply(this))).Add(d.Subtract(c).Multiply(((Number)3).Multiply(this.Sqr))));
[MethodImpl(AggressiveInlining)]  public _T0 CubicBezierSecondDerivative<_T0>(_T0 a, _T0 b, _T0 c, _T0 d) where _T0 : INumerical<_T0> => c.Subtract(b.Multiply(((Number)2)).Add(a)).Multiply(((Number)6).Multiply(((Number)1).Subtract(this))).Add(d.Subtract(c.Multiply(((Number)2)).Add(b)).Multiply(((Number)6).Multiply(this)));
[MethodImpl(AggressiveInlining)]  public _T0 QuadraticBezier<_T0>(_T0 a, _T0 b, _T0 c) where _T0 : INumerical<_T0> => a.Multiply(((Number)1).Subtract(this).Sqr).Add(b.Multiply(((Number)2).Multiply(((Number)1).Subtract(this).Multiply(this))).Add(c.Multiply(this.Sqr)));
[MethodImpl(AggressiveInlining)]  public _T0 QuadraticBezierDerivative<_T0>(_T0 a, _T0 b, _T0 c) where _T0 : INumerical<_T0> => b.Subtract(a).Multiply(((Number)2).Multiply(((Number)1).Subtract(this))).Add(c.Subtract(b).Multiply(((Number)2).Multiply(this)));
[MethodImpl(AggressiveInlining)]  public _T0 QuadraticBezierSecondDerivative<_T0>(_T0 a, _T0 b, _T0 c) where _T0 : INumerical<_T0> => ((Number)2).Multiply(a.Subtract(b.Multiply(((Number)2)).Add(c)));
[MethodImpl(AggressiveInlining)]  public _T0 Hermite<_T0>(_T0 p0, _T0 p1, _T0 m0, _T0 m1) where _T0 : INumerical<_T0> => p0.Multiply(((Number)2).Multiply(this.Cube).Subtract(((Number)3).Multiply(this.Sqr).Add(((Number)1)))).Add(m0.Multiply(this.Cube.Subtract(((Number)2).Multiply(this.Sqr).Add(this))).Add(p1.Multiply(((Number)2).Multiply(this.Cube).Add(((Number)3).Multiply(this.Sqr)).Negative).Add(m1.Multiply(this.Cube.Subtract(this.Sqr)))));
[MethodImpl(AggressiveInlining)]  public _T0 HermiteDerivative<_T0>(_T0 p0, _T0 p1, _T0 m0, _T0 m1) where _T0 : INumerical<_T0> => p0.Multiply(((Number)6).Multiply(this.Sqr).Subtract(((Number)6).Multiply(this))).Add(m0.Multiply(((Number)3).Multiply(this.Sqr).Subtract(((Number)4).Multiply(this).Add(((Number)1)))).Add(p1.Multiply(((Number)6).Multiply(this.Sqr).Add(((Number)6).Multiply(this)).Negative).Add(m1.Multiply(((Number)3).Multiply(this.Sqr).Subtract(((Number)2).Multiply(this))))));
[MethodImpl(AggressiveInlining)]  public _T0 CatmullRom<_T0>(_T0 p0, _T0 p1, _T0 p2, _T0 p3) where _T0 : INumerical<_T0> => ((Number)0.5).Multiply(p1.Multiply(((Number)2)).Add(p2.Subtract(p0).Multiply(this).Add(p0.Multiply(((Number)2)).Subtract(p1.Multiply(((Number)5)).Add(p2.Multiply(((Number)4)).Subtract(p3))).Multiply(this.Sqr).Add(p0.Add(p1.Multiply(((Number)3)).Subtract(p2.Multiply(((Number)3)).Add(p3))).Negative.Multiply(this.Cube)))));
[MethodImpl(AggressiveInlining)]  public _T0 CatmullRomDerivative<_T0>(_T0 p0, _T0 p1, _T0 p2, _T0 p3) where _T0 : INumerical<_T0> => ((Number)0.5).Multiply(p2.Subtract(p0).Add(((Number)2).Multiply(p0.Multiply(((Number)2)).Subtract(p1.Multiply(((Number)5)).Add(p2.Multiply(((Number)4)).Subtract(p3))).Multiply(this)).Add(((Number)3).Multiply(p0.Add(p1.Multiply(((Number)3)).Subtract(p2.Multiply(((Number)3)).Add(p3))).Negative.Multiply(this.Sqr)))));
public Angle Turns { [MethodImpl(AggressiveInlining)] get  => this.Multiply(Constants.TwoPi); } 
public Angle Degrees { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)360)).Turns; } 
public Angle Gradians { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)400)).Turns; } 
public Angle ArcMinutes { [MethodImpl(AggressiveInlining)] get  => this.Multiply(((Number)60)).Degrees; } 
public Angle ArcSeconds { [MethodImpl(AggressiveInlining)] get  => this.Multiply(((Number)60)).ArcMinutes; } 
[MethodImpl(AggressiveInlining)]  public Boolean Between(Number a, Number b) => this.GreaterThanOrEquals(a).And(this.LessThanOrEquals(b));
[MethodImpl(AggressiveInlining)]  public Boolean AlmostEqual(Number y) => this.Subtract(y).Abs.LessThanOrEquals(this.MultiplyEpsilon(y));
public Boolean AlmostZero { [MethodImpl(AggressiveInlining)] get  => this.Abs.LessThan(Constants.Epsilon); } 
public Boolean AlmostZeroOrOne { [MethodImpl(AggressiveInlining)] get  => this.AlmostEqual(Zero).Or(this.AlmostEqual(One)); } 
public Number Magnitude { [MethodImpl(AggressiveInlining)] get  => this; } 
[MethodImpl(AggressiveInlining)]  public Number MultiplyEpsilon(Number y) => this.Abs.Greater(y.Abs).Multiply(Constants.Epsilon);
[MethodImpl(AggressiveInlining)]  public _T0 Multiply<_T0>(_T0 x) where _T0 : IScalarArithmetic<_T0> => x.Multiply(this);
[MethodImpl(AggressiveInlining)]  public Number SineWave(Number amplitude, Number frequency, Number phase) => amplitude.Multiply(frequency.Multiply(this.Turns.Sin).Add(phase));
[MethodImpl(AggressiveInlining)]  public Number StaircaseFloor(Integer steps) => this.Multiply(steps).Floor.Divide(steps);
[MethodImpl(AggressiveInlining)]  public Number StaircaseCeiling(Integer steps) => this.Multiply(steps).Ceiling.Divide(steps);
[MethodImpl(AggressiveInlining)]  public Number StaircaseRound(Integer steps) => this.Multiply(steps).Round(((Integer)0)).Divide(steps);
[MethodImpl(AggressiveInlining)]  public Vector2 Spiral(Number R, Number r, Number numTurns) => new Vector2(this.Turns.Multiply(numTurns).Cos, this.Turns.Multiply(numTurns).Sin).Multiply(r.Lerp(R, this));
[MethodImpl(AggressiveInlining)]  public Matrix4x4 Multiply(Matrix4x4 value1) => this * value1;
        [MethodImpl(AggressiveInlining)]  public Matrix3x2 Multiply(Matrix3x2 value1) => this * value1;
        [MethodImpl(AggressiveInlining)]  public Vector2 Multiply(Vector2 right) => this * right;
        [MethodImpl(AggressiveInlining)]  public Vector3 Multiply(Vector3 right) => this * right;
        [MethodImpl(AggressiveInlining)]  public Vector4 Multiply(Vector4 right) => this * right;
        [MethodImpl(AggressiveInlining)]  public Vector8 Multiply(Vector8 right) => this * right;
        [MethodImpl(AggressiveInlining)]  public Vector8 Divide(Vector8 right) => this / right;
        [MethodImpl(AggressiveInlining)]  public Number Add(Number b) => this + b;
        [MethodImpl(AggressiveInlining)]  public Number Subtract(Number b) => this - b;
        [MethodImpl(AggressiveInlining)]  public Number Multiply(Number b) => this * b;
        [MethodImpl(AggressiveInlining)]  public Number Divide(Number b) => this / b;
        public Number Negative { [MethodImpl(AggressiveInlining)] get => -this; }
        [MethodImpl(AggressiveInlining)]  public Boolean LessThan(Number b) => this < b;
        [MethodImpl(AggressiveInlining)]  public Boolean LessThanOrEquals(Number b) => this <= b;
        [MethodImpl(AggressiveInlining)]  public Boolean GreaterThan(Number b) => this > b;
        [MethodImpl(AggressiveInlining)]  public Boolean GreaterThanOrEquals(Number b) => this >= b;
        [MethodImpl(AggressiveInlining)]  public Angle Multiply(Angle a) => this * a;
        public Scaling3D UniformScaling3D { [MethodImpl(AggressiveInlining)] get  => new Vector3(this); } 
public Vector2 Vector2 { [MethodImpl(AggressiveInlining)] get  => (this, this); } 
[MethodImpl(AggressiveInlining)]  public static implicit operator Vector2(Number s) => s.Vector2;
        public Vector3 Vector3 { [MethodImpl(AggressiveInlining)] get  => (this, this, this); } 
[MethodImpl(AggressiveInlining)]  public static implicit operator Vector3(Number s) => s.Vector3;
        public Vector4 Vector4 { [MethodImpl(AggressiveInlining)] get  => (this, this, this, this); } 
[MethodImpl(AggressiveInlining)]  public static implicit operator Vector4(Number s) => s.Vector4;
        public Vector8 Vector8 { [MethodImpl(AggressiveInlining)] get  => (this, this, this, this, this, this, this, this); } 
[MethodImpl(AggressiveInlining)]  public static implicit operator Vector8(Number s) => s.Vector8;
        [MethodImpl(AggressiveInlining)]  public Number Lerp(Number b, Number t) => this.Multiply(t.FromOne).Add(b.Multiply(t));
public Number SmoothStep { [MethodImpl(AggressiveInlining)] get  => this.Sqr.Multiply(this.Twice.Add(((Number)3)).Negative); } 
public Number SmootherStep { [MethodImpl(AggressiveInlining)] get  => this.Cube.Multiply(this.Multiply(((Number)6)).Subtract(((Number)15))).Add(((Number)10)); } 
public Number Pow2 { [MethodImpl(AggressiveInlining)] get  => this.Multiply(this); } 
public Number Pow3 { [MethodImpl(AggressiveInlining)] get  => this.Pow2.Multiply(this); } 
public Number Pow4 { [MethodImpl(AggressiveInlining)] get  => this.Pow3.Multiply(this); } 
public Number Pow5 { [MethodImpl(AggressiveInlining)] get  => this.Pow4.Multiply(this); } 
public Number Sqr { [MethodImpl(AggressiveInlining)] get  => this.Pow2; } 
public Number Cube { [MethodImpl(AggressiveInlining)] get  => this.Pow3; } 
public Number Zero { [MethodImpl(AggressiveInlining)] get  => this.CreateFromNumber(((Number)0)); } 
public Number One { [MethodImpl(AggressiveInlining)] get  => this.CreateFromNumber(((Number)1)); } 
[MethodImpl(AggressiveInlining)]  public Number FromNumber(Number x) => this.CreateFromNumber(x);
public Number PlusOne { [MethodImpl(AggressiveInlining)] get  => this.Add(One); } 
public Number MinusOne { [MethodImpl(AggressiveInlining)] get  => this.Subtract(One); } 
public Number FromOne { [MethodImpl(AggressiveInlining)] get  => this.Add(One).Negative; } 
[MethodImpl(AggressiveInlining)]  public Number Component(Integer n) => this.Components.At(n);
public Number MaxComponent { [MethodImpl(AggressiveInlining)] get {
            var r = this.Component(((Integer)0));
            {
                var i = ((Integer)1);
                while (i.LessThan(NumComponents))
                {
                    r = r.Max(this.Component(i));
                    i = i.Add(((Integer)1));
                }

            }
            return r;
        }
         } 
public Number MinComponent { [MethodImpl(AggressiveInlining)] get {
            var r = this.Component(((Integer)0));
            {
                var i = ((Integer)1);
                while (i.LessThan(NumComponents))
                {
                    r = r.Min(this.Component(i));
                    i = i.Add(((Integer)1));
                }

            }
            return r;
        }
         } 
[MethodImpl(AggressiveInlining)]  public Number MapComponents(System.Func<Number, Number> f) => this.CreateFromComponents(this.Components.Map(f));
[MethodImpl(AggressiveInlining)]  public Number ZipComponents(Number b, System.Func<Number, Number, Number> f) => this.CreateFromComponents(this.Components.Zip(b.Components, f));
[MethodImpl(AggressiveInlining)]  public Number ZipComponents(Number b, Number c, System.Func<Number, Number, Number, Number> f) => this.CreateFromComponents(this.Components.Zip(b.Components, c.Components, f));
[MethodImpl(AggressiveInlining)]  public Boolean AllZipComponents(Number b, System.Func<Number, Number, Boolean> f) => this.Components.Zip(b.Components, f).All((x)  => x);
[MethodImpl(AggressiveInlining)]  public Boolean AllZipComponents(Number b, Number c, System.Func<Number, Number, Number, Boolean> f) => this.Components.Zip(b.Components, c.Components, f).All((x)  => x);
[MethodImpl(AggressiveInlining)]  public Boolean AnyZipComponents(Number b, System.Func<Number, Number, Boolean> f) => this.Components.Zip(b.Components, f).Any((x)  => x);
[MethodImpl(AggressiveInlining)]  public Boolean AnyZipComponents(Number b, Number c, System.Func<Number, Number, Number, Boolean> f) => this.Components.Zip(b.Components, c.Components, f).Any((x)  => x);
[MethodImpl(AggressiveInlining)]  public Boolean AllComponents(System.Func<Number, Boolean> predicate) => this.Components.All(predicate);
[MethodImpl(AggressiveInlining)]  public Boolean AnyComponent(System.Func<Number, Boolean> predicate) => this.Components.Any(predicate);
[MethodImpl(AggressiveInlining)]  public Number InversePow(Number n) => this.Pow(n.Reciprocal);
public Number Fract { [MethodImpl(AggressiveInlining)] get  => this.Subtract(this.Floor); } 
public Number ClampZeroOne { [MethodImpl(AggressiveInlining)] get  => this.Clamp(Zero, One); } 
public Boolean BetweenZeroOne { [MethodImpl(AggressiveInlining)] get  => this.Between(Zero, One); } 
public Number Sqrt { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((n)  => n.Sqrt); } 
public Number Half { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)2)); } 
public Number Quarter { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)4)); } 
public Number Eight { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)8)); } 
public Number Sixteenth { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)16)); } 
public Number Tenth { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)10)); } 
public Number Twice { [MethodImpl(AggressiveInlining)] get  => this.Multiply(((Number)2)); } 
public Number Hundred { [MethodImpl(AggressiveInlining)] get  => this.Multiply(((Number)100)); } 
public Number Thousand { [MethodImpl(AggressiveInlining)] get  => this.Multiply(((Number)1000)); } 
public Number Million { [MethodImpl(AggressiveInlining)] get  => this.Thousand.Thousand; } 
public Number Billion { [MethodImpl(AggressiveInlining)] get  => this.Thousand.Million; } 
public Number Hundredth { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)100)); } 
public Number Thousandth { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)1000)); } 
public Number Millionth { [MethodImpl(AggressiveInlining)] get  => this.Thousandth.Thousandth; } 
public Number Billionth { [MethodImpl(AggressiveInlining)] get  => this.Thousandth.Millionth; } 
[MethodImpl(AggressiveInlining)]  public Number Lesser(Number b) => this.LessThanOrEquals(b) ? this : b;
[MethodImpl(AggressiveInlining)]  public Number Greater(Number b) => this.GreaterThanOrEquals(b) ? this : b;

        // Unimplemented concept functions
        [MethodImpl(AggressiveInlining)]  public Number Modulo(Number b) => this % b;
    }
}
