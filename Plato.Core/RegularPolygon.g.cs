// Autogenerated file: DO NOT EDIT
// Created on 2025-03-06 1:31:00 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct RegularPolygon: IPolygon2D
    {
        // Fields
        [DataMember] public readonly Integer NumPoints;

        // With functions 
        [MethodImpl(AggressiveInlining)] public RegularPolygon WithNumPoints(Integer numPoints) => new RegularPolygon(numPoints);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public RegularPolygon(Integer numPoints) { NumPoints = numPoints; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static RegularPolygon Create(Integer numPoints) => new RegularPolygon(numPoints);

        // Implicit converters to/from single field
        [MethodImpl(AggressiveInlining)] public static implicit operator Integer(RegularPolygon self) => self.NumPoints;
        [MethodImpl(AggressiveInlining)] public static implicit operator RegularPolygon(Integer value) => new RegularPolygon(value);

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(RegularPolygon other) => NumPoints.Equals(other.NumPoints);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(RegularPolygon other) => !NumPoints.Equals(other.NumPoints);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is RegularPolygon other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(NumPoints);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"NumPoints\" = {NumPoints} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Array predefined functions
        // Implementation of IReadOnlyList
        [MethodImpl(AggressiveInlining)] public System.Collections.Generic.IEnumerator<Vector2> GetEnumerator() => new ArrayEnumerator<Vector2>(this);
        [MethodImpl(AggressiveInlining)] System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => GetEnumerator();
        Vector2 System.Collections.Generic.IReadOnlyList<Vector2>.this[int n] { [MethodImpl(AggressiveInlining)] get => At(n); }
        int System.Collections.Generic.IReadOnlyCollection<Vector2>.Count { [MethodImpl(AggressiveInlining)] get => this.Count; }

        // Implemented concept functions and type functions
        public IArray<Vector2> Points { [MethodImpl(AggressiveInlining)] get  => this.NumPoints.CirclePoints; } 
        [MethodImpl(AggressiveInlining)]  public Vector2 At(Integer n) => n.Number.Divide(this.NumPoints).Turns.UnitCircle;
        public Vector2 this[Integer n] { [MethodImpl(AggressiveInlining)]  get => At(n); }
        public Integer Count { [MethodImpl(AggressiveInlining)] get  => this.NumPoints; } 
        public IArray<Line2D> Lines { [MethodImpl(AggressiveInlining)] get  => this.Points.WithNext((a, b) => new Line2D(a, b), this.Closed); } 
        [MethodImpl(AggressiveInlining)]  public IArray<Vector2> Sample(Integer numPoints){
            var _var96 = this;
            return numPoints.LinearSpace.Map((x) => _var96.Eval(x));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine2D ToPolyLine2D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
        public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 

        // Unimplemented concept functions
        [MethodImpl(AggressiveInlining)]  public Number Distance(Vector2 p) => throw new NotImplementedException();
        [MethodImpl(AggressiveInlining)]  public Vector2 Eval(Number t) => throw new NotImplementedException();
    }
}
