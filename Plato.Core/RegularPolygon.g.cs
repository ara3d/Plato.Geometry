// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 12:06:56 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct RegularPolygon: IPolygon2D
    {
        // Fields
        [DataMember] public readonly Integer NumPoints;

        // With functions 
        [MethodImpl(AggressiveInlining)] public RegularPolygon WithNumPoints(Integer numPoints) => new RegularPolygon(numPoints);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public RegularPolygon(Integer numPoints) { NumPoints = numPoints; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static RegularPolygon Create(Integer numPoints) => new RegularPolygon(numPoints);

        // Implicit converters to/from single field
        [MethodImpl(AggressiveInlining)] public static implicit operator Integer(RegularPolygon self) => self.NumPoints;
        [MethodImpl(AggressiveInlining)] public static implicit operator RegularPolygon(Integer value) => new RegularPolygon(value);

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(RegularPolygon other) => NumPoints.Equals(other.NumPoints);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(RegularPolygon other) => !NumPoints.Equals(other.NumPoints);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is RegularPolygon other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(NumPoints);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"NumPoints\" = {NumPoints} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented concept functions and type functions
        public IArray<Vector2> Points { [MethodImpl(AggressiveInlining)] get  => this.NumPoints.CirclePoints; } 
        [MethodImpl(AggressiveInlining)]  public Vector2 At(Integer n) => n.Number.Divide(this.NumPoints).Turns.UnitCircle;
        public Vector2 this[Integer n] { [MethodImpl(AggressiveInlining)]  get => At(n); }
        public Integer Count { [MethodImpl(AggressiveInlining)] get  => this.NumPoints; } 
        public IArray<Line2D> Lines { [MethodImpl(AggressiveInlining)] get  => this.Points.WithNext((a, b) => new Line2D(a, b), this.Closed); } 
        [MethodImpl(AggressiveInlining)]  public IArray<Vector2> Sample(Integer numPoints){
            var _var608 = this;
            return numPoints.LinearSpace.Map((x) => _var608.Eval(x));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine2D ToPolyLine2D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
        [MethodImpl(AggressiveInlining)]  public Procedural<Number, TR> Combine<TR>(RegularPolygon b, System.Func<TR, TR, TR> f){
            var _var611 = b;
            {
                var _var610 = this;
                {
                    var _var609 = f;
                    return (x) => _var609.Invoke(_var610.Eval(x), _var611.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector2> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var613 = f;
            {
                var _var612 = this;
                return (x) => _var612.Eval(_var613.Invoke(x));
            }
        }

        public System.Func<Number, Vector2> Function { [MethodImpl(AggressiveInlining)] get {
            var _var614 = this;
            return (x) => _var614.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Number, Vector2> Compose(RegularPolygon b){
            var _var616 = this;
            {
                var _var615 = b;
                return (x) => _var615.Eval(_var616.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, TR> Combine<TR>(RegularPolygon b, System.Func<TR, TR, TR> f){
            var _var619 = b;
            {
                var _var618 = this;
                {
                    var _var617 = f;
                    return (x) => _var617.Invoke(_var618.Eval(x), _var619.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var621 = f;
            {
                var _var620 = this;
                return (x) => _var620.Eval(_var621.Invoke(x));
            }
        }

        public System.Func<Vector2, Number> Function { [MethodImpl(AggressiveInlining)] get {
            var _var622 = this;
            return (x) => _var622.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Number> Compose(RegularPolygon b){
            var _var624 = this;
            {
                var _var623 = b;
                return (x) => _var623.Eval(_var624.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Union(RegularPolygon b) => this.Combine(b, (a, b) => a.Max(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Intersection(RegularPolygon b) => this.Combine(b, (a, b) => a.Min(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Difference(RegularPolygon b) => this.Combine(b, (a, b) => a.Max(b.Negative));
        public Procedural<Vector2, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) => x.Negative); } 
        public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 

        // Unimplemented concept functions
        [MethodImpl(AggressiveInlining)]  public Number Distance(Vector2 p) => throw new NotImplementedException();
        [MethodImpl(AggressiveInlining)]  public Number Eval(Vector2 t) => throw new NotImplementedException();
        [MethodImpl(AggressiveInlining)]  public Vector2 Eval(Number t) => throw new NotImplementedException();
        public IArray<Vector2> Corners => throw new NotImplementedException();
        public Integer PrimitiveSize => throw new NotImplementedException();
        public Integer NumPrimitives => throw new NotImplementedException();
    }
}
