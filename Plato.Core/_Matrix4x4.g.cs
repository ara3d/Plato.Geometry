// Autogenerated file: DO NOT EDIT
// Created on 2025-04-03 1:53:19 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Matrix4x4: IValue, IArrayLike<Matrix4x4, Number>
    {
        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 Create(Vector4 row1, Vector4 row2, Vector4 row3, Vector4 row4) => new Matrix4x4(row1, row2, row3, row4);

        // Static default implementation
        public static readonly Matrix4x4 Default = default;

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Vector4, Vector4, Vector4, Vector4)(Matrix4x4 self) => (self.Row1, self.Row2, self.Row3, self.Row4);
        [MethodImpl(AggressiveInlining)] public static implicit operator Matrix4x4((Vector4, Vector4, Vector4, Vector4) value) => new(value.Item1, value.Item2, value.Item3, value.Item4);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Vector4 row1, out Vector4 row2, out Vector4 row3, out Vector4 row4) { row1 = Row1; row2 = Row2; row3 = Row3; row4 = Row4;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Matrix4x4 other) => Value.Equals(other.Value);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Matrix4x4 other) => !Value.Equals(other.Value);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Matrix4x4 other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public static Boolean operator==(Matrix4x4 a, Matrix4x4 b) => a.Equals(b);
        [MethodImpl(AggressiveInlining)] public static Boolean operator!=(Matrix4x4 a, Matrix4x4 b) => !a.Equals(b);
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Value.GetHashCode();
        [MethodImpl(AggressiveInlining)] public override string ToString() => Value.ToString();

        // Explicit implementation of interfaces by forwarding properties to fields

        // IArrayLike predefined functions
        public Integer NumComponents { [MethodImpl(AggressiveInlining)] get => 16; }
        public IArray<Number> Components { [MethodImpl(AggressiveInlining)] get => Intrinsics.MakeArray<Number>(M11, M12, M13, M14, M21, M22, M23, M24, M31, M32, M33, M34, M41, M42, M43, M44); }
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 CreateFromComponents(IArray<Number> numbers) => new Matrix4x4(numbers[0], numbers[1], numbers[2], numbers[3], numbers[4], numbers[5], numbers[6], numbers[7], numbers[8], numbers[9], numbers[10], numbers[11], numbers[12], numbers[13], numbers[14], numbers[15]);

        [MethodImpl(AggressiveInlining)] public static Matrix4x4 CreateFromComponent(Number x) => new Matrix4x4(x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x);

        // Implemented interface functions
        [MethodImpl(AggressiveInlining)]  public Matrix4x4 Add(Matrix4x4 value2) => this + value2;
        [MethodImpl(AggressiveInlining)]  public Matrix4x4 Subtract(Matrix4x4 value2) => this - value2;
        [MethodImpl(AggressiveInlining)]  public Matrix4x4 Multiply(Matrix4x4 value2) => this * value2;
        [MethodImpl(AggressiveInlining)]  public Matrix4x4 Multiply(Number f) => this * f;
        [MethodImpl(AggressiveInlining)]  public Matrix4x4 Divide(Number f) => this / f;
        public Number M11 { [MethodImpl(AggressiveInlining)] get  => this.Row1.X; } 
public Number M12 { [MethodImpl(AggressiveInlining)] get  => this.Row1.Y; } 
public Number M13 { [MethodImpl(AggressiveInlining)] get  => this.Row1.Z; } 
public Number M14 { [MethodImpl(AggressiveInlining)] get  => this.Row1.W; } 
public Number M21 { [MethodImpl(AggressiveInlining)] get  => this.Row2.X; } 
public Number M22 { [MethodImpl(AggressiveInlining)] get  => this.Row2.Y; } 
public Number M23 { [MethodImpl(AggressiveInlining)] get  => this.Row2.Z; } 
public Number M24 { [MethodImpl(AggressiveInlining)] get  => this.Row2.W; } 
public Number M31 { [MethodImpl(AggressiveInlining)] get  => this.Row3.X; } 
public Number M32 { [MethodImpl(AggressiveInlining)] get  => this.Row3.Y; } 
public Number M33 { [MethodImpl(AggressiveInlining)] get  => this.Row3.Z; } 
public Number M34 { [MethodImpl(AggressiveInlining)] get  => this.Row3.W; } 
public Number M41 { [MethodImpl(AggressiveInlining)] get  => this.Row4.X; } 
public Number M42 { [MethodImpl(AggressiveInlining)] get  => this.Row4.Y; } 
public Number M43 { [MethodImpl(AggressiveInlining)] get  => this.Row4.Z; } 
public Number M44 { [MethodImpl(AggressiveInlining)] get  => this.Row4.W; } 
public Vector4 Column1 { [MethodImpl(AggressiveInlining)] get  => (M11, M21, M31, M41); } 
public Vector4 Column2 { [MethodImpl(AggressiveInlining)] get  => (M12, M22, M32, M42); } 
public Vector4 Column3 { [MethodImpl(AggressiveInlining)] get  => (M13, M23, M33, M43); } 
public Vector4 Column4 { [MethodImpl(AggressiveInlining)] get  => (M14, M24, M34, M44); } 
[MethodImpl(AggressiveInlining)]  public Matrix4x4 WithTranslation(Vector3 v) => this.WithRow4(v.Vector4(((Number)1)));
public Vector3 Translation { [MethodImpl(AggressiveInlining)] get  => (this.M14, this.M24, this.M34); } 
[MethodImpl(AggressiveInlining)]  public Vector3 Transform(Vector3 v) => v.Transform(this);
[MethodImpl(AggressiveInlining)]  public Vector3 TransformNormal(Vector3 v) => v.TransformNormal(this);
[MethodImpl(AggressiveInlining)]  public Vector3 Multiply(Vector3 v) => this.Transform(v);
public static Matrix4x4 Identity { [MethodImpl(AggressiveInlining)] get  => (Vector4.UnitX, Vector4.UnitY, Vector4.UnitZ, Vector4.UnitW); } 
[MethodImpl(AggressiveInlining)]  public Number At(Integer n) => this.Components.At(n);
public Number this[Integer n] { [MethodImpl(AggressiveInlining)]  get => At(n); }

        // Unimplemented interface functions
    }
}
