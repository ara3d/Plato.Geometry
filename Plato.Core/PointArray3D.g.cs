// Autogenerated file: DO NOT EDIT
// Created on 2025-01-20 10:41:00 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct PointArray3D: IPointArray3D<PointArray3D>
    {
        // Fields
        [DataMember] public readonly IArray<Vector3> Points;

        // With functions 
        [MethodImpl(AggressiveInlining)] public PointArray3D WithPoints(IArray<Vector3> points) => new PointArray3D(points);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public PointArray3D(IArray<Vector3> points) { Points = points; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static PointArray3D Create(IArray<Vector3> points) => new PointArray3D(points);

        // Implicit converters to/from single field

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(PointArray3D other) => Points.Equals(other.Points);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(PointArray3D other) => !Points.Equals(other.Points);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is PointArray3D other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Points);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Points\" = {Points} }}";

        // Explicit implementation of interfaces by forwarding properties to fields
        IArray<Vector3> IPointGeometry3D<PointArray3D>.Points { [MethodImpl(AggressiveInlining)] get => Points; }

        // Implemented concept functions and type functions
        [MethodImpl(AggressiveInlining)]  public PointArray3D Deform(System.Func<Vector3, Vector3> f) => new PointArray3D(this.Points.Map(f));
        public IArray<Integer> Indices { [MethodImpl(AggressiveInlining)] get  => this.Points.Indices(); } 
        [MethodImpl(AggressiveInlining)]  public PointArray3D Deform(ITransform3D t){
            var _var188 = t;
            return this.Deform((v) => _var188.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public PointArray3D Translate(Vector3 v){
            var _var189 = v;
            return this.Deform((p) => p.Add(_var189));
        }

        [MethodImpl(AggressiveInlining)]  public PointArray3D Rotate(Quaternion q) => this.Deform(q);
        [MethodImpl(AggressiveInlining)]  public PointArray3D Scale(Vector3 v){
            var _var190 = v;
            return this.Deform((p) => p.Multiply(_var190));
        }

        [MethodImpl(AggressiveInlining)]  public PointArray3D Scale(Number s){
            var _var191 = s;
            return this.Deform((p) => p.Multiply(_var191));
        }

        [MethodImpl(AggressiveInlining)]  public PointArray3D RotateX(Angle a) => this.Rotate(a.RotateX);
        [MethodImpl(AggressiveInlining)]  public PointArray3D RotateY(Angle a) => this.Rotate(a.RotateY);
        [MethodImpl(AggressiveInlining)]  public PointArray3D RotateZ(Angle a) => this.Rotate(a.RotateZ);
        [MethodImpl(AggressiveInlining)]  public PointArray3D TranslateX(Number s){
            var _var192 = s;
            return this.Deform((p) => p.Add((_var192, ((Integer)0), ((Integer)0))));
        }

        [MethodImpl(AggressiveInlining)]  public PointArray3D TranslateY(Number s){
            var _var193 = s;
            return this.Deform((p) => p.Add((((Integer)0), _var193, ((Integer)0))));
        }

        [MethodImpl(AggressiveInlining)]  public PointArray3D TranslateZ(Number s){
            var _var194 = s;
            return this.Deform((p) => p.Add((((Integer)0), ((Integer)0), _var194)));
        }

        [MethodImpl(AggressiveInlining)]  public PointArray3D ScaleX(Number s){
            var _var195 = s;
            return this.Deform((p) => p.Multiply((_var195, ((Integer)1), ((Integer)1))));
        }

        [MethodImpl(AggressiveInlining)]  public PointArray3D ScaleY(Number s){
            var _var196 = s;
            return this.Deform((p) => p.Multiply((((Integer)1), _var196, ((Integer)1))));
        }

        [MethodImpl(AggressiveInlining)]  public PointArray3D ScaleZ(Number s){
            var _var197 = s;
            return this.Deform((p) => p.Multiply((((Integer)1), ((Integer)1), _var197)));
        }


        // Unimplemented concept functions
    }
}
