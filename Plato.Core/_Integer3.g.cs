// Autogenerated file: DO NOT EDIT
// Created on 2025-04-08 12:25:04 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Integer3: IValue, IArrayLike<Integer3, Integer>
    {
        // Fields
        [DataMember] public readonly Integer A;
        [DataMember] public readonly Integer B;
        [DataMember] public readonly Integer C;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Integer3 WithA(Integer a) => new Integer3(a, B, C);
        [MethodImpl(AggressiveInlining)] public Integer3 WithB(Integer b) => new Integer3(A, b, C);
        [MethodImpl(AggressiveInlining)] public Integer3 WithC(Integer c) => new Integer3(A, B, c);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Integer3(Integer a, Integer b, Integer c) { A = a; B = b; C = c; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Integer3 Create(Integer a, Integer b, Integer c) => new Integer3(a, b, c);

        // Static default implementation
        public static readonly Integer3 Default = default;

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Integer, Integer, Integer)(Integer3 self) => (self.A, self.B, self.C);
        [MethodImpl(AggressiveInlining)] public static implicit operator Integer3((Integer, Integer, Integer) value) => new Integer3(value.Item1, value.Item2, value.Item3);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Integer a, out Integer b, out Integer c) { a = A; b = B; c = C;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Integer3 other) => A.Equals(other.A) && B.Equals(other.B) && C.Equals(other.C);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Integer3 other) => !A.Equals(other.A) && B.Equals(other.B) && C.Equals(other.C);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Integer3 other ? Equals(other).Value : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(A, B, C);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"A\" = {A}, \"B\" = {B}, \"C\" = {C} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // IArrayLike predefined functions
        public Integer NumComponents { [MethodImpl(AggressiveInlining)] get => 3; }
        public IArray<Integer> Components { [MethodImpl(AggressiveInlining)] get => Intrinsics.MakeArray<Integer>(A, B, C); }
        [MethodImpl(AggressiveInlining)] public static Integer3 CreateFromComponents(IArray<Integer> numbers) => new Integer3(numbers[0], numbers[1], numbers[2]);

        [MethodImpl(AggressiveInlining)] public static Integer3 CreateFromComponent(Integer x) => new Integer3(x, x, x);

        // Implemented interface functions
        [MethodImpl(AggressiveInlining)]  public Integer At(Integer n) => this.Components.At(n);
public Integer this[Integer n] { [MethodImpl(AggressiveInlining)]  get => At(n); }
        [MethodImpl(AggressiveInlining)]  public Integer3 MapComponents(System.Func<Integer, Integer> f) => Integer3.CreateFromComponents(this.Components.Map(f));
[MethodImpl(AggressiveInlining)]  public Integer3 ZipComponents(Integer3 b, System.Func<Integer, Integer, Integer> f) => Integer3.CreateFromComponents(this.Components.Zip(b.Components, f));
[MethodImpl(AggressiveInlining)]  public Integer3 ZipComponents(Integer3 b, Integer3 c, System.Func<Integer, Integer, Integer, Integer> f) => Integer3.CreateFromComponents(this.Components.Zip(b.Components, c.Components, f));
[MethodImpl(AggressiveInlining)]  public Boolean AllZipComponents(Integer3 b, System.Func<Integer, Integer, Boolean> f) => this.Components.Zip(b.Components, f).All((x)  => x);
[MethodImpl(AggressiveInlining)]  public Boolean AllZipComponents(Integer3 b, Integer3 c, System.Func<Integer, Integer, Integer, Boolean> f) => this.Components.Zip(b.Components, c.Components, f).All((x)  => x);
[MethodImpl(AggressiveInlining)]  public Boolean AnyZipComponents(Integer3 b, System.Func<Integer, Integer, Boolean> f) => this.Components.Zip(b.Components, f).Any((x)  => x);
[MethodImpl(AggressiveInlining)]  public Boolean AnyZipComponents(Integer3 b, Integer3 c, System.Func<Integer, Integer, Integer, Boolean> f) => this.Components.Zip(b.Components, c.Components, f).Any((x)  => x);
[MethodImpl(AggressiveInlining)]  public Boolean AllComponents(System.Func<Integer, Boolean> predicate) => this.Components.All(predicate);
[MethodImpl(AggressiveInlining)]  public Boolean AnyComponent(System.Func<Integer, Boolean> predicate) => this.Components.Any(predicate);

        // Unimplemented interface functions
    }
}
