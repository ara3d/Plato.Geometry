// Autogenerated file: DO NOT EDIT
// Created on 2025-04-07 4:05:19 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Integer: IWholeNumber<Integer>
    {
        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Integer Create() => new Integer();

        // Static default implementation
        public static readonly Integer Default = default;

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Integer other) => Value.Equals(other.Value);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Integer other) => !Value.Equals(other.Value);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Integer other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public static Boolean operator==(Integer a, Integer b) => a.Equals(b);
        [MethodImpl(AggressiveInlining)] public static Boolean operator!=(Integer a, Integer b) => !a.Equals(b);
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Value.GetHashCode();
        [MethodImpl(AggressiveInlining)] public override string ToString() => Value.ToString();

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented interface functions
        public Angle Turns { [MethodImpl(AggressiveInlining)] get  => this.Number.Turns; } 
public Angle Degrees { [MethodImpl(AggressiveInlining)] get  => this.Number.Turns; } 
public Angle Gradians { [MethodImpl(AggressiveInlining)] get  => this.Number.Gradians; } 
public Angle ArcMinutes { [MethodImpl(AggressiveInlining)] get  => this.Number.ArcMinutes; } 
public Angle ArcSeconds { [MethodImpl(AggressiveInlining)] get  => this.Number.ArcSeconds; } 
public Array<Integer> Range { [MethodImpl(AggressiveInlining)] get  => this.MapRange((i)  => i); } 
public IArray<Point2D> CirclePoints { [MethodImpl(AggressiveInlining)] get  => this.Fractions.Map((x)  => x.Turns.UnitCircle); } 
public Number Number { [MethodImpl(AggressiveInlining)] get  => this; } 
[MethodImpl(AggressiveInlining)]  public static implicit operator Number(Integer x) => x.Number;
        public Integer PlusOne { [MethodImpl(AggressiveInlining)] get  => this.Add(((Integer)1)); } 
public Integer MinusOne { [MethodImpl(AggressiveInlining)] get  => this.Subtract(((Integer)1)); } 
public Integer FromOne { [MethodImpl(AggressiveInlining)] get  => ((Integer)1).Subtract(this); } 
[MethodImpl(AggressiveInlining)]  public Number FloatDivision(Integer y) => this.Number.Divide(y.Number);
public IArray<Number> Fractions { [MethodImpl(AggressiveInlining)] get {
            var _var180 = this;
            return this.Range.Map((i)  => i.FloatDivision(_var180.Subtract(((Integer)1))));
        }
         } 
public IArray<Number> FractionsExclusive { [MethodImpl(AggressiveInlining)] get {
            var _var181 = this;
            return this.Range.Map((i)  => i.FloatDivision(_var181));
        }
         } 
public IArray<Number> LinearSpace { [MethodImpl(AggressiveInlining)] get  => this.Fractions; } 
public IArray<Number> LinearSpaceExclusive { [MethodImpl(AggressiveInlining)] get  => this.FractionsExclusive; } 
public IArray<NumberInterval> Intervals { [MethodImpl(AggressiveInlining)] get  => this.Add(((Integer)1)).LinearSpace.WithNext((a, b)  => new NumberInterval(a, b)); } 
[MethodImpl(AggressiveInlining)]  public Integer Add(Integer b) => this + b;
        [MethodImpl(AggressiveInlining)]  public Integer Subtract(Integer b) => this - b;
        [MethodImpl(AggressiveInlining)]  public Integer Multiply(Integer b) => this * b;
        [MethodImpl(AggressiveInlining)]  public Integer Divide(Integer b) => this / b;
        [MethodImpl(AggressiveInlining)]  public Integer Modulo(Integer b) => this % b;
        public Integer Negative { [MethodImpl(AggressiveInlining)] get => -this; }
        [MethodImpl(AggressiveInlining)]  public Boolean LessThan(Integer b) => this < b;
        [MethodImpl(AggressiveInlining)]  public Boolean LessThanOrEquals(Integer b) => this <= b;
        [MethodImpl(AggressiveInlining)]  public Boolean GreaterThan(Integer b) => this > b;
        [MethodImpl(AggressiveInlining)]  public Boolean GreaterThanOrEquals(Integer b) => this >= b;
        [MethodImpl(AggressiveInlining)]  public Integer4 QuadFaceIndices(Integer row, Integer nCols, Integer nRows){
            var a = row.Multiply(nCols).Add(this);
            var b = row.Multiply(nCols).Add(this.Add(((Integer)1)).Modulo(nCols));
            var c = row.Add(((Integer)1)).Modulo(nRows).Multiply(nCols).Add(this.Add(((Integer)1)).Modulo(nCols));
            var d = row.Add(((Integer)1)).Modulo(nRows).Multiply(nCols).Add(this);
            return (a, b, c, d);
        }

[MethodImpl(AggressiveInlining)]  public IArray2D<Integer4> AllQuadFaceIndices(Integer nRows, Boolean closedX, Boolean closedY){
            var _var183 = nRows;
            {
                var _var182 = this;
                {
                    var nx = this.Subtract(closedX ? ((Integer)0) : ((Integer)1));
                    var ny = nRows.Subtract(closedY ? ((Integer)0) : ((Integer)1));
                    return nx.MakeArray2D(ny, (col, row)  => col.QuadFaceIndices(row, _var182, _var183));
                }
            }
        }

[MethodImpl(AggressiveInlining)]  public Integer Lesser(Integer b) => this.LessThanOrEquals(b) ? this : b;
[MethodImpl(AggressiveInlining)]  public Integer Greater(Integer b) => this.GreaterThanOrEquals(b) ? this : b;

        // Unimplemented interface functions
    }
}
