// Autogenerated file: DO NOT EDIT
// Created on 2025-03-18 2:15:23 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct TriangleArray3D: ITriangleArray3D
    {
        // Fields
        [DataMember] public readonly IArray<Triangle3D> Triangles;

        // With functions 
        [MethodImpl(AggressiveInlining)] public TriangleArray3D WithTriangles(IArray<Triangle3D> triangles) => new TriangleArray3D(triangles);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public TriangleArray3D(IArray<Triangle3D> triangles) { Triangles = triangles; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static TriangleArray3D Create(IArray<Triangle3D> triangles) => new TriangleArray3D(triangles);

        // Implicit converters to/from single field

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(TriangleArray3D other) => Triangles.Equals(other.Triangles);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(TriangleArray3D other) => !Triangles.Equals(other.Triangles);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is TriangleArray3D other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Triangles);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Triangles\" = {Triangles} }}";

        // Explicit implementation of interfaces by forwarding properties to fields
        IArray<Triangle3D> ITriangleGeometry3D.Triangles { [MethodImpl(AggressiveInlining)] get => Triangles; }

        // Implemented interface functions
        [MethodImpl(AggressiveInlining)]  public TriangleArray3D Deform(System.Func<Vector3, Vector3> f){
            var _var173 = f;
            return new TriangleArray3D(this.Triangles.Map((t)  => t.Deform(_var173)));
        }

public _T0 Indices<_T0> where _T0 : IArray<_T0> { [MethodImpl(AggressiveInlining)] get  => this.Points.Indices(); } 
public TriangleMesh3D TriangleMesh3D { [MethodImpl(AggressiveInlining)] get  => (this.Points, this.Points.Indices()); } 
[MethodImpl(AggressiveInlining)]  public static implicit operator TriangleMesh3D(TriangleArray3D g) => g.TriangleMesh3D;
        public _T0 Points<_T0> where _T0 : IArray<_T0> { [MethodImpl(AggressiveInlining)] get  => this.Triangles.FlatMap((x)  => x.Points); } 
public _T0 Lines<_T0> where _T0 : IArray<_T0> { [MethodImpl(AggressiveInlining)] get  => this.Triangles.FlatMap((x)  => x.Lines); } 
public LineMesh3D LineMesh3D { [MethodImpl(AggressiveInlining)] get  => (this.Points, this.FaceIndices.FlatMap((a)  => Intrinsics.MakeArray(a.At(((Integer)0)), a.At(((Integer)1)), a.At(((Integer)1)), a.At(((Integer)2)), a.At(((Integer)2)), a.At(((Integer)0))))); } 
[MethodImpl(AggressiveInlining)]  public static implicit operator LineMesh3D(TriangleArray3D g) => g.LineMesh3D;
        public _T0 Faces<_T0> where _T0 : IArray<_T0> { [MethodImpl(AggressiveInlining)] get  => this.Triangles; } 
[MethodImpl(AggressiveInlining)]  public Vector3 Vertex(Integer n) => this.Points.At(this.Indices.At(n));
[MethodImpl(AggressiveInlining)]  public _T0 FaceVertices<_T0>(Integer f) where _T0 : IArray<_T0>{
            var _var174 = this;
            return this.FaceIndices.At(f).Map((i)  => _var174.Vertex(i));
        }

public _T0 AllFaceVertices<_T0> where _T0 : IArray2D<_T0> { [MethodImpl(AggressiveInlining)] get {
            var _var175 = this;
            return this.AllFaceIndices.Map((x)  => _var175.Vertex(x));
        }
         } 
[MethodImpl(AggressiveInlining)]  public _T1 Vertices<_T0, _T1>(_T0 xs) where _T0 : IArray<_T0>; where _T1 : IArray<_T1>{
            var _var176 = this;
            return xs.Map((i)  => _var176.Vertex(i));
        }

public _T0 AllVertices<_T0> where _T0 : IArray<_T0> { [MethodImpl(AggressiveInlining)] get  => this.Vertices(this.Indices); } 
public Integer NumPrimitives { [MethodImpl(AggressiveInlining)] get  => this.Indices.Count.Divide(this.PrimitiveSize); } 
public Integer NumFaces { [MethodImpl(AggressiveInlining)] get  => this.NumPrimitives; } 
public _T0 AllFaceIndices<_T0> where _T0 : IArray2D<_T0> { [MethodImpl(AggressiveInlining)] get  => this.Indices.Slices(this.PrimitiveSize); } 
public Integer PrimitiveSize { [MethodImpl(AggressiveInlining)] get  => ((Integer)3); } 
public _T0 FaceIndices<_T0> where _T0 : IArray<_T0> { [MethodImpl(AggressiveInlining)] get  => this.Indices.Integer3Array; } 

        // Unimplemented concept functions
        public _T0 Corners<_T0> where _T0 : IArray<_T0> => throw new NotImplementedException();
}
}
