// Autogenerated file: DO NOT EDIT
// Created on 2025-04-07 4:05:19 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct TriangleArray3D: ITriangleArray3D<TriangleArray3D>
    {
        // Fields
        [DataMember] public readonly IArray<Triangle3D> Triangles;

        // With functions 
        [MethodImpl(AggressiveInlining)] public TriangleArray3D WithTriangles(IArray<Triangle3D> triangles) => new TriangleArray3D(triangles);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public TriangleArray3D(IArray<Triangle3D> triangles) { Triangles = triangles; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static TriangleArray3D Create(IArray<Triangle3D> triangles) => new TriangleArray3D(triangles);

        // Static default implementation
        public static readonly TriangleArray3D Default = default;

        // Implicit converters to/from single field

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(TriangleArray3D other) => Triangles.Equals(other.Triangles);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(TriangleArray3D other) => !Triangles.Equals(other.Triangles);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is TriangleArray3D other ? Equals(other).Value : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Triangles);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Triangles\" = {Triangles} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented interface functions
        [MethodImpl(AggressiveInlining)]  public TriangleArray3D Deform(System.Func<Point3D, Point3D> f){
            var _var161 = f;
            return new TriangleArray3D(this.Triangles.Map((t)  => t.Deform(_var161)));
        }

public IArray<Integer> Indices { [MethodImpl(AggressiveInlining)] get  => this.Points.Indices; } 
public IArray<Vector3> Points { [MethodImpl(AggressiveInlining)] get  => this.Triangles.FlatMap((x)  => x.Points); } 
public IArray<Line3D> Lines { [MethodImpl(AggressiveInlining)] get  => this.Triangles.FlatMap((x)  => x.Lines); } 
public IArray<Triangle3D> Indices { [MethodImpl(AggressiveInlining)] get  => this.FaceIndices.FlatMap((fi)  => fi.Components); } 
public IArray<Triangle3D> Faces { [MethodImpl(AggressiveInlining)] get  => this.Triangles; } 
public Integer NumPrimitives { [MethodImpl(AggressiveInlining)] get  => this.Indices.Count.Divide(this.PrimitiveSize); } 
[MethodImpl(AggressiveInlining)]  public TriangleArray3D Deform<_T0>(_T0 t) where _T0 : ITransform3D{
            var _var162 = t;
            return this.Deform((v)  => _var162.Transform(v));
        }

[MethodImpl(AggressiveInlining)]  public TriangleArray3D Scale(Vector3 v){
            var _var163 = v;
            return this.Deform((p)  => p.Vector3.Multiply(_var163));
        }

[MethodImpl(AggressiveInlining)]  public TriangleArray3D Scale(Number s) => this.Scale((s, s, s));
[MethodImpl(AggressiveInlining)]  public TriangleArray3D ScaleX(Number s) => this.Scale((s, ((Integer)1), ((Integer)1)));
[MethodImpl(AggressiveInlining)]  public TriangleArray3D ScaleY(Number s) => this.Scale((((Integer)1), s, ((Integer)1)));
[MethodImpl(AggressiveInlining)]  public TriangleArray3D ScaleZ(Number s) => this.Scale((((Integer)1), ((Integer)1), s));
[MethodImpl(AggressiveInlining)]  public TriangleArray3D Rotate(Quaternion q){
            var _var164 = q;
            return this.Deform((v)  => _var164.Transform(v));
        }

[MethodImpl(AggressiveInlining)]  public TriangleArray3D RotateX(Angle a) => this.Rotate(a.RotateX);
[MethodImpl(AggressiveInlining)]  public TriangleArray3D RotateY(Angle a) => this.Rotate(a.RotateY);
[MethodImpl(AggressiveInlining)]  public TriangleArray3D RotateZ(Angle a) => this.Rotate(a.RotateZ);
[MethodImpl(AggressiveInlining)]  public TriangleArray3D Translate(Vector3 v){
            var _var165 = v;
            return this.Deform((p)  => p.Add(_var165));
        }

[MethodImpl(AggressiveInlining)]  public TriangleArray3D TranslateX(Number s) => this.Translate(s.XVector3);
[MethodImpl(AggressiveInlining)]  public TriangleArray3D TranslateY(Number s) => this.Translate(s.YVector3);
[MethodImpl(AggressiveInlining)]  public TriangleArray3D TranslateZ(Number s) => this.Translate(s.ZVector3);
public Integer PrimitiveSize { [MethodImpl(AggressiveInlining)] get  => ((Integer)3); } 

        // Unimplemented interface functions
        public Bounds3D Bounds => throw new NotImplementedException();
public IArray<Point3D> Points => throw new NotImplementedException();
public IArray<Triangle3D> Primitives => throw new NotImplementedException();
}
}
