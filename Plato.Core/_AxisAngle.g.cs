// Autogenerated file: DO NOT EDIT
// Created on 2025-04-07 4:05:19 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct AxisAngle: IRotation3D
    {
        // Fields
        [DataMember] public readonly Vector3 Axis;
        [DataMember] public readonly Angle Angle;

        // With functions 
        [MethodImpl(AggressiveInlining)] public AxisAngle WithAxis(Vector3 axis) => new AxisAngle(axis, Angle);
        [MethodImpl(AggressiveInlining)] public AxisAngle WithAngle(Angle angle) => new AxisAngle(Axis, angle);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public AxisAngle(Vector3 axis, Angle angle) { Axis = axis; Angle = angle; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static AxisAngle Create(Vector3 axis, Angle angle) => new AxisAngle(axis, angle);

        // Static default implementation
        public static readonly AxisAngle Default = default;

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Vector3, Angle)(AxisAngle self) => (self.Axis, self.Angle);
        [MethodImpl(AggressiveInlining)] public static implicit operator AxisAngle((Vector3, Angle) value) => new AxisAngle(value.Item1, value.Item2);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Vector3 axis, out Angle angle) { axis = Axis; angle = Angle;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(AxisAngle other) => Axis.Equals(other.Axis) && Angle.Equals(other.Angle);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(AxisAngle other) => !Axis.Equals(other.Axis) && Angle.Equals(other.Angle);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is AxisAngle other ? Equals(other).Value : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Axis, Angle);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Axis\" = {Axis}, \"Angle\" = {Angle} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented interface functions
        public Quaternion Quaternion { [MethodImpl(AggressiveInlining)] get  => Quaternion.CreateFromAxisAngle(this.Axis, this.Angle); } 
[MethodImpl(AggressiveInlining)]  public static implicit operator Quaternion(AxisAngle aa) => aa.Quaternion;
        public static AxisAngle Identity { [MethodImpl(AggressiveInlining)] get  => (Constants.ZAxis3D, ((Number)0)); } 
public Matrix4x4 Matrix { [MethodImpl(AggressiveInlining)] get  => this.Quaternion.Matrix; } 
[MethodImpl(AggressiveInlining)]  public Point3D Multiply(Point3D v) => this.TransformPoint(v);
[MethodImpl(AggressiveInlining)]  public static Point3D operator *(AxisAngle x, Point3D v) => x.Multiply(v);
        [MethodImpl(AggressiveInlining)]  public Vector3 Multiply(Vector3 v) => this.TransformNormal(v);
[MethodImpl(AggressiveInlining)]  public static Vector3 operator *(AxisAngle x, Vector3 v) => x.Multiply(v);
        [MethodImpl(AggressiveInlining)]  public MatrixTransform3D Multiply(Matrix4x4 m) => this.Compose(y);
[MethodImpl(AggressiveInlining)]  public static MatrixTransform3D operator *(AxisAngle x, Matrix4x4 m) => x.Multiply(m);
        [MethodImpl(AggressiveInlining)]  public Point3D TransformPoint(Point3D v) => v.Vector.Transform(this.Matrix);
[MethodImpl(AggressiveInlining)]  public Vector3 TransformNormal(Vector3 v) => v.Vector.TransformNormal(this.Matrix);
public Matrix4x4 Matrix4x4 { [MethodImpl(AggressiveInlining)] get  => this.Matrix; } 
[MethodImpl(AggressiveInlining)]  public static implicit operator Matrix4x4(AxisAngle t) => t.Matrix4x4;
        public MatrixTransform3D MatrixTransform3D { [MethodImpl(AggressiveInlining)] get  => this.Matrix; } 
[MethodImpl(AggressiveInlining)]  public static implicit operator MatrixTransform3D(AxisAngle t) => t.MatrixTransform3D;
        public MatrixTransform3D Invert { [MethodImpl(AggressiveInlining)] get  => this.Matrix.Invert; } 
[MethodImpl(AggressiveInlining)]  public MatrixTransform3D Compose(Matrix4x4 m) => this.Matrix.Multiply(m);
public Rotation3D Rotation { [MethodImpl(AggressiveInlining)] get  => this.Matrix.Rotation; } 
public Translation3D Translation { [MethodImpl(AggressiveInlining)] get  => this.Matrix.Translation; } 
public Pose3D Pose { [MethodImpl(AggressiveInlining)] get  => (this.Matrix.Translation, this.Matrix.Rotation); } 

        // Unimplemented interface functions
    }
}
