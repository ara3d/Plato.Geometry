// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 12:06:56 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Integer4: IValue, IArray<Integer>
    {
        // Fields
        [DataMember] public readonly Integer A;
        [DataMember] public readonly Integer B;
        [DataMember] public readonly Integer C;
        [DataMember] public readonly Integer D;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Integer4 WithA(Integer a) => new Integer4(a, B, C, D);
        [MethodImpl(AggressiveInlining)] public Integer4 WithB(Integer b) => new Integer4(A, b, C, D);
        [MethodImpl(AggressiveInlining)] public Integer4 WithC(Integer c) => new Integer4(A, B, c, D);
        [MethodImpl(AggressiveInlining)] public Integer4 WithD(Integer d) => new Integer4(A, B, C, d);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Integer4(Integer a, Integer b, Integer c, Integer d) { A = a; B = b; C = c; D = d; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Integer4 Create(Integer a, Integer b, Integer c, Integer d) => new Integer4(a, b, c, d);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Integer, Integer, Integer, Integer)(Integer4 self) => (self.A, self.B, self.C, self.D);
        [MethodImpl(AggressiveInlining)] public static implicit operator Integer4((Integer, Integer, Integer, Integer) value) => new(value.Item1, value.Item2, value.Item3, value.Item4);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Integer a, out Integer b, out Integer c, out Integer d) { a = A; b = B; c = C; d = D;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Integer4 other) => A.Equals(other.A) && B.Equals(other.B) && C.Equals(other.C) && D.Equals(other.D);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Integer4 other) => !A.Equals(other.A) && B.Equals(other.B) && C.Equals(other.C) && D.Equals(other.D);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Integer4 other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(A, B, C, D);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"A\" = {A}, \"B\" = {B}, \"C\" = {C}, \"D\" = {D} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Array predefined functions
        [MethodImpl(AggressiveInlining)] public Integer4(IReadOnlyList<Integer> xs) : this(xs[0], xs[1], xs[2], xs[3]) { }
        [MethodImpl(AggressiveInlining)] public Integer4(Integer[] xs) : this(xs[0], xs[1], xs[2], xs[3]) { }
        [MethodImpl(AggressiveInlining)] public static Integer4 Create(IReadOnlyList<Integer> xs) => new Integer4(xs);
        // Implementation of IReadOnlyList
        [MethodImpl(AggressiveInlining)] public System.Collections.Generic.IEnumerator<Integer> GetEnumerator() => new ArrayEnumerator<Integer>(this);
        [MethodImpl(AggressiveInlining)] System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => GetEnumerator();
        Integer System.Collections.Generic.IReadOnlyList<Integer>.this[int n] { [MethodImpl(AggressiveInlining)] get => At(n); }
        int System.Collections.Generic.IReadOnlyCollection<Integer>.Count { [MethodImpl(AggressiveInlining)] get => this.Count; }

        // Implemented concept functions and type functions

        // Unimplemented concept functions
        public Integer Count { [MethodImpl(AggressiveInlining)] get => 4; }
        [MethodImpl(AggressiveInlining)]  public Integer At(Integer n) => n == 0 ? A : n == 1 ? B : n == 2 ? C : n == 3 ? D : throw new System.IndexOutOfRangeException();
        public Integer this[Integer n] { [MethodImpl(AggressiveInlining)] get => At(n); }
    }
}
