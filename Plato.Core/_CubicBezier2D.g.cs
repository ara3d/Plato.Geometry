// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 8:08:08 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
public partial struct CubicBezier2D: IArray<Vector2>, IOpenCurve2D
{
    // Fields
    [DataMember] public readonly Vector2 A;
    [DataMember] public readonly Vector2 B;
    [DataMember] public readonly Vector2 C;
    [DataMember] public readonly Vector2 D;

    // With functions 
    [MethodImpl(AggressiveInlining)] public CubicBezier2D WithA(Vector2 a) => new CubicBezier2D(a, B, C, D);
    [MethodImpl(AggressiveInlining)] public CubicBezier2D WithB(Vector2 b) => new CubicBezier2D(A, b, C, D);
    [MethodImpl(AggressiveInlining)] public CubicBezier2D WithC(Vector2 c) => new CubicBezier2D(A, B, c, D);
    [MethodImpl(AggressiveInlining)] public CubicBezier2D WithD(Vector2 d) => new CubicBezier2D(A, B, C, d);

    // Regular Constructor
    [MethodImpl(AggressiveInlining)] public CubicBezier2D(Vector2 a, Vector2 b, Vector2 c, Vector2 d) { A = a; B = b; C = c; D = d; }

    // Static factory function
    [MethodImpl(AggressiveInlining)] public static CubicBezier2D Create(Vector2 a, Vector2 b, Vector2 c, Vector2 d) => new CubicBezier2D(a, b, c, d);

    // Implicit converters to/from value-tuples and deconstructor
    [MethodImpl(AggressiveInlining)] public static implicit operator (Vector2, Vector2, Vector2, Vector2)(CubicBezier2D self) => (self.A, self.B, self.C, self.D);
    [MethodImpl(AggressiveInlining)] public static implicit operator CubicBezier2D((Vector2, Vector2, Vector2, Vector2) value) => new(value.Item1, value.Item2, value.Item3, value.Item4);
    [MethodImpl(AggressiveInlining)] public void Deconstruct(out Vector2 a, out Vector2 b, out Vector2 c, out Vector2 d) { a = A; b = B; c = C; d = D;  }

    // Object virtual function overrides: Equals, GetHashCode, ToString
    [MethodImpl(AggressiveInlining)] public Boolean Equals(CubicBezier2D other) => A.Equals(other.A) && B.Equals(other.B) && C.Equals(other.C) && D.Equals(other.D);
    [MethodImpl(AggressiveInlining)] public Boolean NotEquals(CubicBezier2D other) => !A.Equals(other.A) && B.Equals(other.B) && C.Equals(other.C) && D.Equals(other.D);
    [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is CubicBezier2D other ? Equals(other) : false;
    [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(A, B, C, D);
    [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"A\" = {A}, \"B\" = {B}, \"C\" = {C}, \"D\" = {D} }}";

    // Explicit implementation of interfaces by forwarding properties to fields

    // Array predefined functions
    [MethodImpl(AggressiveInlining)] public CubicBezier2D(IReadOnlyList<Vector2> xs) : this(xs[0], xs[1], xs[2], xs[3]) { }
    [MethodImpl(AggressiveInlining)] public CubicBezier2D(Vector2[] xs) : this(xs[0], xs[1], xs[2], xs[3]) { }
    [MethodImpl(AggressiveInlining)] public static CubicBezier2D Create(IReadOnlyList<Vector2> xs) => new CubicBezier2D(xs);
    // Implementation of IReadOnlyList
    [MethodImpl(AggressiveInlining)] public System.Collections.Generic.IEnumerator<Vector2> GetEnumerator() => new ArrayEnumerator<Vector2>(this);
    [MethodImpl(AggressiveInlining)] System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => GetEnumerator();
    Vector2 System.Collections.Generic.IReadOnlyList<Vector2>.this[int n] { [MethodImpl(AggressiveInlining)] get => At(n); }
    int System.Collections.Generic.IReadOnlyCollection<Vector2>.Count { [MethodImpl(AggressiveInlining)] get => this.Count; }

    // Implemented concept functions and type functions
    [MethodImpl(AggressiveInlining)]  public Vector2 Eval(Number t) => t.QuadraticBezier(this.A, this.B, this.C);
[MethodImpl(AggressiveInlining)]  public IArray<Vector2> Sample(Integer numPoints){
    var _var95 = this;
    return numPoints.LinearSpace.Map((x) =>  => _var95.Eval(x);
;
}

[MethodImpl(AggressiveInlining)]  public PolyLine2D ToPolyLine2D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
[MethodImpl(AggressiveInlining)]  public Procedural<Number, TR> Combine<TR>(CubicBezier2D b, System.Func<TR, TR, TR> f){
    var _var98 = b;
    {
        var _var97 = this;
        {
            var _var96 = f;
            return (x) =>  => _var96.Invoke(_var97.Eval(x), _var98.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector2> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var100 = f;
    {
        var _var99 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var99.Eval(_var100.Invoke(x));
;
    }
}

public System.Func<Number, Vector2> Function { [MethodImpl(AggressiveInlining)] get {
    var _var101 = this;
    return (x) =>  => _var101.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Number, Vector2> Compose(CubicBezier2D b){
    var _var103 = this;
    {
        var _var102 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var102.Eval(_var103.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, TR> Combine<TR>(CubicBezier2D b, System.Func<TR, TR, TR> f){
    var _var106 = b;
    {
        var _var105 = this;
        {
            var _var104 = f;
            return (x) =>  => _var104.Invoke(_var105.Eval(x), _var106.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var108 = f;
    {
        var _var107 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var107.Eval(_var108.Invoke(x));
;
    }
}

public System.Func<Vector2, Number> Function { [MethodImpl(AggressiveInlining)] get {
    var _var109 = this;
    return (x) =>  => _var109.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Number> Compose(CubicBezier2D b){
    var _var111 = this;
    {
        var _var110 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var110.Eval(_var111.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Union(CubicBezier2D b) => this.Combine(b, (a, b) =>  => a.Max(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Intersection(CubicBezier2D b) => this.Combine(b, (a, b) =>  => a.Min(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Difference(CubicBezier2D b) => this.Combine(b, (a, b) =>  => a.Max(b.Negative);

public Procedural<Vector2, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) =>  => x.Negative;
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Boolean> Threshold(Number threshold){
    var _var112 = threshold;
    return this.Map((x) =>  => x.GreaterThanOrEquals(_var112);
;
}

public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)false); } 

    // Unimplemented concept functions
    public Integer Count { [MethodImpl(AggressiveInlining)] get => 4; }
    [MethodImpl(AggressiveInlining)]  public Vector2 At(Integer n) => n == 0 ? A : n == 1 ? B : n == 2 ? C : n == 3 ? D : throw new System.IndexOutOfRangeException();
    public Vector2 this[Integer n] { [MethodImpl(AggressiveInlining)] get => At(n); }
    [MethodImpl(AggressiveInlining)]  public Number Distance(Vector2 p) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public Number Eval(Vector2 t) => throw new NotImplementedException();
}
Plato.CSharpWriter.CSharpConcreteTypeWriter}
