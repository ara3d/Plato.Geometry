// Autogenerated file: DO NOT EDIT
// Created on 2025-04-07 4:05:19 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct ByteRGB: ICoordinate
    {
        // Fields
        [DataMember] public readonly Integer R;
        [DataMember] public readonly Integer G;
        [DataMember] public readonly Integer B;

        // With functions 
        [MethodImpl(AggressiveInlining)] public ByteRGB WithR(Integer r) => new ByteRGB(r, G, B);
        [MethodImpl(AggressiveInlining)] public ByteRGB WithG(Integer g) => new ByteRGB(R, g, B);
        [MethodImpl(AggressiveInlining)] public ByteRGB WithB(Integer b) => new ByteRGB(R, G, b);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public ByteRGB(Integer r, Integer g, Integer b) { R = r; G = g; B = b; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static ByteRGB Create(Integer r, Integer g, Integer b) => new ByteRGB(r, g, b);

        // Static default implementation
        public static readonly ByteRGB Default = default;

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Integer, Integer, Integer)(ByteRGB self) => (self.R, self.G, self.B);
        [MethodImpl(AggressiveInlining)] public static implicit operator ByteRGB((Integer, Integer, Integer) value) => new ByteRGB(value.Item1, value.Item2, value.Item3);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Integer r, out Integer g, out Integer b) { r = R; g = G; b = B;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(ByteRGB other) => R.Equals(other.R) && G.Equals(other.G) && B.Equals(other.B);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(ByteRGB other) => !R.Equals(other.R) && G.Equals(other.G) && B.Equals(other.B);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is ByteRGB other ? Equals(other).Value : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(R, G, B);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"R\" = {R}, \"G\" = {G}, \"B\" = {B} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented interface functions

        // Unimplemented interface functions
    }
}
