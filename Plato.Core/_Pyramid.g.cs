// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 8:08:08 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
public partial struct Pyramid: ISolid
{
    // Fields
    [DataMember] public readonly Number Height;
    [DataMember] public readonly Number BaseLength;

    // With functions 
    [MethodImpl(AggressiveInlining)] public Pyramid WithHeight(Number height) => new Pyramid(height, BaseLength);
    [MethodImpl(AggressiveInlining)] public Pyramid WithBaseLength(Number baseLength) => new Pyramid(Height, baseLength);

    // Regular Constructor
    [MethodImpl(AggressiveInlining)] public Pyramid(Number height, Number baseLength) { Height = height; BaseLength = baseLength; }

    // Static factory function
    [MethodImpl(AggressiveInlining)] public static Pyramid Create(Number height, Number baseLength) => new Pyramid(height, baseLength);

    // Implicit converters to/from value-tuples and deconstructor
    [MethodImpl(AggressiveInlining)] public static implicit operator (Number, Number)(Pyramid self) => (self.Height, self.BaseLength);
    [MethodImpl(AggressiveInlining)] public static implicit operator Pyramid((Number, Number) value) => new(value.Item1, value.Item2);
    [MethodImpl(AggressiveInlining)] public void Deconstruct(out Number height, out Number baseLength) { height = Height; baseLength = BaseLength;  }

    // Object virtual function overrides: Equals, GetHashCode, ToString
    [MethodImpl(AggressiveInlining)] public Boolean Equals(Pyramid other) => Height.Equals(other.Height) && BaseLength.Equals(other.BaseLength);
    [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Pyramid other) => !Height.Equals(other.Height) && BaseLength.Equals(other.BaseLength);
    [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Pyramid other ? Equals(other) : false;
    [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Height, BaseLength);
    [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Height\" = {Height}, \"BaseLength\" = {BaseLength} }}";

    // Explicit implementation of interfaces by forwarding properties to fields

    // Implemented concept functions and type functions
    public Boolean ClosedX { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 
public Boolean ClosedY { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, TR> Combine<TR>(Pyramid b, System.Func<TR, TR, TR> f){
    var _var998 = b;
    {
        var _var997 = this;
        {
            var _var996 = f;
            return (x) =>  => _var996.Invoke(_var997.Eval(x), _var998.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector3> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var1000 = f;
    {
        var _var999 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var999.Eval(_var1000.Invoke(x));
;
    }
}

public System.Func<Vector2, Vector3> Function { [MethodImpl(AggressiveInlining)] get {
    var _var1001 = this;
    return (x) =>  => _var1001.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Vector3> Compose(Pyramid b){
    var _var1003 = this;
    {
        var _var1002 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var1002.Eval(_var1003.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, TR> Combine<TR>(Pyramid b, System.Func<TR, TR, TR> f){
    var _var1006 = b;
    {
        var _var1005 = this;
        {
            var _var1004 = f;
            return (x) =>  => _var1004.Invoke(_var1005.Eval(x), _var1006.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var1008 = f;
    {
        var _var1007 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var1007.Eval(_var1008.Invoke(x));
;
    }
}

public System.Func<Vector3, Number> Function { [MethodImpl(AggressiveInlining)] get {
    var _var1009 = this;
    return (x) =>  => _var1009.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, Number> Compose(Pyramid b){
    var _var1011 = this;
    {
        var _var1010 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var1010.Eval(_var1011.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Union(Pyramid b) => this.Combine(b, (a, b) =>  => a.Max(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Intersection(Pyramid b) => this.Combine(b, (a, b) =>  => a.Min(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Difference(Pyramid b) => this.Combine(b, (a, b) =>  => a.Max(b.Negative);

public Procedural<Vector3, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) =>  => x.Negative;
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, Boolean> Threshold(Number threshold){
    var _var1012 = threshold;
    return this.Map((x) =>  => x.GreaterThanOrEquals(_var1012);
;
}


    // Unimplemented concept functions
    [MethodImpl(AggressiveInlining)]  public Number Distance(Vector3 p) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public Number Eval(Vector3 t) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public Vector3 Eval(Vector2 t) => throw new NotImplementedException();
}
Plato.CSharpWriter.CSharpConcreteTypeWriter}
