// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 12:06:56 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct CycloidOfCeva: IPolarCurve, IOpenShape
    {
        // Fields

        // With functions 

        // Regular Constructor

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static CycloidOfCeva Create() => new CycloidOfCeva();

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is CycloidOfCeva;
        [MethodImpl(AggressiveInlining)] public Boolean Equals(CycloidOfCeva other) => true;
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(CycloidOfCeva other) => false;
        [MethodImpl(AggressiveInlining)] public static Boolean operator==(CycloidOfCeva a, CycloidOfCeva b) => true;
        [MethodImpl(AggressiveInlining)] public static Boolean operator!=(CycloidOfCeva a, CycloidOfCeva b) => false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes();
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{  }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented concept functions and type functions
        [MethodImpl(AggressiveInlining)]  public Number GetRadius(Angle t) => t.CycloidOfCeva;
        [MethodImpl(AggressiveInlining)]  public PolarCoordinate EvalPolar(Angle t) => (this.GetRadius(t), t);
        [MethodImpl(AggressiveInlining)]  public Vector2 Eval(Angle t) => this.EvalPolar(t);
        [MethodImpl(AggressiveInlining)]  public Vector2 Eval(Number t) => this.Eval(t.Turns);
        [MethodImpl(AggressiveInlining)]  public IArray<Vector2> Sample(Integer numPoints){
            var _var246 = this;
            return numPoints.LinearSpace.Map((x) => _var246.Eval(x));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine2D ToPolyLine2D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
        [MethodImpl(AggressiveInlining)]  public Procedural<Number, TR> Combine<TR>(CycloidOfCeva b, System.Func<TR, TR, TR> f){
            var _var249 = b;
            {
                var _var248 = this;
                {
                    var _var247 = f;
                    return (x) => _var247.Invoke(_var248.Eval(x), _var249.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector2> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var251 = f;
            {
                var _var250 = this;
                return (x) => _var250.Eval(_var251.Invoke(x));
            }
        }

        public System.Func<Number, Vector2> Function { [MethodImpl(AggressiveInlining)] get {
            var _var252 = this;
            return (x) => _var252.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Number, Vector2> Compose(CycloidOfCeva b){
            var _var254 = this;
            {
                var _var253 = b;
                return (x) => _var253.Eval(_var254.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, TR> Combine<TR>(CycloidOfCeva b, System.Func<TR, TR, TR> f){
            var _var257 = b;
            {
                var _var256 = this;
                {
                    var _var255 = f;
                    return (x) => _var255.Invoke(_var256.Eval(x), _var257.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var259 = f;
            {
                var _var258 = this;
                return (x) => _var258.Eval(_var259.Invoke(x));
            }
        }

        public System.Func<Vector2, Number> Function { [MethodImpl(AggressiveInlining)] get {
            var _var260 = this;
            return (x) => _var260.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Number> Compose(CycloidOfCeva b){
            var _var262 = this;
            {
                var _var261 = b;
                return (x) => _var261.Eval(_var262.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Union(CycloidOfCeva b) => this.Combine(b, (a, b) => a.Max(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Intersection(CycloidOfCeva b) => this.Combine(b, (a, b) => a.Min(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Difference(CycloidOfCeva b) => this.Combine(b, (a, b) => a.Max(b.Negative));
        public Procedural<Vector2, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) => x.Negative); } 
        public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)false); } 

        // Unimplemented concept functions
        [MethodImpl(AggressiveInlining)]  public Number Distance(Vector2 p) => throw new NotImplementedException();
        [MethodImpl(AggressiveInlining)]  public Number Eval(Vector2 t) => throw new NotImplementedException();
    }
}
