// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 12:06:56 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Box: ISolid
    {
        // Fields
        [DataMember] public readonly Vector3 Extent;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Box WithExtent(Vector3 extent) => new Box(extent);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Box(Vector3 extent) { Extent = extent; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Box Create(Vector3 extent) => new Box(extent);

        // Implicit converters to/from single field
        [MethodImpl(AggressiveInlining)] public static implicit operator Vector3(Box self) => self.Extent;
        [MethodImpl(AggressiveInlining)] public static implicit operator Box(Vector3 value) => new Box(value);

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Box other) => Extent.Equals(other.Extent);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Box other) => !Extent.Equals(other.Extent);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Box other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Extent);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Extent\" = {Extent} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented concept functions and type functions
        public Boolean ClosedX { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 
        public Boolean ClosedY { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, TR> Combine<TR>(Box b, System.Func<TR, TR, TR> f){
            var _var940 = b;
            {
                var _var939 = this;
                {
                    var _var938 = f;
                    return (x) => _var938.Invoke(_var939.Eval(x), _var940.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector3> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var942 = f;
            {
                var _var941 = this;
                return (x) => _var941.Eval(_var942.Invoke(x));
            }
        }

        public System.Func<Vector2, Vector3> Function { [MethodImpl(AggressiveInlining)] get {
            var _var943 = this;
            return (x) => _var943.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Vector3> Compose(Box b){
            var _var945 = this;
            {
                var _var944 = b;
                return (x) => _var944.Eval(_var945.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, TR> Combine<TR>(Box b, System.Func<TR, TR, TR> f){
            var _var948 = b;
            {
                var _var947 = this;
                {
                    var _var946 = f;
                    return (x) => _var946.Invoke(_var947.Eval(x), _var948.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var950 = f;
            {
                var _var949 = this;
                return (x) => _var949.Eval(_var950.Invoke(x));
            }
        }

        public System.Func<Vector3, Number> Function { [MethodImpl(AggressiveInlining)] get {
            var _var951 = this;
            return (x) => _var951.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, Number> Compose(Box b){
            var _var953 = this;
            {
                var _var952 = b;
                return (x) => _var952.Eval(_var953.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Union(Box b) => this.Combine(b, (a, b) => a.Max(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Intersection(Box b) => this.Combine(b, (a, b) => a.Min(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Difference(Box b) => this.Combine(b, (a, b) => a.Max(b.Negative));
        public Procedural<Vector3, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) => x.Negative); } 

        // Unimplemented concept functions
        [MethodImpl(AggressiveInlining)]  public Number Distance(Vector3 p) => throw new NotImplementedException();
        [MethodImpl(AggressiveInlining)]  public Number Eval(Vector3 t) => throw new NotImplementedException();
        [MethodImpl(AggressiveInlining)]  public Vector3 Eval(Vector2 t) => throw new NotImplementedException();
    }
}
