// Autogenerated file: DO NOT EDIT
// Created on 2025-01-24 1:12:52 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Box: ISolid
    {
        // Fields
        [DataMember] public readonly Vector3 Extent;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Box WithExtent(Vector3 extent) => new Box(extent);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Box(Vector3 extent) { Extent = extent; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Box Create(Vector3 extent) => new Box(extent);

        // Implicit converters to/from single field
        [MethodImpl(AggressiveInlining)] public static implicit operator Vector3(Box self) => self.Extent;
        [MethodImpl(AggressiveInlining)] public static implicit operator Box(Vector3 value) => new Box(value);

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Box other) => Extent.Equals(other.Extent);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Box other) => !Extent.Equals(other.Extent);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Box other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Extent);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Extent\" = {Extent} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented concept functions and type functions

        // Unimplemented concept functions
        public Boolean ClosedX => throw new NotImplementedException();
        public Boolean ClosedY => throw new NotImplementedException();
        [MethodImpl(AggressiveInlining)]  public Number Distance(Vector3 p) => throw new NotImplementedException();
        [MethodImpl(AggressiveInlining)]  public Vector3 Eval(Vector2 t) => throw new NotImplementedException();
    }
}
