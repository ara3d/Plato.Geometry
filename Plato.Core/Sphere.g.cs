// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 12:06:56 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Sphere: ISolid
    {
        // Fields
        [DataMember] public readonly Number Radius;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Sphere WithRadius(Number radius) => new Sphere(radius);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Sphere(Number radius) { Radius = radius; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Sphere Create(Number radius) => new Sphere(radius);

        // Implicit converters to/from single field
        [MethodImpl(AggressiveInlining)] public static implicit operator Number(Sphere self) => self.Radius;
        [MethodImpl(AggressiveInlining)] public static implicit operator Sphere(Number value) => new Sphere(value);
        [MethodImpl(AggressiveInlining)] public static implicit operator Sphere(Integer value) => new Sphere(value);
        [MethodImpl(AggressiveInlining)] public static implicit operator Sphere(int value) => new Integer(value);
        [MethodImpl(AggressiveInlining)] public static implicit operator Sphere(float value) => new Number(value);
        [MethodImpl(AggressiveInlining)] public static implicit operator float(Sphere value) => value.Radius;

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Sphere other) => Radius.Equals(other.Radius);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Sphere other) => !Radius.Equals(other.Radius);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Sphere other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Radius);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Radius\" = {Radius} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented concept functions and type functions
        public Boolean ClosedX { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 
        public Boolean ClosedY { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, TR> Combine<TR>(Sphere b, System.Func<TR, TR, TR> f){
            var _var868 = b;
            {
                var _var867 = this;
                {
                    var _var866 = f;
                    return (x) => _var866.Invoke(_var867.Eval(x), _var868.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector3> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var870 = f;
            {
                var _var869 = this;
                return (x) => _var869.Eval(_var870.Invoke(x));
            }
        }

        public System.Func<Vector2, Vector3> Function { [MethodImpl(AggressiveInlining)] get {
            var _var871 = this;
            return (x) => _var871.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Vector3> Compose(Sphere b){
            var _var873 = this;
            {
                var _var872 = b;
                return (x) => _var872.Eval(_var873.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, TR> Combine<TR>(Sphere b, System.Func<TR, TR, TR> f){
            var _var876 = b;
            {
                var _var875 = this;
                {
                    var _var874 = f;
                    return (x) => _var874.Invoke(_var875.Eval(x), _var876.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var878 = f;
            {
                var _var877 = this;
                return (x) => _var877.Eval(_var878.Invoke(x));
            }
        }

        public System.Func<Vector3, Number> Function { [MethodImpl(AggressiveInlining)] get {
            var _var879 = this;
            return (x) => _var879.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, Number> Compose(Sphere b){
            var _var881 = this;
            {
                var _var880 = b;
                return (x) => _var880.Eval(_var881.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Union(Sphere b) => this.Combine(b, (a, b) => a.Max(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Intersection(Sphere b) => this.Combine(b, (a, b) => a.Min(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Difference(Sphere b) => this.Combine(b, (a, b) => a.Max(b.Negative));
        public Procedural<Vector3, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) => x.Negative); } 

        // Unimplemented concept functions
        [MethodImpl(AggressiveInlining)]  public Number Distance(Vector3 p) => throw new NotImplementedException();
        [MethodImpl(AggressiveInlining)]  public Number Eval(Vector3 t) => throw new NotImplementedException();
        [MethodImpl(AggressiveInlining)]  public Vector3 Eval(Vector2 t) => throw new NotImplementedException();
    }
}
