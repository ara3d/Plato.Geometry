// Autogenerated file: DO NOT EDIT
// Created on 2025-03-18 2:15:23 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Time: IMeasure<Time>
    {
        // Fields
        [DataMember] public readonly Number Seconds;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Time WithSeconds(Number seconds) => new Time(seconds);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Time(Number seconds) { Seconds = seconds; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Time Create(Number seconds) => new Time(seconds);

        // Implicit converters to/from single field
        [MethodImpl(AggressiveInlining)] public static implicit operator Number(Time self) => self.Seconds;
        [MethodImpl(AggressiveInlining)] public static implicit operator Time(Number value) => new Time(value);
        [MethodImpl(AggressiveInlining)] public static implicit operator Time(Integer value) => new Time(value);
        [MethodImpl(AggressiveInlining)] public static implicit operator Time(int value) => new Integer(value);
        [MethodImpl(AggressiveInlining)] public static implicit operator Time(float value) => new Number(value);
        [MethodImpl(AggressiveInlining)] public static implicit operator float(Time value) => value.Seconds;

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Time other) => Seconds.Equals(other.Seconds);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Time other) => !Seconds.Equals(other.Seconds);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Time other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Seconds);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Seconds\" = {Seconds} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // IVectorSpace predefined functions
        public Integer NumComponents { [MethodImpl(AggressiveInlining)] get => 1; }
        public IArray<Number> Components { [MethodImpl(AggressiveInlining)] get => Intrinsics.MakeArray<Number>(Seconds); }
        [MethodImpl(AggressiveInlining)] public Time CreateFromComponents(IArray<Number> numbers) => new Time(numbers[0]);

        [MethodImpl(AggressiveInlining)] public Time CreateFromNumber(Number x) => new Time(x);

        // Implemented interface functions
        [MethodImpl(AggressiveInlining)]  public Boolean LessThan(Time b) => this.LessThanOrEquals(b).And(this.NotEquals(b));
[MethodImpl(AggressiveInlining)]  public static Boolean operator <(Time a, Time b) => a.LessThan(b);
        [MethodImpl(AggressiveInlining)]  public Boolean GreaterThan(Time b) => b.LessThan(this);
[MethodImpl(AggressiveInlining)]  public static Boolean operator >(Time a, Time b) => a.GreaterThan(b);
        [MethodImpl(AggressiveInlining)]  public Boolean GreaterThanOrEquals(Time b) => b.LessThanOrEquals(this);
[MethodImpl(AggressiveInlining)]  public static Boolean operator >=(Time a, Time b) => a.GreaterThanOrEquals(b);
        [MethodImpl(AggressiveInlining)]  public Time Lesser(Time b) => this.LessThanOrEquals(b) ? this : b;
[MethodImpl(AggressiveInlining)]  public Time Greater(Time b) => this.GreaterThanOrEquals(b) ? this : b;
[MethodImpl(AggressiveInlining)]  public Integer CompareTo(Time b) => this.LessThanOrEquals(b) ? this.Equals(b) ? ((Integer)0) : ((Integer)1).Negative : ((Integer)1);
public Time Zero { [MethodImpl(AggressiveInlining)] get  => this.CreateFromNumber(((Number)0)); } 
public Time One { [MethodImpl(AggressiveInlining)] get  => this.CreateFromNumber(((Number)1)); } 
[MethodImpl(AggressiveInlining)]  public Time FromNumber(Number x) => this.CreateFromNumber(x);
[MethodImpl(AggressiveInlining)]  public Time Lerp(Time b, Number t) => this.Add(b.Subtract(this).Multiply(t));
public Time PlusOne { [MethodImpl(AggressiveInlining)] get  => this.Add(One); } 
public Time MinusOne { [MethodImpl(AggressiveInlining)] get  => this.Subtract(One); } 
public Time FromOne { [MethodImpl(AggressiveInlining)] get  => this.Add(One).Negative; } 
[MethodImpl(AggressiveInlining)]  public Number Component(Integer n) => this.Components.At(n);
public Number MaxComponent { [MethodImpl(AggressiveInlining)] get {
            var r = this.Component(((Integer)0));
            {
                var i = ((Integer)1);
                while (i.LessThan(NumComponents))
                {
                    r = r.Max(this.Component(i));
                    i = i.Add(((Integer)1));
                }

            }
            return r;
        }
         } 
public Number MinComponent { [MethodImpl(AggressiveInlining)] get {
            var r = this.Component(((Integer)0));
            {
                var i = ((Integer)1);
                while (i.LessThan(NumComponents))
                {
                    r = r.Min(this.Component(i));
                    i = i.Add(((Integer)1));
                }

            }
            return r;
        }
         } 
[MethodImpl(AggressiveInlining)]  public Time MapComponents(System.Func<Number, Number> f) => this.CreateFromComponents(this.Components.Map(f));
[MethodImpl(AggressiveInlining)]  public Time ZipComponents(Time b, System.Func<Number, Number, Number> f) => this.CreateFromComponents(this.Components.Zip(b.Components, f));
[MethodImpl(AggressiveInlining)]  public Time ZipComponents(Time b, Time c, System.Func<Number, Number, Number, Number> f) => this.CreateFromComponents(this.Components.Zip(b.Components, c.Components, f));
[MethodImpl(AggressiveInlining)]  public Boolean AllZipComponents(Time b, System.Func<Number, Number, Boolean> f) => this.Components.Zip(b.Components, f).All((x)  => x);
[MethodImpl(AggressiveInlining)]  public Boolean AllZipComponents(Time b, Time c, System.Func<Number, Number, Number, Boolean> f) => this.Components.Zip(b.Components, c.Components, f).All((x)  => x);
[MethodImpl(AggressiveInlining)]  public Boolean AnyZipComponents(Time b, System.Func<Number, Number, Boolean> f) => this.Components.Zip(b.Components, f).Any((x)  => x);
[MethodImpl(AggressiveInlining)]  public Boolean AnyZipComponents(Time b, Time c, System.Func<Number, Number, Number, Boolean> f) => this.Components.Zip(b.Components, c.Components, f).Any((x)  => x);
[MethodImpl(AggressiveInlining)]  public Boolean AllComponents(System.Func<Number, Boolean> predicate) => this.Components.All(predicate);
[MethodImpl(AggressiveInlining)]  public Boolean AnyComponent(System.Func<Number, Boolean> predicate) => this.Components.Any(predicate);
[MethodImpl(AggressiveInlining)]  public Time Clamp(Time a, Time b) => this.ZipComponents(a, b, (x0, a0, b0)  => x0.Clamp(a0, b0));
[MethodImpl(AggressiveInlining)]  public Time InversePow(Time n) => this.Pow(n.Reciprocal);
public Time Floor { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x0)  => x0.Floor); } 
public Time Fract { [MethodImpl(AggressiveInlining)] get  => this.Subtract(this.Floor); } 
public Time ClampZeroOne { [MethodImpl(AggressiveInlining)] get  => this.Clamp(Zero, One); } 
[MethodImpl(AggressiveInlining)]  public Boolean Between(Time a, Time b) => this.AllZipComponents(a, b, (x0, a0, b0)  => x0.Between(a0, b0));
public Boolean BetweenZeroOne { [MethodImpl(AggressiveInlining)] get  => this.Between(Zero, One); } 
public Time Sqrt { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((n)  => n.Sqrt); } 
[MethodImpl(AggressiveInlining)]  public Time Pow(Time y) => this.ZipComponents(y, (a, b)  => a.Pow(b));
public Time Reciprocal { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((n)  => n.Reciprocal); } 
public Time Half { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)2)); } 
public Time Quarter { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)4)); } 
public Time Eight { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)8)); } 
public Time Sixteenth { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)16)); } 
public Time Tenth { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)10)); } 
public Time Twice { [MethodImpl(AggressiveInlining)] get  => this.Multiply(((Number)2)); } 
public Time Hundred { [MethodImpl(AggressiveInlining)] get  => this.Multiply(((Number)100)); } 
public Time Thousand { [MethodImpl(AggressiveInlining)] get  => this.Multiply(((Number)1000)); } 
public Time Million { [MethodImpl(AggressiveInlining)] get  => this.Thousand.Thousand; } 
public Time Billion { [MethodImpl(AggressiveInlining)] get  => this.Thousand.Million; } 
public Time Hundredth { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)100)); } 
public Time Thousandth { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)1000)); } 
public Time Millionth { [MethodImpl(AggressiveInlining)] get  => this.Thousandth.Thousandth; } 
public Time Billionth { [MethodImpl(AggressiveInlining)] get  => this.Thousandth.Millionth; } 

        // Unimplemented concept functions
        [MethodImpl(AggressiveInlining)]  public Time Add(Time b) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public static Time operator +(Time a, Time b) => a.Add(b);
        [MethodImpl(AggressiveInlining)]  public Time Subtract(Time b) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public static Time operator -(Time a, Time b) => a.Subtract(b);
        public Time Negative => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public static Time operator -(Time self) => self.Negative;
        [MethodImpl(AggressiveInlining)]  public Boolean LessThanOrEquals(Time y) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public static Boolean operator <=(Time x, Time y) => x.LessThanOrEquals(y);
        [MethodImpl(AggressiveInlining)]  public Time Modulo(Number other) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public static Time operator %(Time self, Number other) => self.Modulo(other);
        [MethodImpl(AggressiveInlining)]  public Time Divide(Number other) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public static Time operator /(Time self, Number other) => self.Divide(other);
        [MethodImpl(AggressiveInlining)]  public Time Multiply(Number other) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public static Time operator *(Time self, Number other) => self.Multiply(other);
        [MethodImpl(AggressiveInlining)]  public Time CreateFromNumber(Number x) => throw new NotImplementedException();
}
}
