// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 11:25:56 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Quad3D: IPolygon3D, IDeformable3D<Quad3D>
    {
        // Fields
        [DataMember] public readonly Vector3 A;
        [DataMember] public readonly Vector3 B;
        [DataMember] public readonly Vector3 C;
        [DataMember] public readonly Vector3 D;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Quad3D WithA(Vector3 a) => new Quad3D(a, B, C, D);
        [MethodImpl(AggressiveInlining)] public Quad3D WithB(Vector3 b) => new Quad3D(A, b, C, D);
        [MethodImpl(AggressiveInlining)] public Quad3D WithC(Vector3 c) => new Quad3D(A, B, c, D);
        [MethodImpl(AggressiveInlining)] public Quad3D WithD(Vector3 d) => new Quad3D(A, B, C, d);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Quad3D(Vector3 a, Vector3 b, Vector3 c, Vector3 d) { A = a; B = b; C = c; D = d; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Quad3D Create(Vector3 a, Vector3 b, Vector3 c, Vector3 d) => new Quad3D(a, b, c, d);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Vector3, Vector3, Vector3, Vector3)(Quad3D self) => (self.A, self.B, self.C, self.D);
        [MethodImpl(AggressiveInlining)] public static implicit operator Quad3D((Vector3, Vector3, Vector3, Vector3) value) => new(value.Item1, value.Item2, value.Item3, value.Item4);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Vector3 a, out Vector3 b, out Vector3 c, out Vector3 d) { a = A; b = B; c = C; d = D;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Quad3D other) => A.Equals(other.A) && B.Equals(other.B) && C.Equals(other.C) && D.Equals(other.D);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Quad3D other) => !A.Equals(other.A) && B.Equals(other.B) && C.Equals(other.C) && D.Equals(other.D);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Quad3D other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(A, B, C, D);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"A\" = {A}, \"B\" = {B}, \"C\" = {C}, \"D\" = {D} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented concept functions and type functions
        public Quad3D Flip { [MethodImpl(AggressiveInlining)] get  => (this.D, this.C, this.B, this.A); } 
        public Vector3 Center { [MethodImpl(AggressiveInlining)] get  => this.A.Add(this.B.Add(this.C.Add(this.D))).Divide(((Number)4)); } 
        public Line3D LineA { [MethodImpl(AggressiveInlining)] get  => (this.A, this.B); } 
        public Line3D LineB { [MethodImpl(AggressiveInlining)] get  => (this.B, this.C); } 
        public Line3D LineC { [MethodImpl(AggressiveInlining)] get  => (this.C, this.D); } 
        public Line3D LineD { [MethodImpl(AggressiveInlining)] get  => (this.D, this.A); } 
        public Triangle3D TriangleA { [MethodImpl(AggressiveInlining)] get  => (this.A, this.B, this.C); } 
        public Triangle3D TriangleB { [MethodImpl(AggressiveInlining)] get  => (this.C, this.D, this.A); } 
        public LineArray3D LineArray3D { [MethodImpl(AggressiveInlining)] get  => new LineArray3D(this.Lines); } 
        [MethodImpl(AggressiveInlining)]  public static implicit operator LineArray3D(Quad3D q) => q.LineArray3D;
        public TriangleArray3D TriangleArray3D { [MethodImpl(AggressiveInlining)] get  => new TriangleArray3D(this.Triangles); } 
        [MethodImpl(AggressiveInlining)]  public static implicit operator TriangleArray3D(Quad3D q) => q.TriangleArray3D;
        public QuadArray3D QuadArray3D { [MethodImpl(AggressiveInlining)] get  => new QuadArray3D(Intrinsics.MakeArray(this)); } 
        [MethodImpl(AggressiveInlining)]  public static implicit operator QuadArray3D(Quad3D q) => q.QuadArray3D;
        public TriangleMesh3D TriangleMesh3D { [MethodImpl(AggressiveInlining)] get  => this.TriangleArray3D; } 
        [MethodImpl(AggressiveInlining)]  public static implicit operator TriangleMesh3D(Quad3D g) => g.TriangleMesh3D;
        public IArray<Vector3> Points { [MethodImpl(AggressiveInlining)] get  => Intrinsics.MakeArray<Vector3>(this.A, this.B, this.C, this.D); } 
        public IArray<Line3D> Lines { [MethodImpl(AggressiveInlining)] get  => Intrinsics.MakeArray<Line3D>(new Line3D(this.A, this.B), new Line3D(this.B, this.C), new Line3D(this.C, this.D), new Line3D(this.D, this.A)); } 
        public IArray<Triangle3D> Triangles { [MethodImpl(AggressiveInlining)] get  => Intrinsics.MakeArray<Triangle3D>(new Triangle3D(this.A, this.B, this.C), new Triangle3D(this.C, this.D, this.A)); } 
        [MethodImpl(AggressiveInlining)]  public Quad3D Deform(System.Func<Vector3, Vector3> f) => (f.Invoke(this.A), f.Invoke(this.B), f.Invoke(this.C), f.Invoke(this.D));
        [MethodImpl(AggressiveInlining)]  public IArray<Vector3> Sample(Integer numPoints){
            var _var752 = this;
            return numPoints.LinearSpace.Map((x) => _var752.Eval(x));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine3D ToPolyLine3D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
        [MethodImpl(AggressiveInlining)]  public Procedural<Number, TR> Combine<TR>(Quad3D b, System.Func<TR, TR, TR> f){
            var _var755 = b;
            {
                var _var754 = this;
                {
                    var _var753 = f;
                    return (x) => _var753.Invoke(_var754.Eval(x), _var755.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector3> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var757 = f;
            {
                var _var756 = this;
                return (x) => _var756.Eval(_var757.Invoke(x));
            }
        }

        public System.Func<Number, Vector3> Function { [MethodImpl(AggressiveInlining)] get {
            var _var758 = this;
            return (x) => _var758.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Number, Vector3> Compose(Quad3D b){
            var _var760 = this;
            {
                var _var759 = b;
                return (x) => _var759.Eval(_var760.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, TR> Combine<TR>(Quad3D b, System.Func<TR, TR, TR> f){
            var _var763 = b;
            {
                var _var762 = this;
                {
                    var _var761 = f;
                    return (x) => _var761.Invoke(_var762.Eval(x), _var763.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var765 = f;
            {
                var _var764 = this;
                return (x) => _var764.Eval(_var765.Invoke(x));
            }
        }

        public System.Func<Vector3, Number> Function { [MethodImpl(AggressiveInlining)] get {
            var _var766 = this;
            return (x) => _var766.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, Number> Compose(Quad3D b){
            var _var768 = this;
            {
                var _var767 = b;
                return (x) => _var767.Eval(_var768.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Union(Quad3D b) => this.Combine(b, (a, b) => a.Max(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Intersection(Quad3D b) => this.Combine(b, (a, b) => a.Min(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Difference(Quad3D b) => this.Combine(b, (a, b) => a.Max(b.Negative));
        public Procedural<Vector3, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) => x.Negative); } 
        public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 
        [MethodImpl(AggressiveInlining)]  public Quad3D Deform(IdentityTransform3D t){
            var _var769 = t;
            return this.Deform((v) => _var769.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public Quad3D Deform(MatrixTransform3D t){
            var _var770 = t;
            return this.Deform((v) => _var770.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public Quad3D Deform(Translation3D t){
            var _var771 = t;
            return this.Deform((v) => _var771.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public Quad3D Deform(Rotation3D t){
            var _var772 = t;
            return this.Deform((v) => _var772.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public Quad3D Deform(LookRotation t){
            var _var773 = t;
            return this.Deform((v) => _var773.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public Quad3D Deform(Scaling3D t){
            var _var774 = t;
            return this.Deform((v) => _var774.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public Quad3D Deform(TRSTransform3D t){
            var _var775 = t;
            return this.Deform((v) => _var775.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public Quad3D Deform(Pose3D t){
            var _var776 = t;
            return this.Deform((v) => _var776.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public Quad3D Deform(AxisAngle t){
            var _var777 = t;
            return this.Deform((v) => _var777.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public Quad3D Deform(EulerAngles t){
            var _var778 = t;
            return this.Deform((v) => _var778.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public Quad3D Deform(Perspective3D t){
            var _var779 = t;
            return this.Deform((v) => _var779.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public Quad3D Deform(Orthographic3D t){
            var _var780 = t;
            return this.Deform((v) => _var780.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public Quad3D Deform(PlaneProjection t){
            var _var781 = t;
            return this.Deform((v) => _var781.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public Quad3D Translate(Vector3 v){
            var _var782 = v;
            return this.Deform((p) => p.Add(_var782));
        }

        [MethodImpl(AggressiveInlining)]  public Quad3D Rotate(Quaternion q) => this.Deform(q);
        [MethodImpl(AggressiveInlining)]  public Quad3D Scale(Vector3 v){
            var _var783 = v;
            return this.Deform((p) => p.Multiply(_var783));
        }

        [MethodImpl(AggressiveInlining)]  public Quad3D Scale(Number s){
            var _var784 = s;
            return this.Deform((p) => p.Multiply(_var784));
        }

        [MethodImpl(AggressiveInlining)]  public Quad3D RotateX(Angle a) => this.Rotate(a.RotateX);
        [MethodImpl(AggressiveInlining)]  public Quad3D RotateY(Angle a) => this.Rotate(a.RotateY);
        [MethodImpl(AggressiveInlining)]  public Quad3D RotateZ(Angle a) => this.Rotate(a.RotateZ);
        [MethodImpl(AggressiveInlining)]  public Quad3D TranslateX(Number s){
            var _var785 = s;
            return this.Deform((p) => p.Add((_var785, ((Integer)0), ((Integer)0))));
        }

        [MethodImpl(AggressiveInlining)]  public Quad3D TranslateY(Number s){
            var _var786 = s;
            return this.Deform((p) => p.Add((((Integer)0), _var786, ((Integer)0))));
        }

        [MethodImpl(AggressiveInlining)]  public Quad3D TranslateZ(Number s){
            var _var787 = s;
            return this.Deform((p) => p.Add((((Integer)0), ((Integer)0), _var787)));
        }

        [MethodImpl(AggressiveInlining)]  public Quad3D ScaleX(Number s){
            var _var788 = s;
            return this.Deform((p) => p.Multiply((_var788, ((Integer)1), ((Integer)1))));
        }

        [MethodImpl(AggressiveInlining)]  public Quad3D ScaleY(Number s){
            var _var789 = s;
            return this.Deform((p) => p.Multiply((((Integer)1), _var789, ((Integer)1))));
        }

        [MethodImpl(AggressiveInlining)]  public Quad3D ScaleZ(Number s){
            var _var790 = s;
            return this.Deform((p) => p.Multiply((((Integer)1), ((Integer)1), _var790)));
        }


        // Unimplemented concept functions
        [MethodImpl(AggressiveInlining)]  public Number Distance(Vector3 p) => throw new NotImplementedException();
        [MethodImpl(AggressiveInlining)]  public Number Eval(Vector3 t) => throw new NotImplementedException();
        [MethodImpl(AggressiveInlining)]  public Vector3 Eval(Number t) => throw new NotImplementedException();
        public IArray<Vector3> Corners => throw new NotImplementedException();
        public Integer PrimitiveSize => throw new NotImplementedException();
        public Integer NumPrimitives => throw new NotImplementedException();
    }
}
