// Autogenerated file: DO NOT EDIT
// Created on 2025-01-17 3:12:39 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Rotation3D: IRotationalTransform3D
    {
        // Fields
        [DataMember] public readonly Quaternion Rotation;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Rotation3D WithRotation(Quaternion rotation) => new Rotation3D(rotation);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Rotation3D(Quaternion rotation) { Rotation = rotation; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Rotation3D Create(Quaternion rotation) => new Rotation3D(rotation);

        // Implicit converters to/from single field
        [MethodImpl(AggressiveInlining)] public static implicit operator Quaternion(Rotation3D self) => self.Rotation;
        [MethodImpl(AggressiveInlining)] public static implicit operator Rotation3D(Quaternion value) => new Rotation3D(value);

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Rotation3D other) => Rotation.Equals(other.Rotation);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Rotation3D other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Rotation);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Rotation\" = {Rotation} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented concept functions and type functions
        public Quaternion Quaternion { [MethodImpl(AggressiveInlining)] get  => this.Rotation; } 
        public Matrix4x4 Matrix { [MethodImpl(AggressiveInlining)] get  => this.Quaternion.Matrix; } 
        [MethodImpl(AggressiveInlining)]  public Vector3 Transform(Vector3 v) => v.Transform(this.Quaternion);
        [MethodImpl(AggressiveInlining)]  public Vector3 TransformNormal(Vector3 v) => v.TransformNormal(this.Quaternion);
        public Rotation3D Inverse { [MethodImpl(AggressiveInlining)] get  => new Any(Rotation3D, this.Quaternion.Inverse); } 
        public Matrix4x4 Matrix4x4 { [MethodImpl(AggressiveInlining)] get  => this.Matrix; } 
        [MethodImpl(AggressiveInlining)]  public static implicit operator Matrix4x4(Rotation3D t) => t.Matrix4x4;

        // Unimplemented concept functions
    }
}
