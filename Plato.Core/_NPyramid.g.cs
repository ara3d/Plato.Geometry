// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 8:08:08 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
public partial struct NPyramid: ISolid
{
    // Fields
    [DataMember] public readonly Number Height;
    [DataMember] public readonly Number Radius;
    [DataMember] public readonly Integer NumSides;

    // With functions 
    [MethodImpl(AggressiveInlining)] public NPyramid WithHeight(Number height) => new NPyramid(height, Radius, NumSides);
    [MethodImpl(AggressiveInlining)] public NPyramid WithRadius(Number radius) => new NPyramid(Height, radius, NumSides);
    [MethodImpl(AggressiveInlining)] public NPyramid WithNumSides(Integer numSides) => new NPyramid(Height, Radius, numSides);

    // Regular Constructor
    [MethodImpl(AggressiveInlining)] public NPyramid(Number height, Number radius, Integer numSides) { Height = height; Radius = radius; NumSides = numSides; }

    // Static factory function
    [MethodImpl(AggressiveInlining)] public static NPyramid Create(Number height, Number radius, Integer numSides) => new NPyramid(height, radius, numSides);

    // Implicit converters to/from value-tuples and deconstructor
    [MethodImpl(AggressiveInlining)] public static implicit operator (Number, Number, Integer)(NPyramid self) => (self.Height, self.Radius, self.NumSides);
    [MethodImpl(AggressiveInlining)] public static implicit operator NPyramid((Number, Number, Integer) value) => new(value.Item1, value.Item2, value.Item3);
    [MethodImpl(AggressiveInlining)] public void Deconstruct(out Number height, out Number radius, out Integer numSides) { height = Height; radius = Radius; numSides = NumSides;  }

    // Object virtual function overrides: Equals, GetHashCode, ToString
    [MethodImpl(AggressiveInlining)] public Boolean Equals(NPyramid other) => Height.Equals(other.Height) && Radius.Equals(other.Radius) && NumSides.Equals(other.NumSides);
    [MethodImpl(AggressiveInlining)] public Boolean NotEquals(NPyramid other) => !Height.Equals(other.Height) && Radius.Equals(other.Radius) && NumSides.Equals(other.NumSides);
    [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is NPyramid other ? Equals(other) : false;
    [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Height, Radius, NumSides);
    [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Height\" = {Height}, \"Radius\" = {Radius}, \"NumSides\" = {NumSides} }}";

    // Explicit implementation of interfaces by forwarding properties to fields

    // Implemented concept functions and type functions
    public Boolean ClosedX { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 
public Boolean ClosedY { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, TR> Combine<TR>(NPyramid b, System.Func<TR, TR, TR> f){
    var _var1066 = b;
    {
        var _var1065 = this;
        {
            var _var1064 = f;
            return (x) =>  => _var1064.Invoke(_var1065.Eval(x), _var1066.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector3> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var1068 = f;
    {
        var _var1067 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var1067.Eval(_var1068.Invoke(x));
;
    }
}

public System.Func<Vector2, Vector3> Function { [MethodImpl(AggressiveInlining)] get {
    var _var1069 = this;
    return (x) =>  => _var1069.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Vector3> Compose(NPyramid b){
    var _var1071 = this;
    {
        var _var1070 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var1070.Eval(_var1071.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, TR> Combine<TR>(NPyramid b, System.Func<TR, TR, TR> f){
    var _var1074 = b;
    {
        var _var1073 = this;
        {
            var _var1072 = f;
            return (x) =>  => _var1072.Invoke(_var1073.Eval(x), _var1074.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var1076 = f;
    {
        var _var1075 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var1075.Eval(_var1076.Invoke(x));
;
    }
}

public System.Func<Vector3, Number> Function { [MethodImpl(AggressiveInlining)] get {
    var _var1077 = this;
    return (x) =>  => _var1077.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, Number> Compose(NPyramid b){
    var _var1079 = this;
    {
        var _var1078 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var1078.Eval(_var1079.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Union(NPyramid b) => this.Combine(b, (a, b) =>  => a.Max(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Intersection(NPyramid b) => this.Combine(b, (a, b) =>  => a.Min(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Difference(NPyramid b) => this.Combine(b, (a, b) =>  => a.Max(b.Negative);

public Procedural<Vector3, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) =>  => x.Negative;
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, Boolean> Threshold(Number threshold){
    var _var1080 = threshold;
    return this.Map((x) =>  => x.GreaterThanOrEquals(_var1080);
;
}


    // Unimplemented concept functions
    [MethodImpl(AggressiveInlining)]  public Number Distance(Vector3 p) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public Number Eval(Vector3 t) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public Vector3 Eval(Vector2 t) => throw new NotImplementedException();
}
Plato.CSharpWriter.CSharpConcreteTypeWriter}
