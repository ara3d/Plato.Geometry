// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 12:06:56 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct LemniscateOfBernoulli: IPolarCurve, IOpenShape
    {
        // Fields
        [DataMember] public readonly Number A;

        // With functions 
        [MethodImpl(AggressiveInlining)] public LemniscateOfBernoulli WithA(Number a) => new LemniscateOfBernoulli(a);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public LemniscateOfBernoulli(Number a) { A = a; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static LemniscateOfBernoulli Create(Number a) => new LemniscateOfBernoulli(a);

        // Implicit converters to/from single field
        [MethodImpl(AggressiveInlining)] public static implicit operator Number(LemniscateOfBernoulli self) => self.A;
        [MethodImpl(AggressiveInlining)] public static implicit operator LemniscateOfBernoulli(Number value) => new LemniscateOfBernoulli(value);
        [MethodImpl(AggressiveInlining)] public static implicit operator LemniscateOfBernoulli(Integer value) => new LemniscateOfBernoulli(value);
        [MethodImpl(AggressiveInlining)] public static implicit operator LemniscateOfBernoulli(int value) => new Integer(value);
        [MethodImpl(AggressiveInlining)] public static implicit operator LemniscateOfBernoulli(float value) => new Number(value);
        [MethodImpl(AggressiveInlining)] public static implicit operator float(LemniscateOfBernoulli value) => value.A;

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(LemniscateOfBernoulli other) => A.Equals(other.A);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(LemniscateOfBernoulli other) => !A.Equals(other.A);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is LemniscateOfBernoulli other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(A);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"A\" = {A} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented concept functions and type functions
        [MethodImpl(AggressiveInlining)]  public Number GetRadius(Angle t) => t.LemniscateOfBernoulli(this.A);
        [MethodImpl(AggressiveInlining)]  public PolarCoordinate EvalPolar(Angle t) => (this.GetRadius(t), t);
        [MethodImpl(AggressiveInlining)]  public Vector2 Eval(Angle t) => this.EvalPolar(t);
        [MethodImpl(AggressiveInlining)]  public Vector2 Eval(Number t) => this.Eval(t.Turns);
        [MethodImpl(AggressiveInlining)]  public IArray<Vector2> Sample(Integer numPoints){
            var _var348 = this;
            return numPoints.LinearSpace.Map((x) => _var348.Eval(x));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine2D ToPolyLine2D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
        [MethodImpl(AggressiveInlining)]  public Procedural<Number, TR> Combine<TR>(LemniscateOfBernoulli b, System.Func<TR, TR, TR> f){
            var _var351 = b;
            {
                var _var350 = this;
                {
                    var _var349 = f;
                    return (x) => _var349.Invoke(_var350.Eval(x), _var351.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector2> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var353 = f;
            {
                var _var352 = this;
                return (x) => _var352.Eval(_var353.Invoke(x));
            }
        }

        public System.Func<Number, Vector2> Function { [MethodImpl(AggressiveInlining)] get {
            var _var354 = this;
            return (x) => _var354.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Number, Vector2> Compose(LemniscateOfBernoulli b){
            var _var356 = this;
            {
                var _var355 = b;
                return (x) => _var355.Eval(_var356.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, TR> Combine<TR>(LemniscateOfBernoulli b, System.Func<TR, TR, TR> f){
            var _var359 = b;
            {
                var _var358 = this;
                {
                    var _var357 = f;
                    return (x) => _var357.Invoke(_var358.Eval(x), _var359.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var361 = f;
            {
                var _var360 = this;
                return (x) => _var360.Eval(_var361.Invoke(x));
            }
        }

        public System.Func<Vector2, Number> Function { [MethodImpl(AggressiveInlining)] get {
            var _var362 = this;
            return (x) => _var362.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Number> Compose(LemniscateOfBernoulli b){
            var _var364 = this;
            {
                var _var363 = b;
                return (x) => _var363.Eval(_var364.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Union(LemniscateOfBernoulli b) => this.Combine(b, (a, b) => a.Max(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Intersection(LemniscateOfBernoulli b) => this.Combine(b, (a, b) => a.Min(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Difference(LemniscateOfBernoulli b) => this.Combine(b, (a, b) => a.Max(b.Negative));
        public Procedural<Vector2, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) => x.Negative); } 
        public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)false); } 

        // Unimplemented concept functions
        [MethodImpl(AggressiveInlining)]  public Number Distance(Vector2 p) => throw new NotImplementedException();
        [MethodImpl(AggressiveInlining)]  public Number Eval(Vector2 t) => throw new NotImplementedException();
    }
}
