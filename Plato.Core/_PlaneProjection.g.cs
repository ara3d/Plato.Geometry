// Autogenerated file: DO NOT EDIT
// Created on 2025-04-03 1:53:19 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct PlaneProjection: ITransform3D
    {
        // Fields
        [DataMember] public readonly Vector3 Direction;
        [DataMember] public readonly Plane Plane;

        // With functions 
        [MethodImpl(AggressiveInlining)] public PlaneProjection WithDirection(Vector3 direction) => new PlaneProjection(direction, Plane);
        [MethodImpl(AggressiveInlining)] public PlaneProjection WithPlane(Plane plane) => new PlaneProjection(Direction, plane);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public PlaneProjection(Vector3 direction, Plane plane) { Direction = direction; Plane = plane; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static PlaneProjection Create(Vector3 direction, Plane plane) => new PlaneProjection(direction, plane);

        // Static default implementation
        public static readonly PlaneProjection Default = default;

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Vector3, Plane)(PlaneProjection self) => (self.Direction, self.Plane);
        [MethodImpl(AggressiveInlining)] public static implicit operator PlaneProjection((Vector3, Plane) value) => new(value.Item1, value.Item2);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Vector3 direction, out Plane plane) { direction = Direction; plane = Plane;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(PlaneProjection other) => Direction.Equals(other.Direction) && Plane.Equals(other.Plane);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(PlaneProjection other) => !Direction.Equals(other.Direction) && Plane.Equals(other.Plane);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is PlaneProjection other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Direction, Plane);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Direction\" = {Direction}, \"Plane\" = {Plane} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented interface functions
        public Matrix4x4 Matrix { [MethodImpl(AggressiveInlining)] get  => Matrix4x4.CreateShadow(this.Direction, this.Plane); } 
public Matrix4x4 Matrix4x4 { [MethodImpl(AggressiveInlining)] get  => this.Matrix; } 
[MethodImpl(AggressiveInlining)]  public static implicit operator Matrix4x4(PlaneProjection t) => t.Matrix4x4;
        [MethodImpl(AggressiveInlining)]  public Vector3 Transform(Vector3 v) => v.Transform(this.Matrix);
[MethodImpl(AggressiveInlining)]  public Vector3 TransformNormal(Vector3 v) => v.TransformNormal(this.Matrix);
public MatrixTransform3D Inverse { [MethodImpl(AggressiveInlining)] get  => this.Matrix.Invert; } 

        // Unimplemented interface functions
    }
}
