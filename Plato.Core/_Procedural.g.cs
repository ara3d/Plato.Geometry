// Autogenerated file: DO NOT EDIT
// Created on 2025-03-18 2:15:23 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Procedural<TIn, TOut>
    {
        // Fields
        [DataMember] public readonly System.Func<TIn, TOut> Function;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Procedural<TIn, TOut> WithFunction(System.Func<TIn, TOut> function) => new Procedural<TIn, TOut>(function);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Procedural(System.Func<TIn, TOut> function) { Function = function; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Procedural<TIn, TOut> Create(System.Func<TIn, TOut> function) => new Procedural<TIn, TOut>(function);

        // Implicit converters to/from single field
        [MethodImpl(AggressiveInlining)] public static implicit operator System.Func<TIn, TOut>(Procedural<TIn, TOut> self) => self.Function;
        [MethodImpl(AggressiveInlining)] public static implicit operator Procedural<TIn, TOut>(System.Func<TIn, TOut> value) => new Procedural<TIn, TOut>(value);

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Procedural<TIn, TOut> other) => Function.Equals(other.Function);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Procedural<TIn, TOut> other) => !Function.Equals(other.Function);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Procedural<TIn, TOut> other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Function);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Function\" = {Function} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented interface functions

        // Unimplemented concept functions
    }
}
