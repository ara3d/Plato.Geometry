// Autogenerated file: DO NOT EDIT
// Created on 2025-04-08 12:25:04 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct QuadMesh2D: IQuadMesh2D<QuadMesh2D>
    {
        // Fields
        [DataMember] public readonly IArray<Point2D> Points;
        [DataMember] public readonly IArray<Integer4> FaceIndices;

        // With functions 
        [MethodImpl(AggressiveInlining)] public QuadMesh2D WithPoints(IArray<Point2D> points) => new QuadMesh2D(points, FaceIndices);
        [MethodImpl(AggressiveInlining)] public QuadMesh2D WithFaceIndices(IArray<Integer4> faceIndices) => new QuadMesh2D(Points, faceIndices);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public QuadMesh2D(IArray<Point2D> points, IArray<Integer4> faceIndices) { Points = points; FaceIndices = faceIndices; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static QuadMesh2D Create(IArray<Point2D> points, IArray<Integer4> faceIndices) => new QuadMesh2D(points, faceIndices);

        // Static default implementation
        public static readonly QuadMesh2D Default = default;

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (IArray<Point2D>, IArray<Integer4>)(QuadMesh2D self) => (self.Points, self.FaceIndices);
        [MethodImpl(AggressiveInlining)] public static implicit operator QuadMesh2D((IArray<Point2D>, IArray<Integer4>) value) => new QuadMesh2D(value.Item1, value.Item2);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out IArray<Point2D> points, out IArray<Integer4> faceIndices) { points = Points; faceIndices = FaceIndices;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(QuadMesh2D other) => Points.Equals(other.Points) && FaceIndices.Equals(other.FaceIndices);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(QuadMesh2D other) => !Points.Equals(other.Points) && FaceIndices.Equals(other.FaceIndices);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is QuadMesh2D other ? Equals(other).Value : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Points, FaceIndices);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Points\" = {Points}, \"FaceIndices\" = {FaceIndices} }}";

        // Explicit implementation of interfaces by forwarding properties to fields
        IArray<Point2D> IPointGeometry2D<QuadMesh2D>.Points { [MethodImpl(AggressiveInlining)] get => Points; }

        // Implemented interface functions
        [MethodImpl(AggressiveInlining)]  public QuadMesh2D Deform(System.Func<Point2D, Point2D> f) => (this.Points.Map(f), this.FaceIndices);
public IArray<Integer> Indices { [MethodImpl(AggressiveInlining)] get  => this.FaceIndices.FlatMap((fi)  => fi.Components); } 
public IArray<Quad2D> Faces { [MethodImpl(AggressiveInlining)] get  => this.Quads; } 
public IArray<Quad2D> Quads { [MethodImpl(AggressiveInlining)] get {
            var _var141 = this;
            return this.FaceIndices.Map((f)  => _var141.Quad(f));
        }
         } 
public Integer NumPrimitives { [MethodImpl(AggressiveInlining)] get  => this.Indices.Count.Divide(this.PrimitiveSize); } 
[MethodImpl(AggressiveInlining)]  public Point2D Point(Integer index) => this.Points.At(index);
[MethodImpl(AggressiveInlining)]  public Triangle2D Triangle(Integer3 f) => (this.Point(f.A), this.Point(f.B), this.Point(f.C));
[MethodImpl(AggressiveInlining)]  public Quad2D Quad(Integer4 f) => (this.Point(f.A), this.Point(f.B), this.Point(f.C), this.Point(f.D));
public Bounds2D Bounds { [MethodImpl(AggressiveInlining)] get  => this.Points.Bounds(); } 
public Integer PrimitiveSize { [MethodImpl(AggressiveInlining)] get  => ((Integer)4); } 

        // Unimplemented interface functions
        public IArray<Quad2D> Primitives => throw new NotImplementedException();
}
}
