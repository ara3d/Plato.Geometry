// Autogenerated file: DO NOT EDIT
// Created on 2025-01-24 1:12:52 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Hypocycloid: IAngularCurve2D, IOpenShape
    {
        // Fields
        [DataMember] public readonly Number Radius1;
        [DataMember] public readonly Number Radius2;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Hypocycloid WithRadius1(Number radius1) => new Hypocycloid(radius1, Radius2);
        [MethodImpl(AggressiveInlining)] public Hypocycloid WithRadius2(Number radius2) => new Hypocycloid(Radius1, radius2);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Hypocycloid(Number radius1, Number radius2) { Radius1 = radius1; Radius2 = radius2; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Hypocycloid Create(Number radius1, Number radius2) => new Hypocycloid(radius1, radius2);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Number, Number)(Hypocycloid self) => (self.Radius1, self.Radius2);
        [MethodImpl(AggressiveInlining)] public static implicit operator Hypocycloid((Number, Number) value) => new(value.Item1, value.Item2);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Number radius1, out Number radius2) { radius1 = Radius1; radius2 = Radius2;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Hypocycloid other) => Radius1.Equals(other.Radius1) && Radius2.Equals(other.Radius2);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Hypocycloid other) => !Radius1.Equals(other.Radius1) && Radius2.Equals(other.Radius2);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Hypocycloid other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Radius1, Radius2);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Radius1\" = {Radius1}, \"Radius2\" = {Radius2} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented concept functions and type functions
        [MethodImpl(AggressiveInlining)]  public Vector2 Eval(Angle t) => t.Hypocycloid(this.Radius1, this.Radius2);
        [MethodImpl(AggressiveInlining)]  public Vector2 Eval(Number t) => this.Eval(t.Turns);
        [MethodImpl(AggressiveInlining)]  public IArray<Vector2> Sample(Integer numPoints){
            var _var47 = this;
            return numPoints.LinearSpace.Map((x) => _var47.Eval(x));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine2D ToPolyLine2D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
        public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)false); } 

        // Unimplemented concept functions
        [MethodImpl(AggressiveInlining)]  public Number Distance(Vector2 p) => throw new NotImplementedException();
    }
}
