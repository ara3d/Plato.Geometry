// This file is auto-generated
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Intrinsics;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    public static partial class Intrinsics
    {
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 Value(this Matrix4x4 self) => self.Value;
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 Identity(this Matrix4x4 self) => Matrix4x4.Identity;
        [MethodImpl(AggressiveInlining)] public static Number Determinant(this Matrix4x4 self) => self.Determinant;
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 Transpose(this Matrix4x4 self) => self.Transpose;
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 Add(this Matrix4x4 value1, Matrix4x4 value2) => value1 + value2;
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 Subtract(this Matrix4x4 value1, Matrix4x4 value2) => value1 - value2;
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 Multiply(this Matrix4x4 value1, Matrix4x4 value2) => value1 * value2;
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 Multiply(this Matrix4x4 value1, Number f) => value1 * f;
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 Multiply(this Number f, Matrix4x4 value1) => f * value1;
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 Divide(this Matrix4x4 value1, Number f) => value1 / f;
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 Add(this Matrix4x4 self, Matrix4x4 value1, Matrix4x4 value2) => Matrix4x4.Add(value1, value2);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 Subtract(this Matrix4x4 self, Matrix4x4 value1, Matrix4x4 value2) => Matrix4x4.Subtract(value1, value2);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 Multiply(this Matrix4x4 self, Matrix4x4 value1, Matrix4x4 value2) => Matrix4x4.Multiply(value1, value2);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 CreateTranslation(this Matrix4x4 self, Vector3 position) => Matrix4x4.CreateTranslation(position);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 CreateScale(this Matrix4x4 self, Number scale) => Matrix4x4.CreateScale(scale);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 CreateScale(this Matrix4x4 self, Number xScale, Number yScale, Number zScale) => Matrix4x4.CreateScale(xScale, yScale, zScale);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 CreateRotationX(this Matrix4x4 self, Angle angle) => Matrix4x4.CreateRotationX(angle);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 CreateRotationY(this Matrix4x4 self, Angle angle) => Matrix4x4.CreateRotationY(angle);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 CreateRotationZ(this Matrix4x4 self, Angle angle) => Matrix4x4.CreateRotationZ(angle);
        [MethodImpl(AggressiveInlining)] public static ValueTuple<Vector3, Quaternion, Vector3, Boolean> Decompose(this Matrix4x4 self) => self.Decompose();
        [MethodImpl(AggressiveInlining)] public static int GetHashCode(this Matrix4x4 self) => self.GetHashCode();
        [MethodImpl(AggressiveInlining)] public static string ToString(this Matrix4x4 self) => self.ToString();
        [MethodImpl(AggressiveInlining)] public static Boolean Equals(this Matrix4x4 a, Matrix4x4 b) => a == b;
        [MethodImpl(AggressiveInlining)] public static Boolean NotEquals(this Matrix4x4 a, Matrix4x4 b) => a != b;
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 Lerp(this Matrix4x4 self, Matrix4x4 matrix1, Matrix4x4 matrix2, Number amount) => Matrix4x4.Lerp(matrix1, matrix2, amount);
        [MethodImpl(AggressiveInlining)] public static ValueTuple<Matrix4x4, Boolean> Invert(this Matrix4x4 self) => self.Invert();
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 CreatePerspectiveFieldOfView(this Matrix4x4 self, Number fieldOfView, Number aspectRatio, Number nearPlane, Number farPlane) => Matrix4x4.CreatePerspectiveFieldOfView(fieldOfView, aspectRatio, nearPlane, farPlane);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 CreateBillboard(this Matrix4x4 self, Vector3 objectPosition, Vector3 cameraPosition, Vector3 cameraUpVector, Vector3 cameraForwardVector) => Matrix4x4.CreateBillboard(objectPosition, cameraPosition, cameraUpVector, cameraForwardVector);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 CreateConstrainedBillboard(this Matrix4x4 self, Vector3 objectPosition, Vector3 cameraPosition, Vector3 rotateAxis, Vector3 cameraForwardVector, Vector3 objectForwardVector) => Matrix4x4.CreateConstrainedBillboard(objectPosition, cameraPosition, rotateAxis, cameraForwardVector, objectForwardVector);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 CreateFromAxisAngle(this Matrix4x4 self, Vector3 axis, Angle angle) => Matrix4x4.CreateFromAxisAngle(axis, angle);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 CreateFromQuaternion(this Matrix4x4 self, Quaternion quaternion) => Matrix4x4.CreateFromQuaternion(quaternion);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 CreateFromYawPitchRoll(this Matrix4x4 self, Angle yaw, Angle pitch, Angle roll) => Matrix4x4.CreateFromYawPitchRoll(yaw, pitch, roll);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 CreateLookAt(this Matrix4x4 self, Vector3 cameraPosition, Vector3 cameraTarget, Vector3 cameraUpVector) => Matrix4x4.CreateLookAt(cameraPosition, cameraTarget, cameraUpVector);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 CreateOrthographic(this Matrix4x4 self, Number width, Number height, Number zNearPlane, Number zFarPlane) => Matrix4x4.CreateOrthographic(width, height, zNearPlane, zFarPlane);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 CreateOrthographicOffCenter(this Matrix4x4 self, Number left, Number right, Number bottom, Number top, Number zNearPlane, Number zFarPlane) => Matrix4x4.CreateOrthographicOffCenter(left, right, bottom, top, zNearPlane, zFarPlane);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 CreatePerspective(this Matrix4x4 self, Number width, Number height, Number nearPlaneDistance, Number farPlaneDistance) => Matrix4x4.CreatePerspective(width, height, nearPlaneDistance, farPlaneDistance);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 CreatePerspectiveOffCenter(this Matrix4x4 self, Number left, Number right, Number bottom, Number top, Number nearPlaneDistance, Number farPlaneDistance) => Matrix4x4.CreatePerspectiveOffCenter(left, right, bottom, top, nearPlaneDistance, farPlaneDistance);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 CreateReflection(this Matrix4x4 self, Plane value) => Matrix4x4.CreateReflection(value);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 CreateShadow(this Matrix4x4 self, Vector3 lightDirection, Plane plane) => Matrix4x4.CreateShadow(lightDirection, plane);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 CreateWorld(this Matrix4x4 self, Vector3 position, Vector3 forward, Vector3 up) => Matrix4x4.CreateWorld(position, forward, up);
        [MethodImpl(AggressiveInlining)] public static Type GetType(this Matrix4x4 self) => self.GetType();
        [MethodImpl(AggressiveInlining)] public static Matrix3x2 Value(this Matrix3x2 self) => self.Value;
        [MethodImpl(AggressiveInlining)] public static Matrix3x2 Identity(this Matrix3x2 self) => Matrix3x2.Identity;
        [MethodImpl(AggressiveInlining)] public static Number Determinant(this Matrix3x2 self) => self.Determinant;
        [MethodImpl(AggressiveInlining)] public static Matrix3x2 Add(this Matrix3x2 value1, Matrix3x2 value2) => value1 + value2;
        [MethodImpl(AggressiveInlining)] public static Matrix3x2 Subtract(this Matrix3x2 value1, Matrix3x2 value2) => value1 - value2;
        [MethodImpl(AggressiveInlining)] public static Matrix3x2 Multiply(this Matrix3x2 value1, Matrix3x2 value2) => value1 * value2;
        [MethodImpl(AggressiveInlining)] public static Matrix3x2 Multiply(this Matrix3x2 value1, Number scalar) => value1 * scalar;
        [MethodImpl(AggressiveInlining)] public static Matrix3x2 Multiply(this Number scalar, Matrix3x2 value1) => scalar * value1;
        [MethodImpl(AggressiveInlining)] public static Matrix3x2 Divide(this Matrix3x2 value1, Number scalar) => value1 / scalar;
        [MethodImpl(AggressiveInlining)] public static Boolean Equals(this Matrix3x2 a, Matrix3x2 b) => a == b;
        [MethodImpl(AggressiveInlining)] public static Boolean NotEquals(this Matrix3x2 a, Matrix3x2 b) => a != b;
        [MethodImpl(AggressiveInlining)] public static Matrix3x2 CreateTranslation(this Matrix3x2 self, Number xPosition, Number yPosition) => Matrix3x2.CreateTranslation(xPosition, yPosition);
        [MethodImpl(AggressiveInlining)] public static Matrix3x2 CreateTranslation(this Matrix3x2 self, Vector2 position) => Matrix3x2.CreateTranslation(position);
        [MethodImpl(AggressiveInlining)] public static Matrix3x2 CreateScale(this Matrix3x2 self, Number scale) => Matrix3x2.CreateScale(scale);
        [MethodImpl(AggressiveInlining)] public static Matrix3x2 CreateScale(this Matrix3x2 self, Number xScale, Number yScale) => Matrix3x2.CreateScale(xScale, yScale);
        [MethodImpl(AggressiveInlining)] public static Matrix3x2 CreateScale(this Matrix3x2 self, Vector2 scales) => Matrix3x2.CreateScale(scales);
        [MethodImpl(AggressiveInlining)] public static Matrix3x2 CreateScale(this Matrix3x2 self, Number xScale, Number yScale, Vector2 centerPoint) => Matrix3x2.CreateScale(xScale, yScale, centerPoint);
        [MethodImpl(AggressiveInlining)] public static Matrix3x2 CreateRotation(this Matrix3x2 self, Number radians) => Matrix3x2.CreateRotation(radians);
        [MethodImpl(AggressiveInlining)] public static Matrix3x2 CreateRotation(this Matrix3x2 self, Number radians, Vector2 centerPoint) => Matrix3x2.CreateRotation(radians, centerPoint);
        [MethodImpl(AggressiveInlining)] public static ValueTuple<Matrix3x2, Boolean> Invert(this Matrix3x2 self) => self.Invert();
        [MethodImpl(AggressiveInlining)] public static Matrix3x2 Lerp(this Matrix3x2 self, Matrix3x2 matrix2, Number amount) => self.Lerp(matrix2, amount);
        [MethodImpl(AggressiveInlining)] public static int GetHashCode(this Matrix3x2 self) => self.GetHashCode();
        [MethodImpl(AggressiveInlining)] public static string ToString(this Matrix3x2 self) => self.ToString();
        [MethodImpl(AggressiveInlining)] public static Type GetType(this Matrix3x2 self) => self.GetType();
        [MethodImpl(AggressiveInlining)] public static Vector2 Value(this Vector2 self) => self.Value;
        [MethodImpl(AggressiveInlining)] public static Vector2 E(this Vector2 self) => Vector2.E;
        [MethodImpl(AggressiveInlining)] public static Vector2 Epsilon(this Vector2 self) => Vector2.Epsilon;
        [MethodImpl(AggressiveInlining)] public static Vector2 NaN(this Vector2 self) => Vector2.NaN;
        [MethodImpl(AggressiveInlining)] public static Vector2 NegativeInfinity(this Vector2 self) => Vector2.NegativeInfinity;
        [MethodImpl(AggressiveInlining)] public static Vector2 NegativeZero(this Vector2 self) => Vector2.NegativeZero;
        [MethodImpl(AggressiveInlining)] public static Vector2 One(this Vector2 self) => Vector2.One;
        [MethodImpl(AggressiveInlining)] public static Vector2 Pi(this Vector2 self) => Vector2.Pi;
        [MethodImpl(AggressiveInlining)] public static Vector2 PositiveInfinity(this Vector2 self) => Vector2.PositiveInfinity;
        [MethodImpl(AggressiveInlining)] public static Vector2 Tau(this Vector2 self) => Vector2.Tau;
        [MethodImpl(AggressiveInlining)] public static Vector2 UnitX(this Vector2 self) => Vector2.UnitX;
        [MethodImpl(AggressiveInlining)] public static Vector2 UnitY(this Vector2 self) => Vector2.UnitY;
        [MethodImpl(AggressiveInlining)] public static Vector2 Zero(this Vector2 self) => Vector2.Zero;
        [MethodImpl(AggressiveInlining)] public static Number At(this Vector2 self, Integer index) => self[index];
        [MethodImpl(AggressiveInlining)] public static Integer Count(this Vector2 self) => self.Count;
        [MethodImpl(AggressiveInlining)] public static Number X(this Vector2 self) => self.X;
        [MethodImpl(AggressiveInlining)] public static Number Y(this Vector2 self) => self.Y;
        [MethodImpl(AggressiveInlining)] public static Vector2 Normalize(this Vector2 self) => self.Normalize;
        [MethodImpl(AggressiveInlining)] public static float Length(this Vector2 self) => self.Length;
        [MethodImpl(AggressiveInlining)] public static float LengthSquared(this Vector2 self) => self.LengthSquared;
        [MethodImpl(AggressiveInlining)] public static Vector2 Abs(this Vector2 self) => self.Abs;
        [MethodImpl(AggressiveInlining)] public static Vector2 SquareRoot(this Vector2 self) => self.SquareRoot;
        [MethodImpl(AggressiveInlining)] public static Vector2 Sin(this Vector2 self) => self.Sin;
        [MethodImpl(AggressiveInlining)] public static Vector2 Cos(this Vector2 self) => self.Cos;
        [MethodImpl(AggressiveInlining)] public static ValueTuple<Vector2, Vector2> SinCos(this Vector2 self) => self.SinCos;
        [MethodImpl(AggressiveInlining)] public static Vector2 DegreesToRadians(this Vector2 self) => self.DegreesToRadians;
        [MethodImpl(AggressiveInlining)] public static Vector2 RadiansToDegrees(this Vector2 self) => self.RadiansToDegrees;
        [MethodImpl(AggressiveInlining)] public static Vector2 Exp(this Vector2 self) => self.Exp;
        [MethodImpl(AggressiveInlining)] public static Vector2 Log(this Vector2 self) => self.Log;
        [MethodImpl(AggressiveInlining)] public static Vector2 Log2(this Vector2 self) => self.Log2;
        [MethodImpl(AggressiveInlining)] public static Vector2 Truncate(this Vector2 self) => self.Truncate;
        [MethodImpl(AggressiveInlining)] public static Vector2 Round(this Vector2 self) => self.Round;
        [MethodImpl(AggressiveInlining)] public static Vector2 RoundTowardsZero(this Vector2 self) => self.RoundTowardsZero;
        [MethodImpl(AggressiveInlining)] public static Vector2 RoundAwayFromZero(this Vector2 self) => self.RoundAwayFromZero;
        [MethodImpl(AggressiveInlining)] public static Vector2 Floor(this Vector2 self) => self.Floor;
        [MethodImpl(AggressiveInlining)] public static Vector2 Ceiling(this Vector2 self) => self.Ceiling;
        [MethodImpl(AggressiveInlining)] public static Vector2 WithX(this Vector2 self, Number x) => self.WithX(x);
        [MethodImpl(AggressiveInlining)] public static Vector2 WithY(this Vector2 self, Number y) => self.WithY(y);
        [MethodImpl(AggressiveInlining)] public static Vector2 Add(this Vector2 left, Vector2 right) => left + right;
        [MethodImpl(AggressiveInlining)] public static Vector2 Subtract(this Vector2 left, Vector2 right) => left - right;
        [MethodImpl(AggressiveInlining)] public static Vector2 Multiply(this Vector2 left, Vector2 right) => left * right;
        [MethodImpl(AggressiveInlining)] public static Vector2 Multiply(this Vector2 left, float scalar) => left * scalar;
        [MethodImpl(AggressiveInlining)] public static Vector2 Multiply(this float scalar, Vector2 right) => scalar * right;
        [MethodImpl(AggressiveInlining)] public static Vector2 Divide(this Vector2 left, Vector2 right) => left / right;
        [MethodImpl(AggressiveInlining)] public static Vector2 Divide(this Vector2 left, float scalar) => left / scalar;
        [MethodImpl(AggressiveInlining)] public static Vector2 Negative(this Vector2 value) => -value;
        [MethodImpl(AggressiveInlining)] public static Boolean Equals(this Vector2 left, Vector2 right) => left == right;
        [MethodImpl(AggressiveInlining)] public static Boolean NotEquals(this Vector2 left, Vector2 right) => left != right;
        [MethodImpl(AggressiveInlining)] public static int GetHashCode(this Vector2 self) => self.GetHashCode();
        [MethodImpl(AggressiveInlining)] public static float Dot(this Vector2 self, Vector2 right) => self.Dot(right);
        [MethodImpl(AggressiveInlining)] public static float Distance(this Vector2 self, Vector2 value2) => self.Distance(value2);
        [MethodImpl(AggressiveInlining)] public static float DistanceSquared(this Vector2 self, Vector2 value2) => self.DistanceSquared(value2);
        [MethodImpl(AggressiveInlining)] public static Vector2 Clamp(this Vector2 self, Vector2 min, Vector2 max) => self.Clamp(min, max);
        [MethodImpl(AggressiveInlining)] public static Vector2 Reflect(this Vector2 self, Vector2 normal) => self.Reflect(normal);
        [MethodImpl(AggressiveInlining)] public static Vector2 Transform(this Vector2 self, Matrix3x2 matrix) => self.Transform(matrix);
        [MethodImpl(AggressiveInlining)] public static Vector2 Transform(this Vector2 self, Matrix4x4 matrix) => self.Transform(matrix);
        [MethodImpl(AggressiveInlining)] public static Vector2 Transform(this Vector2 self, Quaternion rotation) => self.Transform(rotation);
        [MethodImpl(AggressiveInlining)] public static Vector2 TransformNormal(this Vector2 self, Matrix3x2 matrix) => self.TransformNormal(matrix);
        [MethodImpl(AggressiveInlining)] public static Vector2 TransformNormal(this Vector2 self, Matrix4x4 matrix) => self.TransformNormal(matrix);
        [MethodImpl(AggressiveInlining)] public static Vector2 Max(this Vector2 self, Vector2 value2) => self.Max(value2);
        [MethodImpl(AggressiveInlining)] public static Vector2 Min(this Vector2 self, Vector2 value2) => self.Min(value2);
        [MethodImpl(AggressiveInlining)] public static string ToString(this Vector2 self) => self.ToString();
        [MethodImpl(AggressiveInlining)] public static Type GetType(this Vector2 self) => self.GetType();
        [MethodImpl(AggressiveInlining)] public static Vector3 Value(this Vector3 self) => self.Value;
        [MethodImpl(AggressiveInlining)] public static Vector3 E(this Vector3 self) => Vector3.E;
        [MethodImpl(AggressiveInlining)] public static Vector3 Epsilon(this Vector3 self) => Vector3.Epsilon;
        [MethodImpl(AggressiveInlining)] public static Vector3 NaN(this Vector3 self) => Vector3.NaN;
        [MethodImpl(AggressiveInlining)] public static Vector3 NegativeInfinity(this Vector3 self) => Vector3.NegativeInfinity;
        [MethodImpl(AggressiveInlining)] public static Vector3 NegativeZero(this Vector3 self) => Vector3.NegativeZero;
        [MethodImpl(AggressiveInlining)] public static Vector3 One(this Vector3 self) => Vector3.One;
        [MethodImpl(AggressiveInlining)] public static Vector3 Pi(this Vector3 self) => Vector3.Pi;
        [MethodImpl(AggressiveInlining)] public static Vector3 PositiveInfinity(this Vector3 self) => Vector3.PositiveInfinity;
        [MethodImpl(AggressiveInlining)] public static Vector3 Tau(this Vector3 self) => Vector3.Tau;
        [MethodImpl(AggressiveInlining)] public static Vector3 UnitX(this Vector3 self) => Vector3.UnitX;
        [MethodImpl(AggressiveInlining)] public static Vector3 UnitY(this Vector3 self) => Vector3.UnitY;
        [MethodImpl(AggressiveInlining)] public static Vector3 UnitZ(this Vector3 self) => Vector3.UnitZ;
        [MethodImpl(AggressiveInlining)] public static Vector3 Zero(this Vector3 self) => Vector3.Zero;
        [MethodImpl(AggressiveInlining)] public static Number At(this Vector3 self, Integer index) => self[index];
        [MethodImpl(AggressiveInlining)] public static Integer Count(this Vector3 self) => self.Count;
        [MethodImpl(AggressiveInlining)] public static Number X(this Vector3 self) => self.X;
        [MethodImpl(AggressiveInlining)] public static Number Y(this Vector3 self) => self.Y;
        [MethodImpl(AggressiveInlining)] public static Number Z(this Vector3 self) => self.Z;
        [MethodImpl(AggressiveInlining)] public static Vector3 Normalize(this Vector3 self) => self.Normalize;
        [MethodImpl(AggressiveInlining)] public static Number Length(this Vector3 self) => self.Length;
        [MethodImpl(AggressiveInlining)] public static Number LengthSquared(this Vector3 self) => self.LengthSquared;
        [MethodImpl(AggressiveInlining)] public static Vector3 Abs(this Vector3 self) => self.Abs;
        [MethodImpl(AggressiveInlining)] public static Vector3 SquareRoot(this Vector3 self) => self.SquareRoot;
        [MethodImpl(AggressiveInlining)] public static Vector3 Sin(this Vector3 self) => self.Sin;
        [MethodImpl(AggressiveInlining)] public static Vector3 Cos(this Vector3 self) => self.Cos;
        [MethodImpl(AggressiveInlining)] public static ValueTuple<Vector3, Vector3> SinCos(this Vector3 self) => self.SinCos;
        [MethodImpl(AggressiveInlining)] public static Vector3 DegreesToRadians(this Vector3 self) => self.DegreesToRadians;
        [MethodImpl(AggressiveInlining)] public static Vector3 RadiansToDegrees(this Vector3 self) => self.RadiansToDegrees;
        [MethodImpl(AggressiveInlining)] public static Vector3 Exp(this Vector3 self) => self.Exp;
        [MethodImpl(AggressiveInlining)] public static Vector3 Log(this Vector3 self) => self.Log;
        [MethodImpl(AggressiveInlining)] public static Vector3 Log2(this Vector3 self) => self.Log2;
        [MethodImpl(AggressiveInlining)] public static Vector3 Truncate(this Vector3 self) => self.Truncate;
        [MethodImpl(AggressiveInlining)] public static Vector3 Round(this Vector3 self) => self.Round;
        [MethodImpl(AggressiveInlining)] public static Vector3 RoundTowardsZero(this Vector3 self) => self.RoundTowardsZero;
        [MethodImpl(AggressiveInlining)] public static Vector3 RoundAwayFromZero(this Vector3 self) => self.RoundAwayFromZero;
        [MethodImpl(AggressiveInlining)] public static Vector3 Floor(this Vector3 self) => self.Floor;
        [MethodImpl(AggressiveInlining)] public static Vector3 Ceiling(this Vector3 self) => self.Ceiling;
        [MethodImpl(AggressiveInlining)] public static Vector3 WithX(this Vector3 self, Number x) => self.WithX(x);
        [MethodImpl(AggressiveInlining)] public static Vector3 WithY(this Vector3 self, Number y) => self.WithY(y);
        [MethodImpl(AggressiveInlining)] public static Vector3 WithZ(this Vector3 self, Number z) => self.WithZ(z);
        [MethodImpl(AggressiveInlining)] public static Vector3 Add(this Vector3 left, Vector3 right) => left + right;
        [MethodImpl(AggressiveInlining)] public static Vector3 Subtract(this Vector3 left, Vector3 right) => left - right;
        [MethodImpl(AggressiveInlining)] public static Vector3 Multiply(this Vector3 left, Vector3 right) => left * right;
        [MethodImpl(AggressiveInlining)] public static Vector3 Multiply(this Vector3 left, Number scalar) => left * scalar;
        [MethodImpl(AggressiveInlining)] public static Vector3 Multiply(this Number scalar, Vector3 right) => scalar * right;
        [MethodImpl(AggressiveInlining)] public static Vector3 Divide(this Vector3 left, Vector3 right) => left / right;
        [MethodImpl(AggressiveInlining)] public static Vector3 Divide(this Vector3 left, Number scalar) => left / scalar;
        [MethodImpl(AggressiveInlining)] public static Vector3 Negative(this Vector3 value) => -value;
        [MethodImpl(AggressiveInlining)] public static Boolean Equals(this Vector3 left, Vector3 right) => left == right;
        [MethodImpl(AggressiveInlining)] public static Boolean NotEquals(this Vector3 left, Vector3 right) => left != right;
        [MethodImpl(AggressiveInlining)] public static int GetHashCode(this Vector3 self) => self.GetHashCode();
        [MethodImpl(AggressiveInlining)] public static Number Dot(this Vector3 self, Vector3 right) => self.Dot(right);
        [MethodImpl(AggressiveInlining)] public static Vector3 Cross(this Vector3 self, Vector3 right) => self.Cross(right);
        [MethodImpl(AggressiveInlining)] public static Number Distance(this Vector3 self, Vector3 value2) => self.Distance(value2);
        [MethodImpl(AggressiveInlining)] public static Number DistanceSquared(this Vector3 self, Vector3 value2) => self.DistanceSquared(value2);
        [MethodImpl(AggressiveInlining)] public static Vector3 Clamp(this Vector3 self, Vector3 min, Vector3 max) => self.Clamp(min, max);
        [MethodImpl(AggressiveInlining)] public static Vector3 Reflect(this Vector3 self, Vector3 normal) => self.Reflect(normal);
        [MethodImpl(AggressiveInlining)] public static Vector3 Transform(this Vector3 self, Matrix4x4 matrix) => self.Transform(matrix);
        [MethodImpl(AggressiveInlining)] public static Vector3 Transform(this Vector3 self, Quaternion rotation) => self.Transform(rotation);
        [MethodImpl(AggressiveInlining)] public static Vector3 TransformNormal(this Vector3 self, Matrix4x4 matrix) => self.TransformNormal(matrix);
        [MethodImpl(AggressiveInlining)] public static Vector3 Max(this Vector3 self, Vector3 value2) => self.Max(value2);
        [MethodImpl(AggressiveInlining)] public static Vector3 Min(this Vector3 self, Vector3 value2) => self.Min(value2);
        [MethodImpl(AggressiveInlining)] public static string ToString(this Vector3 self) => self.ToString();
        [MethodImpl(AggressiveInlining)] public static Type GetType(this Vector3 self) => self.GetType();
        [MethodImpl(AggressiveInlining)] public static Vector4 Value(this Vector4 self) => self.Value;
        [MethodImpl(AggressiveInlining)] public static Vector4 E(this Vector4 self) => Vector4.E;
        [MethodImpl(AggressiveInlining)] public static Vector4 Epsilon(this Vector4 self) => Vector4.Epsilon;
        [MethodImpl(AggressiveInlining)] public static Vector4 NaN(this Vector4 self) => Vector4.NaN;
        [MethodImpl(AggressiveInlining)] public static Vector4 NegativeInfinity(this Vector4 self) => Vector4.NegativeInfinity;
        [MethodImpl(AggressiveInlining)] public static Vector4 NegativeZero(this Vector4 self) => Vector4.NegativeZero;
        [MethodImpl(AggressiveInlining)] public static Vector4 One(this Vector4 self) => Vector4.One;
        [MethodImpl(AggressiveInlining)] public static Vector4 Pi(this Vector4 self) => Vector4.Pi;
        [MethodImpl(AggressiveInlining)] public static Vector4 PositiveInfinity(this Vector4 self) => Vector4.PositiveInfinity;
        [MethodImpl(AggressiveInlining)] public static Vector4 Tau(this Vector4 self) => Vector4.Tau;
        [MethodImpl(AggressiveInlining)] public static Vector4 UnitX(this Vector4 self) => Vector4.UnitX;
        [MethodImpl(AggressiveInlining)] public static Vector4 UnitY(this Vector4 self) => Vector4.UnitY;
        [MethodImpl(AggressiveInlining)] public static Vector4 UnitZ(this Vector4 self) => Vector4.UnitZ;
        [MethodImpl(AggressiveInlining)] public static Vector4 UnitW(this Vector4 self) => Vector4.UnitW;
        [MethodImpl(AggressiveInlining)] public static Vector4 Zero(this Vector4 self) => Vector4.Zero;
        [MethodImpl(AggressiveInlining)] public static Number At(this Vector4 self, Integer index) => self[index];
        [MethodImpl(AggressiveInlining)] public static Integer Count(this Vector4 self) => self.Count;
        [MethodImpl(AggressiveInlining)] public static Number X(this Vector4 self) => self.X;
        [MethodImpl(AggressiveInlining)] public static Number Y(this Vector4 self) => self.Y;
        [MethodImpl(AggressiveInlining)] public static Number Z(this Vector4 self) => self.Z;
        [MethodImpl(AggressiveInlining)] public static Number W(this Vector4 self) => self.W;
        [MethodImpl(AggressiveInlining)] public static Vector4 Normalize(this Vector4 self) => self.Normalize;
        [MethodImpl(AggressiveInlining)] public static float Length(this Vector4 self) => self.Length;
        [MethodImpl(AggressiveInlining)] public static float LengthSquared(this Vector4 self) => self.LengthSquared;
        [MethodImpl(AggressiveInlining)] public static Vector4 Abs(this Vector4 self) => self.Abs;
        [MethodImpl(AggressiveInlining)] public static Vector4 SquareRoot(this Vector4 self) => self.SquareRoot;
        [MethodImpl(AggressiveInlining)] public static Vector4 Sin(this Vector4 self) => self.Sin;
        [MethodImpl(AggressiveInlining)] public static Vector4 Cos(this Vector4 self) => self.Cos;
        [MethodImpl(AggressiveInlining)] public static ValueTuple<Vector4, Vector4> SinCos(this Vector4 self) => self.SinCos;
        [MethodImpl(AggressiveInlining)] public static Vector4 DegreesToRadians(this Vector4 self) => self.DegreesToRadians;
        [MethodImpl(AggressiveInlining)] public static Vector4 RadiansToDegrees(this Vector4 self) => self.RadiansToDegrees;
        [MethodImpl(AggressiveInlining)] public static Vector4 Exp(this Vector4 self) => self.Exp;
        [MethodImpl(AggressiveInlining)] public static Vector4 Log(this Vector4 self) => self.Log;
        [MethodImpl(AggressiveInlining)] public static Vector4 Log2(this Vector4 self) => self.Log2;
        [MethodImpl(AggressiveInlining)] public static Vector4 Round(this Vector4 self) => self.Round;
        [MethodImpl(AggressiveInlining)] public static Vector4 RoundTowardsZero(this Vector4 self) => self.RoundTowardsZero;
        [MethodImpl(AggressiveInlining)] public static Vector4 RoundAwayFromZero(this Vector4 self) => self.RoundAwayFromZero;
        [MethodImpl(AggressiveInlining)] public static Vector4 Floor(this Vector4 self) => self.Floor;
        [MethodImpl(AggressiveInlining)] public static Vector4 Ceiling(this Vector4 self) => self.Ceiling;
        [MethodImpl(AggressiveInlining)] public static Vector4 WithX(this Vector4 self, Number x) => self.WithX(x);
        [MethodImpl(AggressiveInlining)] public static Vector4 WithY(this Vector4 self, Number y) => self.WithY(y);
        [MethodImpl(AggressiveInlining)] public static Vector4 WithZ(this Vector4 self, Number z) => self.WithZ(z);
        [MethodImpl(AggressiveInlining)] public static Vector4 WithW(this Vector4 self, Number w) => self.WithW(w);
        [MethodImpl(AggressiveInlining)] public static Vector4 Add(this Vector4 left, Vector4 right) => left + right;
        [MethodImpl(AggressiveInlining)] public static Vector4 Subtract(this Vector4 left, Vector4 right) => left - right;
        [MethodImpl(AggressiveInlining)] public static Vector4 Multiply(this Vector4 left, Vector4 right) => left * right;
        [MethodImpl(AggressiveInlining)] public static Vector4 Multiply(this Vector4 left, float scalar) => left * scalar;
        [MethodImpl(AggressiveInlining)] public static Vector4 Multiply(this float scalar, Vector4 right) => scalar * right;
        [MethodImpl(AggressiveInlining)] public static Vector4 Divide(this Vector4 left, Vector4 right) => left / right;
        [MethodImpl(AggressiveInlining)] public static Vector4 Divide(this Vector4 left, float scalar) => left / scalar;
        [MethodImpl(AggressiveInlining)] public static Vector4 Negative(this Vector4 value) => -value;
        [MethodImpl(AggressiveInlining)] public static Boolean Equals(this Vector4 left, Vector4 right) => left == right;
        [MethodImpl(AggressiveInlining)] public static Boolean NotEquals(this Vector4 left, Vector4 right) => left != right;
        [MethodImpl(AggressiveInlining)] public static int GetHashCode(this Vector4 self) => self.GetHashCode();
        [MethodImpl(AggressiveInlining)] public static float Dot(this Vector4 self, Vector4 right) => self.Dot(right);
        [MethodImpl(AggressiveInlining)] public static float Distance(this Vector4 self, Vector4 value2) => self.Distance(value2);
        [MethodImpl(AggressiveInlining)] public static float DistanceSquared(this Vector4 self, Vector4 value2) => self.DistanceSquared(value2);
        [MethodImpl(AggressiveInlining)] public static Vector4 Clamp(this Vector4 self, Vector4 min, Vector4 max) => self.Clamp(min, max);
        [MethodImpl(AggressiveInlining)] public static Vector4 Transform(this Vector4 self, Matrix4x4 matrix) => self.Transform(matrix);
        [MethodImpl(AggressiveInlining)] public static Vector4 Transform(this Vector4 self, Quaternion rotation) => self.Transform(rotation);
        [MethodImpl(AggressiveInlining)] public static Vector4 Max(this Vector4 self, Vector4 value2) => self.Max(value2);
        [MethodImpl(AggressiveInlining)] public static Vector4 Min(this Vector4 self, Vector4 value2) => self.Min(value2);
        [MethodImpl(AggressiveInlining)] public static Vector4 Truncate(this Vector4 self) => self.Truncate();
        [MethodImpl(AggressiveInlining)] public static string ToString(this Vector4 self) => self.ToString();
        [MethodImpl(AggressiveInlining)] public static Type GetType(this Vector4 self) => self.GetType();
        [MethodImpl(AggressiveInlining)] public static Vector256<float> Value(this Vector8 self) => self.Value;
        [MethodImpl(AggressiveInlining)] public static Vector8 Zero(this Vector8 self) => Vector8.Zero;
        [MethodImpl(AggressiveInlining)] public static Vector8 One(this Vector8 self) => Vector8.One;
        [MethodImpl(AggressiveInlining)] public static Vector8 AllBitsSet(this Vector8 self) => Vector8.AllBitsSet;
        [MethodImpl(AggressiveInlining)] public static Vector8 SignMask(this Vector8 self) => Vector8.SignMask;
        [MethodImpl(AggressiveInlining)] public static Vector8 Indices(this Vector8 self) => Vector8.Indices;
        [MethodImpl(AggressiveInlining)] public static Number At(this Vector8 self, Integer index) => self[index];
        [MethodImpl(AggressiveInlining)] public static Integer Count(this Vector8 self) => self.Count;
        [MethodImpl(AggressiveInlining)] public static Vector128<float> Lower(this Vector8 self) => self.Lower;
        [MethodImpl(AggressiveInlining)] public static Vector128<float> Upper(this Vector8 self) => self.Upper;
        [MethodImpl(AggressiveInlining)] public static Vector8 Sin(this Vector8 self) => self.Sin;
        [MethodImpl(AggressiveInlining)] public static Vector8 Cos(this Vector8 self) => self.Cos;
        [MethodImpl(AggressiveInlining)] public static ValueTuple<Vector8, Vector8> SinCos(this Vector8 self) => self.SinCos;
        [MethodImpl(AggressiveInlining)] public static Vector8 Abs(this Vector8 self) => self.Abs;
        [MethodImpl(AggressiveInlining)] public static Vector8 Ceiling(this Vector8 self) => self.Ceiling;
        [MethodImpl(AggressiveInlining)] public static Vector8 DegreesToRadians(this Vector8 self) => self.DegreesToRadians;
        [MethodImpl(AggressiveInlining)] public static Vector8 Exp(this Vector8 self) => self.Exp;
        [MethodImpl(AggressiveInlining)] public static Vector8 Floor(this Vector8 self) => self.Floor;
        [MethodImpl(AggressiveInlining)] public static Vector8 IsNaN(this Vector8 self) => self.IsNaN;
        [MethodImpl(AggressiveInlining)] public static Vector8 IsNegative(this Vector8 self) => self.IsNegative;
        [MethodImpl(AggressiveInlining)] public static Vector8 IsPositive(this Vector8 self) => self.IsPositive;
        [MethodImpl(AggressiveInlining)] public static Vector8 IsPositiveInfinity(this Vector8 self) => self.IsPositiveInfinity;
        [MethodImpl(AggressiveInlining)] public static Vector8 IsZero(this Vector8 self) => self.IsZero;
        [MethodImpl(AggressiveInlining)] public static Vector8 Log(this Vector8 self) => self.Log;
        [MethodImpl(AggressiveInlining)] public static Vector8 Log2(this Vector8 self) => self.Log2;
        [MethodImpl(AggressiveInlining)] public static Vector8 RadiansToDegrees(this Vector8 self) => self.RadiansToDegrees;
        [MethodImpl(AggressiveInlining)] public static Vector8 Reciprocal(this Vector8 self) => self.Reciprocal;
        [MethodImpl(AggressiveInlining)] public static Vector8 ReciprocalSqrt(this Vector8 self) => self.ReciprocalSqrt;
        [MethodImpl(AggressiveInlining)] public static Vector8 Round(this Vector8 self) => self.Round;
        [MethodImpl(AggressiveInlining)] public static Vector8 Sign(this Vector8 self) => self.Sign;
        [MethodImpl(AggressiveInlining)] public static Vector8 SquareRoot(this Vector8 self) => self.SquareRoot;
        [MethodImpl(AggressiveInlining)] public static Vector8 Square(this Vector8 self) => self.Square;
        [MethodImpl(AggressiveInlining)] public static Number Sum(this Vector8 self) => self.Sum;
        [MethodImpl(AggressiveInlining)] public static Vector8 Tan(this Vector8 self) => self.Tan;
        [MethodImpl(AggressiveInlining)] public static Vector8 Add(this Vector8 left, Vector8 right) => left + right;
        [MethodImpl(AggressiveInlining)] public static Vector8 Subtract(this Vector8 left, Vector8 right) => left - right;
        [MethodImpl(AggressiveInlining)] public static Vector8 Multiply(this Vector8 left, Vector8 right) => left * right;
        [MethodImpl(AggressiveInlining)] public static Vector8 Multiply(this Vector8 left, Number scalar) => left * scalar;
        [MethodImpl(AggressiveInlining)] public static Vector8 Multiply(this Number scalar, Vector8 right) => scalar * right;
        [MethodImpl(AggressiveInlining)] public static Vector8 Divide(this Vector8 left, Vector8 right) => left / right;
        [MethodImpl(AggressiveInlining)] public static Vector8 Divide(this Vector8 left, Number scalar) => left / scalar;
        [MethodImpl(AggressiveInlining)] public static Vector8 Divide(this Number scalar, Vector8 right) => scalar / right;
        [MethodImpl(AggressiveInlining)] public static Vector8 Negative(this Vector8 value) => -value;
        [MethodImpl(AggressiveInlining)] public static Vector8 AndNot(this Vector8 self, Vector8 a, Vector8 b) => Vector8.AndNot(a, b);
        [MethodImpl(AggressiveInlining)] public static Vector8 BitwiseAnd(this Vector8 a, Vector8 b) => a & b;
        [MethodImpl(AggressiveInlining)] public static Vector8 BitwiseOr(this Vector8 a, Vector8 b) => a | b;
        [MethodImpl(AggressiveInlining)] public static Vector8 Complement(this Vector8 a) => ~a;
        [MethodImpl(AggressiveInlining)] public static Vector8 ExclusiveOr(this Vector8 a, Vector8 b) => a ^ b;
        [MethodImpl(AggressiveInlining)] public static Vector8 ConditionalSelect(this Vector8 self, Vector8 condition, Vector8 a, Vector8 b) => Vector8.ConditionalSelect(condition, a, b);
        [MethodImpl(AggressiveInlining)] public static Vector8 Equals(this Vector8 a, Vector8 b) => a == b;
        [MethodImpl(AggressiveInlining)] public static Vector8 NotEquals(this Vector8 a, Vector8 b) => a != b;
        [MethodImpl(AggressiveInlining)] public static Vector8 LessThan(this Vector8 a, Vector8 b) => a < b;
        [MethodImpl(AggressiveInlining)] public static Vector8 LessThanOrEquals(this Vector8 a, Vector8 b) => a <= b;
        [MethodImpl(AggressiveInlining)] public static Vector8 GreaterThan(this Vector8 a, Vector8 b) => a > b;
        [MethodImpl(AggressiveInlining)] public static Vector8 GreaterThanOrEquals(this Vector8 a, Vector8 b) => a >= b;
        [MethodImpl(AggressiveInlining)] public static Vector8 Max(this Vector8 self, Vector8 other) => self.Max(other);
        [MethodImpl(AggressiveInlining)] public static Vector8 Min(this Vector8 self, Vector8 other) => self.Min(other);
        [MethodImpl(AggressiveInlining)] public static Vector8 Clamp(this Vector8 self, Vector8 min, Vector8 max) => self.Clamp(min, max);
        [MethodImpl(AggressiveInlining)] public static Vector8 CopySign(this Vector8 self, Vector8 sign) => self.CopySign(sign);
        [MethodImpl(AggressiveInlining)] public static Number Dot(this Vector8 self, Vector8 other) => self.Dot(other);
        [MethodImpl(AggressiveInlining)] public static Vector8 Hypot(this Vector8 self, Vector8 other) => self.Hypot(other);
        [MethodImpl(AggressiveInlining)] public static Vector8 Lerp(this Vector8 self, Vector8 b, Vector8 t) => self.Lerp(b, t);
        [MethodImpl(AggressiveInlining)] public static Number FirstElement(this Vector8 self) => self.FirstElement();
        [MethodImpl(AggressiveInlining)] public static Vector8 Truncate(this Vector8 self) => self.Truncate();
        [MethodImpl(AggressiveInlining)] public static Vector8 WithElement(this Vector8 self, int i, Number f) => self.WithElement(i, f);
        [MethodImpl(AggressiveInlining)] public static Vector8 WithLower(this Vector8 self, Vector128<float> lower) => self.WithLower(lower);
        [MethodImpl(AggressiveInlining)] public static Vector8 WithUpper(this Vector8 self, Vector128<float> upper) => self.WithUpper(upper);
        [MethodImpl(AggressiveInlining)] public static string ToString(this Vector8 self) => self.ToString();
        [MethodImpl(AggressiveInlining)] public static int GetHashCode(this Vector8 self) => self.GetHashCode();
        [MethodImpl(AggressiveInlining)] public static Type GetType(this Vector8 self) => self.GetType();
        [MethodImpl(AggressiveInlining)] public static Plane Value(this Plane self) => self.Value;
        [MethodImpl(AggressiveInlining)] public static Vector3 Normal(this Plane self) => self.Normal;
        [MethodImpl(AggressiveInlining)] public static Number D(this Plane self) => self.D;
        [MethodImpl(AggressiveInlining)] public static Plane Normalize(this Plane self) => self.Normalize;
        [MethodImpl(AggressiveInlining)] public static Plane WithNormal(this Plane self, Vector3 normal) => self.WithNormal(normal);
        [MethodImpl(AggressiveInlining)] public static Plane WithD(this Plane self, Number d) => self.WithD(d);
        [MethodImpl(AggressiveInlining)] public static int GetHashCode(this Plane self) => self.GetHashCode();
        [MethodImpl(AggressiveInlining)] public static string ToString(this Plane self) => self.ToString();
        [MethodImpl(AggressiveInlining)] public static Boolean Equals(this Plane left, Plane right) => left == right;
        [MethodImpl(AggressiveInlining)] public static Boolean NotEquals(this Plane left, Plane right) => left != right;
        [MethodImpl(AggressiveInlining)] public static Plane CreateFromVertices(this Plane self, Vector3 point1, Vector3 point2, Vector3 point3) => Plane.CreateFromVertices(point1, point2, point3);
        [MethodImpl(AggressiveInlining)] public static float Dot(this Plane self, Vector4 value) => self.Dot(value);
        [MethodImpl(AggressiveInlining)] public static float DotCoordinate(this Plane self, Vector3 value) => self.DotCoordinate(value);
        [MethodImpl(AggressiveInlining)] public static float DotNormal(this Plane self, Vector3 value) => self.DotNormal(value);
        [MethodImpl(AggressiveInlining)] public static Plane Transform(this Plane self, Quaternion rotation) => self.Transform(rotation);
        [MethodImpl(AggressiveInlining)] public static Plane Transform(this Plane self, Matrix4x4 matrix) => self.Transform(matrix);
        [MethodImpl(AggressiveInlining)] public static Type GetType(this Plane self) => self.GetType();
        [MethodImpl(AggressiveInlining)] public static Quaternion Value(this Quaternion self) => self.Value;
        [MethodImpl(AggressiveInlining)] public static Quaternion Identity(this Quaternion self) => Quaternion.Identity;
        [MethodImpl(AggressiveInlining)] public static Number X(this Quaternion self) => self.X;
        [MethodImpl(AggressiveInlining)] public static Number Y(this Quaternion self) => self.Y;
        [MethodImpl(AggressiveInlining)] public static Number Z(this Quaternion self) => self.Z;
        [MethodImpl(AggressiveInlining)] public static Number W(this Quaternion self) => self.W;
        [MethodImpl(AggressiveInlining)] public static Number Length(this Quaternion self) => self.Length;
        [MethodImpl(AggressiveInlining)] public static Number LengthSquared(this Quaternion self) => self.LengthSquared;
        [MethodImpl(AggressiveInlining)] public static Quaternion Normalize(this Quaternion self) => self.Normalize;
        [MethodImpl(AggressiveInlining)] public static Quaternion Conjugate(this Quaternion self) => self.Conjugate;
        [MethodImpl(AggressiveInlining)] public static Quaternion Inverse(this Quaternion self) => self.Inverse;
        [MethodImpl(AggressiveInlining)] public static Quaternion WithX(this Quaternion self, Number x) => self.WithX(x);
        [MethodImpl(AggressiveInlining)] public static Quaternion WithY(this Quaternion self, Number y) => self.WithY(y);
        [MethodImpl(AggressiveInlining)] public static Quaternion WithZ(this Quaternion self, Number z) => self.WithZ(z);
        [MethodImpl(AggressiveInlining)] public static Quaternion WithW(this Quaternion self, Number w) => self.WithW(w);
        [MethodImpl(AggressiveInlining)] public static Quaternion Add(this Quaternion a, Quaternion b) => a + b;
        [MethodImpl(AggressiveInlining)] public static Quaternion Subtract(this Quaternion a, Quaternion b) => a - b;
        [MethodImpl(AggressiveInlining)] public static Quaternion Negative(this Quaternion a) => -a;
        [MethodImpl(AggressiveInlining)] public static Quaternion Multiply(this Quaternion a, Quaternion b) => a * b;
        [MethodImpl(AggressiveInlining)] public static Quaternion Multiply(this Quaternion a, Number scalar) => a * scalar;
        [MethodImpl(AggressiveInlining)] public static Quaternion Divide(this Quaternion a, Quaternion b) => a / b;
        [MethodImpl(AggressiveInlining)] public static Boolean Equals(this Quaternion a, Quaternion b) => a == b;
        [MethodImpl(AggressiveInlining)] public static Boolean NotEquals(this Quaternion a, Quaternion b) => a != b;
        [MethodImpl(AggressiveInlining)] public static Quaternion CreateFromAxisAngle(this Quaternion self, Vector3 axis, Number angle) => Quaternion.CreateFromAxisAngle(axis, angle);
        [MethodImpl(AggressiveInlining)] public static Quaternion CreateFromYawPitchRoll(this Quaternion self, Angle yaw, Angle pitch, Angle roll) => Quaternion.CreateFromYawPitchRoll(yaw, pitch, roll);
        [MethodImpl(AggressiveInlining)] public static Quaternion CreateFromRotationMatrix(this Quaternion self, Matrix4x4 matrix) => Quaternion.CreateFromRotationMatrix(matrix);
        [MethodImpl(AggressiveInlining)] public static Quaternion Concatenate(this Quaternion self, Quaternion value2) => self.Concatenate(value2);
        [MethodImpl(AggressiveInlining)] public static Number Dot(this Quaternion self, Quaternion quaternion2) => self.Dot(quaternion2);
        [MethodImpl(AggressiveInlining)] public static Quaternion Lerp(this Quaternion self, Quaternion quaternion1, Quaternion quaternion2, Number amount) => Quaternion.Lerp(quaternion1, quaternion2, amount);
        [MethodImpl(AggressiveInlining)] public static Quaternion Slerp(this Quaternion self, Quaternion quaternion1, Quaternion quaternion2, Number amount) => Quaternion.Slerp(quaternion1, quaternion2, amount);
        [MethodImpl(AggressiveInlining)] public static int GetHashCode(this Quaternion self) => self.GetHashCode();
        [MethodImpl(AggressiveInlining)] public static string ToString(this Quaternion self) => self.ToString();
        [MethodImpl(AggressiveInlining)] public static Type GetType(this Quaternion self) => self.GetType();
        [MethodImpl(AggressiveInlining)] public static float Value(this Number self) => self.Value;
        [MethodImpl(AggressiveInlining)] public static Number Zero(this Number self) => Number.Zero;
        [MethodImpl(AggressiveInlining)] public static Number One(this Number self) => Number.One;
        [MethodImpl(AggressiveInlining)] public static Number NegativeOne(this Number self) => Number.NegativeOne;
        [MethodImpl(AggressiveInlining)] public static Number E(this Number self) => Number.E;
        [MethodImpl(AggressiveInlining)] public static Number Pi(this Number self) => Number.Pi;
        [MethodImpl(AggressiveInlining)] public static Number Tau(this Number self) => Number.Tau;
        [MethodImpl(AggressiveInlining)] public static Number HalfPi(this Number self) => Number.HalfPi;
        [MethodImpl(AggressiveInlining)] public static Number TwoPi(this Number self) => Number.TwoPi;
        [MethodImpl(AggressiveInlining)] public static Number Sqrt2(this Number self) => Number.Sqrt2;
        [MethodImpl(AggressiveInlining)] public static Number Sqrt3(this Number self) => Number.Sqrt3;
        [MethodImpl(AggressiveInlining)] public static Number NegativeInfinity(this Number self) => Number.NegativeInfinity;
        [MethodImpl(AggressiveInlining)] public static Number PositiveInfinity(this Number self) => Number.PositiveInfinity;
        [MethodImpl(AggressiveInlining)] public static Number NaN(this Number self) => Number.NaN;
        [MethodImpl(AggressiveInlining)] public static Number MinValue(this Number self) => Number.MinValue;
        [MethodImpl(AggressiveInlining)] public static Number MaxValue(this Number self) => Number.MaxValue;
        [MethodImpl(AggressiveInlining)] public static Number Epsilon(this Number self) => Number.Epsilon;
        [MethodImpl(AggressiveInlining)] public static Angle HalfTurns(this Number self) => self.HalfTurns;
        [MethodImpl(AggressiveInlining)] public static Angle Turns(this Number self) => self.Turns;
        [MethodImpl(AggressiveInlining)] public static Angle Degrees(this Number self) => self.Degrees;
        [MethodImpl(AggressiveInlining)] public static Angle Radians(this Number self) => self.Radians;
        [MethodImpl(AggressiveInlining)] public static Number Abs(this Number self) => self.Abs;
        [MethodImpl(AggressiveInlining)] public static Angle Acos(this Number self) => self.Acos;
        [MethodImpl(AggressiveInlining)] public static Angle Acosh(this Number self) => self.Acosh;
        [MethodImpl(AggressiveInlining)] public static Angle Asin(this Number self) => self.Asin;
        [MethodImpl(AggressiveInlining)] public static Angle Asinh(this Number self) => self.Asinh;
        [MethodImpl(AggressiveInlining)] public static Angle Atan(this Number self) => self.Atan;
        [MethodImpl(AggressiveInlining)] public static Angle Atanh(this Number self) => self.Atanh;
        [MethodImpl(AggressiveInlining)] public static Number BitDecrement(this Number self) => self.BitDecrement;
        [MethodImpl(AggressiveInlining)] public static Number BitIncrement(this Number self) => self.BitIncrement;
        [MethodImpl(AggressiveInlining)] public static Number Cbrt(this Number self) => self.Cbrt;
        [MethodImpl(AggressiveInlining)] public static Number Ceiling(this Number self) => self.Ceiling;
        [MethodImpl(AggressiveInlining)] public static Number Exp(this Number self) => self.Exp;
        [MethodImpl(AggressiveInlining)] public static Number Floor(this Number self) => self.Floor;
        [MethodImpl(AggressiveInlining)] public static Number ILogB(this Number self) => self.ILogB;
        [MethodImpl(AggressiveInlining)] public static Number NaturalLog(this Number self) => self.NaturalLog;
        [MethodImpl(AggressiveInlining)] public static Number Log10(this Number self) => self.Log10;
        [MethodImpl(AggressiveInlining)] public static Number Log2(this Number self) => self.Log2;
        [MethodImpl(AggressiveInlining)] public static Number Reciprocal(this Number self) => self.Reciprocal;
        [MethodImpl(AggressiveInlining)] public static Number ReciprocalEstimate(this Number self) => self.ReciprocalEstimate;
        [MethodImpl(AggressiveInlining)] public static Number ReciprocalSquareRootEstimate(this Number self) => self.ReciprocalSquareRootEstimate;
        [MethodImpl(AggressiveInlining)] public static Integer Sign(this Number self) => self.Sign;
        [MethodImpl(AggressiveInlining)] public static Number SquareRoot(this Number self) => self.SquareRoot;
        [MethodImpl(AggressiveInlining)] public static Number Square(this Number self) => self.Square;
        [MethodImpl(AggressiveInlining)] public static Number Truncate(this Number self) => self.Truncate;
        [MethodImpl(AggressiveInlining)] public static Number Add(this Number a, Number b) => a + b;
        [MethodImpl(AggressiveInlining)] public static Number Subtract(this Number a, Number b) => a - b;
        [MethodImpl(AggressiveInlining)] public static Number Multiply(this Number a, Number b) => a * b;
        [MethodImpl(AggressiveInlining)] public static Number Divide(this Number a, Number b) => a / b;
        [MethodImpl(AggressiveInlining)] public static Number Negative(this Number n) => -n;
        [MethodImpl(AggressiveInlining)] public static Boolean Equals(this Number a, Number b) => a == b;
        [MethodImpl(AggressiveInlining)] public static Boolean NotEquals(this Number a, Number b) => a != b;
        [MethodImpl(AggressiveInlining)] public static Boolean LessThan(this Number a, Number b) => a < b;
        [MethodImpl(AggressiveInlining)] public static Boolean LessThanOrEquals(this Number a, Number b) => a <= b;
        [MethodImpl(AggressiveInlining)] public static Boolean GreaterThan(this Number a, Number b) => a > b;
        [MethodImpl(AggressiveInlining)] public static Boolean GreaterThanOrEquals(this Number a, Number b) => a >= b;
        [MethodImpl(AggressiveInlining)] public static int GetHashCode(this Number self) => self.GetHashCode();
        [MethodImpl(AggressiveInlining)] public static string ToString(this Number self) => self.ToString();
        [MethodImpl(AggressiveInlining)] public static int CompareTo(this Number self, Number other) => self.CompareTo(other);
        [MethodImpl(AggressiveInlining)] public static int CompareTo(this Number self, object obj) => self.CompareTo(obj);
        [MethodImpl(AggressiveInlining)] public static Angle Atan2(this Number self, Number x) => self.Atan2(x);
        [MethodImpl(AggressiveInlining)] public static Number CopySign(this Number self, Number y) => self.CopySign(y);
        [MethodImpl(AggressiveInlining)] public static Number FusedMultiplyAdd(this Number self, Number y, Number z) => self.FusedMultiplyAdd(y, z);
        [MethodImpl(AggressiveInlining)] public static Number IEEERemainder(this Number self, Number y) => self.IEEERemainder(y);
        [MethodImpl(AggressiveInlining)] public static Number Log(this Number self, Number newBase) => self.Log(newBase);
        [MethodImpl(AggressiveInlining)] public static Number Max(this Number self, Number other) => self.Max(other);
        [MethodImpl(AggressiveInlining)] public static Number MaxMagnitude(this Number self, Number other) => self.MaxMagnitude(other);
        [MethodImpl(AggressiveInlining)] public static Number Min(this Number self, Number other) => self.Min(other);
        [MethodImpl(AggressiveInlining)] public static Number MinMagnitude(this Number self, Number other) => self.MinMagnitude(other);
        [MethodImpl(AggressiveInlining)] public static Number Pow(this Number self, Number power) => self.Pow(power);
        [MethodImpl(AggressiveInlining)] public static Number RoundToZero(this Number self, int digits) => self.RoundToZero(digits);
        [MethodImpl(AggressiveInlining)] public static Number RoundAwayFromZero(this Number self, int digits) => self.RoundAwayFromZero(digits);
        [MethodImpl(AggressiveInlining)] public static Number Round(this Number self, int digits) => self.Round(digits);
        [MethodImpl(AggressiveInlining)] public static Number ScaleB(this Number self, Integer n) => self.ScaleB(n);
        [MethodImpl(AggressiveInlining)] public static Type GetType(this Number self) => self.GetType();
        [MethodImpl(AggressiveInlining)] public static int Value(this Integer self) => self.Value;
        [MethodImpl(AggressiveInlining)] public static Integer Zero(this Integer self) => Integer.Zero;
        [MethodImpl(AggressiveInlining)] public static Integer One(this Integer self) => Integer.One;
        [MethodImpl(AggressiveInlining)] public static Integer NegativeOne(this Integer self) => Integer.NegativeOne;
        [MethodImpl(AggressiveInlining)] public static Integer MinValue(this Integer self) => Integer.MinValue;
        [MethodImpl(AggressiveInlining)] public static Integer MaxValue(this Integer self) => Integer.MaxValue;
        [MethodImpl(AggressiveInlining)] public static Integer Abs(this Integer self) => self.Abs;
        [MethodImpl(AggressiveInlining)] public static Integer Sign(this Integer self) => self.Sign;
        [MethodImpl(AggressiveInlining)] public static Integer Increment(this Integer self) => self.Increment;
        [MethodImpl(AggressiveInlining)] public static Integer Decrement(this Integer self) => self.Decrement;
        [MethodImpl(AggressiveInlining)] public static Integer Add(this Integer a, Integer b) => a + b;
        [MethodImpl(AggressiveInlining)] public static Integer Subtract(this Integer a, Integer b) => a - b;
        [MethodImpl(AggressiveInlining)] public static Integer Multiply(this Integer a, Integer b) => a * b;
        [MethodImpl(AggressiveInlining)] public static Integer Divide(this Integer a, Integer b) => a / b;
        [MethodImpl(AggressiveInlining)] public static Integer Modulus(this Integer a, Integer b) => a % b;
        [MethodImpl(AggressiveInlining)] public static Integer Negative(this Integer n) => -n;
        [MethodImpl(AggressiveInlining)] public static Boolean Equals(this Integer a, Integer b) => a == b;
        [MethodImpl(AggressiveInlining)] public static Boolean NotEquals(this Integer a, Integer b) => a != b;
        [MethodImpl(AggressiveInlining)] public static Boolean LessThan(this Integer a, Integer b) => a < b;
        [MethodImpl(AggressiveInlining)] public static Boolean LessThanOrEquals(this Integer a, Integer b) => a <= b;
        [MethodImpl(AggressiveInlining)] public static Boolean GreaterThan(this Integer a, Integer b) => a > b;
        [MethodImpl(AggressiveInlining)] public static Boolean GreaterThanOrEquals(this Integer a, Integer b) => a >= b;
        [MethodImpl(AggressiveInlining)] public static int GetHashCode(this Integer self) => self.GetHashCode();
        [MethodImpl(AggressiveInlining)] public static string ToString(this Integer self) => self.ToString();
        [MethodImpl(AggressiveInlining)] public static int CompareTo(this Integer self, Integer other) => self.CompareTo(other);
        [MethodImpl(AggressiveInlining)] public static int CompareTo(this Integer self, object obj) => self.CompareTo(obj);
        [MethodImpl(AggressiveInlining)] public static Type GetType(this Integer self) => self.GetType();
        [MethodImpl(AggressiveInlining)] public static bool Value(this Boolean self) => self.Value;
        [MethodImpl(AggressiveInlining)] public static bool True(this Boolean self) => Boolean.True;
        [MethodImpl(AggressiveInlining)] public static bool False(this Boolean self) => Boolean.False;
        [MethodImpl(AggressiveInlining)] public static Boolean IsTrue(this Boolean self) => self.IsTrue;
        [MethodImpl(AggressiveInlining)] public static Boolean IsFalse(this Boolean self) => self.IsFalse;
        [MethodImpl(AggressiveInlining)] public static Boolean Toggle(this Boolean self) => self.Toggle;
        [MethodImpl(AggressiveInlining)] public static Boolean BitwiseAnd(this Boolean a, Boolean b) => a & b;
        [MethodImpl(AggressiveInlining)] public static Boolean BitwiseOr(this Boolean a, Boolean b) => a | b;
        [MethodImpl(AggressiveInlining)] public static Boolean ExclusiveOr(this Boolean a, Boolean b) => a ^ b;
        [MethodImpl(AggressiveInlining)] public static Boolean Not(this Boolean b) => !b;
        [MethodImpl(AggressiveInlining)] public static Boolean Equals(this Boolean a, Boolean b) => a == b;
        [MethodImpl(AggressiveInlining)] public static Boolean NotEquals(this Boolean a, Boolean b) => a != b;
        [MethodImpl(AggressiveInlining)] public static int GetHashCode(this Boolean self) => self.GetHashCode();
        [MethodImpl(AggressiveInlining)] public static string ToString(this Boolean self) => self.ToString();
        [MethodImpl(AggressiveInlining)] public static int CompareTo(this Boolean self, Boolean other) => self.CompareTo(other);
        [MethodImpl(AggressiveInlining)] public static int CompareTo(this Boolean self, object obj) => self.CompareTo(obj);
        [MethodImpl(AggressiveInlining)] public static Type GetType(this Boolean self) => self.GetType();
        [MethodImpl(AggressiveInlining)] public static float Value(this Angle self) => self.Value;
        [MethodImpl(AggressiveInlining)] public static Angle FullTurn(this Angle self) => Angle.FullTurn;
        [MethodImpl(AggressiveInlining)] public static Angle HalfTurn(this Angle self) => Angle.HalfTurn;
        [MethodImpl(AggressiveInlining)] public static Angle QuarterTurn(this Angle self) => Angle.QuarterTurn;
        [MethodImpl(AggressiveInlining)] public static Angle Degree(this Angle self) => Angle.Degree;
        [MethodImpl(AggressiveInlining)] public static Angle Zero(this Angle self) => Angle.Zero;
        [MethodImpl(AggressiveInlining)] public static Number Radians(this Angle self) => self.Radians;
        [MethodImpl(AggressiveInlining)] public static Number Degrees(this Angle self) => self.Degrees;
        [MethodImpl(AggressiveInlining)] public static Number Turns(this Angle self) => self.Turns;
        [MethodImpl(AggressiveInlining)] public static Number HalfTurns(this Angle self) => self.HalfTurns;
        [MethodImpl(AggressiveInlining)] public static Number Cos(this Angle self) => self.Cos;
        [MethodImpl(AggressiveInlining)] public static Number Cosh(this Angle self) => self.Cosh;
        [MethodImpl(AggressiveInlining)] public static Number Sin(this Angle self) => self.Sin;
        [MethodImpl(AggressiveInlining)] public static ValueTuple<Number, Number> SinCos(this Angle self) => self.SinCos;
        [MethodImpl(AggressiveInlining)] public static Number Sinh(this Angle self) => self.Sinh;
        [MethodImpl(AggressiveInlining)] public static Number Tan(this Angle self) => self.Tan;
        [MethodImpl(AggressiveInlining)] public static Number Tanh(this Angle self) => self.Tanh;
        [MethodImpl(AggressiveInlining)] public static Angle Add(this Angle a, Angle b) => a + b;
        [MethodImpl(AggressiveInlining)] public static Angle Subtract(this Angle a, Angle b) => a - b;
        [MethodImpl(AggressiveInlining)] public static Angle Multiply(this Angle a, Number x) => a * x;
        [MethodImpl(AggressiveInlining)] public static Angle Multiply(this Number x, Angle a) => x * a;
        [MethodImpl(AggressiveInlining)] public static Angle Divide(this Angle a, Number x) => a / x;
        [MethodImpl(AggressiveInlining)] public static Angle Negative(this Angle n) => -n;
        [MethodImpl(AggressiveInlining)] public static Boolean Equals(this Angle a, Angle b) => a == b;
        [MethodImpl(AggressiveInlining)] public static Boolean NotEquals(this Angle a, Angle b) => a != b;
        [MethodImpl(AggressiveInlining)] public static Boolean LessThan(this Angle a, Angle b) => a < b;
        [MethodImpl(AggressiveInlining)] public static Boolean LessThanOrEquals(this Angle a, Angle b) => a <= b;
        [MethodImpl(AggressiveInlining)] public static Boolean GreaterThan(this Angle a, Angle b) => a > b;
        [MethodImpl(AggressiveInlining)] public static Boolean GreaterThanOrEquals(this Angle a, Angle b) => a >= b;
        [MethodImpl(AggressiveInlining)] public static int GetHashCode(this Angle self) => self.GetHashCode();
        [MethodImpl(AggressiveInlining)] public static string ToString(this Angle self) => self.ToString();
        [MethodImpl(AggressiveInlining)] public static int CompareTo(this Angle self, Angle other) => self.CompareTo(other);
        [MethodImpl(AggressiveInlining)] public static int CompareTo(this Angle self, object obj) => self.CompareTo(obj);
        [MethodImpl(AggressiveInlining)] public static Type GetType(this Angle self) => self.GetType();
    }
}
