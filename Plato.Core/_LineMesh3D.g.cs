// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 8:08:08 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
public partial struct LineMesh3D: ILineMesh3D
{
    // Fields
    [DataMember] public readonly IArray<Vector3> Points;
    [DataMember] public readonly IArray<Integer> Indices;

    // With functions 
    [MethodImpl(AggressiveInlining)] public LineMesh3D WithPoints(IArray<Vector3> points) => new LineMesh3D(points, Indices);
    [MethodImpl(AggressiveInlining)] public LineMesh3D WithIndices(IArray<Integer> indices) => new LineMesh3D(Points, indices);

    // Regular Constructor
    [MethodImpl(AggressiveInlining)] public LineMesh3D(IArray<Vector3> points, IArray<Integer> indices) { Points = points; Indices = indices; }

    // Static factory function
    [MethodImpl(AggressiveInlining)] public static LineMesh3D Create(IArray<Vector3> points, IArray<Integer> indices) => new LineMesh3D(points, indices);

    // Implicit converters to/from value-tuples and deconstructor
    [MethodImpl(AggressiveInlining)] public static implicit operator (IArray<Vector3>, IArray<Integer>)(LineMesh3D self) => (self.Points, self.Indices);
    [MethodImpl(AggressiveInlining)] public static implicit operator LineMesh3D((IArray<Vector3>, IArray<Integer>) value) => new(value.Item1, value.Item2);
    [MethodImpl(AggressiveInlining)] public void Deconstruct(out IArray<Vector3> points, out IArray<Integer> indices) { points = Points; indices = Indices;  }

    // Object virtual function overrides: Equals, GetHashCode, ToString
    [MethodImpl(AggressiveInlining)] public Boolean Equals(LineMesh3D other) => Points.Equals(other.Points) && Indices.Equals(other.Indices);
    [MethodImpl(AggressiveInlining)] public Boolean NotEquals(LineMesh3D other) => !Points.Equals(other.Points) && Indices.Equals(other.Indices);
    [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is LineMesh3D other ? Equals(other) : false;
    [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Points, Indices);
    [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Points\" = {Points}, \"Indices\" = {Indices} }}";

    // Explicit implementation of interfaces by forwarding properties to fields
    IArray<Integer> IIndexedGeometry.Indices { [MethodImpl(AggressiveInlining)] get => Indices; }

    // Implemented concept functions and type functions
    [MethodImpl(AggressiveInlining)]  public LineMesh3D Deform(System.Func<Vector3, Vector3> f) => (this.Points.Map(f), this.Indices);
public IArray<Line3D> Lines { [MethodImpl(AggressiveInlining)] get  => this.AllFaceVertices.Map((xs) =>  => new Line3D(xs.At(((Integer)0)), xs.At(((Integer)1)));
 } 
[MethodImpl(AggressiveInlining)]  public Vector3 Vertex(Integer n) => this.Points.At(this.Indices.At(n));
[MethodImpl(AggressiveInlining)]  public IArray<Vector3> FaceVertices(Integer f){
    var _var827 = this;
    return this.FaceIndices.At(f).Map((i) =>  => _var827.Vertex(i);
;
}

public IArray2D<Vector3> AllFaceVertices { [MethodImpl(AggressiveInlining)] get {
    var _var828 = this;
    return this.AllFaceIndices.Map((x) =>  => _var828.Vertex(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public IArray<Vector3> Vertices(IArray<Integer> xs){
    var _var829 = this;
    return xs.Map((i) =>  => _var829.Vertex(i);
;
}

public IArray<Vector3> AllVertices { [MethodImpl(AggressiveInlining)] get  => this.Vertices(this.Indices); } 
public Integer NumPrimitives { [MethodImpl(AggressiveInlining)] get  => this.Indices.Count.Divide(this.PrimitiveSize); } 
public Integer NumFaces { [MethodImpl(AggressiveInlining)] get  => this.NumPrimitives; } 
public IArray2D<Integer> AllFaceIndices { [MethodImpl(AggressiveInlining)] get  => this.Indices.Slices(this.PrimitiveSize); } 
public Integer PrimitiveSize { [MethodImpl(AggressiveInlining)] get  => ((Integer)2); } 
public IArray<Integer2> FaceIndices { [MethodImpl(AggressiveInlining)] get  => this.Indices.Integer2Array; } 

    // Unimplemented concept functions
    public IArray<Vector3> Corners => throw new NotImplementedException();
}
Plato.CSharpWriter.CSharpConcreteTypeWriter}
