// Autogenerated file: DO NOT EDIT
// Created on 2025-03-14 12:36:59 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Rotation3D: IRotationalTransform3D
    {
        // Fields
        [DataMember] public readonly Quaternion Quaternion;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Rotation3D WithQuaternion(Quaternion quaternion) => new Rotation3D(quaternion);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Rotation3D(Quaternion quaternion) { Quaternion = quaternion; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Rotation3D Create(Quaternion quaternion) => new Rotation3D(quaternion);

        // Implicit converters to/from single field
        [MethodImpl(AggressiveInlining)] public static implicit operator Quaternion(Rotation3D self) => self.Quaternion;
        [MethodImpl(AggressiveInlining)] public static implicit operator Rotation3D(Quaternion value) => new Rotation3D(value);

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Rotation3D other) => Quaternion.Equals(other.Quaternion);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Rotation3D other) => !Quaternion.Equals(other.Quaternion);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Rotation3D other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Quaternion);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Quaternion\" = {Quaternion} }}";

        // Explicit implementation of interfaces by forwarding properties to fields
        Quaternion IRotationalTransform3D.Quaternion { [MethodImpl(AggressiveInlining)] get => Quaternion; }

        // Implemented interface functions
        // Translation(Rotation3D):Translation3D; [Self=Rotation3D;]; <>
        public Translation3D Translation { [MethodImpl(AggressiveInlining)] get  => Translation3D.Identity; } 
// Rotation(Rotation3D):Rotation3D; [Self=Rotation3D;]; <>
        public Rotation3D Rotation { [MethodImpl(AggressiveInlining)] get  => this; } 
// Identity(Rotation3D):Rotation3D; [Self=Rotation3D;]; <>
        public static Rotation3D Identity { [MethodImpl(AggressiveInlining)] get  => Quaternion.Identity; } 
// Matrix(Rotation3D):Matrix4x4; [IRotationalTransform3D=Rotation3D;Self=Rotation3D;]; <>
        public Matrix4x4 Matrix { [MethodImpl(AggressiveInlining)] get  => this.Quaternion.Matrix; } 
// Transform(Rotation3D, Vector3):Vector3; [IRotationalTransform3D=Rotation3D;Self=Rotation3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector3 Transform(Vector3 v) => v.Transform(this.Quaternion);
// TransformNormal(Rotation3D, Vector3):Vector3; [IRotationalTransform3D=Rotation3D;Self=Rotation3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector3 TransformNormal(Vector3 v) => v.TransformNormal(this.Quaternion);
// Matrix4x4(Rotation3D):Matrix4x4; [ITransform3D=Rotation3D;IRigidTransform3D=Rotation3D;IRotationalTransform3D=Rotation3D;Self=Rotation3D;]; <>
        public Matrix4x4 Matrix4x4 { [MethodImpl(AggressiveInlining)] get  => this.Matrix; } 
[MethodImpl(AggressiveInlining)]  public static implicit operator Matrix4x4(Rotation3D t) => t.Matrix4x4;
        // Inverse(Rotation3D):MatrixTransform3D; [ITransform3D=Rotation3D;IRigidTransform3D=Rotation3D;IRotationalTransform3D=Rotation3D;Self=Rotation3D;]; <>
        public MatrixTransform3D Inverse { [MethodImpl(AggressiveInlining)] get  => this.Matrix.Invert; } 

        // Unimplemented concept functions
    }
}
