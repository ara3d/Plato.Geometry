// Autogenerated file: DO NOT EDIT
// Created on 2025-04-07 4:05:19 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Rotation3D: IRotation3D
    {
        // Fields
        [DataMember] public readonly Quaternion Quaternion;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Rotation3D WithQuaternion(Quaternion quaternion) => new Rotation3D(quaternion);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Rotation3D(Quaternion quaternion) { Quaternion = quaternion; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Rotation3D Create(Quaternion quaternion) => new Rotation3D(quaternion);

        // Static default implementation
        public static readonly Rotation3D Default = default;

        // Implicit converters to/from single field
        [MethodImpl(AggressiveInlining)] public static implicit operator Quaternion(Rotation3D self) => self.Quaternion;
        [MethodImpl(AggressiveInlining)] public static implicit operator Rotation3D(Quaternion value) => new Rotation3D(value);

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Rotation3D other) => Quaternion.Equals(other.Quaternion);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Rotation3D other) => !Quaternion.Equals(other.Quaternion);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Rotation3D other ? Equals(other).Value : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Quaternion);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Quaternion\" = {Quaternion} }}";

        // Explicit implementation of interfaces by forwarding properties to fields
        Quaternion IRotation3D.Quaternion { [MethodImpl(AggressiveInlining)] get => Quaternion; }

        // Implemented interface functions
        public static Rotation3D Identity { [MethodImpl(AggressiveInlining)] get  => Quaternion.Identity; } 
public Matrix4x4 Matrix { [MethodImpl(AggressiveInlining)] get  => this.Quaternion.Matrix; } 
[MethodImpl(AggressiveInlining)]  public Point3D Multiply(Point3D v) => this.TransformPoint(v);
[MethodImpl(AggressiveInlining)]  public static Point3D operator *(Rotation3D x, Point3D v) => x.Multiply(v);
        [MethodImpl(AggressiveInlining)]  public Vector3 Multiply(Vector3 v) => this.TransformNormal(v);
[MethodImpl(AggressiveInlining)]  public static Vector3 operator *(Rotation3D x, Vector3 v) => x.Multiply(v);
        [MethodImpl(AggressiveInlining)]  public MatrixTransform3D Multiply(Matrix4x4 m) => this.Compose(y);
[MethodImpl(AggressiveInlining)]  public static MatrixTransform3D operator *(Rotation3D x, Matrix4x4 m) => x.Multiply(m);
        [MethodImpl(AggressiveInlining)]  public Point3D TransformPoint(Point3D v) => v.Vector.Transform(this.Matrix);
[MethodImpl(AggressiveInlining)]  public Vector3 TransformNormal(Vector3 v) => v.Vector.TransformNormal(this.Matrix);
public Matrix4x4 Matrix4x4 { [MethodImpl(AggressiveInlining)] get  => this.Matrix; } 
[MethodImpl(AggressiveInlining)]  public static implicit operator Matrix4x4(Rotation3D t) => t.Matrix4x4;
        public MatrixTransform3D MatrixTransform3D { [MethodImpl(AggressiveInlining)] get  => this.Matrix; } 
[MethodImpl(AggressiveInlining)]  public static implicit operator MatrixTransform3D(Rotation3D t) => t.MatrixTransform3D;
        public MatrixTransform3D Invert { [MethodImpl(AggressiveInlining)] get  => this.Matrix.Invert; } 
[MethodImpl(AggressiveInlining)]  public MatrixTransform3D Compose(Matrix4x4 m) => this.Matrix.Multiply(m);
public Rotation3D Rotation { [MethodImpl(AggressiveInlining)] get  => this.Matrix.Rotation; } 
public Translation3D Translation { [MethodImpl(AggressiveInlining)] get  => this.Matrix.Translation; } 
public Pose3D Pose { [MethodImpl(AggressiveInlining)] get  => (this.Matrix.Translation, this.Matrix.Rotation); } 

        // Unimplemented interface functions
    }
}
