// Autogenerated file: DO NOT EDIT
// Created on 2025-04-07 4:05:19 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    public static class Extensions
    {
        public static Array<Integer> Indices<_T0>(this IArray<_T0> xs) => xs.Count.Range;
public static Integer Count<_T0>(this IArray2D<_T0> xs) => xs.NumRows.Multiply(xs.NumColumns);
public static Integer Count<_T0>(this IArray3D<_T0> xs) => xs.NumRows.Multiply(xs.NumColumns.Multiply(xs.NumLayers));
[MethodImpl(AggressiveInlining)]  public static _T0 At<_T0>(this IArray2D<_T0> xs, Integer i) => xs.At(i.Modulo(xs.NumColumns), i.Divide(xs.NumColumns));
[MethodImpl(AggressiveInlining)]  public static _T0 At<_T0>(this IArray3D<_T0> xs, Integer i) => xs.At(i.Modulo(xs.NumColumns), i.Divide(xs.NumColumns), i.Divide(xs.NumLayers));
public static Boolean IsEmpty<_T0>(this IArray<_T0> xs) => xs.Count.Equals(((Integer)0));
public static _T0 First<_T0>(this IArray<_T0> xs) => xs.At(((Integer)0));
public static _T0 Last<_T0>(this IArray<_T0> xs) => xs.At(xs.Count.Subtract(((Integer)1)));
[MethodImpl(AggressiveInlining)]  public static _T0 Middle<_T0>(this IArray<_T0> xs, Integer n) => xs.At(xs.Count.Divide(((Integer)2)));
[MethodImpl(AggressiveInlining)]  public static Array<_T0> Slice<_T0>(this IArray<_T0> xs, Integer from, Integer to) => xs.Subarray(from, to.Subtract(from));
[MethodImpl(AggressiveInlining)]  public static Array2D<_T0> Slices<_T0>(this IArray<_T0> xs, Integer size){
            var _var1 = size;
            {
                var _var0 = xs;
                return xs.Count.Divide(size).MakeArray2D(size, (col, row)  => _var0.At(col.Multiply(_var1).Add(row)));
            }
        }

[MethodImpl(AggressiveInlining)]  public static Array<_T0> NthSlice<_T0>(this IArray<_T0> xs, Integer n, Integer size) => xs.Subarray(n.Multiply(size), size);
[MethodImpl(AggressiveInlining)]  public static Array<_T0> Subarray<_T0>(this IArray<_T0> xs, Integer from, Integer count){
            var _var3 = from;
            {
                var _var2 = xs;
                return count.MapRange((i)  => _var2.At(i.Add(_var3)));
            }
        }

[MethodImpl(AggressiveInlining)]  public static Array<_T0> Skip<_T0>(this IArray<_T0> xs, Integer n) => xs.Subarray(n, xs.Count.Subtract(n));
[MethodImpl(AggressiveInlining)]  public static Array<_T0> Take<_T0>(this IArray<_T0> xs, Integer n) => xs.Subarray(((Integer)0), n);
[MethodImpl(AggressiveInlining)]  public static Array<_T0> TakeLast<_T0>(this IArray<_T0> xs, Integer n) => xs.Skip(xs.Count.Subtract(((Integer)1)));
[MethodImpl(AggressiveInlining)]  public static Array<_T0> Drop<_T0>(this IArray<_T0> xs, Integer n) => xs.Take(xs.Count.Subtract(n));
[MethodImpl(AggressiveInlining)]  public static Array<_T0> Trim<_T0>(this IArray<_T0> xs, Integer first, Integer last) => xs.Skip(first).Drop(last);
public static IArray<_T0> Rest<_T0>(this IArray<_T0> xs) => xs.Skip(((Integer)1));
[MethodImpl(AggressiveInlining)]  public static _T1 Reduce<_T0, _T1>(this IArray<_T0> xs, _T1 acc, System.Func<_T1, _T0, _T1> f){
            var r = acc;
            {
                var i = ((Integer)0);
                while (i.LessThan(xs.Count))
                {
                    r = f.Invoke(r, xs.At(i));
                    i = i.Add(((Integer)1));
                }

            }
            return r;
        }

[MethodImpl(AggressiveInlining)]  public static Boolean All<_T0>(this IArray<_T0> xs, System.Func<_T0, Boolean> f){
            {
                var i = ((Integer)0);
                while (i.LessThan(xs.Count))
                {
                    if (f.Invoke(xs.At(i)).Not)
                    return ((Boolean)false);
                    i = i.Add(((Integer)1));
                }

            }
            return ((Boolean)true);
        }

[MethodImpl(AggressiveInlining)]  public static Boolean Any<_T0>(this IArray<_T0> xs, System.Func<_T0, Boolean> f){
            {
                var i = ((Integer)0);
                while (i.LessThan(xs.Count))
                {
                    if (f.Invoke(xs.At(i)))
                    return ((Boolean)true);
                    i = i.Add(((Integer)1));
                }

            }
            return ((Boolean)false);
        }

[MethodImpl(AggressiveInlining)]  public static Array<_T1> Map<_T0, _T1>(this IArray<_T0> xs, System.Func<_T0, _T1> f){
            var _var5 = xs;
            {
                var _var4 = f;
                return xs.Count.MapRange((i)  => _var4.Invoke(_var5.At(i)));
            }
        }

[MethodImpl(AggressiveInlining)]  public static Array<_T2> Zip<_T0, _T1, _T2>(this IArray<_T0> xs, IArray<_T1> ys, System.Func<_T0, _T1, _T2> f){
            var _var8 = ys;
            {
                var _var7 = xs;
                {
                    var _var6 = f;
                    return xs.Count.Lesser(ys.Count).MapRange((i)  => _var6.Invoke(_var7.At(i), _var8.At(i)));
                }
            }
        }

[MethodImpl(AggressiveInlining)]  public static Array<_T3> Zip<_T0, _T1, _T2, _T3>(this IArray<_T0> xs, IArray<_T1> ys, IArray<_T2> zs, System.Func<_T0, _T1, _T2, _T3> f){
            var _var12 = zs;
            {
                var _var11 = ys;
                {
                    var _var10 = xs;
                    {
                        var _var9 = f;
                        return xs.Count.Lesser(ys.Count).Lesser(zs.Count).MapRange((i)  => _var9.Invoke(_var10.At(i), _var11.At(i), _var12.At(i)));
                    }
                }
            }
        }

[MethodImpl(AggressiveInlining)]  public static _T0 ModuloAt<_T0>(this IArray<_T0> xs, Integer n) => xs.At(n.Modulo(xs.Count));
[MethodImpl(AggressiveInlining)]  public static Array<_T0> Shift<_T0>(this IArray<_T0> xs, Integer n){
            var _var13 = xs;
            return xs.Count.MapRange((i)  => _var13.ModuloAt(i));
        }

[MethodImpl(AggressiveInlining)]  public static Array<_T1> WithNext<_T0, _T1>(this IArray<_T0> xs, System.Func<_T0, _T0, _T1> f) => xs.Drop(((Integer)1)).Zip(xs.Skip(((Integer)1)), f);
[MethodImpl(AggressiveInlining)]  public static Array<_T1> WithNextAndBeginning<_T0, _T1>(this IArray<_T0> xs, System.Func<_T0, _T0, _T1> f) => xs.Zip(xs.Shift(((Integer)1)), f);
[MethodImpl(AggressiveInlining)]  public static Array<_T1> WithNext<_T0, _T1>(this IArray<_T0> xs, System.Func<_T0, _T0, _T1> f, Boolean connect) => connect ? xs.WithNextAndBeginning(f) : xs.WithNext(f);
[MethodImpl(AggressiveInlining)]  public static Array<_T0> EveryNth<_T0>(this IArray<_T0> self, Integer n){
            var _var15 = n;
            {
                var _var14 = self;
                return self.Indices().Map((i)  => _var14.ModuloAt(i.Multiply(_var15)));
            }
        }

[MethodImpl(AggressiveInlining)]  public static Array2D<_T2> CartesianProduct<_T0, _T1, _T2>(this IArray<_T0> columns, IArray<_T1> rows, System.Func<_T0, _T1, _T2> func){
            var _var18 = rows;
            {
                var _var17 = columns;
                {
                    var _var16 = func;
                    return columns.Count.MakeArray2D(rows.Count, (i, j)  => _var16.Invoke(_var17.At(i), _var18.At(j)));
                }
            }
        }

public static Array<_T0> Reverse<_T0>(this IArray<_T0> self){
            var _var20 = self;
            {
                var _var19 = self;
                return self.Indices().Map((i)  => _var19.At(_var20.Count.Subtract(((Integer)1)).Subtract(i)));
            }
        }

[MethodImpl(AggressiveInlining)]  public static Array<_T0> Concat<_T0>(this IArray<_T0> xs, IArray<_T0> ys){
            var _var24 = xs;
            {
                var _var23 = ys;
                {
                    var _var22 = xs;
                    {
                        var _var21 = xs;
                        return xs.Count.Add(ys.Count).MapRange((i)  => i.LessThan(_var21.Count) ? _var22.At(i) : _var23.At(i.Subtract(_var24.Count)));
                    }
                }
            }
        }

[MethodImpl(AggressiveInlining)]  public static Array<_T0> Prepend<_T0>(this IArray<_T0> self, _T0 value){
            var _var26 = self;
            {
                var _var25 = value;
                return self.Count.Add(((Integer)1)).MapRange((i)  => i.Equals(((Integer)0)) ? _var25 : _var26.At(i.Subtract(((Integer)1))));
            }
        }

[MethodImpl(AggressiveInlining)]  public static Array<_T0> Append<_T0>(this IArray<_T0> self, _T0 value){
            var _var28 = self;
            {
                var _var27 = value;
                return self.Count.Add(((Integer)1)).MapRange((i)  => i.Equals(((Integer)0)) ? _var27 : _var28.At(i.Subtract(((Integer)1))));
            }
        }

[MethodImpl(AggressiveInlining)]  public static Array<_T0> PrependAndAppend<_T0>(this IArray<_T0> self, _T0 before, _T0 after) => self.Prepend(before).Append(after);
[MethodImpl(AggressiveInlining)]  public static IArray<_T1> ZipPairs<_T0, _T1>(this IArray<_T0> xs, System.Func<_T0, _T0, _T1> f){
            var _var31 = xs;
            {
                var _var30 = xs;
                {
                    var _var29 = f;
                    return xs.Count.Divide(((Integer)2)).MapRange((i)  => _var29.Invoke(_var30.At(i.Multiply(((Integer)2))), _var31.At(i.Multiply(((Integer)2)).Add(((Integer)1)))));
                }
            }
        }

[MethodImpl(AggressiveInlining)]  public static IArray<_T1> ZipTriplets<_T0, _T1>(this IArray<_T0> xs, System.Func<_T0, _T0, _T0, _T1> f){
            var _var35 = xs;
            {
                var _var34 = xs;
                {
                    var _var33 = xs;
                    {
                        var _var32 = f;
                        return xs.Count.Divide(((Integer)3)).MapRange((i)  => _var32.Invoke(_var33.At(i.Multiply(((Integer)3))), _var34.At(i.Multiply(((Integer)3)).Add(((Integer)1))), _var35.At(i.Multiply(((Integer)3)).Add(((Integer)2)))));
                    }
                }
            }
        }

[MethodImpl(AggressiveInlining)]  public static IArray<_T1> ZipQuartets<_T0, _T1>(this IArray<_T0> xs, System.Func<_T0, _T0, _T0, _T0, _T1> f){
            var _var40 = xs;
            {
                var _var39 = xs;
                {
                    var _var38 = xs;
                    {
                        var _var37 = xs;
                        {
                            var _var36 = f;
                            return xs.Count.Divide(((Integer)4)).MapRange((i)  => _var36.Invoke(_var37.At(i.Multiply(((Integer)4))), _var38.At(i.Multiply(((Integer)4)).Add(((Integer)1))), _var39.At(i.Multiply(((Integer)4)).Add(((Integer)2))), _var40.At(i.Multiply(((Integer)4)).Add(((Integer)3)))));
                        }
                    }
                }
            }
        }

[MethodImpl(AggressiveInlining)]  public static Array2D<_T1> Map<_T0, _T1>(this IArray2D<_T0> xs, System.Func<_T0, _T1> f){
            var _var42 = xs;
            {
                var _var41 = f;
                return xs.NumColumns.MakeArray2D(xs.NumRows, (a, b)  => _var41.Invoke(_var42.At(a, b)));
            }
        }

[MethodImpl(AggressiveInlining)]  public static IArray<_T0> Row<_T0>(this IArray2D<_T0> self, Integer row){
            var _var44 = row;
            {
                var _var43 = self;
                return self.NumColumns.MapRange((col)  => _var43.At(col, _var44));
            }
        }

[MethodImpl(AggressiveInlining)]  public static IArray<_T0> Column<_T0>(this IArray2D<_T0> self, Integer col){
            var _var46 = col;
            {
                var _var45 = self;
                return self.NumRows.MapRange((row)  => _var45.At(_var46, row));
            }
        }

public static IArray<IArray<_T0>> Rows<_T0>(this IArray2D<_T0> self){
            var _var47 = self;
            return self.NumRows.MapRange((row)  => _var47.Row(row));
        }

public static IArray<IArray<_T0>> Columns<_T0>(this IArray2D<_T0> self){
            var _var48 = self;
            return self.NumColumns.MapRange((col)  => _var48.Column(col));
        }

public static Bounds3D Bounds(this IArray<Point3D> xs) => xs.Reduce(Bounds3D.Empty, (a, b)  => a.Include(b));
[MethodImpl(AggressiveInlining)]  public static Array<_T1> FlatMap<_T0, _T1>(this IArray<_T0> xs, System.Func<_T0, IArray<_T1>> f) => throw new NotImplementedException();
public static IArray<Line2D> Lines(this IArray<Line2D> xs) => xs;
public static IArray<Line3D> Lines(this IArray<Line3D> xs) => xs;
public static IArray<Line2D> Lines(this IArray<Triangle2D> xs) => xs.FlatMap((x)  => x.Lines);
public static IArray<Line3D> Lines(this IArray<Triangle3D> xs) => xs.FlatMap((x)  => x.Lines);
public static IArray<Line2D> Lines(this IArray<Quad2D> xs) => xs.FlatMap((x)  => x.Lines);
public static IArray<Line3D> Lines(this IArray<Quad3D> xs) => xs.FlatMap((x)  => x.Lines);
public static IArray<Triangle2D> Triangles(this IArray<Triangle2D> xs) => xs;
public static IArray<Triangle3D> Triangles(this IArray<Triangle3D> xs) => xs;
public static IArray<Triangle2D> Triangles(this IArray<Quad2D> xs) => xs.FlatMap((x)  => x.Triangles);
public static IArray<Triangle3D> Triangles(this IArray<Quad3D> xs) => xs.FlatMap((x)  => x.Triangles);
[MethodImpl(AggressiveInlining)]  public static IArray2D<Integer4> AllQuadFaceIndices<_T0>(this IArray2D<_T0> xs, Boolean closedX, Boolean closedY) => xs.NumColumns.AllQuadFaceIndices(xs.NumRows, closedX, closedY);
}
}
