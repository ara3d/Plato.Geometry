// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 12:06:56 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct TorusKnot: IAngularCurve3D, IClosedShape
    {
        // Fields
        [DataMember] public readonly Integer P;
        [DataMember] public readonly Integer Q;
        [DataMember] public readonly Number Radius;

        // With functions 
        [MethodImpl(AggressiveInlining)] public TorusKnot WithP(Integer p) => new TorusKnot(p, Q, Radius);
        [MethodImpl(AggressiveInlining)] public TorusKnot WithQ(Integer q) => new TorusKnot(P, q, Radius);
        [MethodImpl(AggressiveInlining)] public TorusKnot WithRadius(Number radius) => new TorusKnot(P, Q, radius);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public TorusKnot(Integer p, Integer q, Number radius) { P = p; Q = q; Radius = radius; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static TorusKnot Create(Integer p, Integer q, Number radius) => new TorusKnot(p, q, radius);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Integer, Integer, Number)(TorusKnot self) => (self.P, self.Q, self.Radius);
        [MethodImpl(AggressiveInlining)] public static implicit operator TorusKnot((Integer, Integer, Number) value) => new(value.Item1, value.Item2, value.Item3);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Integer p, out Integer q, out Number radius) { p = P; q = Q; radius = Radius;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(TorusKnot other) => P.Equals(other.P) && Q.Equals(other.Q) && Radius.Equals(other.Radius);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(TorusKnot other) => !P.Equals(other.P) && Q.Equals(other.Q) && Radius.Equals(other.Radius);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is TorusKnot other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(P, Q, Radius);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"P\" = {P}, \"Q\" = {Q}, \"Radius\" = {Radius} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented concept functions and type functions
        [MethodImpl(AggressiveInlining)]  public Vector3 Eval(Angle t) => t.TorusKnot(this.P, this.Q).Multiply(this.Radius);
        [MethodImpl(AggressiveInlining)]  public Vector3 Eval(Number t) => this.Eval(t.Turns);
        [MethodImpl(AggressiveInlining)]  public IArray<Vector3> Sample(Integer numPoints){
            var _var467 = this;
            return numPoints.LinearSpace.Map((x) => _var467.Eval(x));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine3D ToPolyLine3D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
        [MethodImpl(AggressiveInlining)]  public Procedural<Number, TR> Combine<TR>(TorusKnot b, System.Func<TR, TR, TR> f){
            var _var470 = b;
            {
                var _var469 = this;
                {
                    var _var468 = f;
                    return (x) => _var468.Invoke(_var469.Eval(x), _var470.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector3> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var472 = f;
            {
                var _var471 = this;
                return (x) => _var471.Eval(_var472.Invoke(x));
            }
        }

        public System.Func<Number, Vector3> Function { [MethodImpl(AggressiveInlining)] get {
            var _var473 = this;
            return (x) => _var473.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Number, Vector3> Compose(TorusKnot b){
            var _var475 = this;
            {
                var _var474 = b;
                return (x) => _var474.Eval(_var475.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, TR> Combine<TR>(TorusKnot b, System.Func<TR, TR, TR> f){
            var _var478 = b;
            {
                var _var477 = this;
                {
                    var _var476 = f;
                    return (x) => _var476.Invoke(_var477.Eval(x), _var478.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var480 = f;
            {
                var _var479 = this;
                return (x) => _var479.Eval(_var480.Invoke(x));
            }
        }

        public System.Func<Vector3, Number> Function { [MethodImpl(AggressiveInlining)] get {
            var _var481 = this;
            return (x) => _var481.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, Number> Compose(TorusKnot b){
            var _var483 = this;
            {
                var _var482 = b;
                return (x) => _var482.Eval(_var483.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Union(TorusKnot b) => this.Combine(b, (a, b) => a.Max(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Intersection(TorusKnot b) => this.Combine(b, (a, b) => a.Min(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Difference(TorusKnot b) => this.Combine(b, (a, b) => a.Max(b.Negative));
        public Procedural<Vector3, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) => x.Negative); } 
        public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 

        // Unimplemented concept functions
        [MethodImpl(AggressiveInlining)]  public Number Distance(Vector3 p) => throw new NotImplementedException();
        [MethodImpl(AggressiveInlining)]  public Number Eval(Vector3 t) => throw new NotImplementedException();
    }
}
