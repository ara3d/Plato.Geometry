// Autogenerated file: DO NOT EDIT
// Created on 2025-04-08 12:25:04 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct QuadArray3D: IQuadArray3D<QuadArray3D>
    {
        // Fields
        [DataMember] public readonly IArray<Quad3D> Quads;

        // With functions 
        [MethodImpl(AggressiveInlining)] public QuadArray3D WithQuads(IArray<Quad3D> quads) => new QuadArray3D(quads);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public QuadArray3D(IArray<Quad3D> quads) { Quads = quads; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static QuadArray3D Create(IArray<Quad3D> quads) => new QuadArray3D(quads);

        // Static default implementation
        public static readonly QuadArray3D Default = default;

        // Implicit converters to/from single field

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(QuadArray3D other) => Quads.Equals(other.Quads);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(QuadArray3D other) => !Quads.Equals(other.Quads);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is QuadArray3D other ? Equals(other).Value : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Quads);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Quads\" = {Quads} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented interface functions
        [MethodImpl(AggressiveInlining)]  public QuadArray3D Deform(System.Func<Point3D, Point3D> f){
            var _var170 = f;
            return new QuadArray3D(this.Quads.Map((q)  => q.Deform(_var170)));
        }

public IArray<Point3D> Points { [MethodImpl(AggressiveInlining)] get  => this.Quads.FlatMap((x)  => x.Points); } 
public IArray<Line3D> Lines { [MethodImpl(AggressiveInlining)] get  => this.Quads.FlatMap((x)  => x.Lines); } 
public IArray<Triangle3D> Triangles { [MethodImpl(AggressiveInlining)] get  => this.Quads.FlatMap((x)  => x.Triangles); } 
[MethodImpl(AggressiveInlining)]  public QuadArray3D Deform<_T0>(_T0 t) where _T0 : ITransform3D{
            var _var171 = t;
            return this.Deform((v)  => v.Vector3.Transform(_var171.Matrix));
        }

[MethodImpl(AggressiveInlining)]  public QuadArray3D Scale(Vector3 v){
            var _var172 = v;
            return this.Deform((p)  => p.Vector3.Multiply(_var172));
        }

[MethodImpl(AggressiveInlining)]  public QuadArray3D Scale(Number s) => this.Scale((s, s, s));
[MethodImpl(AggressiveInlining)]  public QuadArray3D ScaleX(Number s) => this.Scale((s, ((Integer)1), ((Integer)1)));
[MethodImpl(AggressiveInlining)]  public QuadArray3D ScaleY(Number s) => this.Scale((((Integer)1), s, ((Integer)1)));
[MethodImpl(AggressiveInlining)]  public QuadArray3D ScaleZ(Number s) => this.Scale((((Integer)1), ((Integer)1), s));
[MethodImpl(AggressiveInlining)]  public QuadArray3D Rotate(Quaternion q){
            var _var173 = q;
            return this.Deform((v)  => _var173.Transform(v));
        }

[MethodImpl(AggressiveInlining)]  public QuadArray3D RotateX(Angle a) => this.Rotate(a.RotateX);
[MethodImpl(AggressiveInlining)]  public QuadArray3D RotateY(Angle a) => this.Rotate(a.RotateY);
[MethodImpl(AggressiveInlining)]  public QuadArray3D RotateZ(Angle a) => this.Rotate(a.RotateZ);
[MethodImpl(AggressiveInlining)]  public QuadArray3D Translate(Vector3 v){
            var _var174 = v;
            return this.Deform((p)  => p.Add(_var174));
        }

[MethodImpl(AggressiveInlining)]  public QuadArray3D TranslateX(Number s) => this.Translate(s.XVector3);
[MethodImpl(AggressiveInlining)]  public QuadArray3D TranslateY(Number s) => this.Translate(s.YVector3);
[MethodImpl(AggressiveInlining)]  public QuadArray3D TranslateZ(Number s) => this.Translate(s.ZVector3);
public Integer PrimitiveSize { [MethodImpl(AggressiveInlining)] get  => ((Integer)4); } 

        // Unimplemented interface functions
        public Integer NumPrimitives => throw new NotImplementedException();
public IArray<Quad3D> Primitives => throw new NotImplementedException();
}
}
