// Autogenerated file: DO NOT EDIT
// Created on 2025-04-07 4:05:19 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct LineArray3D: ILineArray3D<LineArray3D>
    {
        // Fields
        [DataMember] public readonly IArray<Line3D> Lines;

        // With functions 
        [MethodImpl(AggressiveInlining)] public LineArray3D WithLines(IArray<Line3D> lines) => new LineArray3D(lines);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public LineArray3D(IArray<Line3D> lines) { Lines = lines; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static LineArray3D Create(IArray<Line3D> lines) => new LineArray3D(lines);

        // Static default implementation
        public static readonly LineArray3D Default = default;

        // Implicit converters to/from single field

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(LineArray3D other) => Lines.Equals(other.Lines);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(LineArray3D other) => !Lines.Equals(other.Lines);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is LineArray3D other ? Equals(other).Value : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Lines);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Lines\" = {Lines} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented interface functions
        [MethodImpl(AggressiveInlining)]  public LineArray3D Deform(System.Func<Point3D, Point3D> f){
            var _var155 = f;
            return new LineArray3D(this.Lines.Map((l)  => l.Deform(_var155)));
        }

public IArray<Integer> Indices { [MethodImpl(AggressiveInlining)] get  => this.Points.Indices; } 
public IArray<Vector3> Points { [MethodImpl(AggressiveInlining)] get  => this.Lines.FlatMap((x)  => x.Points); } 
public Integer NumPrimitives { [MethodImpl(AggressiveInlining)] get  => this.Indices.Count.Divide(this.PrimitiveSize); } 
[MethodImpl(AggressiveInlining)]  public LineArray3D Deform<_T0>(_T0 t) where _T0 : ITransform3D{
            var _var156 = t;
            return this.Deform((v)  => _var156.Transform(v));
        }

[MethodImpl(AggressiveInlining)]  public LineArray3D Scale(Vector3 v){
            var _var157 = v;
            return this.Deform((p)  => p.Vector3.Multiply(_var157));
        }

[MethodImpl(AggressiveInlining)]  public LineArray3D Scale(Number s) => this.Scale((s, s, s));
[MethodImpl(AggressiveInlining)]  public LineArray3D ScaleX(Number s) => this.Scale((s, ((Integer)1), ((Integer)1)));
[MethodImpl(AggressiveInlining)]  public LineArray3D ScaleY(Number s) => this.Scale((((Integer)1), s, ((Integer)1)));
[MethodImpl(AggressiveInlining)]  public LineArray3D ScaleZ(Number s) => this.Scale((((Integer)1), ((Integer)1), s));
[MethodImpl(AggressiveInlining)]  public LineArray3D Rotate(Quaternion q){
            var _var158 = q;
            return this.Deform((v)  => _var158.Transform(v));
        }

[MethodImpl(AggressiveInlining)]  public LineArray3D RotateX(Angle a) => this.Rotate(a.RotateX);
[MethodImpl(AggressiveInlining)]  public LineArray3D RotateY(Angle a) => this.Rotate(a.RotateY);
[MethodImpl(AggressiveInlining)]  public LineArray3D RotateZ(Angle a) => this.Rotate(a.RotateZ);
[MethodImpl(AggressiveInlining)]  public LineArray3D Translate(Vector3 v){
            var _var159 = v;
            return this.Deform((p)  => p.Add(_var159));
        }

[MethodImpl(AggressiveInlining)]  public LineArray3D TranslateX(Number s) => this.Translate(s.XVector3);
[MethodImpl(AggressiveInlining)]  public LineArray3D TranslateY(Number s) => this.Translate(s.YVector3);
[MethodImpl(AggressiveInlining)]  public LineArray3D TranslateZ(Number s) => this.Translate(s.ZVector3);
public Integer PrimitiveSize { [MethodImpl(AggressiveInlining)] get  => ((Integer)2); } 

        // Unimplemented interface functions
        public Bounds3D Bounds => throw new NotImplementedException();
public IArray<Point3D> Points => throw new NotImplementedException();
public IArray<Line3D> Primitives => throw new NotImplementedException();
}
}
