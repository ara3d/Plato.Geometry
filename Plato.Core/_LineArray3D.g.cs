// Autogenerated file: DO NOT EDIT
// Created on 2025-03-14 12:36:59 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct LineArray3D: ILineArray3D
    {
        // Fields
        [DataMember] public readonly IArray<Line3D> Lines;

        // With functions 
        [MethodImpl(AggressiveInlining)] public LineArray3D WithLines(IArray<Line3D> lines) => new LineArray3D(lines);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public LineArray3D(IArray<Line3D> lines) { Lines = lines; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static LineArray3D Create(IArray<Line3D> lines) => new LineArray3D(lines);

        // Implicit converters to/from single field

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(LineArray3D other) => Lines.Equals(other.Lines);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(LineArray3D other) => !Lines.Equals(other.Lines);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is LineArray3D other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Lines);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Lines\" = {Lines} }}";

        // Explicit implementation of interfaces by forwarding properties to fields
        IArray<Line3D> ILineGeometry3D.Lines { [MethodImpl(AggressiveInlining)] get => Lines; }

        // Implemented interface functions
        // Deform(LineArray3D, Function1<Vector3, Vector3>):LineArray3D; [Self=LineArray3D;]; <>
        [MethodImpl(AggressiveInlining)]  public LineArray3D Deform(System.Func<Vector3, Vector3> f){
            var _var166 = f;
            return new LineArray3D(this.Lines.Map((l)  => l.Deform(_var166)));
        }

// Indices(LineArray3D):_T0; [ILineArray3D=LineArray3D;Self=LineArray3D;]; <_T0:IArray<Integer>>
        public _T0 Indices<_T0> { [MethodImpl(AggressiveInlining)] get  => this.Points.Indices(); } 
// Points(LineArray3D):_T0; [ILineArray3D=LineArray3D;Self=LineArray3D;]; <_T0:IArray<Vector3>>
        public _T0 Points<_T0> { [MethodImpl(AggressiveInlining)] get  => this.Lines.FlatMap((x)  => x.Points); } 
// Vertex(LineArray3D, Integer):Vector3; [IIndexedGeometry3D=LineArray3D;ILineMesh3D=LineArray3D;ILineArray3D=LineArray3D;Self=LineArray3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector3 Vertex(Integer n) => this.Points.At(this.Indices.At(n));
// FaceVertices(LineArray3D, Integer):_T0; [IIndexedGeometry3D=LineArray3D;ILineMesh3D=LineArray3D;ILineArray3D=LineArray3D;Self=LineArray3D;]; <_T0:IArray<Vector3>>
        [MethodImpl(AggressiveInlining)]  public _T0 FaceVertices<_T0>(Integer f){
            var _var167 = this;
            return this.FaceIndices.At(f).Map((i)  => _var167.Vertex(i));
        }

// AllFaceVertices(LineArray3D):_T0; [IIndexedGeometry3D=LineArray3D;ILineMesh3D=LineArray3D;ILineArray3D=LineArray3D;Self=LineArray3D;]; <_T0:IArray2D<Vector3>>
        public _T0 AllFaceVertices<_T0> { [MethodImpl(AggressiveInlining)] get {
            var _var168 = this;
            return this.AllFaceIndices.Map((x)  => _var168.Vertex(x));
        }
         } 
// Vertices(LineArray3D, _T0):_T1; [IIndexedGeometry3D=LineArray3D;ILineMesh3D=LineArray3D;ILineArray3D=LineArray3D;Self=LineArray3D;]; <_T0:IArray<Integer>, _T1:IArray<Vector3>>
        [MethodImpl(AggressiveInlining)]  public _T1 Vertices<_T0, _T1>(_T0 xs){
            var _var169 = this;
            return xs.Map((i)  => _var169.Vertex(i));
        }

// AllVertices(LineArray3D):_T0; [IIndexedGeometry3D=LineArray3D;ILineMesh3D=LineArray3D;ILineArray3D=LineArray3D;Self=LineArray3D;]; <_T0:IArray<Vector3>>
        public _T0 AllVertices<_T0> { [MethodImpl(AggressiveInlining)] get  => this.Vertices(this.Indices); } 
// NumPrimitives(LineArray3D):Integer; [IIndexedGeometry=LineArray3D;IIndexedGeometry3D=LineArray3D;ILineMesh3D=LineArray3D;ILineArray3D=LineArray3D;Self=LineArray3D;]; <>
        public Integer NumPrimitives { [MethodImpl(AggressiveInlining)] get  => this.Indices.Count.Divide(this.PrimitiveSize); } 
// NumFaces(LineArray3D):Integer; [IIndexedGeometry=LineArray3D;IIndexedGeometry3D=LineArray3D;ILineMesh3D=LineArray3D;ILineArray3D=LineArray3D;Self=LineArray3D;]; <>
        public Integer NumFaces { [MethodImpl(AggressiveInlining)] get  => this.NumPrimitives; } 
// AllFaceIndices(LineArray3D):_T0; [IIndexedGeometry=LineArray3D;IIndexedGeometry3D=LineArray3D;ILineMesh3D=LineArray3D;ILineArray3D=LineArray3D;Self=LineArray3D;]; <_T0:IArray2D<Integer>>
        public _T0 AllFaceIndices<_T0> { [MethodImpl(AggressiveInlining)] get  => this.Indices.Slices(this.PrimitiveSize); } 
// PrimitiveSize(LineArray3D):Integer; [ILineGeometry=LineArray3D;ILineGeometry3D=LineArray3D;ILineMesh3D=LineArray3D;ILineArray3D=LineArray3D;Self=LineArray3D;]; <>
        public Integer PrimitiveSize { [MethodImpl(AggressiveInlining)] get  => ((Integer)2); } 
// FaceIndices(LineArray3D):_T0; [ILineGeometry=LineArray3D;ILineGeometry3D=LineArray3D;ILineMesh3D=LineArray3D;ILineArray3D=LineArray3D;Self=LineArray3D;]; <_T0:IArray<Integer2>>
        public _T0 FaceIndices<_T0> { [MethodImpl(AggressiveInlining)] get  => this.Indices.Integer2Array; } 

        // Unimplemented concept functions
        // Corners(LineArray3D):_T0; [IPrimitiveGeometry3D=LineArray3D;ILineGeometry3D=LineArray3D;ILineMesh3D=LineArray3D;ILineArray3D=LineArray3D;Self=LineArray3D;]; <_T0:IArray<Vector3>>
        public _T0 Corners<_T0> => throw new NotImplementedException();
}
}
