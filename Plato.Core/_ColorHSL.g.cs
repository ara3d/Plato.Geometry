// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 8:08:08 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
public partial struct ColorHSL: ICoordinate
{
    // Fields
    [DataMember] public readonly Angle Hue;
    [DataMember] public readonly Number Saturation;
    [DataMember] public readonly Number Luminance;

    // With functions 
    [MethodImpl(AggressiveInlining)] public ColorHSL WithHue(Angle hue) => new ColorHSL(hue, Saturation, Luminance);
    [MethodImpl(AggressiveInlining)] public ColorHSL WithSaturation(Number saturation) => new ColorHSL(Hue, saturation, Luminance);
    [MethodImpl(AggressiveInlining)] public ColorHSL WithLuminance(Number luminance) => new ColorHSL(Hue, Saturation, luminance);

    // Regular Constructor
    [MethodImpl(AggressiveInlining)] public ColorHSL(Angle hue, Number saturation, Number luminance) { Hue = hue; Saturation = saturation; Luminance = luminance; }

    // Static factory function
    [MethodImpl(AggressiveInlining)] public static ColorHSL Create(Angle hue, Number saturation, Number luminance) => new ColorHSL(hue, saturation, luminance);

    // Implicit converters to/from value-tuples and deconstructor
    [MethodImpl(AggressiveInlining)] public static implicit operator (Angle, Number, Number)(ColorHSL self) => (self.Hue, self.Saturation, self.Luminance);
    [MethodImpl(AggressiveInlining)] public static implicit operator ColorHSL((Angle, Number, Number) value) => new(value.Item1, value.Item2, value.Item3);
    [MethodImpl(AggressiveInlining)] public void Deconstruct(out Angle hue, out Number saturation, out Number luminance) { hue = Hue; saturation = Saturation; luminance = Luminance;  }

    // Object virtual function overrides: Equals, GetHashCode, ToString
    [MethodImpl(AggressiveInlining)] public Boolean Equals(ColorHSL other) => Hue.Equals(other.Hue) && Saturation.Equals(other.Saturation) && Luminance.Equals(other.Luminance);
    [MethodImpl(AggressiveInlining)] public Boolean NotEquals(ColorHSL other) => !Hue.Equals(other.Hue) && Saturation.Equals(other.Saturation) && Luminance.Equals(other.Luminance);
    [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is ColorHSL other ? Equals(other) : false;
    [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Hue, Saturation, Luminance);
    [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Hue\" = {Hue}, \"Saturation\" = {Saturation}, \"Luminance\" = {Luminance} }}";

    // Explicit implementation of interfaces by forwarding properties to fields

    // Implemented concept functions and type functions

    // Unimplemented concept functions
}
Plato.CSharpWriter.CSharpConcreteTypeWriter}
