// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 12:06:56 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct LineArray2D: ILineArray2D
    {
        // Fields
        [DataMember] public readonly IArray<Line2D> Lines;

        // With functions 
        [MethodImpl(AggressiveInlining)] public LineArray2D WithLines(IArray<Line2D> lines) => new LineArray2D(lines);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public LineArray2D(IArray<Line2D> lines) { Lines = lines; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static LineArray2D Create(IArray<Line2D> lines) => new LineArray2D(lines);

        // Implicit converters to/from single field

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(LineArray2D other) => Lines.Equals(other.Lines);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(LineArray2D other) => !Lines.Equals(other.Lines);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is LineArray2D other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Lines);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Lines\" = {Lines} }}";

        // Explicit implementation of interfaces by forwarding properties to fields
        IArray<Line2D> ILineGeometry2D.Lines { [MethodImpl(AggressiveInlining)] get => Lines; }

        // Implemented concept functions and type functions
        public IArray<Integer> Indices { [MethodImpl(AggressiveInlining)] get  => this.Points.Indices(); } 
        public IArray<Vector2> Points { [MethodImpl(AggressiveInlining)] get  => this.Lines.FlatMap((x) => x.Points); } 
        [MethodImpl(AggressiveInlining)]  public Vector2 Vertex(Integer n) => this.Points.At(this.Indices.At(n));
        [MethodImpl(AggressiveInlining)]  public IArray<Vector2> FaceVertices(Integer f){
            var _var834 = this;
            return this.FaceIndices.At(f).Map((i) => _var834.Vertex(i));
        }

        public IArray2D<Vector2> AllFaceVertices { [MethodImpl(AggressiveInlining)] get {
            var _var835 = this;
            return this.AllFaceIndices.Map((x) => _var835.Vertex(x));
        }
         } 
        [MethodImpl(AggressiveInlining)]  public IArray<Vector2> Vertices(IArray<Integer> xs){
            var _var836 = this;
            return xs.Map((i) => _var836.Vertex(i));
        }

        public IArray<Vector2> AllVertices { [MethodImpl(AggressiveInlining)] get  => this.Vertices(this.Indices); } 
        public Integer NumPrimitives { [MethodImpl(AggressiveInlining)] get  => this.Indices.Count.Divide(this.PrimitiveSize); } 
        public Integer NumFaces { [MethodImpl(AggressiveInlining)] get  => this.NumPrimitives; } 
        public IArray2D<Integer> AllFaceIndices { [MethodImpl(AggressiveInlining)] get  => this.Indices.Slices(this.PrimitiveSize); } 
        public Integer PrimitiveSize { [MethodImpl(AggressiveInlining)] get  => ((Integer)2); } 
        public IArray<Integer2> FaceIndices { [MethodImpl(AggressiveInlining)] get  => this.Indices.Integer2Array; } 

        // Unimplemented concept functions
        public IArray<Vector2> Corners => throw new NotImplementedException();
    }
}
