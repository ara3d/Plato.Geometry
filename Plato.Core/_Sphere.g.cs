// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 8:08:08 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
public partial struct Sphere: ISolid
{
    // Fields
    [DataMember] public readonly Number Radius;

    // With functions 
    [MethodImpl(AggressiveInlining)] public Sphere WithRadius(Number radius) => new Sphere(radius);

    // Regular Constructor
    [MethodImpl(AggressiveInlining)] public Sphere(Number radius) { Radius = radius; }

    // Static factory function
    [MethodImpl(AggressiveInlining)] public static Sphere Create(Number radius) => new Sphere(radius);

    // Implicit converters to/from single field
    [MethodImpl(AggressiveInlining)] public static implicit operator Number(Sphere self) => self.Radius;
    [MethodImpl(AggressiveInlining)] public static implicit operator Sphere(Number value) => new Sphere(value);
    [MethodImpl(AggressiveInlining)] public static implicit operator Sphere(Integer value) => new Sphere(value);
    [MethodImpl(AggressiveInlining)] public static implicit operator Sphere(int value) => new Integer(value);
    [MethodImpl(AggressiveInlining)] public static implicit operator Sphere(float value) => new Number(value);
    [MethodImpl(AggressiveInlining)] public static implicit operator float(Sphere value) => value.Radius;

    // Object virtual function overrides: Equals, GetHashCode, ToString
    [MethodImpl(AggressiveInlining)] public Boolean Equals(Sphere other) => Radius.Equals(other.Radius);
    [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Sphere other) => !Radius.Equals(other.Radius);
    [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Sphere other ? Equals(other) : false;
    [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Radius);
    [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Radius\" = {Radius} }}";

    // Explicit implementation of interfaces by forwarding properties to fields

    // Implemented concept functions and type functions
    public Boolean ClosedX { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 
public Boolean ClosedY { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, TR> Combine<TR>(Sphere b, System.Func<TR, TR, TR> f){
    var _var904 = b;
    {
        var _var903 = this;
        {
            var _var902 = f;
            return (x) =>  => _var902.Invoke(_var903.Eval(x), _var904.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector3> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var906 = f;
    {
        var _var905 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var905.Eval(_var906.Invoke(x));
;
    }
}

public System.Func<Vector2, Vector3> Function { [MethodImpl(AggressiveInlining)] get {
    var _var907 = this;
    return (x) =>  => _var907.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Vector3> Compose(Sphere b){
    var _var909 = this;
    {
        var _var908 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var908.Eval(_var909.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, TR> Combine<TR>(Sphere b, System.Func<TR, TR, TR> f){
    var _var912 = b;
    {
        var _var911 = this;
        {
            var _var910 = f;
            return (x) =>  => _var910.Invoke(_var911.Eval(x), _var912.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var914 = f;
    {
        var _var913 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var913.Eval(_var914.Invoke(x));
;
    }
}

public System.Func<Vector3, Number> Function { [MethodImpl(AggressiveInlining)] get {
    var _var915 = this;
    return (x) =>  => _var915.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, Number> Compose(Sphere b){
    var _var917 = this;
    {
        var _var916 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var916.Eval(_var917.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Union(Sphere b) => this.Combine(b, (a, b) =>  => a.Max(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Intersection(Sphere b) => this.Combine(b, (a, b) =>  => a.Min(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Difference(Sphere b) => this.Combine(b, (a, b) =>  => a.Max(b.Negative);

public Procedural<Vector3, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) =>  => x.Negative;
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, Boolean> Threshold(Number threshold){
    var _var918 = threshold;
    return this.Map((x) =>  => x.GreaterThanOrEquals(_var918);
;
}


    // Unimplemented concept functions
    [MethodImpl(AggressiveInlining)]  public Number Distance(Vector3 p) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public Number Eval(Vector3 t) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public Vector3 Eval(Vector2 t) => throw new NotImplementedException();
}
Plato.CSharpWriter.CSharpConcreteTypeWriter}
