// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 8:08:08 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
public partial struct TrisectrixOfMaclaurin: IPolarCurve, IOpenShape
{
    // Fields
    [DataMember] public readonly Number A;

    // With functions 
    [MethodImpl(AggressiveInlining)] public TrisectrixOfMaclaurin WithA(Number a) => new TrisectrixOfMaclaurin(a);

    // Regular Constructor
    [MethodImpl(AggressiveInlining)] public TrisectrixOfMaclaurin(Number a) { A = a; }

    // Static factory function
    [MethodImpl(AggressiveInlining)] public static TrisectrixOfMaclaurin Create(Number a) => new TrisectrixOfMaclaurin(a);

    // Implicit converters to/from single field
    [MethodImpl(AggressiveInlining)] public static implicit operator Number(TrisectrixOfMaclaurin self) => self.A;
    [MethodImpl(AggressiveInlining)] public static implicit operator TrisectrixOfMaclaurin(Number value) => new TrisectrixOfMaclaurin(value);
    [MethodImpl(AggressiveInlining)] public static implicit operator TrisectrixOfMaclaurin(Integer value) => new TrisectrixOfMaclaurin(value);
    [MethodImpl(AggressiveInlining)] public static implicit operator TrisectrixOfMaclaurin(int value) => new Integer(value);
    [MethodImpl(AggressiveInlining)] public static implicit operator TrisectrixOfMaclaurin(float value) => new Number(value);
    [MethodImpl(AggressiveInlining)] public static implicit operator float(TrisectrixOfMaclaurin value) => value.A;

    // Object virtual function overrides: Equals, GetHashCode, ToString
    [MethodImpl(AggressiveInlining)] public Boolean Equals(TrisectrixOfMaclaurin other) => A.Equals(other.A);
    [MethodImpl(AggressiveInlining)] public Boolean NotEquals(TrisectrixOfMaclaurin other) => !A.Equals(other.A);
    [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is TrisectrixOfMaclaurin other ? Equals(other) : false;
    [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(A);
    [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"A\" = {A} }}";

    // Explicit implementation of interfaces by forwarding properties to fields

    // Implemented concept functions and type functions
    [MethodImpl(AggressiveInlining)]  public Number GetRadius(Angle t) => t.TrisectrixOfMaclaurin(this.A);
[MethodImpl(AggressiveInlining)]  public PolarCoordinate EvalPolar(Angle t) => (this.GetRadius(t), t);
[MethodImpl(AggressiveInlining)]  public Vector2 Eval(Angle t) => this.EvalPolar(t);
[MethodImpl(AggressiveInlining)]  public Vector2 Eval(Number t) => this.Eval(t.Turns);
[MethodImpl(AggressiveInlining)]  public IArray<Vector2> Sample(Integer numPoints){
    var _var383 = this;
    return numPoints.LinearSpace.Map((x) =>  => _var383.Eval(x);
;
}

[MethodImpl(AggressiveInlining)]  public PolyLine2D ToPolyLine2D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
[MethodImpl(AggressiveInlining)]  public Procedural<Number, TR> Combine<TR>(TrisectrixOfMaclaurin b, System.Func<TR, TR, TR> f){
    var _var386 = b;
    {
        var _var385 = this;
        {
            var _var384 = f;
            return (x) =>  => _var384.Invoke(_var385.Eval(x), _var386.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector2> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var388 = f;
    {
        var _var387 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var387.Eval(_var388.Invoke(x));
;
    }
}

public System.Func<Number, Vector2> Function { [MethodImpl(AggressiveInlining)] get {
    var _var389 = this;
    return (x) =>  => _var389.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Number, Vector2> Compose(TrisectrixOfMaclaurin b){
    var _var391 = this;
    {
        var _var390 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var390.Eval(_var391.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, TR> Combine<TR>(TrisectrixOfMaclaurin b, System.Func<TR, TR, TR> f){
    var _var394 = b;
    {
        var _var393 = this;
        {
            var _var392 = f;
            return (x) =>  => _var392.Invoke(_var393.Eval(x), _var394.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var396 = f;
    {
        var _var395 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var395.Eval(_var396.Invoke(x));
;
    }
}

public System.Func<Vector2, Number> Function { [MethodImpl(AggressiveInlining)] get {
    var _var397 = this;
    return (x) =>  => _var397.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Number> Compose(TrisectrixOfMaclaurin b){
    var _var399 = this;
    {
        var _var398 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var398.Eval(_var399.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Union(TrisectrixOfMaclaurin b) => this.Combine(b, (a, b) =>  => a.Max(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Intersection(TrisectrixOfMaclaurin b) => this.Combine(b, (a, b) =>  => a.Min(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Difference(TrisectrixOfMaclaurin b) => this.Combine(b, (a, b) =>  => a.Max(b.Negative);

public Procedural<Vector2, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) =>  => x.Negative;
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Boolean> Threshold(Number threshold){
    var _var400 = threshold;
    return this.Map((x) =>  => x.GreaterThanOrEquals(_var400);
;
}

public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)false); } 

    // Unimplemented concept functions
    [MethodImpl(AggressiveInlining)]  public Number Distance(Vector2 p) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public Number Eval(Vector2 t) => throw new NotImplementedException();
}
Plato.CSharpWriter.CSharpConcreteTypeWriter}
