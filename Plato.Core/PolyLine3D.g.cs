// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 11:25:56 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct PolyLine3D: IPolyLine3D
    {
        // Fields
        [DataMember] public readonly IArray<Vector3> Points;
        [DataMember] public readonly Boolean Closed;

        // With functions 
        [MethodImpl(AggressiveInlining)] public PolyLine3D WithPoints(IArray<Vector3> points) => new PolyLine3D(points, Closed);
        [MethodImpl(AggressiveInlining)] public PolyLine3D WithClosed(Boolean closed) => new PolyLine3D(Points, closed);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public PolyLine3D(IArray<Vector3> points, Boolean closed) { Points = points; Closed = closed; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static PolyLine3D Create(IArray<Vector3> points, Boolean closed) => new PolyLine3D(points, closed);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (IArray<Vector3>, Boolean)(PolyLine3D self) => (self.Points, self.Closed);
        [MethodImpl(AggressiveInlining)] public static implicit operator PolyLine3D((IArray<Vector3>, Boolean) value) => new(value.Item1, value.Item2);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out IArray<Vector3> points, out Boolean closed) { points = Points; closed = Closed;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(PolyLine3D other) => Points.Equals(other.Points) && Closed.Equals(other.Closed);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(PolyLine3D other) => !Points.Equals(other.Points) && Closed.Equals(other.Closed);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is PolyLine3D other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Points, Closed);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Points\" = {Points}, \"Closed\" = {Closed} }}";

        // Explicit implementation of interfaces by forwarding properties to fields
        IArray<Vector3> IPointGeometry3D.Points { [MethodImpl(AggressiveInlining)] get => Points; }
        Boolean IOpenClosedShape.Closed { [MethodImpl(AggressiveInlining)] get => Closed; }

        // Implemented concept functions and type functions
        [MethodImpl(AggressiveInlining)]  public PolyLine3D Deform(System.Func<Vector3, Vector3> f) => (this.Points.Map(f), this.Closed);
        public IArray<Line3D> Lines { [MethodImpl(AggressiveInlining)] get  => this.Points.WithNext((a, b) => new Line3D(a, b), this.Closed); } 
        [MethodImpl(AggressiveInlining)]  public IArray<Vector3> Sample(Integer numPoints){
            var _var817 = this;
            return numPoints.LinearSpace.Map((x) => _var817.Eval(x));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine3D ToPolyLine3D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
        [MethodImpl(AggressiveInlining)]  public Procedural<Number, TR> Combine<TR>(PolyLine3D b, System.Func<TR, TR, TR> f){
            var _var820 = b;
            {
                var _var819 = this;
                {
                    var _var818 = f;
                    return (x) => _var818.Invoke(_var819.Eval(x), _var820.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector3> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var822 = f;
            {
                var _var821 = this;
                return (x) => _var821.Eval(_var822.Invoke(x));
            }
        }

        public System.Func<Number, Vector3> Function { [MethodImpl(AggressiveInlining)] get {
            var _var823 = this;
            return (x) => _var823.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Number, Vector3> Compose(PolyLine3D b){
            var _var825 = this;
            {
                var _var824 = b;
                return (x) => _var824.Eval(_var825.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, TR> Combine<TR>(PolyLine3D b, System.Func<TR, TR, TR> f){
            var _var828 = b;
            {
                var _var827 = this;
                {
                    var _var826 = f;
                    return (x) => _var826.Invoke(_var827.Eval(x), _var828.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var830 = f;
            {
                var _var829 = this;
                return (x) => _var829.Eval(_var830.Invoke(x));
            }
        }

        public System.Func<Vector3, Number> Function { [MethodImpl(AggressiveInlining)] get {
            var _var831 = this;
            return (x) => _var831.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, Number> Compose(PolyLine3D b){
            var _var833 = this;
            {
                var _var832 = b;
                return (x) => _var832.Eval(_var833.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Union(PolyLine3D b) => this.Combine(b, (a, b) => a.Max(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Intersection(PolyLine3D b) => this.Combine(b, (a, b) => a.Min(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Difference(PolyLine3D b) => this.Combine(b, (a, b) => a.Max(b.Negative));
        public Procedural<Vector3, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) => x.Negative); } 

        // Unimplemented concept functions
        [MethodImpl(AggressiveInlining)]  public Number Distance(Vector3 p) => throw new NotImplementedException();
        [MethodImpl(AggressiveInlining)]  public Number Eval(Vector3 t) => throw new NotImplementedException();
        [MethodImpl(AggressiveInlining)]  public Vector3 Eval(Number t) => throw new NotImplementedException();
        public IArray<Vector3> Corners => throw new NotImplementedException();
        public Integer PrimitiveSize => throw new NotImplementedException();
        public Integer NumPrimitives => throw new NotImplementedException();
    }
}
