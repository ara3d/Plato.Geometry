// Autogenerated file: DO NOT EDIT
// Created on 2025-03-06 1:31:00 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct PolyLine3D: IPolyLine3D<PolyLine3D>
    {
        // Fields
        [DataMember] public readonly IArray<Vector3> Points;
        [DataMember] public readonly Boolean Closed;

        // With functions 
        [MethodImpl(AggressiveInlining)] public PolyLine3D WithPoints(IArray<Vector3> points) => new PolyLine3D(points, Closed);
        [MethodImpl(AggressiveInlining)] public PolyLine3D WithClosed(Boolean closed) => new PolyLine3D(Points, closed);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public PolyLine3D(IArray<Vector3> points, Boolean closed) { Points = points; Closed = closed; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static PolyLine3D Create(IArray<Vector3> points, Boolean closed) => new PolyLine3D(points, closed);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (IArray<Vector3>, Boolean)(PolyLine3D self) => (self.Points, self.Closed);
        [MethodImpl(AggressiveInlining)] public static implicit operator PolyLine3D((IArray<Vector3>, Boolean) value) => new(value.Item1, value.Item2);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out IArray<Vector3> points, out Boolean closed) { points = Points; closed = Closed;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(PolyLine3D other) => Points.Equals(other.Points) && Closed.Equals(other.Closed);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(PolyLine3D other) => !Points.Equals(other.Points) && Closed.Equals(other.Closed);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is PolyLine3D other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Points, Closed);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Points\" = {Points}, \"Closed\" = {Closed} }}";

        // Explicit implementation of interfaces by forwarding properties to fields
        IArray<Vector3> IPointGeometry3D<PolyLine3D>.Points { [MethodImpl(AggressiveInlining)] get => Points; }
        Boolean IOpenClosedShape.Closed { [MethodImpl(AggressiveInlining)] get => Closed; }

        // Implemented concept functions and type functions
        [MethodImpl(AggressiveInlining)]  public PolyLine3D Deform(System.Func<Vector3, Vector3> f) => (this.Points.Map(f), this.Closed);
        public IArray<Line3D> Lines { [MethodImpl(AggressiveInlining)] get  => this.Points.WithNext((a, b) => new Line3D(a, b), this.Closed); } 
        [MethodImpl(AggressiveInlining)]  public PolyLine3D Deform(IdentityTransform3D t){
            var _var291 = t;
            return this.Deform((v) => _var291.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine3D Deform(MatrixTransform3D t){
            var _var292 = t;
            return this.Deform((v) => _var292.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine3D Deform(Translation3D t){
            var _var293 = t;
            return this.Deform((v) => _var293.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine3D Deform(Rotation3D t){
            var _var294 = t;
            return this.Deform((v) => _var294.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine3D Deform(LookRotation t){
            var _var295 = t;
            return this.Deform((v) => _var295.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine3D Deform(Scaling3D t){
            var _var296 = t;
            return this.Deform((v) => _var296.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine3D Deform(TRSTransform3D t){
            var _var297 = t;
            return this.Deform((v) => _var297.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine3D Deform(Pose3D t){
            var _var298 = t;
            return this.Deform((v) => _var298.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine3D Deform(AxisAngle t){
            var _var299 = t;
            return this.Deform((v) => _var299.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine3D Deform(EulerAngles t){
            var _var300 = t;
            return this.Deform((v) => _var300.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine3D Deform(Perspective3D t){
            var _var301 = t;
            return this.Deform((v) => _var301.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine3D Deform(Orthographic3D t){
            var _var302 = t;
            return this.Deform((v) => _var302.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine3D Deform(PlaneProjection t){
            var _var303 = t;
            return this.Deform((v) => _var303.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine3D Translate(Vector3 v){
            var _var304 = v;
            return this.Deform((p) => p.Add(_var304));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine3D Rotate(Quaternion q) => this.Deform(q);
        [MethodImpl(AggressiveInlining)]  public PolyLine3D Scale(Vector3 v){
            var _var305 = v;
            return this.Deform((p) => p.Multiply(_var305));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine3D Scale(Number s){
            var _var306 = s;
            return this.Deform((p) => p.Multiply(_var306));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine3D RotateX(Angle a) => this.Rotate(a.RotateX);
        [MethodImpl(AggressiveInlining)]  public PolyLine3D RotateY(Angle a) => this.Rotate(a.RotateY);
        [MethodImpl(AggressiveInlining)]  public PolyLine3D RotateZ(Angle a) => this.Rotate(a.RotateZ);
        [MethodImpl(AggressiveInlining)]  public PolyLine3D TranslateX(Number s){
            var _var307 = s;
            return this.Deform((p) => p.Add((_var307, ((Integer)0), ((Integer)0))));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine3D TranslateY(Number s){
            var _var308 = s;
            return this.Deform((p) => p.Add((((Integer)0), _var308, ((Integer)0))));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine3D TranslateZ(Number s){
            var _var309 = s;
            return this.Deform((p) => p.Add((((Integer)0), ((Integer)0), _var309)));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine3D ScaleX(Number s){
            var _var310 = s;
            return this.Deform((p) => p.Multiply((_var310, ((Integer)1), ((Integer)1))));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine3D ScaleY(Number s){
            var _var311 = s;
            return this.Deform((p) => p.Multiply((((Integer)1), _var311, ((Integer)1))));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine3D ScaleZ(Number s){
            var _var312 = s;
            return this.Deform((p) => p.Multiply((((Integer)1), ((Integer)1), _var312)));
        }

        [MethodImpl(AggressiveInlining)]  public IArray<Vector3> Sample(Integer numPoints){
            var _var313 = this;
            return numPoints.LinearSpace.Map((x) => _var313.Eval(x));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine3D ToPolyLine3D(Integer numPoints) => (this.Sample(numPoints), this.Closed);

        // Unimplemented concept functions
        [MethodImpl(AggressiveInlining)]  public Number Distance(Vector3 p) => throw new NotImplementedException();
        [MethodImpl(AggressiveInlining)]  public Vector3 Eval(Number t) => throw new NotImplementedException();
    }
}
