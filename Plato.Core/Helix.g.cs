// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 11:25:56 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Helix: IAngularCurve3D, IOpenShape
    {
        // Fields
        [DataMember] public readonly Number Radius;
        [DataMember] public readonly Number Height;
        [DataMember] public readonly Number NumTurns;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Helix WithRadius(Number radius) => new Helix(radius, Height, NumTurns);
        [MethodImpl(AggressiveInlining)] public Helix WithHeight(Number height) => new Helix(Radius, height, NumTurns);
        [MethodImpl(AggressiveInlining)] public Helix WithNumTurns(Number numTurns) => new Helix(Radius, Height, numTurns);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Helix(Number radius, Number height, Number numTurns) { Radius = radius; Height = height; NumTurns = numTurns; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Helix Create(Number radius, Number height, Number numTurns) => new Helix(radius, height, numTurns);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Number, Number, Number)(Helix self) => (self.Radius, self.Height, self.NumTurns);
        [MethodImpl(AggressiveInlining)] public static implicit operator Helix((Number, Number, Number) value) => new(value.Item1, value.Item2, value.Item3);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Number radius, out Number height, out Number numTurns) { radius = Radius; height = Height; numTurns = NumTurns;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Helix other) => Radius.Equals(other.Radius) && Height.Equals(other.Height) && NumTurns.Equals(other.NumTurns);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Helix other) => !Radius.Equals(other.Radius) && Height.Equals(other.Height) && NumTurns.Equals(other.NumTurns);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Helix other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Radius, Height, NumTurns);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Radius\" = {Radius}, \"Height\" = {Height}, \"NumTurns\" = {NumTurns} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented concept functions and type functions
        [MethodImpl(AggressiveInlining)]  public Vector3 Eval(Angle t) => t.Helix(this.NumTurns).Multiply((this.Radius, this.Radius, this.Height));
        [MethodImpl(AggressiveInlining)]  public Vector3 Eval(Number t) => this.Eval(t.Turns);
        [MethodImpl(AggressiveInlining)]  public IArray<Vector3> Sample(Integer numPoints){
            var _var518 = this;
            return numPoints.LinearSpace.Map((x) => _var518.Eval(x));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine3D ToPolyLine3D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
        [MethodImpl(AggressiveInlining)]  public Procedural<Number, TR> Combine<TR>(Helix b, System.Func<TR, TR, TR> f){
            var _var521 = b;
            {
                var _var520 = this;
                {
                    var _var519 = f;
                    return (x) => _var519.Invoke(_var520.Eval(x), _var521.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector3> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var523 = f;
            {
                var _var522 = this;
                return (x) => _var522.Eval(_var523.Invoke(x));
            }
        }

        public System.Func<Number, Vector3> Function { [MethodImpl(AggressiveInlining)] get {
            var _var524 = this;
            return (x) => _var524.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Number, Vector3> Compose(Helix b){
            var _var526 = this;
            {
                var _var525 = b;
                return (x) => _var525.Eval(_var526.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, TR> Combine<TR>(Helix b, System.Func<TR, TR, TR> f){
            var _var529 = b;
            {
                var _var528 = this;
                {
                    var _var527 = f;
                    return (x) => _var527.Invoke(_var528.Eval(x), _var529.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var531 = f;
            {
                var _var530 = this;
                return (x) => _var530.Eval(_var531.Invoke(x));
            }
        }

        public System.Func<Vector3, Number> Function { [MethodImpl(AggressiveInlining)] get {
            var _var532 = this;
            return (x) => _var532.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, Number> Compose(Helix b){
            var _var534 = this;
            {
                var _var533 = b;
                return (x) => _var533.Eval(_var534.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Union(Helix b) => this.Combine(b, (a, b) => a.Max(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Intersection(Helix b) => this.Combine(b, (a, b) => a.Min(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Difference(Helix b) => this.Combine(b, (a, b) => a.Max(b.Negative));
        public Procedural<Vector3, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) => x.Negative); } 
        public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)false); } 

        // Unimplemented concept functions
        [MethodImpl(AggressiveInlining)]  public Number Distance(Vector3 p) => throw new NotImplementedException();
        [MethodImpl(AggressiveInlining)]  public Number Eval(Vector3 t) => throw new NotImplementedException();
    }
}
