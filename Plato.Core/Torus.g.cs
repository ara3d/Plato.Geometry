// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 12:06:56 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Torus: ISolid
    {
        // Fields
        [DataMember] public readonly Number MajorRadius;
        [DataMember] public readonly Number MinorRadius;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Torus WithMajorRadius(Number majorRadius) => new Torus(majorRadius, MinorRadius);
        [MethodImpl(AggressiveInlining)] public Torus WithMinorRadius(Number minorRadius) => new Torus(MajorRadius, minorRadius);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Torus(Number majorRadius, Number minorRadius) { MajorRadius = majorRadius; MinorRadius = minorRadius; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Torus Create(Number majorRadius, Number minorRadius) => new Torus(majorRadius, minorRadius);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Number, Number)(Torus self) => (self.MajorRadius, self.MinorRadius);
        [MethodImpl(AggressiveInlining)] public static implicit operator Torus((Number, Number) value) => new(value.Item1, value.Item2);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Number majorRadius, out Number minorRadius) { majorRadius = MajorRadius; minorRadius = MinorRadius;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Torus other) => MajorRadius.Equals(other.MajorRadius) && MinorRadius.Equals(other.MinorRadius);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Torus other) => !MajorRadius.Equals(other.MajorRadius) && MinorRadius.Equals(other.MinorRadius);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Torus other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(MajorRadius, MinorRadius);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"MajorRadius\" = {MajorRadius}, \"MinorRadius\" = {MinorRadius} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented concept functions and type functions
        public Boolean ClosedX { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 
        public Boolean ClosedY { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, TR> Combine<TR>(Torus b, System.Func<TR, TR, TR> f){
            var _var972 = b;
            {
                var _var971 = this;
                {
                    var _var970 = f;
                    return (x) => _var970.Invoke(_var971.Eval(x), _var972.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector3> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var974 = f;
            {
                var _var973 = this;
                return (x) => _var973.Eval(_var974.Invoke(x));
            }
        }

        public System.Func<Vector2, Vector3> Function { [MethodImpl(AggressiveInlining)] get {
            var _var975 = this;
            return (x) => _var975.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Vector3> Compose(Torus b){
            var _var977 = this;
            {
                var _var976 = b;
                return (x) => _var976.Eval(_var977.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, TR> Combine<TR>(Torus b, System.Func<TR, TR, TR> f){
            var _var980 = b;
            {
                var _var979 = this;
                {
                    var _var978 = f;
                    return (x) => _var978.Invoke(_var979.Eval(x), _var980.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var982 = f;
            {
                var _var981 = this;
                return (x) => _var981.Eval(_var982.Invoke(x));
            }
        }

        public System.Func<Vector3, Number> Function { [MethodImpl(AggressiveInlining)] get {
            var _var983 = this;
            return (x) => _var983.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, Number> Compose(Torus b){
            var _var985 = this;
            {
                var _var984 = b;
                return (x) => _var984.Eval(_var985.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Union(Torus b) => this.Combine(b, (a, b) => a.Max(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Intersection(Torus b) => this.Combine(b, (a, b) => a.Min(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Difference(Torus b) => this.Combine(b, (a, b) => a.Max(b.Negative));
        public Procedural<Vector3, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) => x.Negative); } 

        // Unimplemented concept functions
        [MethodImpl(AggressiveInlining)]  public Number Distance(Vector3 p) => throw new NotImplementedException();
        [MethodImpl(AggressiveInlining)]  public Number Eval(Vector3 t) => throw new NotImplementedException();
        [MethodImpl(AggressiveInlining)]  public Vector3 Eval(Vector2 t) => throw new NotImplementedException();
    }
}
