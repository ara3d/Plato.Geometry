// Autogenerated file: DO NOT EDIT
// Created on 2025-04-08 12:25:04 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct GeoCoordinate: ICoordinate
    {
        // Fields
        [DataMember] public readonly Angle Latitude;
        [DataMember] public readonly Angle Longitude;

        // With functions 
        [MethodImpl(AggressiveInlining)] public GeoCoordinate WithLatitude(Angle latitude) => new GeoCoordinate(latitude, Longitude);
        [MethodImpl(AggressiveInlining)] public GeoCoordinate WithLongitude(Angle longitude) => new GeoCoordinate(Latitude, longitude);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public GeoCoordinate(Angle latitude, Angle longitude) { Latitude = latitude; Longitude = longitude; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static GeoCoordinate Create(Angle latitude, Angle longitude) => new GeoCoordinate(latitude, longitude);

        // Static default implementation
        public static readonly GeoCoordinate Default = default;

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Angle, Angle)(GeoCoordinate self) => (self.Latitude, self.Longitude);
        [MethodImpl(AggressiveInlining)] public static implicit operator GeoCoordinate((Angle, Angle) value) => new GeoCoordinate(value.Item1, value.Item2);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Angle latitude, out Angle longitude) { latitude = Latitude; longitude = Longitude;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(GeoCoordinate other) => Latitude.Equals(other.Latitude) && Longitude.Equals(other.Longitude);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(GeoCoordinate other) => !Latitude.Equals(other.Latitude) && Longitude.Equals(other.Longitude);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is GeoCoordinate other ? Equals(other).Value : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Latitude, Longitude);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Latitude\" = {Latitude}, \"Longitude\" = {Longitude} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented interface functions

        // Unimplemented interface functions
    }
}
