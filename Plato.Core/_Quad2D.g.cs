// Autogenerated file: DO NOT EDIT
// Created on 2025-04-08 12:25:04 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Quad2D: IPolygon2D<Quad2D>, IArrayLike<Quad2D, Point2D>
    {
        // Fields
        [DataMember] public readonly Point2D A;
        [DataMember] public readonly Point2D B;
        [DataMember] public readonly Point2D C;
        [DataMember] public readonly Point2D D;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Quad2D WithA(Point2D a) => new Quad2D(a, B, C, D);
        [MethodImpl(AggressiveInlining)] public Quad2D WithB(Point2D b) => new Quad2D(A, b, C, D);
        [MethodImpl(AggressiveInlining)] public Quad2D WithC(Point2D c) => new Quad2D(A, B, c, D);
        [MethodImpl(AggressiveInlining)] public Quad2D WithD(Point2D d) => new Quad2D(A, B, C, d);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Quad2D(Point2D a, Point2D b, Point2D c, Point2D d) { A = a; B = b; C = c; D = d; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Quad2D Create(Point2D a, Point2D b, Point2D c, Point2D d) => new Quad2D(a, b, c, d);

        // Static default implementation
        public static readonly Quad2D Default = default;

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Point2D, Point2D, Point2D, Point2D)(Quad2D self) => (self.A, self.B, self.C, self.D);
        [MethodImpl(AggressiveInlining)] public static implicit operator Quad2D((Point2D, Point2D, Point2D, Point2D) value) => new Quad2D(value.Item1, value.Item2, value.Item3, value.Item4);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Point2D a, out Point2D b, out Point2D c, out Point2D d) { a = A; b = B; c = C; d = D;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Quad2D other) => A.Equals(other.A) && B.Equals(other.B) && C.Equals(other.C) && D.Equals(other.D);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Quad2D other) => !A.Equals(other.A) && B.Equals(other.B) && C.Equals(other.C) && D.Equals(other.D);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Quad2D other ? Equals(other).Value : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(A, B, C, D);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"A\" = {A}, \"B\" = {B}, \"C\" = {C}, \"D\" = {D} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // IArrayLike predefined functions
        public Integer NumComponents { [MethodImpl(AggressiveInlining)] get => 4; }
        public IArray<Point2D> Components { [MethodImpl(AggressiveInlining)] get => Intrinsics.MakeArray<Point2D>(A, B, C, D); }
        [MethodImpl(AggressiveInlining)] public static Quad2D CreateFromComponents(IArray<Point2D> numbers) => new Quad2D(numbers[0], numbers[1], numbers[2], numbers[3]);

        [MethodImpl(AggressiveInlining)] public static Quad2D CreateFromComponent(Point2D x) => new Quad2D(x, x, x, x);

        // Implemented interface functions
        public Quad2D Flip { [MethodImpl(AggressiveInlining)] get  => (this.D, this.C, this.B, this.A); } 
public Point2D Center { [MethodImpl(AggressiveInlining)] get  => this.A.Add(this.B.Add(this.C.Add(this.D))).Divide(((Number)4)); } 
public Line2D LineA { [MethodImpl(AggressiveInlining)] get  => (this.A, this.B); } 
public Line2D LineB { [MethodImpl(AggressiveInlining)] get  => (this.B, this.C); } 
public Line2D LineC { [MethodImpl(AggressiveInlining)] get  => (this.C, this.D); } 
public Line2D LineD { [MethodImpl(AggressiveInlining)] get  => (this.D, this.A); } 
public Triangle2D TriangleA { [MethodImpl(AggressiveInlining)] get  => (this.A, this.B, this.C); } 
public Triangle2D TriangleB { [MethodImpl(AggressiveInlining)] get  => (this.C, this.D, this.A); } 
public Number Area { [MethodImpl(AggressiveInlining)] get  => this.TriangleA.Area.Add(this.TriangleB.Area); } 
// AMBIGUOUS FUNCTIONS 2
        public IArray<Point2D> Points { [MethodImpl(AggressiveInlining)] get  => this.Components; } 
public Quad3D To3D { [MethodImpl(AggressiveInlining)] get  => (this.A.To3D, this.B.To3D, this.C.To3D, this.D.To3D); } 
public Quad3D Quad3D { [MethodImpl(AggressiveInlining)] get  => this.To3D; } 
[MethodImpl(AggressiveInlining)]  public static implicit operator Quad3D(Quad2D x) => x.Quad3D;
        public static Quad2D Unit { [MethodImpl(AggressiveInlining)] get  => ((((Number)0), ((Number)0)), (((Number)1), ((Number)0)), (((Number)1), ((Number)1)), (((Number)0), ((Number)1))); } 
// AMBIGUOUS FUNCTIONS 2
        public IArray<Line2D> Lines { [MethodImpl(AggressiveInlining)] get  => Intrinsics.MakeArray<Line2D>(this.LineA, this.LineB, this.LineC, this.LineD); } 
public IArray<Triangle2D> Triangles { [MethodImpl(AggressiveInlining)] get  => Intrinsics.MakeArray<Triangle2D>(this.TriangleA, this.TriangleB); } 
[MethodImpl(AggressiveInlining)]  public Quad2D Deform(System.Func<Point2D, Point2D> f) => (f.Invoke(this.A), f.Invoke(this.B), f.Invoke(this.C), f.Invoke(this.D));
[MethodImpl(AggressiveInlining)]  public Point2D Point(Integer index) => this.Points.At(index);
[MethodImpl(AggressiveInlining)]  public Triangle2D Triangle(Integer3 f) => (this.Point(f.A), this.Point(f.B), this.Point(f.C));
[MethodImpl(AggressiveInlining)]  public Quad2D Quad(Integer4 f) => (this.Point(f.A), this.Point(f.B), this.Point(f.C), this.Point(f.D));
public Bounds2D Bounds { [MethodImpl(AggressiveInlining)] get  => this.Points.Bounds(); } 
[MethodImpl(AggressiveInlining)]  public IArray<Point2D> Sample(Integer numPoints){
            var _var94 = this;
            return numPoints.LinearSpace.Map((x)  => _var94.Eval(x));
        }

[MethodImpl(AggressiveInlining)]  public PolyLine2D ToPolyLine2D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 
[MethodImpl(AggressiveInlining)]  public Point2D At(Integer n) => this.Components.At(n);
public Point2D this[Integer n] { [MethodImpl(AggressiveInlining)]  get => At(n); }
        [MethodImpl(AggressiveInlining)]  public Quad2D MapComponents(System.Func<Point2D, Point2D> f) => Quad2D.CreateFromComponents(this.Components.Map(f));
[MethodImpl(AggressiveInlining)]  public Quad2D ZipComponents(Quad2D b, System.Func<Point2D, Point2D, Point2D> f) => Quad2D.CreateFromComponents(this.Components.Zip(b.Components, f));
[MethodImpl(AggressiveInlining)]  public Quad2D ZipComponents(Quad2D b, Quad2D c, System.Func<Point2D, Point2D, Point2D, Point2D> f) => Quad2D.CreateFromComponents(this.Components.Zip(b.Components, c.Components, f));
[MethodImpl(AggressiveInlining)]  public Boolean AllZipComponents(Quad2D b, System.Func<Point2D, Point2D, Boolean> f) => this.Components.Zip(b.Components, f).All((x)  => x);
[MethodImpl(AggressiveInlining)]  public Boolean AllZipComponents(Quad2D b, Quad2D c, System.Func<Point2D, Point2D, Point2D, Boolean> f) => this.Components.Zip(b.Components, c.Components, f).All((x)  => x);
[MethodImpl(AggressiveInlining)]  public Boolean AnyZipComponents(Quad2D b, System.Func<Point2D, Point2D, Boolean> f) => this.Components.Zip(b.Components, f).Any((x)  => x);
[MethodImpl(AggressiveInlining)]  public Boolean AnyZipComponents(Quad2D b, Quad2D c, System.Func<Point2D, Point2D, Point2D, Boolean> f) => this.Components.Zip(b.Components, c.Components, f).Any((x)  => x);
[MethodImpl(AggressiveInlining)]  public Boolean AllComponents(System.Func<Point2D, Boolean> predicate) => this.Components.All(predicate);
[MethodImpl(AggressiveInlining)]  public Boolean AnyComponent(System.Func<Point2D, Boolean> predicate) => this.Components.Any(predicate);

        // Unimplemented interface functions
        [MethodImpl(AggressiveInlining)]  public Point2D Eval(Number t) => throw new NotImplementedException();
}
}
