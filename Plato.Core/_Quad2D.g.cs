// Autogenerated file: DO NOT EDIT
// Created on 2025-03-14 12:36:59 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Quad2D: IPolygon2D
    {
        // Fields
        [DataMember] public readonly Vector2 A;
        [DataMember] public readonly Vector2 B;
        [DataMember] public readonly Vector2 C;
        [DataMember] public readonly Vector2 D;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Quad2D WithA(Vector2 a) => new Quad2D(a, B, C, D);
        [MethodImpl(AggressiveInlining)] public Quad2D WithB(Vector2 b) => new Quad2D(A, b, C, D);
        [MethodImpl(AggressiveInlining)] public Quad2D WithC(Vector2 c) => new Quad2D(A, B, c, D);
        [MethodImpl(AggressiveInlining)] public Quad2D WithD(Vector2 d) => new Quad2D(A, B, C, d);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Quad2D(Vector2 a, Vector2 b, Vector2 c, Vector2 d) { A = a; B = b; C = c; D = d; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Quad2D Create(Vector2 a, Vector2 b, Vector2 c, Vector2 d) => new Quad2D(a, b, c, d);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Vector2, Vector2, Vector2, Vector2)(Quad2D self) => (self.A, self.B, self.C, self.D);
        [MethodImpl(AggressiveInlining)] public static implicit operator Quad2D((Vector2, Vector2, Vector2, Vector2) value) => new(value.Item1, value.Item2, value.Item3, value.Item4);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Vector2 a, out Vector2 b, out Vector2 c, out Vector2 d) { a = A; b = B; c = C; d = D;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Quad2D other) => A.Equals(other.A) && B.Equals(other.B) && C.Equals(other.C) && D.Equals(other.D);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Quad2D other) => !A.Equals(other.A) && B.Equals(other.B) && C.Equals(other.C) && D.Equals(other.D);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Quad2D other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(A, B, C, D);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"A\" = {A}, \"B\" = {B}, \"C\" = {C}, \"D\" = {D} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented interface functions
        // Flip(Quad2D):Quad2D; [Self=Quad2D;]; <>
        public Quad2D Flip { [MethodImpl(AggressiveInlining)] get  => (this.D, this.C, this.B, this.A); } 
// Center(Quad2D):Vector2; [Self=Quad2D;]; <>
        public Vector2 Center { [MethodImpl(AggressiveInlining)] get  => this.A.Add(this.B.Add(this.C.Add(this.D))).Divide(((Number)4)); } 
// LineA(Quad2D):Line2D; [Self=Quad2D;]; <>
        public Line2D LineA { [MethodImpl(AggressiveInlining)] get  => (this.A, this.B); } 
// LineB(Quad2D):Line2D; [Self=Quad2D;]; <>
        public Line2D LineB { [MethodImpl(AggressiveInlining)] get  => (this.B, this.C); } 
// LineC(Quad2D):Line2D; [Self=Quad2D;]; <>
        public Line2D LineC { [MethodImpl(AggressiveInlining)] get  => (this.C, this.D); } 
// LineD(Quad2D):Line2D; [Self=Quad2D;]; <>
        public Line2D LineD { [MethodImpl(AggressiveInlining)] get  => (this.D, this.A); } 
// TriangleA(Quad2D):Triangle2D; [Self=Quad2D;]; <>
        public Triangle2D TriangleA { [MethodImpl(AggressiveInlining)] get  => (this.A, this.B, this.C); } 
// TriangleB(Quad2D):Triangle2D; [Self=Quad2D;]; <>
        public Triangle2D TriangleB { [MethodImpl(AggressiveInlining)] get  => (this.C, this.D, this.A); } 
// To3D(Quad2D):Quad3D; [Self=Quad2D;]; <>
        public Quad3D To3D { [MethodImpl(AggressiveInlining)] get  => (this.A.To3D, this.B.To3D, this.C.To3D, this.D.To3D); } 
// Quad3D(Quad2D):Quad3D; [Self=Quad2D;]; <>
        public Quad3D Quad3D { [MethodImpl(AggressiveInlining)] get  => this.To3D; } 
[MethodImpl(AggressiveInlining)]  public static implicit operator Quad3D(Quad2D x) => x.Quad3D;
        // Unit(Quad2D):Quad2D; [Self=Quad2D;]; <>
        public static Quad2D Unit { [MethodImpl(AggressiveInlining)] get  => ((((Number)0), ((Number)0)), (((Number)1), ((Number)0)), (((Number)1), ((Number)1)), (((Number)0), ((Number)1))); } 
// LineArray2D(Quad2D):LineArray2D; [Self=Quad2D;]; <>
        public LineArray2D LineArray2D { [MethodImpl(AggressiveInlining)] get  => new LineArray2D(this.Lines); } 
[MethodImpl(AggressiveInlining)]  public static implicit operator LineArray2D(Quad2D q) => q.LineArray2D;
        // TriangleArray2D(Quad2D):TriangleArray2D; [Self=Quad2D;]; <>
        public TriangleArray2D TriangleArray2D { [MethodImpl(AggressiveInlining)] get  => new TriangleArray2D(this.Triangles); } 
[MethodImpl(AggressiveInlining)]  public static implicit operator TriangleArray2D(Quad2D q) => q.TriangleArray2D;
        // Points(Quad2D):_T0; [Self=Quad2D;]; <_T0:IArray<Vector2>>
        public _T0 Points<_T0> { [MethodImpl(AggressiveInlining)] get  => Intrinsics.MakeArray(this.A, this.B, this.C, this.D); } 
// Lines(Quad2D):_T0; [Self=Quad2D;]; <_T0:IArray<Line2D>>
        public _T0 Lines<_T0> { [MethodImpl(AggressiveInlining)] get  => Intrinsics.MakeArray(new Line2D(this.A, this.B), new Line2D(this.B, this.C), new Line2D(this.C, this.D), new Line2D(this.D, this.A)); } 
// Triangles(Quad2D):_T0; [Self=Quad2D;]; <_T0:IArray<Triangle2D>>
        public _T0 Triangles<_T0> { [MethodImpl(AggressiveInlining)] get  => Intrinsics.MakeArray(new Triangle2D(this.A, this.B, this.C), new Triangle2D(this.C, this.D, this.A)); } 
// Sample(Quad2D, Integer):_T0; [ICurve2D=Quad2D;IPolyLine2D=Quad2D;IPolygon2D=Quad2D;Self=Quad2D;]; <_T0:IArray<Vector2>>
        [MethodImpl(AggressiveInlining)]  public _T0 Sample<_T0>(Integer numPoints){
            var _var84 = this;
            return numPoints.LinearSpace.Map((x)  => _var84.Eval(x));
        }

// ToPolyLine2D(Quad2D, Integer):PolyLine2D; [ICurve2D=Quad2D;IPolyLine2D=Quad2D;IPolygon2D=Quad2D;Self=Quad2D;]; <>
        [MethodImpl(AggressiveInlining)]  public PolyLine2D ToPolyLine2D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
// Closed(Quad2D):Boolean; [IClosedShape=Quad2D;IClosedShape2D=Quad2D;IPolygon2D=Quad2D;Self=Quad2D;]; <>
        public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 

        // Unimplemented concept functions
        // PrimitiveSize(Quad2D):Integer; [IPrimitiveGeometry=Quad2D;IPrimitiveGeometry2D=Quad2D;IPointGeometry2D=Quad2D;IPolyLine2D=Quad2D;IPolygon2D=Quad2D;Self=Quad2D;]; <>
        public Integer PrimitiveSize => throw new NotImplementedException();
// NumPrimitives(Quad2D):Integer; [IPrimitiveGeometry=Quad2D;IPrimitiveGeometry2D=Quad2D;IPointGeometry2D=Quad2D;IPolyLine2D=Quad2D;IPolygon2D=Quad2D;Self=Quad2D;]; <>
        public Integer NumPrimitives => throw new NotImplementedException();
// Corners(Quad2D):_T0; [IPrimitiveGeometry2D=Quad2D;IPointGeometry2D=Quad2D;IPolyLine2D=Quad2D;IPolygon2D=Quad2D;Self=Quad2D;]; <_T0:IArray<Vector2>>
        public _T0 Corners<_T0> => throw new NotImplementedException();
// Eval(Quad2D, Number):Vector2; [IProcedural=Quad2D;TOut=TRange;TIn=Number;ICurve=Quad2D;TRange=Vector2;ICurve2D=Quad2D;IPolyLine2D=Quad2D;IPolygon2D=Quad2D;Self=Quad2D;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector2 Eval(Number t) => throw new NotImplementedException();
}
}
