// Autogenerated file: DO NOT EDIT
// Created on 2025-04-08 12:25:04 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct PointArray3D: IPointArray3D<PointArray3D>
    {
        // Fields
        [DataMember] public readonly IArray<Point3D> Points;

        // With functions 
        [MethodImpl(AggressiveInlining)] public PointArray3D WithPoints(IArray<Point3D> points) => new PointArray3D(points);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public PointArray3D(IArray<Point3D> points) { Points = points; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static PointArray3D Create(IArray<Point3D> points) => new PointArray3D(points);

        // Static default implementation
        public static readonly PointArray3D Default = default;

        // Implicit converters to/from single field

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(PointArray3D other) => Points.Equals(other.Points);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(PointArray3D other) => !Points.Equals(other.Points);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is PointArray3D other ? Equals(other).Value : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Points);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Points\" = {Points} }}";

        // Explicit implementation of interfaces by forwarding properties to fields
        IArray<Point3D> IPointGeometry3D<PointArray3D>.Points { [MethodImpl(AggressiveInlining)] get => Points; }

        // Implemented interface functions
        [MethodImpl(AggressiveInlining)]  public PointArray3D Deform(System.Func<Point3D, Point3D> f) => new PointArray3D(this.Points.Map(f));
[MethodImpl(AggressiveInlining)]  public Point3D Point(Integer index) => this.Points.At(index);
[MethodImpl(AggressiveInlining)]  public Triangle3D Triangle(Integer3 f) => (this.Point(f.A), this.Point(f.B), this.Point(f.C));
[MethodImpl(AggressiveInlining)]  public Quad3D Quad(Integer4 f) => (this.Point(f.A), this.Point(f.B), this.Point(f.C), this.Point(f.D));
public Bounds3D Bounds { [MethodImpl(AggressiveInlining)] get  => this.Points.Bounds(); } 
[MethodImpl(AggressiveInlining)]  public PointArray3D Deform<_T0>(_T0 t) where _T0 : ITransform3D{
            var _var153 = t;
            return this.Deform((v)  => v.Vector3.Transform(_var153.Matrix));
        }

[MethodImpl(AggressiveInlining)]  public PointArray3D Scale(Vector3 v){
            var _var154 = v;
            return this.Deform((p)  => p.Vector3.Multiply(_var154));
        }

[MethodImpl(AggressiveInlining)]  public PointArray3D Scale(Number s) => this.Scale((s, s, s));
[MethodImpl(AggressiveInlining)]  public PointArray3D ScaleX(Number s) => this.Scale((s, ((Integer)1), ((Integer)1)));
[MethodImpl(AggressiveInlining)]  public PointArray3D ScaleY(Number s) => this.Scale((((Integer)1), s, ((Integer)1)));
[MethodImpl(AggressiveInlining)]  public PointArray3D ScaleZ(Number s) => this.Scale((((Integer)1), ((Integer)1), s));
[MethodImpl(AggressiveInlining)]  public PointArray3D Rotate(Quaternion q){
            var _var155 = q;
            return this.Deform((v)  => _var155.Transform(v));
        }

[MethodImpl(AggressiveInlining)]  public PointArray3D RotateX(Angle a) => this.Rotate(a.RotateX);
[MethodImpl(AggressiveInlining)]  public PointArray3D RotateY(Angle a) => this.Rotate(a.RotateY);
[MethodImpl(AggressiveInlining)]  public PointArray3D RotateZ(Angle a) => this.Rotate(a.RotateZ);
[MethodImpl(AggressiveInlining)]  public PointArray3D Translate(Vector3 v){
            var _var156 = v;
            return this.Deform((p)  => p.Add(_var156));
        }

[MethodImpl(AggressiveInlining)]  public PointArray3D TranslateX(Number s) => this.Translate(s.XVector3);
[MethodImpl(AggressiveInlining)]  public PointArray3D TranslateY(Number s) => this.Translate(s.YVector3);
[MethodImpl(AggressiveInlining)]  public PointArray3D TranslateZ(Number s) => this.Translate(s.ZVector3);

        // Unimplemented interface functions
    }
}
