// Autogenerated file: DO NOT EDIT
// Created on 2025-03-14 12:36:59 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Vector4: IVector<Vector4>
    {
        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Vector4 Create(Number x, Number y, Number z, Number w) => new Vector4(x, y, z, w);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Number, Number, Number, Number)(Vector4 self) => (self.X, self.Y, self.Z, self.W);
        [MethodImpl(AggressiveInlining)] public static implicit operator Vector4((Number, Number, Number, Number) value) => new(value.Item1, value.Item2, value.Item3, value.Item4);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Number x, out Number y, out Number z, out Number w) { x = X; y = Y; z = Z; w = W;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Vector4 other) => Value.Equals(other.Value);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Vector4 other) => !Value.Equals(other.Value);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Vector4 other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public static Boolean operator==(Vector4 a, Vector4 b) => a.Equals(b);
        [MethodImpl(AggressiveInlining)] public static Boolean operator!=(Vector4 a, Vector4 b) => !a.Equals(b);
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Value.GetHashCode();
        [MethodImpl(AggressiveInlining)] public override string ToString() => Value.ToString();

        // Explicit implementation of interfaces by forwarding properties to fields

        // Array predefined functions
        [MethodImpl(AggressiveInlining)] public Vector4(IReadOnlyList<Number> xs) : this(xs[0], xs[1], xs[2], xs[3]) { }
        [MethodImpl(AggressiveInlining)] public Vector4(Number[] xs) : this(xs[0], xs[1], xs[2], xs[3]) { }
        [MethodImpl(AggressiveInlining)] public static Vector4 Create(IReadOnlyList<Number> xs) => new Vector4(xs);
        // Implementation of IReadOnlyList
        [MethodImpl(AggressiveInlining)] public System.Collections.Generic.IEnumerator<Number> GetEnumerator() => new ArrayEnumerator<Number>(this);
        [MethodImpl(AggressiveInlining)] System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => GetEnumerator();
        Number System.Collections.Generic.IReadOnlyList<Number>.this[int n] { [MethodImpl(AggressiveInlining)] get => At(n); }
        int System.Collections.Generic.IReadOnlyCollection<Number>.Count { [MethodImpl(AggressiveInlining)] get => this.Count; }

        // IVectorSpace predefined functions
        public static readonly int NumComponents = 4;
        public IArray<Number> Components { [MethodImpl(AggressiveInlining)] get => Intrinsics.MakeArray<Number>(X, Y, Z, W); }
        [MethodImpl(AggressiveInlining)] public static Vector4 CreateFromComponents(IArray<Number> numbers) => new Vector4(numbers[0], numbers[1], numbers[2], numbers[3]);

        // Implemented interface functions
        [MethodImpl(AggressiveInlining)]  public Vector4 Add(Vector4 right) => this + right;
        [MethodImpl(AggressiveInlining)]  public Vector4 Subtract(Vector4 right) => this - right;
        [MethodImpl(AggressiveInlining)]  public Vector4 Multiply(Vector4 right) => this * right;
        [MethodImpl(AggressiveInlining)]  public Vector4 Multiply(Number scalar) => this * scalar;
        [MethodImpl(AggressiveInlining)]  public Vector4 Divide(Vector4 right) => this / right;
        [MethodImpl(AggressiveInlining)]  public Vector4 Divide(Number scalar) => this / scalar;
        public Vector4 Negative { [MethodImpl(AggressiveInlining)] get => -this; }
        // Vector3(Vector4):Vector3; [Self=Vector4;]; <>
        public Vector3 Vector3 { [MethodImpl(AggressiveInlining)] get  => (this.X, this.Y, this.Z); } 
[MethodImpl(AggressiveInlining)]  public static implicit operator Vector3(Vector4 v) => v.Vector3;
        // XYZ(Vector4):Vector3; [Self=Vector4;]; <>
        public Vector3 XYZ { [MethodImpl(AggressiveInlining)] get  => this.Vector3; } 
// UnitX(Vector4):Vector4; [Self=Vector4;]; <>
        public static Vector4 UnitX { [MethodImpl(AggressiveInlining)] get  => (((Number)1), ((Number)0), ((Number)0), ((Number)0)); } 
// UnitY(Vector4):Vector4; [Self=Vector4;]; <>
        public static Vector4 UnitY { [MethodImpl(AggressiveInlining)] get  => (((Number)0), ((Number)1), ((Number)0), ((Number)0)); } 
// UnitZ(Vector4):Vector4; [Self=Vector4;]; <>
        public static Vector4 UnitZ { [MethodImpl(AggressiveInlining)] get  => (((Number)0), ((Number)0), ((Number)1), ((Number)0)); } 
// UnitW(Vector4):Vector4; [Self=Vector4;]; <>
        public static Vector4 UnitW { [MethodImpl(AggressiveInlining)] get  => (((Number)0), ((Number)0), ((Number)0), ((Number)1)); } 
// MidPoint(Vector4, Vector4):Vector4; [IVector=Vector4;Self=Vector4;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector4 MidPoint(Vector4 b) => this.Add(b).Half;
// Sum(Vector4):Number; [IVector=Vector4;Self=Vector4;]; <>
        public Number Sum { [MethodImpl(AggressiveInlining)] get  => this.Reduce(((Number)0), (a, b)  => a.Add(b)); } 
// SumSquares(Vector4):Number; [IVector=Vector4;Self=Vector4;]; <>
        public Number SumSquares { [MethodImpl(AggressiveInlining)] get  => this.Sqr.Sum; } 
// MagnitudeSquared(Vector4):Number; [IVector=Vector4;Self=Vector4;]; <>
        public Number MagnitudeSquared { [MethodImpl(AggressiveInlining)] get  => this.SumSquares; } 
// Magnitude(Vector4):Number; [IVector=Vector4;Self=Vector4;]; <>
        public Number Magnitude { [MethodImpl(AggressiveInlining)] get  => this.MagnitudeSquared.Sqrt; } 
// Reflect(Vector4, Vector4):Vector4; [IVector=Vector4;Self=Vector4;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector4 Reflect(Vector4 normal) => this.Subtract(normal.Multiply(this.Dot(normal).Multiply(((Number)2))));
// Project(Vector4, Vector4):Vector4; [IVector=Vector4;Self=Vector4;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector4 Project(Vector4 other) => other.Multiply(this.Dot(other));
// Angle(Vector4, Vector4):Angle; [IVector=Vector4;Self=Vector4;]; <>
        [MethodImpl(AggressiveInlining)]  public Angle Angle(Vector4 b) => this.Dot(b).Divide(this.Magnitude.Multiply(b.Magnitude)).Acos;
// IsParallel(Vector4, Vector4):Boolean; [IVector=Vector4;Self=Vector4;]; <>
        [MethodImpl(AggressiveInlining)]  public Boolean IsParallel(Vector4 b) => this.Dot(b).Abs.GreaterThanOrEquals(Constants.One.Subtract(Constants.Epsilon));
// Lerp(Vector4, Vector4, Number):Vector4; [INumerical=Vector4;IVector=Vector4;Self=Vector4;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector4 Lerp(Vector4 b, Number t) => this.Multiply(t.FromOne).Add(b.Multiply(t));
// SmoothStep(Vector4):Vector4; [INumerical=Vector4;IVector=Vector4;Self=Vector4;]; <>
        public Vector4 SmoothStep { [MethodImpl(AggressiveInlining)] get  => this.Sqr.Multiply(this.Twice.Add(((Number)3)).Negative); } 
// SmootherStep(Vector4):Vector4; [INumerical=Vector4;IVector=Vector4;Self=Vector4;]; <>
        public Vector4 SmootherStep { [MethodImpl(AggressiveInlining)] get  => this.Cube.Multiply(this.Multiply(((Number)6)).Subtract(((Number)15))).Add(((Number)10)); } 
// Pow2(Vector4):Vector4; [INumerical=Vector4;IVector=Vector4;Self=Vector4;]; <>
        public Vector4 Pow2 { [MethodImpl(AggressiveInlining)] get  => this.Multiply(this); } 
// Pow3(Vector4):Vector4; [INumerical=Vector4;IVector=Vector4;Self=Vector4;]; <>
        public Vector4 Pow3 { [MethodImpl(AggressiveInlining)] get  => this.Pow2.Multiply(this); } 
// Pow4(Vector4):Vector4; [INumerical=Vector4;IVector=Vector4;Self=Vector4;]; <>
        public Vector4 Pow4 { [MethodImpl(AggressiveInlining)] get  => this.Pow3.Multiply(this); } 
// Pow5(Vector4):Vector4; [INumerical=Vector4;IVector=Vector4;Self=Vector4;]; <>
        public Vector4 Pow5 { [MethodImpl(AggressiveInlining)] get  => this.Pow4.Multiply(this); } 
// Sqr(Vector4):Vector4; [INumerical=Vector4;IVector=Vector4;Self=Vector4;]; <>
        public Vector4 Sqr { [MethodImpl(AggressiveInlining)] get  => this.Pow2; } 
// Cube(Vector4):Vector4; [INumerical=Vector4;IVector=Vector4;Self=Vector4;]; <>
        public Vector4 Cube { [MethodImpl(AggressiveInlining)] get  => this.Pow3; } 
// PlusOne(Vector4):Vector4; [IVectorSpace=Vector4;INumerical=Vector4;IVector=Vector4;Self=Vector4;]; <>
        public Vector4 PlusOne { [MethodImpl(AggressiveInlining)] get  => this.Add(Constants.One); } 
// MinusOne(Vector4):Vector4; [IVectorSpace=Vector4;INumerical=Vector4;IVector=Vector4;Self=Vector4;]; <>
        public Vector4 MinusOne { [MethodImpl(AggressiveInlining)] get  => this.Subtract(Constants.One); } 
// FromOne(Vector4):Vector4; [IVectorSpace=Vector4;INumerical=Vector4;IVector=Vector4;Self=Vector4;]; <>
        public Vector4 FromOne { [MethodImpl(AggressiveInlining)] get  => this.Add(Constants.One).Negative; } 
// Component(Vector4, Integer):Number; [IVectorSpace=Vector4;INumerical=Vector4;IVector=Vector4;Self=Vector4;]; <>
        [MethodImpl(AggressiveInlining)]  public Number Component(Integer n) => this.Components.At(n);
// MaxComponent(Vector4):Number; [IVectorSpace=Vector4;INumerical=Vector4;IVector=Vector4;Self=Vector4;]; <>
        public Number MaxComponent { [MethodImpl(AggressiveInlining)] get {
            var r = this.Component(((Integer)0));
            {
                var i = ((Integer)1);
                while (i.LessThan(NumComponents))
                {
                    r = r.Max(this.Component(i));
                    i = i.Add(((Integer)1));
                }

            }
            return r;
        }
         } 
// MinComponent(Vector4):Number; [IVectorSpace=Vector4;INumerical=Vector4;IVector=Vector4;Self=Vector4;]; <>
        public Number MinComponent { [MethodImpl(AggressiveInlining)] get {
            var r = this.Component(((Integer)0));
            {
                var i = ((Integer)1);
                while (i.LessThan(NumComponents))
                {
                    r = r.Min(this.Component(i));
                    i = i.Add(((Integer)1));
                }

            }
            return r;
        }
         } 
// MapComponents(Vector4, Function1<Number, Number>):Vector4; [IVectorSpace=Vector4;INumerical=Vector4;IVector=Vector4;Self=Vector4;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector4 MapComponents(System.Func<Number, Number> f) => Vector4.CreateFromComponents(this.Components.Map(f));
// ZipComponents(Vector4, Vector4, Function2<Number, Number, Number>):Vector4; [IVectorSpace=Vector4;INumerical=Vector4;IVector=Vector4;Self=Vector4;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector4 ZipComponents(Vector4 b, System.Func<Number, Number, Number> f) => Vector4.CreateFromComponents(this.Components.Zip(b.Components, f));
// ZipComponents(Vector4, Vector4, Vector4, Function3<Number, Number, Number, Number>):Vector4; [IVectorSpace=Vector4;INumerical=Vector4;IVector=Vector4;Self=Vector4;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector4 ZipComponents(Vector4 b, Vector4 c, System.Func<Number, Number, Number, Number> f) => Vector4.CreateFromComponents(this.Components.Zip(b.Components, c.Components, f));
// AllZipComponents(Vector4, Vector4, Function2<Number, Number, Boolean>):Boolean; [IVectorSpace=Vector4;INumerical=Vector4;IVector=Vector4;Self=Vector4;]; <>
        [MethodImpl(AggressiveInlining)]  public Boolean AllZipComponents(Vector4 b, System.Func<Number, Number, Boolean> f) => this.Components.Zip(b.Components, f).All((x)  => x);
// AllZipComponents(Vector4, Vector4, Vector4, Function3<Number, Number, Number, Boolean>):Boolean; [IVectorSpace=Vector4;INumerical=Vector4;IVector=Vector4;Self=Vector4;]; <>
        [MethodImpl(AggressiveInlining)]  public Boolean AllZipComponents(Vector4 b, Vector4 c, System.Func<Number, Number, Number, Boolean> f) => this.Components.Zip(b.Components, c.Components, f).All((x)  => x);
// AnyZipComponents(Vector4, Vector4, Function2<Number, Number, Boolean>):Boolean; [IVectorSpace=Vector4;INumerical=Vector4;IVector=Vector4;Self=Vector4;]; <>
        [MethodImpl(AggressiveInlining)]  public Boolean AnyZipComponents(Vector4 b, System.Func<Number, Number, Boolean> f) => this.Components.Zip(b.Components, f).Any((x)  => x);
// AnyZipComponents(Vector4, Vector4, Vector4, Function3<Number, Number, Number, Boolean>):Boolean; [IVectorSpace=Vector4;INumerical=Vector4;IVector=Vector4;Self=Vector4;]; <>
        [MethodImpl(AggressiveInlining)]  public Boolean AnyZipComponents(Vector4 b, Vector4 c, System.Func<Number, Number, Number, Boolean> f) => this.Components.Zip(b.Components, c.Components, f).Any((x)  => x);
// AllComponents(Vector4, Function1<Number, Boolean>):Boolean; [IVectorSpace=Vector4;INumerical=Vector4;IVector=Vector4;Self=Vector4;]; <>
        [MethodImpl(AggressiveInlining)]  public Boolean AllComponents(System.Func<Number, Boolean> predicate) => this.Components.All(predicate);
// AnyComponent(Vector4, Function1<Number, Boolean>):Boolean; [IVectorSpace=Vector4;INumerical=Vector4;IVector=Vector4;Self=Vector4;]; <>
        [MethodImpl(AggressiveInlining)]  public Boolean AnyComponent(System.Func<Number, Boolean> predicate) => this.Components.Any(predicate);
// InversePow(Vector4, Vector4):Vector4; [IVectorSpace=Vector4;INumerical=Vector4;IVector=Vector4;Self=Vector4;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector4 InversePow(Vector4 n) => this.Pow(n.Reciprocal);
// Fract(Vector4):Vector4; [IVectorSpace=Vector4;INumerical=Vector4;IVector=Vector4;Self=Vector4;]; <>
        public Vector4 Fract { [MethodImpl(AggressiveInlining)] get  => this.Subtract(this.Floor); } 
// ClampZeroOne(Vector4):Vector4; [IVectorSpace=Vector4;INumerical=Vector4;IVector=Vector4;Self=Vector4;]; <>
        public Vector4 ClampZeroOne { [MethodImpl(AggressiveInlining)] get  => this.Clamp(Constants.Zero, Constants.One); } 
// Between(Vector4, Vector4, Vector4):Boolean; [IVectorSpace=Vector4;INumerical=Vector4;IVector=Vector4;Self=Vector4;]; <>
        [MethodImpl(AggressiveInlining)]  public Boolean Between(Vector4 a, Vector4 b) => this.AllZipComponents(a, b, (x0, a0, b0)  => x0.Between(a0, b0));
// BetweenZeroOne(Vector4):Boolean; [IVectorSpace=Vector4;INumerical=Vector4;IVector=Vector4;Self=Vector4;]; <>
        public Boolean BetweenZeroOne { [MethodImpl(AggressiveInlining)] get  => this.Between(Constants.Zero, Constants.One); } 
// Pow(Vector4, Vector4):Vector4; [IVectorSpace=Vector4;INumerical=Vector4;IVector=Vector4;Self=Vector4;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector4 Pow(Vector4 y) => this.ZipComponents(y, (a, b)  => a.Pow(b));
// Reciprocal(Vector4):Vector4; [IVectorSpace=Vector4;INumerical=Vector4;IVector=Vector4;Self=Vector4;]; <>
        public Vector4 Reciprocal { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((n)  => n.Reciprocal); } 
// Half(Vector4):Vector4; [IScalarArithmetic=Vector4;IVectorSpace=Vector4;INumerical=Vector4;IVector=Vector4;Self=Vector4;]; <>
        public Vector4 Half { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)2)); } 
// Quarter(Vector4):Vector4; [IScalarArithmetic=Vector4;IVectorSpace=Vector4;INumerical=Vector4;IVector=Vector4;Self=Vector4;]; <>
        public Vector4 Quarter { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)4)); } 
// Eight(Vector4):Vector4; [IScalarArithmetic=Vector4;IVectorSpace=Vector4;INumerical=Vector4;IVector=Vector4;Self=Vector4;]; <>
        public Vector4 Eight { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)8)); } 
// Sixteenth(Vector4):Vector4; [IScalarArithmetic=Vector4;IVectorSpace=Vector4;INumerical=Vector4;IVector=Vector4;Self=Vector4;]; <>
        public Vector4 Sixteenth { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)16)); } 
// Tenth(Vector4):Vector4; [IScalarArithmetic=Vector4;IVectorSpace=Vector4;INumerical=Vector4;IVector=Vector4;Self=Vector4;]; <>
        public Vector4 Tenth { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)10)); } 
// Twice(Vector4):Vector4; [IScalarArithmetic=Vector4;IVectorSpace=Vector4;INumerical=Vector4;IVector=Vector4;Self=Vector4;]; <>
        public Vector4 Twice { [MethodImpl(AggressiveInlining)] get  => this.Multiply(((Number)2)); } 
// Hundred(Vector4):Vector4; [IScalarArithmetic=Vector4;IVectorSpace=Vector4;INumerical=Vector4;IVector=Vector4;Self=Vector4;]; <>
        public Vector4 Hundred { [MethodImpl(AggressiveInlining)] get  => this.Multiply(((Number)100)); } 
// Thousand(Vector4):Vector4; [IScalarArithmetic=Vector4;IVectorSpace=Vector4;INumerical=Vector4;IVector=Vector4;Self=Vector4;]; <>
        public Vector4 Thousand { [MethodImpl(AggressiveInlining)] get  => this.Multiply(((Number)1000)); } 
// Million(Vector4):Vector4; [IScalarArithmetic=Vector4;IVectorSpace=Vector4;INumerical=Vector4;IVector=Vector4;Self=Vector4;]; <>
        public Vector4 Million { [MethodImpl(AggressiveInlining)] get  => this.Thousand.Thousand; } 
// Billion(Vector4):Vector4; [IScalarArithmetic=Vector4;IVectorSpace=Vector4;INumerical=Vector4;IVector=Vector4;Self=Vector4;]; <>
        public Vector4 Billion { [MethodImpl(AggressiveInlining)] get  => this.Thousand.Million; } 
// Hundredth(Vector4):Vector4; [IScalarArithmetic=Vector4;IVectorSpace=Vector4;INumerical=Vector4;IVector=Vector4;Self=Vector4;]; <>
        public Vector4 Hundredth { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)100)); } 
// Thousandth(Vector4):Vector4; [IScalarArithmetic=Vector4;IVectorSpace=Vector4;INumerical=Vector4;IVector=Vector4;Self=Vector4;]; <>
        public Vector4 Thousandth { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)1000)); } 
// Millionth(Vector4):Vector4; [IScalarArithmetic=Vector4;IVectorSpace=Vector4;INumerical=Vector4;IVector=Vector4;Self=Vector4;]; <>
        public Vector4 Millionth { [MethodImpl(AggressiveInlining)] get  => this.Thousandth.Thousandth; } 
// Billionth(Vector4):Vector4; [IScalarArithmetic=Vector4;IVectorSpace=Vector4;INumerical=Vector4;IVector=Vector4;Self=Vector4;]; <>
        public Vector4 Billionth { [MethodImpl(AggressiveInlining)] get  => this.Thousandth.Millionth; } 

        // Unimplemented concept functions
        public Integer Count { [MethodImpl(AggressiveInlining)] get => 4; }
        [MethodImpl(AggressiveInlining)]  public Number At(Integer n) => n == 0 ? X : n == 1 ? Y : n == 2 ? Z : n == 3 ? W : throw new System.IndexOutOfRangeException();
        public Number this[Integer n] { [MethodImpl(AggressiveInlining)] get => At(n); }
        [MethodImpl(AggressiveInlining)]  public Vector4 Modulo(Vector4 b) => this % b;
        [MethodImpl(AggressiveInlining)]  public Vector4 Modulo(Number other) => this % other;
    }
}
