// Autogenerated file: DO NOT EDIT
// Created on 2025-04-03 1:53:19 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Vector4: INumerical<Vector4>
    {
        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Vector4 Create(Number x, Number y, Number z, Number w) => new Vector4(x, y, z, w);

        // Static default implementation
        public static readonly Vector4 Default = default;

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Number, Number, Number, Number)(Vector4 self) => (self.X, self.Y, self.Z, self.W);
        [MethodImpl(AggressiveInlining)] public static implicit operator Vector4((Number, Number, Number, Number) value) => new(value.Item1, value.Item2, value.Item3, value.Item4);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Number x, out Number y, out Number z, out Number w) { x = X; y = Y; z = Z; w = W;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Vector4 other) => Value.Equals(other.Value);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Vector4 other) => !Value.Equals(other.Value);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Vector4 other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public static Boolean operator==(Vector4 a, Vector4 b) => a.Equals(b);
        [MethodImpl(AggressiveInlining)] public static Boolean operator!=(Vector4 a, Vector4 b) => !a.Equals(b);
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Value.GetHashCode();
        [MethodImpl(AggressiveInlining)] public override string ToString() => Value.ToString();

        // Explicit implementation of interfaces by forwarding properties to fields

        // IArrayLike predefined functions
        public Integer NumComponents { [MethodImpl(AggressiveInlining)] get => 4; }
        public IArray<Number> Components { [MethodImpl(AggressiveInlining)] get => Intrinsics.MakeArray<Number>(X, Y, Z, W); }
        [MethodImpl(AggressiveInlining)] public static Vector4 CreateFromComponents(IArray<Number> numbers) => new Vector4(numbers[0], numbers[1], numbers[2], numbers[3]);

        [MethodImpl(AggressiveInlining)] public static Vector4 CreateFromComponent(Number x) => new Vector4(x, x, x, x);

        // Implemented interface functions
        [MethodImpl(AggressiveInlining)]  public Vector4 Add(Vector4 right) => this + right;
        [MethodImpl(AggressiveInlining)]  public Vector4 Subtract(Vector4 right) => this - right;
        [MethodImpl(AggressiveInlining)]  public Vector4 Multiply(Vector4 right) => this * right;
        [MethodImpl(AggressiveInlining)]  public Vector4 Multiply(Number scalar) => this * scalar;
        [MethodImpl(AggressiveInlining)]  public Vector4 Divide(Vector4 right) => this / right;
        [MethodImpl(AggressiveInlining)]  public Vector4 Divide(Number scalar) => this / scalar;
        public Vector4 Negative { [MethodImpl(AggressiveInlining)] get => -this; }
        public Vector3 Vector3 { [MethodImpl(AggressiveInlining)] get  => (this.X, this.Y, this.Z); } 
[MethodImpl(AggressiveInlining)]  public static implicit operator Vector3(Vector4 v) => v.Vector3;
        public Vector3 XYZ { [MethodImpl(AggressiveInlining)] get  => this.Vector3; } 
public static Vector4 UnitX { [MethodImpl(AggressiveInlining)] get  => (((Number)1), ((Number)0), ((Number)0), ((Number)0)); } 
public static Vector4 UnitY { [MethodImpl(AggressiveInlining)] get  => (((Number)0), ((Number)1), ((Number)0), ((Number)0)); } 
public static Vector4 UnitZ { [MethodImpl(AggressiveInlining)] get  => (((Number)0), ((Number)0), ((Number)1), ((Number)0)); } 
public static Vector4 UnitW { [MethodImpl(AggressiveInlining)] get  => (((Number)0), ((Number)0), ((Number)0), ((Number)1)); } 
// AMBIGUOUS FUNCTIONS 2
        [MethodImpl(AggressiveInlining)]  public Vector4 Lerp(Vector4 b, Number t) => this.Multiply(t.FromOne).Add(b.Multiply(t));
[MethodImpl(AggressiveInlining)]  public Vector4 Barycentric(Vector4 v2, Vector4 v3, Vector2 uv) => this.Add(v2.Subtract(this)).Multiply(uv.X).Add(v3.Subtract(this).Multiply(uv.Y));
[MethodImpl(AggressiveInlining)]  public Vector4 Linear(Vector4 b, Number x) => this.Multiply(x).Add(b);
[MethodImpl(AggressiveInlining)]  public Vector4 Quadratic(Vector4 b, Vector4 c, Number x) => this.Multiply(x.Sqr).Add(b.Multiply(x).Add(c));
[MethodImpl(AggressiveInlining)]  public Vector4 Cubic(Vector4 b, Vector4 c, Vector4 d, Number x) => this.Multiply(x.Cube).Add(b.Multiply(x.Sqr).Add(c.Multiply(x).Add(d)));
[MethodImpl(AggressiveInlining)]  public Vector4 Quartic(Vector4 b, Vector4 c, Vector4 d, Vector4 e, Number x) => this.Multiply(x.Pow(((Integer)4))).Add(b.Multiply(x.Cube).Add(c.Multiply(x.Sqr).Add(d.Multiply(x).Add(e))));
[MethodImpl(AggressiveInlining)]  public Vector4 LinearDerivative(Vector4 b, Number x) => this;
[MethodImpl(AggressiveInlining)]  public Vector4 LinearSecondDerivative(Vector4 b, Number x) => default;
[MethodImpl(AggressiveInlining)]  public Vector4 QuadraticDerivative(Vector4 b, Vector4 c, Number x) => this.Multiply(((Number)2)).Multiply(x).Add(b);
[MethodImpl(AggressiveInlining)]  public Vector4 QuadraticSecondDerivative(Vector4 b, Vector4 c, Number x) => this.Multiply(((Number)2));
[MethodImpl(AggressiveInlining)]  public Vector4 CubicDerivative(Vector4 b, Vector4 c, Vector4 d, Number x) => this.Multiply(((Number)3)).Multiply(x.Sqr).Add(b.Multiply(((Number)2)).Multiply(x).Add(c));
[MethodImpl(AggressiveInlining)]  public Vector4 CubicSecondDerivative(Vector4 b, Vector4 c, Vector4 d, Number x) => this.Multiply(((Number)6)).Multiply(x).Add(b.Multiply(((Number)2)));
[MethodImpl(AggressiveInlining)]  public Vector4 QuarticSecondDerivative(Vector4 b, Vector4 c, Vector4 d, Vector4 e, Number x) => this.Multiply(((Number)12)).Multiply(x.Sqr).Add(b.Multiply(((Number)6)).Multiply(x).Add(c.Multiply(((Number)2))));
[MethodImpl(AggressiveInlining)]  public Vector4 CubicBezier(Vector4 b, Vector4 c, Vector4 d, Number t) => this.Multiply(((Number)1).Subtract(t).Cube).Add(b.Multiply(((Number)3).Multiply(((Number)1).Subtract(t).Sqr.Multiply(t))).Add(c.Multiply(((Number)3).Multiply(((Number)1).Subtract(t).Multiply(t.Sqr))).Add(d.Multiply(t.Cube))));
[MethodImpl(AggressiveInlining)]  public Vector4 CubicBezierDerivative(Vector4 b, Vector4 c, Vector4 d, Number t) => b.Subtract(this).Multiply(((Number)3).Multiply(((Number)1).Subtract(t).Sqr)).Add(c.Subtract(b).Multiply(((Number)6).Multiply(((Number)1).Subtract(t).Multiply(t))).Add(d.Subtract(c).Multiply(((Number)3).Multiply(t.Sqr))));
[MethodImpl(AggressiveInlining)]  public Vector4 CubicBezierSecondDerivative(Vector4 b, Vector4 c, Vector4 d, Number t) => c.Subtract(b.Multiply(((Number)2)).Add(this)).Multiply(((Number)6).Multiply(((Number)1).Subtract(t))).Add(d.Subtract(c.Multiply(((Number)2)).Add(b)).Multiply(((Number)6).Multiply(t)));
[MethodImpl(AggressiveInlining)]  public Vector4 QuadraticBezier(Vector4 b, Vector4 c, Number t) => this.Multiply(((Number)1).Subtract(t).Sqr).Add(b.Multiply(((Number)2).Multiply(((Number)1).Subtract(t).Multiply(t))).Add(c.Multiply(t.Sqr)));
[MethodImpl(AggressiveInlining)]  public Vector4 QuadraticBezierDerivative(Vector4 b, Vector4 c, Number t) => b.Subtract(this).Multiply(((Number)2).Multiply(((Number)1).Subtract(t))).Add(c.Subtract(b).Multiply(((Number)2).Multiply(t)));
[MethodImpl(AggressiveInlining)]  public Vector4 QuadraticBezierSecondDerivative(Vector4 b, Vector4 c, Number t) => ((Number)2).Multiply(this.Subtract(b.Multiply(((Number)2)).Add(c)));
[MethodImpl(AggressiveInlining)]  public Vector4 Hermite(Vector4 p1, Vector4 m0, Vector4 m1, Number t) => this.Multiply(((Number)2).Multiply(t.Cube).Subtract(((Number)3).Multiply(t.Sqr).Add(((Number)1)))).Add(m0.Multiply(t.Cube.Subtract(((Number)2).Multiply(t.Sqr).Add(t))).Add(p1.Multiply(((Number)2).Multiply(t.Cube).Add(((Number)3).Multiply(t.Sqr)).Negative).Add(m1.Multiply(t.Cube.Subtract(t.Sqr)))));
[MethodImpl(AggressiveInlining)]  public Vector4 HermiteDerivative(Vector4 p1, Vector4 m0, Vector4 m1, Number t) => this.Multiply(((Number)6).Multiply(t.Sqr).Subtract(((Number)6).Multiply(t))).Add(m0.Multiply(((Number)3).Multiply(t.Sqr).Subtract(((Number)4).Multiply(t).Add(((Number)1)))).Add(p1.Multiply(((Number)6).Multiply(t.Sqr).Add(((Number)6).Multiply(t)).Negative).Add(m1.Multiply(((Number)3).Multiply(t.Sqr).Subtract(((Number)2).Multiply(t))))));
[MethodImpl(AggressiveInlining)]  public Vector4 CatmullRom(Vector4 p1, Vector4 p2, Vector4 p3, Number t) => ((Number)0.5).Multiply(p1.Multiply(((Number)2)).Add(p2.Subtract(this).Multiply(t).Add(this.Multiply(((Number)2)).Subtract(p1.Multiply(((Number)5)).Add(p2.Multiply(((Number)4)).Subtract(p3))).Multiply(t.Sqr).Add(this.Add(p1.Multiply(((Number)3)).Subtract(p2.Multiply(((Number)3)).Add(p3))).Negative.Multiply(t.Cube)))));
[MethodImpl(AggressiveInlining)]  public Vector4 CatmullRomDerivative(Vector4 p1, Vector4 p2, Vector4 p3, Number t) => ((Number)0.5).Multiply(p2.Subtract(this).Add(((Number)2).Multiply(this.Multiply(((Number)2)).Subtract(p1.Multiply(((Number)5)).Add(p2.Multiply(((Number)4)).Subtract(p3))).Multiply(t)).Add(((Number)3).Multiply(this.Add(p1.Multiply(((Number)3)).Subtract(p2.Multiply(((Number)3)).Add(p3))).Negative.Multiply(t.Sqr)))));
public Vector4 SmoothStep { [MethodImpl(AggressiveInlining)] get  => this.Sqr.Multiply(this.Twice.Add(((Number)3)).Negative); } 
public Vector4 SmootherStep { [MethodImpl(AggressiveInlining)] get  => this.Cube.Multiply(this.Multiply(((Number)6)).Subtract(((Number)15))).Add(((Number)10)); } 
[MethodImpl(AggressiveInlining)]  public Vector4 MidPoint(Vector4 b) => this.Add(b).Half;
[MethodImpl(AggressiveInlining)]  public Number Reduce(Number initial, System.Func<Number, Number, Number> f) => this.Components.Reduce(initial, f);
public Number Sum { [MethodImpl(AggressiveInlining)] get  => this.Reduce(((Number)0), (a, b)  => a.Add(b)); } 
public Number SumSquares { [MethodImpl(AggressiveInlining)] get  => this.Sqr.Sum; } 
public Number MagnitudeSquared { [MethodImpl(AggressiveInlining)] get  => this.SumSquares; } 
public Number Magnitude { [MethodImpl(AggressiveInlining)] get  => this.MagnitudeSquared.Sqrt; } 
[MethodImpl(AggressiveInlining)]  public Vector4 Reflect(Vector4 normal) => this.Subtract(normal.Multiply(this.Dot(normal).Multiply(((Number)2))));
[MethodImpl(AggressiveInlining)]  public Vector4 Project(Vector4 other) => other.Multiply(this.Dot(other));
[MethodImpl(AggressiveInlining)]  public Angle Angle(Vector4 b) => this.Dot(b).Divide(this.Magnitude.Multiply(b.Magnitude)).Acos;
[MethodImpl(AggressiveInlining)]  public Boolean IsParallel(Vector4 b) => this.Dot(b).Abs.GreaterThanOrEquals(((Number)1).Subtract(Constants.Epsilon));
public static Vector4 Zero { [MethodImpl(AggressiveInlining)] get  => Vector4.CreateFromComponent(((Number)0)); } 
public static Vector4 One { [MethodImpl(AggressiveInlining)] get  => Vector4.CreateFromComponent(((Number)1)); } 
[MethodImpl(AggressiveInlining)]  public static Vector4 FromNumber(Number x) => Vector4.CreateFromComponent(x);
public Vector4 PlusOne { [MethodImpl(AggressiveInlining)] get  => this.Add(One); } 
public Vector4 MinusOne { [MethodImpl(AggressiveInlining)] get  => this.Subtract(One); } 
public Vector4 FromOne { [MethodImpl(AggressiveInlining)] get  => this.Add(One).Negative; } 
[MethodImpl(AggressiveInlining)]  public Number Component(Integer n) => this.Components.At(n);
public Number MaxComponent { [MethodImpl(AggressiveInlining)] get  => this.Reduce(this.Component(((Integer)0)), (a, b)  => a.Max(b)); } 
public Number MinComponent { [MethodImpl(AggressiveInlining)] get  => this.Reduce(this.Component(((Integer)0)), (a, b)  => a.Min(b)); } 
[MethodImpl(AggressiveInlining)]  public Vector4 MapComponents(System.Func<Number, Number> f) => Vector4.CreateFromComponents(this.Components.Map(f));
[MethodImpl(AggressiveInlining)]  public Vector4 ZipComponents(Vector4 b, System.Func<Number, Number, Number> f) => Vector4.CreateFromComponents(this.Components.Zip(b.Components, f));
[MethodImpl(AggressiveInlining)]  public Vector4 ZipComponents(Vector4 b, Vector4 c, System.Func<Number, Number, Number, Number> f) => Vector4.CreateFromComponents(this.Components.Zip(b.Components, c.Components, f));
[MethodImpl(AggressiveInlining)]  public Boolean AllZipComponents(Vector4 b, System.Func<Number, Number, Boolean> f) => this.Components.Zip(b.Components, f).All((x)  => x);
[MethodImpl(AggressiveInlining)]  public Boolean AllZipComponents(Vector4 b, Vector4 c, System.Func<Number, Number, Number, Boolean> f) => this.Components.Zip(b.Components, c.Components, f).All((x)  => x);
[MethodImpl(AggressiveInlining)]  public Boolean AnyZipComponents(Vector4 b, System.Func<Number, Number, Boolean> f) => this.Components.Zip(b.Components, f).Any((x)  => x);
[MethodImpl(AggressiveInlining)]  public Boolean AnyZipComponents(Vector4 b, Vector4 c, System.Func<Number, Number, Number, Boolean> f) => this.Components.Zip(b.Components, c.Components, f).Any((x)  => x);
[MethodImpl(AggressiveInlining)]  public Boolean AllComponents(System.Func<Number, Boolean> predicate) => this.Components.All(predicate);
[MethodImpl(AggressiveInlining)]  public Boolean AnyComponent(System.Func<Number, Boolean> predicate) => this.Components.Any(predicate);
[MethodImpl(AggressiveInlining)]  public Vector4 InversePow(Vector4 n) => this.Pow(n.Reciprocal);
public Vector4 Fract { [MethodImpl(AggressiveInlining)] get  => this.Subtract(this.Floor); } 
public Vector4 Pow2 { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((a)  => a.Multiply(a)); } 
public Vector4 Pow3 { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((a)  => a.Multiply(a.Multiply(a))); } 
public Vector4 Pow4 { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((a)  => a.Multiply(a.Multiply(a.Multiply(a)))); } 
public Vector4 Pow5 { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((a)  => a.Multiply(a.Multiply(a.Multiply(a.Multiply(a))))); } 
public Vector4 Sqr { [MethodImpl(AggressiveInlining)] get  => this.Pow2; } 
public Vector4 Cube { [MethodImpl(AggressiveInlining)] get  => this.Pow3; } 
public Vector4 ClampZeroOne { [MethodImpl(AggressiveInlining)] get  => this.Clamp(Zero, One); } 
[MethodImpl(AggressiveInlining)]  public Boolean Between(Vector4 a, Vector4 b) => this.AllZipComponents(a, b, (x0, a0, b0)  => x0.Between(a0, b0));
public Boolean BetweenZeroOne { [MethodImpl(AggressiveInlining)] get  => this.Between(Zero, One); } 
[MethodImpl(AggressiveInlining)]  public Vector4 Pow(Vector4 y) => this.ZipComponents(y, (a, b)  => a.Pow(b));
public Vector4 Reciprocal { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((n)  => n.Reciprocal); } 
public Vector4 Half { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)2)); } 
public Vector4 Quarter { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)4)); } 
public Vector4 Eight { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)8)); } 
public Vector4 Sixteenth { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)16)); } 
public Vector4 Tenth { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)10)); } 
public Vector4 Twice { [MethodImpl(AggressiveInlining)] get  => this.Multiply(((Number)2)); } 
public Vector4 Hundred { [MethodImpl(AggressiveInlining)] get  => this.Multiply(((Number)100)); } 
public Vector4 Thousand { [MethodImpl(AggressiveInlining)] get  => this.Multiply(((Number)1000)); } 
public Vector4 Million { [MethodImpl(AggressiveInlining)] get  => this.Thousand.Thousand; } 
public Vector4 Billion { [MethodImpl(AggressiveInlining)] get  => this.Thousand.Million; } 
public Vector4 Hundredth { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)100)); } 
public Vector4 Thousandth { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)1000)); } 
public Vector4 Millionth { [MethodImpl(AggressiveInlining)] get  => this.Thousandth.Thousandth; } 
public Vector4 Billionth { [MethodImpl(AggressiveInlining)] get  => this.Thousandth.Millionth; } 
[MethodImpl(AggressiveInlining)]  public Number At(Integer n) => this.Components.At(n);
public Number this[Integer n] { [MethodImpl(AggressiveInlining)]  get => At(n); }

        // Unimplemented interface functions
        [MethodImpl(AggressiveInlining)]  public Vector4 Modulo(Vector4 b) => this % b;
        [MethodImpl(AggressiveInlining)]  public Vector4 Modulo(Number other) => this % other;
    }
}
