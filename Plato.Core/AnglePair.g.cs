// Autogenerated file: DO NOT EDIT
// Created on 2025-01-29 8:54:01 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct AnglePair: IInterval<Angle>
    {
        // Fields
        [DataMember] public readonly Angle Start;
        [DataMember] public readonly Angle End;

        // With functions 
        [MethodImpl(AggressiveInlining)] public AnglePair WithStart(Angle start) => new AnglePair(start, End);
        [MethodImpl(AggressiveInlining)] public AnglePair WithEnd(Angle end) => new AnglePair(Start, end);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public AnglePair(Angle start, Angle end) { Start = start; End = end; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static AnglePair Create(Angle start, Angle end) => new AnglePair(start, end);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Angle, Angle)(AnglePair self) => (self.Start, self.End);
        [MethodImpl(AggressiveInlining)] public static implicit operator AnglePair((Angle, Angle) value) => new(value.Item1, value.Item2);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Angle start, out Angle end) { start = Start; end = End;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(AnglePair other) => Start.Equals(other.Start) && End.Equals(other.End);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(AnglePair other) => !Start.Equals(other.Start) && End.Equals(other.End);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is AnglePair other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Start, End);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Start\" = {Start}, \"End\" = {End} }}";

        // Explicit implementation of interfaces by forwarding properties to fields
        Angle IInterval<Angle>.Start { [MethodImpl(AggressiveInlining)] get => Start; }
        Angle IInterval<Angle>.End { [MethodImpl(AggressiveInlining)] get => End; }

        // Array predefined functions
        [MethodImpl(AggressiveInlining)] public AnglePair(IReadOnlyList<Angle> xs) : this(xs[0], xs[1]) { }
        [MethodImpl(AggressiveInlining)] public AnglePair(Angle[] xs) : this(xs[0], xs[1]) { }
        [MethodImpl(AggressiveInlining)] public static AnglePair Create(IReadOnlyList<Angle> xs) => new AnglePair(xs);
        // Implementation of IReadOnlyList
        [MethodImpl(AggressiveInlining)] public System.Collections.Generic.IEnumerator<Angle> GetEnumerator() => new ArrayEnumerator<Angle>(this);
        [MethodImpl(AggressiveInlining)] System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => GetEnumerator();
        Angle System.Collections.Generic.IReadOnlyList<Angle>.this[int n] { [MethodImpl(AggressiveInlining)] get => At(n); }
        int System.Collections.Generic.IReadOnlyCollection<Angle>.Count { [MethodImpl(AggressiveInlining)] get => this.Count; }

        // Implemented concept functions and type functions
        public Angle Size { [MethodImpl(AggressiveInlining)] get  => this.End.Subtract(this.Start); } 
        [MethodImpl(AggressiveInlining)]  public Angle Lerp(Number amount) => this.Start.Lerp(this.End, amount);
        public AnglePair Reverse { [MethodImpl(AggressiveInlining)] get  => (this.End, this.Start); } 
        public Angle Center { [MethodImpl(AggressiveInlining)] get  => this.Lerp(((Number)0.5)); } 
        [MethodImpl(AggressiveInlining)]  public Boolean Contains(Angle value) => value.Between(this.Start, this.End);
        [MethodImpl(AggressiveInlining)]  public Boolean Contains(AnglePair y) => this.Contains(y.Start).And(this.Contains(y.End));
        [MethodImpl(AggressiveInlining)]  public Boolean Overlaps(AnglePair y) => this.Contains(y.Start).Or(this.Contains(y.End).Or(y.Contains(this.Start).Or(y.Contains(this.End))));
        [MethodImpl(AggressiveInlining)]  public Tuple2<AnglePair, AnglePair> SplitAt(Number t) => (this.Left(t), this.Right(t));
        public Tuple2<AnglePair, AnglePair> Split { [MethodImpl(AggressiveInlining)] get  => this.SplitAt(((Number)0.5)); } 
        [MethodImpl(AggressiveInlining)]  public AnglePair Left(Number t) => (this.Start, this.Lerp(t));
        [MethodImpl(AggressiveInlining)]  public AnglePair Right(Number t) => (this.Lerp(t), this.End);
        [MethodImpl(AggressiveInlining)]  public AnglePair MoveTo(Angle v) => (v, v.Add(this.Size));
        public AnglePair LeftHalf { [MethodImpl(AggressiveInlining)] get  => this.Left(((Number)0.5)); } 
        public AnglePair RightHalf { [MethodImpl(AggressiveInlining)] get  => this.Right(((Number)0.5)); } 
        [MethodImpl(AggressiveInlining)]  public AnglePair Recenter(Angle c) => (c.Subtract(this.Size.Half), c.Add(this.Size.Half));
        [MethodImpl(AggressiveInlining)]  public AnglePair Clamp(AnglePair y) => (this.Clamp(y.Start), this.Clamp(y.End));
        [MethodImpl(AggressiveInlining)]  public Angle Clamp(Angle value) => value.Clamp(this.Start, this.End);
        [MethodImpl(AggressiveInlining)]  public IArray<Angle> LinearSpace(Integer count){
            var _var31 = this;
            return count.LinearSpace.Map((x) => _var31.Lerp(x));
        }

        [MethodImpl(AggressiveInlining)]  public IArray<Angle> LinearSpaceExclusive(Integer count){
            var _var32 = this;
            return count.LinearSpaceExclusive.Map((x) => _var32.Lerp(x));
        }

        [MethodImpl(AggressiveInlining)]  public IArray<Angle> GeometricSpace(Integer count){
            var _var33 = this;
            return count.GeometricSpace.Map((x) => _var33.Lerp(x));
        }

        [MethodImpl(AggressiveInlining)]  public IArray<Angle> GeometricSpaceExclusive(Integer count){
            var _var34 = this;
            return count.GeometricSpaceExclusive.Map((x) => _var34.Lerp(x));
        }

        [MethodImpl(AggressiveInlining)]  public AnglePair Subdivide(Number start, Number end) => (this.Lerp(start), this.Lerp(end));
        [MethodImpl(AggressiveInlining)]  public AnglePair Subdivide(NumberInterval subInterval) => this.Subdivide(subInterval.Start, subInterval.End);
        [MethodImpl(AggressiveInlining)]  public IArray<AnglePair> Subdivide(Integer count){
            var _var35 = this;
            return count.Intervals.Map((i) => _var35.Subdivide(i));
        }


        // Unimplemented concept functions
        public Integer Count { [MethodImpl(AggressiveInlining)] get => 2; }
        [MethodImpl(AggressiveInlining)]  public Angle At(Integer n) => n == 0 ? Start : n == 1 ? End : throw new System.IndexOutOfRangeException();
        public Angle this[Integer n] { [MethodImpl(AggressiveInlining)] get => At(n); }
    }
}
