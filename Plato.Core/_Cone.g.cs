// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 8:08:08 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
public partial struct Cone: ISolid
{
    // Fields
    [DataMember] public readonly Number Height;
    [DataMember] public readonly Number Radius;

    // With functions 
    [MethodImpl(AggressiveInlining)] public Cone WithHeight(Number height) => new Cone(height, Radius);
    [MethodImpl(AggressiveInlining)] public Cone WithRadius(Number radius) => new Cone(Height, radius);

    // Regular Constructor
    [MethodImpl(AggressiveInlining)] public Cone(Number height, Number radius) { Height = height; Radius = radius; }

    // Static factory function
    [MethodImpl(AggressiveInlining)] public static Cone Create(Number height, Number radius) => new Cone(height, radius);

    // Implicit converters to/from value-tuples and deconstructor
    [MethodImpl(AggressiveInlining)] public static implicit operator (Number, Number)(Cone self) => (self.Height, self.Radius);
    [MethodImpl(AggressiveInlining)] public static implicit operator Cone((Number, Number) value) => new(value.Item1, value.Item2);
    [MethodImpl(AggressiveInlining)] public void Deconstruct(out Number height, out Number radius) { height = Height; radius = Radius;  }

    // Object virtual function overrides: Equals, GetHashCode, ToString
    [MethodImpl(AggressiveInlining)] public Boolean Equals(Cone other) => Height.Equals(other.Height) && Radius.Equals(other.Radius);
    [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Cone other) => !Height.Equals(other.Height) && Radius.Equals(other.Radius);
    [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Cone other ? Equals(other) : false;
    [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Height, Radius);
    [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Height\" = {Height}, \"Radius\" = {Radius} }}";

    // Explicit implementation of interfaces by forwarding properties to fields

    // Implemented concept functions and type functions
    public Boolean ClosedX { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 
public Boolean ClosedY { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, TR> Combine<TR>(Cone b, System.Func<TR, TR, TR> f){
    var _var947 = b;
    {
        var _var946 = this;
        {
            var _var945 = f;
            return (x) =>  => _var945.Invoke(_var946.Eval(x), _var947.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector3> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var949 = f;
    {
        var _var948 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var948.Eval(_var949.Invoke(x));
;
    }
}

public System.Func<Vector2, Vector3> Function { [MethodImpl(AggressiveInlining)] get {
    var _var950 = this;
    return (x) =>  => _var950.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Vector3> Compose(Cone b){
    var _var952 = this;
    {
        var _var951 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var951.Eval(_var952.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, TR> Combine<TR>(Cone b, System.Func<TR, TR, TR> f){
    var _var955 = b;
    {
        var _var954 = this;
        {
            var _var953 = f;
            return (x) =>  => _var953.Invoke(_var954.Eval(x), _var955.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var957 = f;
    {
        var _var956 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var956.Eval(_var957.Invoke(x));
;
    }
}

public System.Func<Vector3, Number> Function { [MethodImpl(AggressiveInlining)] get {
    var _var958 = this;
    return (x) =>  => _var958.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, Number> Compose(Cone b){
    var _var960 = this;
    {
        var _var959 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var959.Eval(_var960.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Union(Cone b) => this.Combine(b, (a, b) =>  => a.Max(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Intersection(Cone b) => this.Combine(b, (a, b) =>  => a.Min(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Difference(Cone b) => this.Combine(b, (a, b) =>  => a.Max(b.Negative);

public Procedural<Vector3, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) =>  => x.Negative;
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, Boolean> Threshold(Number threshold){
    var _var961 = threshold;
    return this.Map((x) =>  => x.GreaterThanOrEquals(_var961);
;
}


    // Unimplemented concept functions
    [MethodImpl(AggressiveInlining)]  public Number Distance(Vector3 p) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public Number Eval(Vector3 t) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public Vector3 Eval(Vector2 t) => throw new NotImplementedException();
}
Plato.CSharpWriter.CSharpConcreteTypeWriter}
