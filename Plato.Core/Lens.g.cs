// Autogenerated file: DO NOT EDIT
// Created on 2025-03-06 1:31:00 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Lens: IClosedShape2D
    {
        // Fields
        [DataMember] public readonly Circle A;
        [DataMember] public readonly Circle B;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Lens WithA(Circle a) => new Lens(a, B);
        [MethodImpl(AggressiveInlining)] public Lens WithB(Circle b) => new Lens(A, b);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Lens(Circle a, Circle b) { A = a; B = b; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Lens Create(Circle a, Circle b) => new Lens(a, b);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Circle, Circle)(Lens self) => (self.A, self.B);
        [MethodImpl(AggressiveInlining)] public static implicit operator Lens((Circle, Circle) value) => new(value.Item1, value.Item2);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Circle a, out Circle b) { a = A; b = B;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Lens other) => A.Equals(other.A) && B.Equals(other.B);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Lens other) => !A.Equals(other.A) && B.Equals(other.B);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Lens other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(A, B);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"A\" = {A}, \"B\" = {B} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented concept functions and type functions
        public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 

        // Unimplemented concept functions
    }
}
