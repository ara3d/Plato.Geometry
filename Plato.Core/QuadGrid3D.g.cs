// Autogenerated file: DO NOT EDIT
// Created on 2025-03-06 1:31:00 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct QuadGrid3D: IQuadGrid3D<QuadGrid3D>
    {
        // Fields
        [DataMember] public readonly IArray2D<Vector3> PointGrid;
        [DataMember] public readonly Boolean ClosedX;
        [DataMember] public readonly Boolean ClosedY;

        // With functions 
        [MethodImpl(AggressiveInlining)] public QuadGrid3D WithPointGrid(IArray2D<Vector3> pointGrid) => new QuadGrid3D(pointGrid, ClosedX, ClosedY);
        [MethodImpl(AggressiveInlining)] public QuadGrid3D WithClosedX(Boolean closedX) => new QuadGrid3D(PointGrid, closedX, ClosedY);
        [MethodImpl(AggressiveInlining)] public QuadGrid3D WithClosedY(Boolean closedY) => new QuadGrid3D(PointGrid, ClosedX, closedY);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public QuadGrid3D(IArray2D<Vector3> pointGrid, Boolean closedX, Boolean closedY) { PointGrid = pointGrid; ClosedX = closedX; ClosedY = closedY; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static QuadGrid3D Create(IArray2D<Vector3> pointGrid, Boolean closedX, Boolean closedY) => new QuadGrid3D(pointGrid, closedX, closedY);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (IArray2D<Vector3>, Boolean, Boolean)(QuadGrid3D self) => (self.PointGrid, self.ClosedX, self.ClosedY);
        [MethodImpl(AggressiveInlining)] public static implicit operator QuadGrid3D((IArray2D<Vector3>, Boolean, Boolean) value) => new(value.Item1, value.Item2, value.Item3);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out IArray2D<Vector3> pointGrid, out Boolean closedX, out Boolean closedY) { pointGrid = PointGrid; closedX = ClosedX; closedY = ClosedY;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(QuadGrid3D other) => PointGrid.Equals(other.PointGrid) && ClosedX.Equals(other.ClosedX) && ClosedY.Equals(other.ClosedY);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(QuadGrid3D other) => !PointGrid.Equals(other.PointGrid) && ClosedX.Equals(other.ClosedX) && ClosedY.Equals(other.ClosedY);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is QuadGrid3D other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(PointGrid, ClosedX, ClosedY);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"PointGrid\" = {PointGrid}, \"ClosedX\" = {ClosedX}, \"ClosedY\" = {ClosedY} }}";

        // Explicit implementation of interfaces by forwarding properties to fields
        IArray2D<Vector3> IQuadGrid3D<QuadGrid3D>.PointGrid { [MethodImpl(AggressiveInlining)] get => PointGrid; }
        Boolean IQuadGrid3D<QuadGrid3D>.ClosedX { [MethodImpl(AggressiveInlining)] get => ClosedX; }
        Boolean IQuadGrid3D<QuadGrid3D>.ClosedY { [MethodImpl(AggressiveInlining)] get => ClosedY; }

        // Implemented concept functions and type functions
        [MethodImpl(AggressiveInlining)]  public QuadGrid3D Deform(System.Func<Vector3, Vector3> f) => new QuadGrid3D(this.PointGrid.Map(f), this.ClosedX, this.ClosedY);
        public Integer NumColumns { [MethodImpl(AggressiveInlining)] get  => this.PointGrid.NumColumns; } 
        public Integer NumRows { [MethodImpl(AggressiveInlining)] get  => this.PointGrid.NumRows; } 
        public IArray<Vector3> Points { [MethodImpl(AggressiveInlining)] get  => this.PointGrid; } 
        public IArray<Integer> Indices { [MethodImpl(AggressiveInlining)] get  => this.PointGrid.AllQuadFaceIndices(this.ClosedX, this.ClosedY).FlatMap((x) => x); } 
        public LineMesh3D LineMesh3D { [MethodImpl(AggressiveInlining)] get  => (this.Points, this.FaceIndices.FlatMap((a) => Intrinsics.MakeArray(a.At(((Integer)0)), a.At(((Integer)1)), a.At(((Integer)1)), a.At(((Integer)2)), a.At(((Integer)2)), a.At(((Integer)3)), a.At(((Integer)3)), a.At(((Integer)0))))); } 
        [MethodImpl(AggressiveInlining)]  public static implicit operator LineMesh3D(QuadGrid3D g) => g.LineMesh3D;
        public TriangleMesh3D TriangleMesh3D { [MethodImpl(AggressiveInlining)] get  => (this.Points, this.FaceIndices.FlatMap((a) => Intrinsics.MakeArray(a.At(((Integer)0)), a.At(((Integer)1)), a.At(((Integer)2)), a.At(((Integer)2)), a.At(((Integer)3)), a.At(((Integer)0))))); } 
        [MethodImpl(AggressiveInlining)]  public static implicit operator TriangleMesh3D(QuadGrid3D g) => g.TriangleMesh3D;
        public IArray<Quad3D> Faces { [MethodImpl(AggressiveInlining)] get  => this.Quads; } 
        public IArray<Quad3D> Quads { [MethodImpl(AggressiveInlining)] get  => this.AllFaceVertices.Map((xs) => new Quad3D(xs.At(((Integer)0)), xs.At(((Integer)1)), xs.At(((Integer)2)), xs.At(((Integer)3)))); } 
        [MethodImpl(AggressiveInlining)]  public Vector3 Vertex(Integer n) => this.Points.At(this.Indices.At(n));
        [MethodImpl(AggressiveInlining)]  public IArray<Vector3> FaceVertices(Integer f){
            var _var423 = this;
            return this.FaceIndices.At(f).Map((i) => _var423.Vertex(i));
        }

        public IArray2D<Vector3> AllFaceVertices { [MethodImpl(AggressiveInlining)] get {
            var _var424 = this;
            return this.AllFaceIndices.Map((x) => _var424.Vertex(x));
        }
         } 
        [MethodImpl(AggressiveInlining)]  public IArray<Vector3> Vertices(IArray<Integer> xs){
            var _var425 = this;
            return xs.Map((i) => _var425.Vertex(i));
        }

        public IArray<Vector3> AllVertices { [MethodImpl(AggressiveInlining)] get  => this.Vertices(this.Indices); } 
        public Integer NumPrimitives { [MethodImpl(AggressiveInlining)] get  => this.Indices.Count.Divide(this.PrimitiveSize); } 
        public Integer NumFaces { [MethodImpl(AggressiveInlining)] get  => this.NumPrimitives; } 
        public IArray2D<Integer> AllFaceIndices { [MethodImpl(AggressiveInlining)] get  => this.Indices.Slices(this.PrimitiveSize); } 
        [MethodImpl(AggressiveInlining)]  public QuadGrid3D Deform(IdentityTransform3D t){
            var _var426 = t;
            return this.Deform((v) => _var426.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public QuadGrid3D Deform(MatrixTransform3D t){
            var _var427 = t;
            return this.Deform((v) => _var427.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public QuadGrid3D Deform(Translation3D t){
            var _var428 = t;
            return this.Deform((v) => _var428.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public QuadGrid3D Deform(Rotation3D t){
            var _var429 = t;
            return this.Deform((v) => _var429.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public QuadGrid3D Deform(LookRotation t){
            var _var430 = t;
            return this.Deform((v) => _var430.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public QuadGrid3D Deform(Scaling3D t){
            var _var431 = t;
            return this.Deform((v) => _var431.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public QuadGrid3D Deform(TRSTransform3D t){
            var _var432 = t;
            return this.Deform((v) => _var432.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public QuadGrid3D Deform(Pose3D t){
            var _var433 = t;
            return this.Deform((v) => _var433.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public QuadGrid3D Deform(AxisAngle t){
            var _var434 = t;
            return this.Deform((v) => _var434.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public QuadGrid3D Deform(EulerAngles t){
            var _var435 = t;
            return this.Deform((v) => _var435.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public QuadGrid3D Deform(Perspective3D t){
            var _var436 = t;
            return this.Deform((v) => _var436.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public QuadGrid3D Deform(Orthographic3D t){
            var _var437 = t;
            return this.Deform((v) => _var437.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public QuadGrid3D Deform(PlaneProjection t){
            var _var438 = t;
            return this.Deform((v) => _var438.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public QuadGrid3D Translate(Vector3 v){
            var _var439 = v;
            return this.Deform((p) => p.Add(_var439));
        }

        [MethodImpl(AggressiveInlining)]  public QuadGrid3D Rotate(Quaternion q) => this.Deform(q);
        [MethodImpl(AggressiveInlining)]  public QuadGrid3D Scale(Vector3 v){
            var _var440 = v;
            return this.Deform((p) => p.Multiply(_var440));
        }

        [MethodImpl(AggressiveInlining)]  public QuadGrid3D Scale(Number s){
            var _var441 = s;
            return this.Deform((p) => p.Multiply(_var441));
        }

        [MethodImpl(AggressiveInlining)]  public QuadGrid3D RotateX(Angle a) => this.Rotate(a.RotateX);
        [MethodImpl(AggressiveInlining)]  public QuadGrid3D RotateY(Angle a) => this.Rotate(a.RotateY);
        [MethodImpl(AggressiveInlining)]  public QuadGrid3D RotateZ(Angle a) => this.Rotate(a.RotateZ);
        [MethodImpl(AggressiveInlining)]  public QuadGrid3D TranslateX(Number s){
            var _var442 = s;
            return this.Deform((p) => p.Add((_var442, ((Integer)0), ((Integer)0))));
        }

        [MethodImpl(AggressiveInlining)]  public QuadGrid3D TranslateY(Number s){
            var _var443 = s;
            return this.Deform((p) => p.Add((((Integer)0), _var443, ((Integer)0))));
        }

        [MethodImpl(AggressiveInlining)]  public QuadGrid3D TranslateZ(Number s){
            var _var444 = s;
            return this.Deform((p) => p.Add((((Integer)0), ((Integer)0), _var444)));
        }

        [MethodImpl(AggressiveInlining)]  public QuadGrid3D ScaleX(Number s){
            var _var445 = s;
            return this.Deform((p) => p.Multiply((_var445, ((Integer)1), ((Integer)1))));
        }

        [MethodImpl(AggressiveInlining)]  public QuadGrid3D ScaleY(Number s){
            var _var446 = s;
            return this.Deform((p) => p.Multiply((((Integer)1), _var446, ((Integer)1))));
        }

        [MethodImpl(AggressiveInlining)]  public QuadGrid3D ScaleZ(Number s){
            var _var447 = s;
            return this.Deform((p) => p.Multiply((((Integer)1), ((Integer)1), _var447)));
        }

        public Integer PrimitiveSize { [MethodImpl(AggressiveInlining)] get  => ((Integer)4); } 

        // Unimplemented concept functions
    }
}
