// Autogenerated file: DO NOT EDIT
// Created on 2025-03-14 12:36:59 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Vector2: IVector<Vector2>
    {
        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Vector2 Create(Number x, Number y) => new Vector2(x, y);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Number, Number)(Vector2 self) => (self.X, self.Y);
        [MethodImpl(AggressiveInlining)] public static implicit operator Vector2((Number, Number) value) => new(value.Item1, value.Item2);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Number x, out Number y) { x = X; y = Y;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Vector2 other) => Value.Equals(other.Value);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Vector2 other) => !Value.Equals(other.Value);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Vector2 other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public static Boolean operator==(Vector2 a, Vector2 b) => a.Equals(b);
        [MethodImpl(AggressiveInlining)] public static Boolean operator!=(Vector2 a, Vector2 b) => !a.Equals(b);
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Value.GetHashCode();
        [MethodImpl(AggressiveInlining)] public override string ToString() => Value.ToString();

        // Explicit implementation of interfaces by forwarding properties to fields

        // Array predefined functions
        [MethodImpl(AggressiveInlining)] public Vector2(IReadOnlyList<Number> xs) : this(xs[0], xs[1]) { }
        [MethodImpl(AggressiveInlining)] public Vector2(Number[] xs) : this(xs[0], xs[1]) { }
        [MethodImpl(AggressiveInlining)] public static Vector2 Create(IReadOnlyList<Number> xs) => new Vector2(xs);
        // Implementation of IReadOnlyList
        [MethodImpl(AggressiveInlining)] public System.Collections.Generic.IEnumerator<Number> GetEnumerator() => new ArrayEnumerator<Number>(this);
        [MethodImpl(AggressiveInlining)] System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => GetEnumerator();
        Number System.Collections.Generic.IReadOnlyList<Number>.this[int n] { [MethodImpl(AggressiveInlining)] get => At(n); }
        int System.Collections.Generic.IReadOnlyCollection<Number>.Count { [MethodImpl(AggressiveInlining)] get => this.Count; }

        // IVectorSpace predefined functions
        public static readonly int NumComponents = 2;
        public IArray<Number> Components { [MethodImpl(AggressiveInlining)] get => Intrinsics.MakeArray<Number>(X, Y); }
        [MethodImpl(AggressiveInlining)] public static Vector2 CreateFromComponents(IArray<Number> numbers) => new Vector2(numbers[0], numbers[1]);

        // Implemented interface functions
        // Barycentric(Vector2, _T0, _T0, _T0):_T0; [Self=Vector2;]; <_T0:INumerical<Self, Self>>
        [MethodImpl(AggressiveInlining)]  public _T0 Barycentric<_T0>(_T0 v1, _T0 v2, _T0 v3) => v1.Add(v2.Subtract(v1)).Multiply(this.X).Add(v3.Subtract(v1).Multiply(this.Y));
// To3D(Vector2):Vector3; [Self=Vector2;]; <>
        public Vector3 To3D { [MethodImpl(AggressiveInlining)] get  => (this.X, this.Y, ((Integer)0)); } 
[MethodImpl(AggressiveInlining)]  public Vector2 Add(Vector2 right) => this + right;
        [MethodImpl(AggressiveInlining)]  public Vector2 Subtract(Vector2 right) => this - right;
        [MethodImpl(AggressiveInlining)]  public Vector2 Multiply(Vector2 right) => this * right;
        [MethodImpl(AggressiveInlining)]  public Vector2 Multiply(Number scalar) => this * scalar;
        [MethodImpl(AggressiveInlining)]  public Vector2 Divide(Vector2 right) => this / right;
        [MethodImpl(AggressiveInlining)]  public Vector2 Divide(Number scalar) => this / scalar;
        public Vector2 Negative { [MethodImpl(AggressiveInlining)] get => -this; }
        // Line(Vector2, Vector2):Line2D; [Self=Vector2;]; <>
        [MethodImpl(AggressiveInlining)]  public Line2D Line(Vector2 b) => (this, b);
// Ray(Vector2, Vector2):Ray2D; [Self=Vector2;]; <>
        [MethodImpl(AggressiveInlining)]  public Ray2D Ray(Vector2 b) => (this, b);
// RayTo(Vector2, Vector2):Ray2D; [Self=Vector2;]; <>
        [MethodImpl(AggressiveInlining)]  public Ray2D RayTo(Vector2 b) => (this, b.Subtract(this));
// Vector3(Vector2, Number):Vector3; [Self=Vector2;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector3 Vector3(Number z) => (this.X, this.Y, z);
// UnitX(Vector2):Vector2; [Self=Vector2;]; <>
        public static Vector2 UnitX { [MethodImpl(AggressiveInlining)] get  => (((Number)1), ((Number)0)); } 
// UnitY(Vector2):Vector2; [Self=Vector2;]; <>
        public static Vector2 UnitY { [MethodImpl(AggressiveInlining)] get  => (((Number)0), ((Number)1)); } 
// MidPoint(Vector2, Vector2):Vector2; [IVector=Vector2;Self=Vector2;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector2 MidPoint(Vector2 b) => this.Add(b).Half;
// Sum(Vector2):Number; [IVector=Vector2;Self=Vector2;]; <>
        public Number Sum { [MethodImpl(AggressiveInlining)] get  => this.Reduce(((Number)0), (a, b)  => a.Add(b)); } 
// SumSquares(Vector2):Number; [IVector=Vector2;Self=Vector2;]; <>
        public Number SumSquares { [MethodImpl(AggressiveInlining)] get  => this.Sqr.Sum; } 
// MagnitudeSquared(Vector2):Number; [IVector=Vector2;Self=Vector2;]; <>
        public Number MagnitudeSquared { [MethodImpl(AggressiveInlining)] get  => this.SumSquares; } 
// Magnitude(Vector2):Number; [IVector=Vector2;Self=Vector2;]; <>
        public Number Magnitude { [MethodImpl(AggressiveInlining)] get  => this.MagnitudeSquared.Sqrt; } 
// Project(Vector2, Vector2):Vector2; [IVector=Vector2;Self=Vector2;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector2 Project(Vector2 other) => other.Multiply(this.Dot(other));
// Angle(Vector2, Vector2):Angle; [IVector=Vector2;Self=Vector2;]; <>
        [MethodImpl(AggressiveInlining)]  public Angle Angle(Vector2 b) => this.Dot(b).Divide(this.Magnitude.Multiply(b.Magnitude)).Acos;
// IsParallel(Vector2, Vector2):Boolean; [IVector=Vector2;Self=Vector2;]; <>
        [MethodImpl(AggressiveInlining)]  public Boolean IsParallel(Vector2 b) => this.Dot(b).Abs.GreaterThanOrEquals(Constants.One.Subtract(Constants.Epsilon));
// Lerp(Vector2, Vector2, Number):Vector2; [INumerical=Vector2;IVector=Vector2;Self=Vector2;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector2 Lerp(Vector2 b, Number t) => this.Multiply(t.FromOne).Add(b.Multiply(t));
// SmoothStep(Vector2):Vector2; [INumerical=Vector2;IVector=Vector2;Self=Vector2;]; <>
        public Vector2 SmoothStep { [MethodImpl(AggressiveInlining)] get  => this.Sqr.Multiply(this.Twice.Add(((Number)3)).Negative); } 
// SmootherStep(Vector2):Vector2; [INumerical=Vector2;IVector=Vector2;Self=Vector2;]; <>
        public Vector2 SmootherStep { [MethodImpl(AggressiveInlining)] get  => this.Cube.Multiply(this.Multiply(((Number)6)).Subtract(((Number)15))).Add(((Number)10)); } 
// Pow2(Vector2):Vector2; [INumerical=Vector2;IVector=Vector2;Self=Vector2;]; <>
        public Vector2 Pow2 { [MethodImpl(AggressiveInlining)] get  => this.Multiply(this); } 
// Pow3(Vector2):Vector2; [INumerical=Vector2;IVector=Vector2;Self=Vector2;]; <>
        public Vector2 Pow3 { [MethodImpl(AggressiveInlining)] get  => this.Pow2.Multiply(this); } 
// Pow4(Vector2):Vector2; [INumerical=Vector2;IVector=Vector2;Self=Vector2;]; <>
        public Vector2 Pow4 { [MethodImpl(AggressiveInlining)] get  => this.Pow3.Multiply(this); } 
// Pow5(Vector2):Vector2; [INumerical=Vector2;IVector=Vector2;Self=Vector2;]; <>
        public Vector2 Pow5 { [MethodImpl(AggressiveInlining)] get  => this.Pow4.Multiply(this); } 
// Sqr(Vector2):Vector2; [INumerical=Vector2;IVector=Vector2;Self=Vector2;]; <>
        public Vector2 Sqr { [MethodImpl(AggressiveInlining)] get  => this.Pow2; } 
// Cube(Vector2):Vector2; [INumerical=Vector2;IVector=Vector2;Self=Vector2;]; <>
        public Vector2 Cube { [MethodImpl(AggressiveInlining)] get  => this.Pow3; } 
// PlusOne(Vector2):Vector2; [IVectorSpace=Vector2;INumerical=Vector2;IVector=Vector2;Self=Vector2;]; <>
        public Vector2 PlusOne { [MethodImpl(AggressiveInlining)] get  => this.Add(Constants.One); } 
// MinusOne(Vector2):Vector2; [IVectorSpace=Vector2;INumerical=Vector2;IVector=Vector2;Self=Vector2;]; <>
        public Vector2 MinusOne { [MethodImpl(AggressiveInlining)] get  => this.Subtract(Constants.One); } 
// FromOne(Vector2):Vector2; [IVectorSpace=Vector2;INumerical=Vector2;IVector=Vector2;Self=Vector2;]; <>
        public Vector2 FromOne { [MethodImpl(AggressiveInlining)] get  => this.Add(Constants.One).Negative; } 
// Component(Vector2, Integer):Number; [IVectorSpace=Vector2;INumerical=Vector2;IVector=Vector2;Self=Vector2;]; <>
        [MethodImpl(AggressiveInlining)]  public Number Component(Integer n) => this.Components.At(n);
// MaxComponent(Vector2):Number; [IVectorSpace=Vector2;INumerical=Vector2;IVector=Vector2;Self=Vector2;]; <>
        public Number MaxComponent { [MethodImpl(AggressiveInlining)] get {
            var r = this.Component(((Integer)0));
            {
                var i = ((Integer)1);
                while (i.LessThan(NumComponents))
                {
                    r = r.Max(this.Component(i));
                    i = i.Add(((Integer)1));
                }

            }
            return r;
        }
         } 
// MinComponent(Vector2):Number; [IVectorSpace=Vector2;INumerical=Vector2;IVector=Vector2;Self=Vector2;]; <>
        public Number MinComponent { [MethodImpl(AggressiveInlining)] get {
            var r = this.Component(((Integer)0));
            {
                var i = ((Integer)1);
                while (i.LessThan(NumComponents))
                {
                    r = r.Min(this.Component(i));
                    i = i.Add(((Integer)1));
                }

            }
            return r;
        }
         } 
// MapComponents(Vector2, Function1<Number, Number>):Vector2; [IVectorSpace=Vector2;INumerical=Vector2;IVector=Vector2;Self=Vector2;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector2 MapComponents(System.Func<Number, Number> f) => Vector2.CreateFromComponents(this.Components.Map(f));
// ZipComponents(Vector2, Vector2, Function2<Number, Number, Number>):Vector2; [IVectorSpace=Vector2;INumerical=Vector2;IVector=Vector2;Self=Vector2;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector2 ZipComponents(Vector2 b, System.Func<Number, Number, Number> f) => Vector2.CreateFromComponents(this.Components.Zip(b.Components, f));
// ZipComponents(Vector2, Vector2, Vector2, Function3<Number, Number, Number, Number>):Vector2; [IVectorSpace=Vector2;INumerical=Vector2;IVector=Vector2;Self=Vector2;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector2 ZipComponents(Vector2 b, Vector2 c, System.Func<Number, Number, Number, Number> f) => Vector2.CreateFromComponents(this.Components.Zip(b.Components, c.Components, f));
// AllZipComponents(Vector2, Vector2, Function2<Number, Number, Boolean>):Boolean; [IVectorSpace=Vector2;INumerical=Vector2;IVector=Vector2;Self=Vector2;]; <>
        [MethodImpl(AggressiveInlining)]  public Boolean AllZipComponents(Vector2 b, System.Func<Number, Number, Boolean> f) => this.Components.Zip(b.Components, f).All((x)  => x);
// AllZipComponents(Vector2, Vector2, Vector2, Function3<Number, Number, Number, Boolean>):Boolean; [IVectorSpace=Vector2;INumerical=Vector2;IVector=Vector2;Self=Vector2;]; <>
        [MethodImpl(AggressiveInlining)]  public Boolean AllZipComponents(Vector2 b, Vector2 c, System.Func<Number, Number, Number, Boolean> f) => this.Components.Zip(b.Components, c.Components, f).All((x)  => x);
// AnyZipComponents(Vector2, Vector2, Function2<Number, Number, Boolean>):Boolean; [IVectorSpace=Vector2;INumerical=Vector2;IVector=Vector2;Self=Vector2;]; <>
        [MethodImpl(AggressiveInlining)]  public Boolean AnyZipComponents(Vector2 b, System.Func<Number, Number, Boolean> f) => this.Components.Zip(b.Components, f).Any((x)  => x);
// AnyZipComponents(Vector2, Vector2, Vector2, Function3<Number, Number, Number, Boolean>):Boolean; [IVectorSpace=Vector2;INumerical=Vector2;IVector=Vector2;Self=Vector2;]; <>
        [MethodImpl(AggressiveInlining)]  public Boolean AnyZipComponents(Vector2 b, Vector2 c, System.Func<Number, Number, Number, Boolean> f) => this.Components.Zip(b.Components, c.Components, f).Any((x)  => x);
// AllComponents(Vector2, Function1<Number, Boolean>):Boolean; [IVectorSpace=Vector2;INumerical=Vector2;IVector=Vector2;Self=Vector2;]; <>
        [MethodImpl(AggressiveInlining)]  public Boolean AllComponents(System.Func<Number, Boolean> predicate) => this.Components.All(predicate);
// AnyComponent(Vector2, Function1<Number, Boolean>):Boolean; [IVectorSpace=Vector2;INumerical=Vector2;IVector=Vector2;Self=Vector2;]; <>
        [MethodImpl(AggressiveInlining)]  public Boolean AnyComponent(System.Func<Number, Boolean> predicate) => this.Components.Any(predicate);
// InversePow(Vector2, Vector2):Vector2; [IVectorSpace=Vector2;INumerical=Vector2;IVector=Vector2;Self=Vector2;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector2 InversePow(Vector2 n) => this.Pow(n.Reciprocal);
// Fract(Vector2):Vector2; [IVectorSpace=Vector2;INumerical=Vector2;IVector=Vector2;Self=Vector2;]; <>
        public Vector2 Fract { [MethodImpl(AggressiveInlining)] get  => this.Subtract(this.Floor); } 
// ClampZeroOne(Vector2):Vector2; [IVectorSpace=Vector2;INumerical=Vector2;IVector=Vector2;Self=Vector2;]; <>
        public Vector2 ClampZeroOne { [MethodImpl(AggressiveInlining)] get  => this.Clamp(Constants.Zero, Constants.One); } 
// Between(Vector2, Vector2, Vector2):Boolean; [IVectorSpace=Vector2;INumerical=Vector2;IVector=Vector2;Self=Vector2;]; <>
        [MethodImpl(AggressiveInlining)]  public Boolean Between(Vector2 a, Vector2 b) => this.AllZipComponents(a, b, (x0, a0, b0)  => x0.Between(a0, b0));
// BetweenZeroOne(Vector2):Boolean; [IVectorSpace=Vector2;INumerical=Vector2;IVector=Vector2;Self=Vector2;]; <>
        public Boolean BetweenZeroOne { [MethodImpl(AggressiveInlining)] get  => this.Between(Constants.Zero, Constants.One); } 
// Pow(Vector2, Vector2):Vector2; [IVectorSpace=Vector2;INumerical=Vector2;IVector=Vector2;Self=Vector2;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector2 Pow(Vector2 y) => this.ZipComponents(y, (a, b)  => a.Pow(b));
// Reciprocal(Vector2):Vector2; [IVectorSpace=Vector2;INumerical=Vector2;IVector=Vector2;Self=Vector2;]; <>
        public Vector2 Reciprocal { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((n)  => n.Reciprocal); } 
// Half(Vector2):Vector2; [IScalarArithmetic=Vector2;IVectorSpace=Vector2;INumerical=Vector2;IVector=Vector2;Self=Vector2;]; <>
        public Vector2 Half { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)2)); } 
// Quarter(Vector2):Vector2; [IScalarArithmetic=Vector2;IVectorSpace=Vector2;INumerical=Vector2;IVector=Vector2;Self=Vector2;]; <>
        public Vector2 Quarter { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)4)); } 
// Eight(Vector2):Vector2; [IScalarArithmetic=Vector2;IVectorSpace=Vector2;INumerical=Vector2;IVector=Vector2;Self=Vector2;]; <>
        public Vector2 Eight { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)8)); } 
// Sixteenth(Vector2):Vector2; [IScalarArithmetic=Vector2;IVectorSpace=Vector2;INumerical=Vector2;IVector=Vector2;Self=Vector2;]; <>
        public Vector2 Sixteenth { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)16)); } 
// Tenth(Vector2):Vector2; [IScalarArithmetic=Vector2;IVectorSpace=Vector2;INumerical=Vector2;IVector=Vector2;Self=Vector2;]; <>
        public Vector2 Tenth { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)10)); } 
// Twice(Vector2):Vector2; [IScalarArithmetic=Vector2;IVectorSpace=Vector2;INumerical=Vector2;IVector=Vector2;Self=Vector2;]; <>
        public Vector2 Twice { [MethodImpl(AggressiveInlining)] get  => this.Multiply(((Number)2)); } 
// Hundred(Vector2):Vector2; [IScalarArithmetic=Vector2;IVectorSpace=Vector2;INumerical=Vector2;IVector=Vector2;Self=Vector2;]; <>
        public Vector2 Hundred { [MethodImpl(AggressiveInlining)] get  => this.Multiply(((Number)100)); } 
// Thousand(Vector2):Vector2; [IScalarArithmetic=Vector2;IVectorSpace=Vector2;INumerical=Vector2;IVector=Vector2;Self=Vector2;]; <>
        public Vector2 Thousand { [MethodImpl(AggressiveInlining)] get  => this.Multiply(((Number)1000)); } 
// Million(Vector2):Vector2; [IScalarArithmetic=Vector2;IVectorSpace=Vector2;INumerical=Vector2;IVector=Vector2;Self=Vector2;]; <>
        public Vector2 Million { [MethodImpl(AggressiveInlining)] get  => this.Thousand.Thousand; } 
// Billion(Vector2):Vector2; [IScalarArithmetic=Vector2;IVectorSpace=Vector2;INumerical=Vector2;IVector=Vector2;Self=Vector2;]; <>
        public Vector2 Billion { [MethodImpl(AggressiveInlining)] get  => this.Thousand.Million; } 
// Hundredth(Vector2):Vector2; [IScalarArithmetic=Vector2;IVectorSpace=Vector2;INumerical=Vector2;IVector=Vector2;Self=Vector2;]; <>
        public Vector2 Hundredth { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)100)); } 
// Thousandth(Vector2):Vector2; [IScalarArithmetic=Vector2;IVectorSpace=Vector2;INumerical=Vector2;IVector=Vector2;Self=Vector2;]; <>
        public Vector2 Thousandth { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)1000)); } 
// Millionth(Vector2):Vector2; [IScalarArithmetic=Vector2;IVectorSpace=Vector2;INumerical=Vector2;IVector=Vector2;Self=Vector2;]; <>
        public Vector2 Millionth { [MethodImpl(AggressiveInlining)] get  => this.Thousandth.Thousandth; } 
// Billionth(Vector2):Vector2; [IScalarArithmetic=Vector2;IVectorSpace=Vector2;INumerical=Vector2;IVector=Vector2;Self=Vector2;]; <>
        public Vector2 Billionth { [MethodImpl(AggressiveInlining)] get  => this.Thousandth.Millionth; } 

        // Unimplemented concept functions
        public Integer Count { [MethodImpl(AggressiveInlining)] get => 2; }
        [MethodImpl(AggressiveInlining)]  public Number At(Integer n) => n == 0 ? X : n == 1 ? Y : throw new System.IndexOutOfRangeException();
        public Number this[Integer n] { [MethodImpl(AggressiveInlining)] get => At(n); }
        [MethodImpl(AggressiveInlining)]  public Vector2 Modulo(Vector2 b) => this % b;
        [MethodImpl(AggressiveInlining)]  public Vector2 Modulo(Number other) => this % other;
    }
}
