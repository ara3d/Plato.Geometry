// Autogenerated file: DO NOT EDIT
// Created on 2025-03-18 2:15:23 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct CycloidOfCeva: IPolarCurve, IOpenShape
    {
        // Fields

        // With functions 

        // Regular Constructor

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static CycloidOfCeva Create() => new CycloidOfCeva();

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is CycloidOfCeva;
        [MethodImpl(AggressiveInlining)] public Boolean Equals(CycloidOfCeva other) => true;
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(CycloidOfCeva other) => false;
        [MethodImpl(AggressiveInlining)] public static Boolean operator==(CycloidOfCeva a, CycloidOfCeva b) => true;
        [MethodImpl(AggressiveInlining)] public static Boolean operator!=(CycloidOfCeva a, CycloidOfCeva b) => false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes();
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{  }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented interface functions
        [MethodImpl(AggressiveInlining)]  public Number GetRadius(Angle t) => t.CycloidOfCeva;
[MethodImpl(AggressiveInlining)]  public PolarCoordinate EvalPolar(Angle t) => (this.GetRadius(t), t);
[MethodImpl(AggressiveInlining)]  public Vector2 Eval(Angle t) => this.EvalPolar(t);
[MethodImpl(AggressiveInlining)]  public Vector2 Eval(Number t) => this.Eval(t.Turns);
[MethodImpl(AggressiveInlining)]  public _T0 Sample<_T0>(Integer numPoints) where _T0 : IArray<_T0>{
            var _var66 = this;
            return numPoints.LinearSpace.Map((x)  => _var66.Eval(x));
        }

[MethodImpl(AggressiveInlining)]  public PolyLine2D ToPolyLine2D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)false); } 

        // Unimplemented concept functions
    }
}
