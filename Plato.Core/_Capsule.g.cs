// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 8:08:08 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
public partial struct Capsule: ISolid
{
    // Fields
    [DataMember] public readonly Number Height;
    [DataMember] public readonly Number Radius;

    // With functions 
    [MethodImpl(AggressiveInlining)] public Capsule WithHeight(Number height) => new Capsule(height, Radius);
    [MethodImpl(AggressiveInlining)] public Capsule WithRadius(Number radius) => new Capsule(Height, radius);

    // Regular Constructor
    [MethodImpl(AggressiveInlining)] public Capsule(Number height, Number radius) { Height = height; Radius = radius; }

    // Static factory function
    [MethodImpl(AggressiveInlining)] public static Capsule Create(Number height, Number radius) => new Capsule(height, radius);

    // Implicit converters to/from value-tuples and deconstructor
    [MethodImpl(AggressiveInlining)] public static implicit operator (Number, Number)(Capsule self) => (self.Height, self.Radius);
    [MethodImpl(AggressiveInlining)] public static implicit operator Capsule((Number, Number) value) => new(value.Item1, value.Item2);
    [MethodImpl(AggressiveInlining)] public void Deconstruct(out Number height, out Number radius) { height = Height; radius = Radius;  }

    // Object virtual function overrides: Equals, GetHashCode, ToString
    [MethodImpl(AggressiveInlining)] public Boolean Equals(Capsule other) => Height.Equals(other.Height) && Radius.Equals(other.Radius);
    [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Capsule other) => !Height.Equals(other.Height) && Radius.Equals(other.Radius);
    [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Capsule other ? Equals(other) : false;
    [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Height, Radius);
    [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Height\" = {Height}, \"Radius\" = {Radius} }}";

    // Explicit implementation of interfaces by forwarding properties to fields

    // Implemented concept functions and type functions
    public Boolean ClosedX { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 
public Boolean ClosedY { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, TR> Combine<TR>(Capsule b, System.Func<TR, TR, TR> f){
    var _var930 = b;
    {
        var _var929 = this;
        {
            var _var928 = f;
            return (x) =>  => _var928.Invoke(_var929.Eval(x), _var930.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector3> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var932 = f;
    {
        var _var931 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var931.Eval(_var932.Invoke(x));
;
    }
}

public System.Func<Vector2, Vector3> Function { [MethodImpl(AggressiveInlining)] get {
    var _var933 = this;
    return (x) =>  => _var933.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Vector3> Compose(Capsule b){
    var _var935 = this;
    {
        var _var934 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var934.Eval(_var935.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, TR> Combine<TR>(Capsule b, System.Func<TR, TR, TR> f){
    var _var938 = b;
    {
        var _var937 = this;
        {
            var _var936 = f;
            return (x) =>  => _var936.Invoke(_var937.Eval(x), _var938.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var940 = f;
    {
        var _var939 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var939.Eval(_var940.Invoke(x));
;
    }
}

public System.Func<Vector3, Number> Function { [MethodImpl(AggressiveInlining)] get {
    var _var941 = this;
    return (x) =>  => _var941.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, Number> Compose(Capsule b){
    var _var943 = this;
    {
        var _var942 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var942.Eval(_var943.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Union(Capsule b) => this.Combine(b, (a, b) =>  => a.Max(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Intersection(Capsule b) => this.Combine(b, (a, b) =>  => a.Min(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Difference(Capsule b) => this.Combine(b, (a, b) =>  => a.Max(b.Negative);

public Procedural<Vector3, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) =>  => x.Negative;
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, Boolean> Threshold(Number threshold){
    var _var944 = threshold;
    return this.Map((x) =>  => x.GreaterThanOrEquals(_var944);
;
}


    // Unimplemented concept functions
    [MethodImpl(AggressiveInlining)]  public Number Distance(Vector3 p) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public Number Eval(Vector3 t) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public Vector3 Eval(Vector2 t) => throw new NotImplementedException();
}
Plato.CSharpWriter.CSharpConcreteTypeWriter}
