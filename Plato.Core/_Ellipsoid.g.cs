// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 8:08:08 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
public partial struct Ellipsoid: ISolid
{
    // Fields
    [DataMember] public readonly Vector3 Radii;

    // With functions 
    [MethodImpl(AggressiveInlining)] public Ellipsoid WithRadii(Vector3 radii) => new Ellipsoid(radii);

    // Regular Constructor
    [MethodImpl(AggressiveInlining)] public Ellipsoid(Vector3 radii) { Radii = radii; }

    // Static factory function
    [MethodImpl(AggressiveInlining)] public static Ellipsoid Create(Vector3 radii) => new Ellipsoid(radii);

    // Implicit converters to/from single field
    [MethodImpl(AggressiveInlining)] public static implicit operator Vector3(Ellipsoid self) => self.Radii;
    [MethodImpl(AggressiveInlining)] public static implicit operator Ellipsoid(Vector3 value) => new Ellipsoid(value);

    // Object virtual function overrides: Equals, GetHashCode, ToString
    [MethodImpl(AggressiveInlining)] public Boolean Equals(Ellipsoid other) => Radii.Equals(other.Radii);
    [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Ellipsoid other) => !Radii.Equals(other.Radii);
    [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Ellipsoid other ? Equals(other) : false;
    [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Radii);
    [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Radii\" = {Radii} }}";

    // Explicit implementation of interfaces by forwarding properties to fields

    // Implemented concept functions and type functions
    public Boolean ClosedX { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 
public Boolean ClosedY { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, TR> Combine<TR>(Ellipsoid b, System.Func<TR, TR, TR> f){
    var _var1083 = b;
    {
        var _var1082 = this;
        {
            var _var1081 = f;
            return (x) =>  => _var1081.Invoke(_var1082.Eval(x), _var1083.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector3> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var1085 = f;
    {
        var _var1084 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var1084.Eval(_var1085.Invoke(x));
;
    }
}

public System.Func<Vector2, Vector3> Function { [MethodImpl(AggressiveInlining)] get {
    var _var1086 = this;
    return (x) =>  => _var1086.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Vector3> Compose(Ellipsoid b){
    var _var1088 = this;
    {
        var _var1087 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var1087.Eval(_var1088.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, TR> Combine<TR>(Ellipsoid b, System.Func<TR, TR, TR> f){
    var _var1091 = b;
    {
        var _var1090 = this;
        {
            var _var1089 = f;
            return (x) =>  => _var1089.Invoke(_var1090.Eval(x), _var1091.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var1093 = f;
    {
        var _var1092 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var1092.Eval(_var1093.Invoke(x));
;
    }
}

public System.Func<Vector3, Number> Function { [MethodImpl(AggressiveInlining)] get {
    var _var1094 = this;
    return (x) =>  => _var1094.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, Number> Compose(Ellipsoid b){
    var _var1096 = this;
    {
        var _var1095 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var1095.Eval(_var1096.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Union(Ellipsoid b) => this.Combine(b, (a, b) =>  => a.Max(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Intersection(Ellipsoid b) => this.Combine(b, (a, b) =>  => a.Min(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Difference(Ellipsoid b) => this.Combine(b, (a, b) =>  => a.Max(b.Negative);

public Procedural<Vector3, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) =>  => x.Negative;
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, Boolean> Threshold(Number threshold){
    var _var1097 = threshold;
    return this.Map((x) =>  => x.GreaterThanOrEquals(_var1097);
;
}


    // Unimplemented concept functions
    [MethodImpl(AggressiveInlining)]  public Number Distance(Vector3 p) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public Number Eval(Vector3 t) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public Vector3 Eval(Vector2 t) => throw new NotImplementedException();
}
Plato.CSharpWriter.CSharpConcreteTypeWriter}
