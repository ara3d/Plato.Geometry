// Autogenerated file: DO NOT EDIT
// Created on 2025-03-14 12:36:59 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct PolyLine3D: IPolyLine3D
    {
        // Fields
        [DataMember] public readonly IArray<Vector3> Points;
        [DataMember] public readonly Boolean Closed;

        // With functions 
        [MethodImpl(AggressiveInlining)] public PolyLine3D WithPoints(IArray<Vector3> points) => new PolyLine3D(points, Closed);
        [MethodImpl(AggressiveInlining)] public PolyLine3D WithClosed(Boolean closed) => new PolyLine3D(Points, closed);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public PolyLine3D(IArray<Vector3> points, Boolean closed) { Points = points; Closed = closed; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static PolyLine3D Create(IArray<Vector3> points, Boolean closed) => new PolyLine3D(points, closed);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (IArray<Vector3>, Boolean)(PolyLine3D self) => (self.Points, self.Closed);
        [MethodImpl(AggressiveInlining)] public static implicit operator PolyLine3D((IArray<Vector3>, Boolean) value) => new(value.Item1, value.Item2);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out IArray<Vector3> points, out Boolean closed) { points = Points; closed = Closed;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(PolyLine3D other) => Points.Equals(other.Points) && Closed.Equals(other.Closed);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(PolyLine3D other) => !Points.Equals(other.Points) && Closed.Equals(other.Closed);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is PolyLine3D other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Points, Closed);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Points\" = {Points}, \"Closed\" = {Closed} }}";

        // Explicit implementation of interfaces by forwarding properties to fields
        Boolean IOpenClosedShape.Closed { [MethodImpl(AggressiveInlining)] get => Closed; }
        IArray<Vector3> IPointGeometry3D.Points { [MethodImpl(AggressiveInlining)] get => Points; }

        // Implemented interface functions
        // Deform(PolyLine3D, Function1<Vector3, Vector3>):PolyLine3D; [Self=PolyLine3D;]; <>
        [MethodImpl(AggressiveInlining)]  public PolyLine3D Deform(System.Func<Vector3, Vector3> f) => (this.Points.Map(f), this.Closed);
// Lines(PolyLine3D):_T0; [IPolyLine3D=PolyLine3D;Self=PolyLine3D;]; <_T0:IArray<Line3D>>
        public _T0 Lines<_T0> { [MethodImpl(AggressiveInlining)] get  => this.Points.WithNext((a, b)  => new Line3D(a, b), this.Closed); } 
// Sample(PolyLine3D, Integer):_T0; [ICurve3D=PolyLine3D;IPolyLine3D=PolyLine3D;Self=PolyLine3D;]; <_T0:IArray<Vector3>>
        [MethodImpl(AggressiveInlining)]  public _T0 Sample<_T0>(Integer numPoints){
            var _var162 = this;
            return numPoints.LinearSpace.Map((x)  => _var162.Eval(x));
        }

// ToPolyLine3D(PolyLine3D, Integer):PolyLine3D; [ICurve3D=PolyLine3D;IPolyLine3D=PolyLine3D;Self=PolyLine3D;]; <>
        [MethodImpl(AggressiveInlining)]  public PolyLine3D ToPolyLine3D(Integer numPoints) => (this.Sample(numPoints), this.Closed);

        // Unimplemented concept functions
        // PrimitiveSize(PolyLine3D):Integer; [IPrimitiveGeometry=PolyLine3D;IPrimitiveGeometry3D=PolyLine3D;IPointGeometry3D=PolyLine3D;IPolyLine3D=PolyLine3D;Self=PolyLine3D;]; <>
        public Integer PrimitiveSize => throw new NotImplementedException();
// NumPrimitives(PolyLine3D):Integer; [IPrimitiveGeometry=PolyLine3D;IPrimitiveGeometry3D=PolyLine3D;IPointGeometry3D=PolyLine3D;IPolyLine3D=PolyLine3D;Self=PolyLine3D;]; <>
        public Integer NumPrimitives => throw new NotImplementedException();
// Corners(PolyLine3D):_T0; [IPrimitiveGeometry3D=PolyLine3D;IPointGeometry3D=PolyLine3D;IPolyLine3D=PolyLine3D;Self=PolyLine3D;]; <_T0:IArray<Vector3>>
        public _T0 Corners<_T0> => throw new NotImplementedException();
// Eval(PolyLine3D, Number):Vector3; [IProcedural=PolyLine3D;TOut=TRange;TIn=Number;ICurve=PolyLine3D;TRange=Vector3;ICurve3D=PolyLine3D;IPolyLine3D=PolyLine3D;Self=PolyLine3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector3 Eval(Number t) => throw new NotImplementedException();
}
}
