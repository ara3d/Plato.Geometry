// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 8:08:08 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
public partial struct PolyLine3D: IPolyLine3D
{
    // Fields
    [DataMember] public readonly IArray<Vector3> Points;
    [DataMember] public readonly Boolean Closed;

    // With functions 
    [MethodImpl(AggressiveInlining)] public PolyLine3D WithPoints(IArray<Vector3> points) => new PolyLine3D(points, Closed);
    [MethodImpl(AggressiveInlining)] public PolyLine3D WithClosed(Boolean closed) => new PolyLine3D(Points, closed);

    // Regular Constructor
    [MethodImpl(AggressiveInlining)] public PolyLine3D(IArray<Vector3> points, Boolean closed) { Points = points; Closed = closed; }

    // Static factory function
    [MethodImpl(AggressiveInlining)] public static PolyLine3D Create(IArray<Vector3> points, Boolean closed) => new PolyLine3D(points, closed);

    // Implicit converters to/from value-tuples and deconstructor
    [MethodImpl(AggressiveInlining)] public static implicit operator (IArray<Vector3>, Boolean)(PolyLine3D self) => (self.Points, self.Closed);
    [MethodImpl(AggressiveInlining)] public static implicit operator PolyLine3D((IArray<Vector3>, Boolean) value) => new(value.Item1, value.Item2);
    [MethodImpl(AggressiveInlining)] public void Deconstruct(out IArray<Vector3> points, out Boolean closed) { points = Points; closed = Closed;  }

    // Object virtual function overrides: Equals, GetHashCode, ToString
    [MethodImpl(AggressiveInlining)] public Boolean Equals(PolyLine3D other) => Points.Equals(other.Points) && Closed.Equals(other.Closed);
    [MethodImpl(AggressiveInlining)] public Boolean NotEquals(PolyLine3D other) => !Points.Equals(other.Points) && Closed.Equals(other.Closed);
    [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is PolyLine3D other ? Equals(other) : false;
    [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Points, Closed);
    [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Points\" = {Points}, \"Closed\" = {Closed} }}";

    // Explicit implementation of interfaces by forwarding properties to fields
    IArray<Vector3> IPointGeometry3D.Points { [MethodImpl(AggressiveInlining)] get => Points; }
    Boolean IOpenClosedShape.Closed { [MethodImpl(AggressiveInlining)] get => Closed; }

    // Implemented concept functions and type functions
    [MethodImpl(AggressiveInlining)]  public PolyLine3D Deform(System.Func<Vector3, Vector3> f) => (this.Points.Map(f), this.Closed);
public IArray<Line3D> Lines { [MethodImpl(AggressiveInlining)] get  => this.Points.WithNext((a, b) =>  => new Line3D(a, b);
 } 
[MethodImpl(AggressiveInlining)]  public IArray<Vector3> Sample(Integer numPoints){
    var _var854 = this;
    return numPoints.LinearSpace.Map((x) =>  => _var854.Eval(x);
;
}

[MethodImpl(AggressiveInlining)]  public PolyLine3D ToPolyLine3D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
[MethodImpl(AggressiveInlining)]  public Procedural<Number, TR> Combine<TR>(PolyLine3D b, System.Func<TR, TR, TR> f){
    var _var857 = b;
    {
        var _var856 = this;
        {
            var _var855 = f;
            return (x) =>  => _var855.Invoke(_var856.Eval(x), _var857.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector3> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var859 = f;
    {
        var _var858 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var858.Eval(_var859.Invoke(x));
;
    }
}

public System.Func<Number, Vector3> Function { [MethodImpl(AggressiveInlining)] get {
    var _var860 = this;
    return (x) =>  => _var860.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Number, Vector3> Compose(PolyLine3D b){
    var _var862 = this;
    {
        var _var861 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var861.Eval(_var862.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, TR> Combine<TR>(PolyLine3D b, System.Func<TR, TR, TR> f){
    var _var865 = b;
    {
        var _var864 = this;
        {
            var _var863 = f;
            return (x) =>  => _var863.Invoke(_var864.Eval(x), _var865.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var867 = f;
    {
        var _var866 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var866.Eval(_var867.Invoke(x));
;
    }
}

public System.Func<Vector3, Number> Function { [MethodImpl(AggressiveInlining)] get {
    var _var868 = this;
    return (x) =>  => _var868.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, Number> Compose(PolyLine3D b){
    var _var870 = this;
    {
        var _var869 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var869.Eval(_var870.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Union(PolyLine3D b) => this.Combine(b, (a, b) =>  => a.Max(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Intersection(PolyLine3D b) => this.Combine(b, (a, b) =>  => a.Min(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Difference(PolyLine3D b) => this.Combine(b, (a, b) =>  => a.Max(b.Negative);

public Procedural<Vector3, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) =>  => x.Negative;
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, Boolean> Threshold(Number threshold){
    var _var871 = threshold;
    return this.Map((x) =>  => x.GreaterThanOrEquals(_var871);
;
}


    // Unimplemented concept functions
    [MethodImpl(AggressiveInlining)]  public Number Distance(Vector3 p) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public Number Eval(Vector3 t) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public Vector3 Eval(Number t) => throw new NotImplementedException();
public IArray<Vector3> Corners => throw new NotImplementedException();
public Integer PrimitiveSize => throw new NotImplementedException();
public Integer NumPrimitives => throw new NotImplementedException();
}
Plato.CSharpWriter.CSharpConcreteTypeWriter}
