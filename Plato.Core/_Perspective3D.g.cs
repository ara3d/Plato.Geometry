// Autogenerated file: DO NOT EDIT
// Created on 2025-04-07 4:05:19 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Perspective3D: ITransform3D
    {
        // Fields
        [DataMember] public readonly Angle FOV;
        [DataMember] public readonly Number AspectRatio;
        [DataMember] public readonly Number Near;
        [DataMember] public readonly Number Far;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Perspective3D WithFOV(Angle fOV) => new Perspective3D(fOV, AspectRatio, Near, Far);
        [MethodImpl(AggressiveInlining)] public Perspective3D WithAspectRatio(Number aspectRatio) => new Perspective3D(FOV, aspectRatio, Near, Far);
        [MethodImpl(AggressiveInlining)] public Perspective3D WithNear(Number near) => new Perspective3D(FOV, AspectRatio, near, Far);
        [MethodImpl(AggressiveInlining)] public Perspective3D WithFar(Number far) => new Perspective3D(FOV, AspectRatio, Near, far);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Perspective3D(Angle fOV, Number aspectRatio, Number near, Number far) { FOV = fOV; AspectRatio = aspectRatio; Near = near; Far = far; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Perspective3D Create(Angle fOV, Number aspectRatio, Number near, Number far) => new Perspective3D(fOV, aspectRatio, near, far);

        // Static default implementation
        public static readonly Perspective3D Default = default;

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Angle, Number, Number, Number)(Perspective3D self) => (self.FOV, self.AspectRatio, self.Near, self.Far);
        [MethodImpl(AggressiveInlining)] public static implicit operator Perspective3D((Angle, Number, Number, Number) value) => new Perspective3D(value.Item1, value.Item2, value.Item3, value.Item4);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Angle fOV, out Number aspectRatio, out Number near, out Number far) { fOV = FOV; aspectRatio = AspectRatio; near = Near; far = Far;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Perspective3D other) => FOV.Equals(other.FOV) && AspectRatio.Equals(other.AspectRatio) && Near.Equals(other.Near) && Far.Equals(other.Far);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Perspective3D other) => !FOV.Equals(other.FOV) && AspectRatio.Equals(other.AspectRatio) && Near.Equals(other.Near) && Far.Equals(other.Far);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Perspective3D other ? Equals(other).Value : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(FOV, AspectRatio, Near, Far);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"FOV\" = {FOV}, \"AspectRatio\" = {AspectRatio}, \"Near\" = {Near}, \"Far\" = {Far} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented interface functions
        public Matrix4x4 Matrix { [MethodImpl(AggressiveInlining)] get  => Matrix4x4.CreatePerspectiveFieldOfView(this.FOV.Radians, this.AspectRatio, this.Near, this.Far); } 
[MethodImpl(AggressiveInlining)]  public Point3D Multiply(Point3D v) => this.TransformPoint(v);
[MethodImpl(AggressiveInlining)]  public static Point3D operator *(Perspective3D x, Point3D v) => x.Multiply(v);
        [MethodImpl(AggressiveInlining)]  public Vector3 Multiply(Vector3 v) => this.TransformNormal(v);
[MethodImpl(AggressiveInlining)]  public static Vector3 operator *(Perspective3D x, Vector3 v) => x.Multiply(v);
        [MethodImpl(AggressiveInlining)]  public MatrixTransform3D Multiply(Matrix4x4 m) => this.Compose(y);
[MethodImpl(AggressiveInlining)]  public static MatrixTransform3D operator *(Perspective3D x, Matrix4x4 m) => x.Multiply(m);
        [MethodImpl(AggressiveInlining)]  public Point3D TransformPoint(Point3D v) => v.Vector.Transform(this.Matrix);
[MethodImpl(AggressiveInlining)]  public Vector3 TransformNormal(Vector3 v) => v.Vector.TransformNormal(this.Matrix);
public Matrix4x4 Matrix4x4 { [MethodImpl(AggressiveInlining)] get  => this.Matrix; } 
[MethodImpl(AggressiveInlining)]  public static implicit operator Matrix4x4(Perspective3D t) => t.Matrix4x4;
        public MatrixTransform3D MatrixTransform3D { [MethodImpl(AggressiveInlining)] get  => this.Matrix; } 
[MethodImpl(AggressiveInlining)]  public static implicit operator MatrixTransform3D(Perspective3D t) => t.MatrixTransform3D;
        public MatrixTransform3D Invert { [MethodImpl(AggressiveInlining)] get  => this.Matrix.Invert; } 
[MethodImpl(AggressiveInlining)]  public MatrixTransform3D Compose(Matrix4x4 m) => this.Matrix.Multiply(m);
public Rotation3D Rotation { [MethodImpl(AggressiveInlining)] get  => this.Matrix.Rotation; } 
public Translation3D Translation { [MethodImpl(AggressiveInlining)] get  => this.Matrix.Translation; } 
public Pose3D Pose { [MethodImpl(AggressiveInlining)] get  => (this.Matrix.Translation, this.Matrix.Rotation); } 

        // Unimplemented interface functions
    }
}
