// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 8:08:08 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
public partial struct FigureEightKnot: IAngularCurve3D, IClosedShape
{
    // Fields

    // With functions 

    // Regular Constructor

    // Static factory function
    [MethodImpl(AggressiveInlining)] public static FigureEightKnot Create() => new FigureEightKnot();

    // Object virtual function overrides: Equals, GetHashCode, ToString
    [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is FigureEightKnot;
    [MethodImpl(AggressiveInlining)] public Boolean Equals(FigureEightKnot other) => true;
    [MethodImpl(AggressiveInlining)] public Boolean NotEquals(FigureEightKnot other) => false;
    [MethodImpl(AggressiveInlining)] public static Boolean operator==(FigureEightKnot a, FigureEightKnot b) => true;
    [MethodImpl(AggressiveInlining)] public static Boolean operator!=(FigureEightKnot a, FigureEightKnot b) => false;
    [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes();
    [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{  }}";

    // Explicit implementation of interfaces by forwarding properties to fields

    // Implemented concept functions and type functions
    [MethodImpl(AggressiveInlining)]  public Vector3 Eval(Angle t) => t.FigureEightKnot;
[MethodImpl(AggressiveInlining)]  public Vector3 Eval(Number t) => this.Eval(t.Turns);
[MethodImpl(AggressiveInlining)]  public IArray<Vector3> Sample(Integer numPoints){
    var _var527 = this;
    return numPoints.LinearSpace.Map((x) =>  => _var527.Eval(x);
;
}

[MethodImpl(AggressiveInlining)]  public PolyLine3D ToPolyLine3D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
[MethodImpl(AggressiveInlining)]  public Procedural<Number, TR> Combine<TR>(FigureEightKnot b, System.Func<TR, TR, TR> f){
    var _var530 = b;
    {
        var _var529 = this;
        {
            var _var528 = f;
            return (x) =>  => _var528.Invoke(_var529.Eval(x), _var530.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector3> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var532 = f;
    {
        var _var531 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var531.Eval(_var532.Invoke(x));
;
    }
}

public System.Func<Number, Vector3> Function { [MethodImpl(AggressiveInlining)] get {
    var _var533 = this;
    return (x) =>  => _var533.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Number, Vector3> Compose(FigureEightKnot b){
    var _var535 = this;
    {
        var _var534 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var534.Eval(_var535.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, TR> Combine<TR>(FigureEightKnot b, System.Func<TR, TR, TR> f){
    var _var538 = b;
    {
        var _var537 = this;
        {
            var _var536 = f;
            return (x) =>  => _var536.Invoke(_var537.Eval(x), _var538.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var540 = f;
    {
        var _var539 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var539.Eval(_var540.Invoke(x));
;
    }
}

public System.Func<Vector3, Number> Function { [MethodImpl(AggressiveInlining)] get {
    var _var541 = this;
    return (x) =>  => _var541.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, Number> Compose(FigureEightKnot b){
    var _var543 = this;
    {
        var _var542 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var542.Eval(_var543.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Union(FigureEightKnot b) => this.Combine(b, (a, b) =>  => a.Max(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Intersection(FigureEightKnot b) => this.Combine(b, (a, b) =>  => a.Min(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Difference(FigureEightKnot b) => this.Combine(b, (a, b) =>  => a.Max(b.Negative);

public Procedural<Vector3, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) =>  => x.Negative;
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, Boolean> Threshold(Number threshold){
    var _var544 = threshold;
    return this.Map((x) =>  => x.GreaterThanOrEquals(_var544);
;
}

public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 

    // Unimplemented concept functions
    [MethodImpl(AggressiveInlining)]  public Number Distance(Vector3 p) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public Number Eval(Vector3 t) => throw new NotImplementedException();
}
Plato.CSharpWriter.CSharpConcreteTypeWriter}
