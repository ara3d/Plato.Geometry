// Autogenerated file: DO NOT EDIT
// Created on 2025-03-14 12:36:59 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct LogarithmicSpiral: IPolarCurve, IOpenShape
    {
        // Fields
        [DataMember] public readonly Number A;
        [DataMember] public readonly Number K;

        // With functions 
        [MethodImpl(AggressiveInlining)] public LogarithmicSpiral WithA(Number a) => new LogarithmicSpiral(a, K);
        [MethodImpl(AggressiveInlining)] public LogarithmicSpiral WithK(Number k) => new LogarithmicSpiral(A, k);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public LogarithmicSpiral(Number a, Number k) { A = a; K = k; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static LogarithmicSpiral Create(Number a, Number k) => new LogarithmicSpiral(a, k);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Number, Number)(LogarithmicSpiral self) => (self.A, self.K);
        [MethodImpl(AggressiveInlining)] public static implicit operator LogarithmicSpiral((Number, Number) value) => new(value.Item1, value.Item2);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Number a, out Number k) { a = A; k = K;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(LogarithmicSpiral other) => A.Equals(other.A) && K.Equals(other.K);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(LogarithmicSpiral other) => !A.Equals(other.A) && K.Equals(other.K);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is LogarithmicSpiral other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(A, K);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"A\" = {A}, \"K\" = {K} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented interface functions
        // GetRadius(LogarithmicSpiral, Angle):Number; [Self=LogarithmicSpiral;]; <>
        [MethodImpl(AggressiveInlining)]  public Number GetRadius(Angle t) => t.LogarithmicSpiral(this.A, this.K);
// EvalPolar(LogarithmicSpiral, Angle):PolarCoordinate; [IPolarCurve=LogarithmicSpiral;Self=LogarithmicSpiral;]; <>
        [MethodImpl(AggressiveInlining)]  public PolarCoordinate EvalPolar(Angle t) => (this.GetRadius(t), t);
// Eval(LogarithmicSpiral, Angle):Vector2; [IPolarCurve=LogarithmicSpiral;Self=LogarithmicSpiral;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector2 Eval(Angle t) => this.EvalPolar(t);
// Eval(LogarithmicSpiral, Number):Vector2; [IAngularCurve2D=LogarithmicSpiral;IPolarCurve=LogarithmicSpiral;Self=LogarithmicSpiral;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector2 Eval(Number t) => this.Eval(t.Turns);
// Sample(LogarithmicSpiral, Integer):_T0; [ICurve2D=LogarithmicSpiral;IAngularCurve2D=LogarithmicSpiral;IPolarCurve=LogarithmicSpiral;Self=LogarithmicSpiral;]; <_T0:IArray<Vector2>>
        [MethodImpl(AggressiveInlining)]  public _T0 Sample<_T0>(Integer numPoints){
            var _var78 = this;
            return numPoints.LinearSpace.Map((x)  => _var78.Eval(x));
        }

// ToPolyLine2D(LogarithmicSpiral, Integer):PolyLine2D; [ICurve2D=LogarithmicSpiral;IAngularCurve2D=LogarithmicSpiral;IPolarCurve=LogarithmicSpiral;Self=LogarithmicSpiral;]; <>
        [MethodImpl(AggressiveInlining)]  public PolyLine2D ToPolyLine2D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
// Closed(LogarithmicSpiral):Boolean; [IOpenShape=LogarithmicSpiral;Self=LogarithmicSpiral;]; <>
        public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)false); } 

        // Unimplemented concept functions
    }
}
