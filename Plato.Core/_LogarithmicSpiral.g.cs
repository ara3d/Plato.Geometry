// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 8:08:08 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
public partial struct LogarithmicSpiral: IPolarCurve, IOpenShape
{
    // Fields
    [DataMember] public readonly Number A;
    [DataMember] public readonly Number K;

    // With functions 
    [MethodImpl(AggressiveInlining)] public LogarithmicSpiral WithA(Number a) => new LogarithmicSpiral(a, K);
    [MethodImpl(AggressiveInlining)] public LogarithmicSpiral WithK(Number k) => new LogarithmicSpiral(A, k);

    // Regular Constructor
    [MethodImpl(AggressiveInlining)] public LogarithmicSpiral(Number a, Number k) { A = a; K = k; }

    // Static factory function
    [MethodImpl(AggressiveInlining)] public static LogarithmicSpiral Create(Number a, Number k) => new LogarithmicSpiral(a, k);

    // Implicit converters to/from value-tuples and deconstructor
    [MethodImpl(AggressiveInlining)] public static implicit operator (Number, Number)(LogarithmicSpiral self) => (self.A, self.K);
    [MethodImpl(AggressiveInlining)] public static implicit operator LogarithmicSpiral((Number, Number) value) => new(value.Item1, value.Item2);
    [MethodImpl(AggressiveInlining)] public void Deconstruct(out Number a, out Number k) { a = A; k = K;  }

    // Object virtual function overrides: Equals, GetHashCode, ToString
    [MethodImpl(AggressiveInlining)] public Boolean Equals(LogarithmicSpiral other) => A.Equals(other.A) && K.Equals(other.K);
    [MethodImpl(AggressiveInlining)] public Boolean NotEquals(LogarithmicSpiral other) => !A.Equals(other.A) && K.Equals(other.K);
    [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is LogarithmicSpiral other ? Equals(other) : false;
    [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(A, K);
    [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"A\" = {A}, \"K\" = {K} }}";

    // Explicit implementation of interfaces by forwarding properties to fields

    // Implemented concept functions and type functions
    [MethodImpl(AggressiveInlining)]  public Number GetRadius(Angle t) => t.LogarithmicSpiral(this.A, this.K);
[MethodImpl(AggressiveInlining)]  public PolarCoordinate EvalPolar(Angle t) => (this.GetRadius(t), t);
[MethodImpl(AggressiveInlining)]  public Vector2 Eval(Angle t) => this.EvalPolar(t);
[MethodImpl(AggressiveInlining)]  public Vector2 Eval(Number t) => this.Eval(t.Turns);
[MethodImpl(AggressiveInlining)]  public IArray<Vector2> Sample(Integer numPoints){
    var _var473 = this;
    return numPoints.LinearSpace.Map((x) =>  => _var473.Eval(x);
;
}

[MethodImpl(AggressiveInlining)]  public PolyLine2D ToPolyLine2D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
[MethodImpl(AggressiveInlining)]  public Procedural<Number, TR> Combine<TR>(LogarithmicSpiral b, System.Func<TR, TR, TR> f){
    var _var476 = b;
    {
        var _var475 = this;
        {
            var _var474 = f;
            return (x) =>  => _var474.Invoke(_var475.Eval(x), _var476.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector2> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var478 = f;
    {
        var _var477 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var477.Eval(_var478.Invoke(x));
;
    }
}

public System.Func<Number, Vector2> Function { [MethodImpl(AggressiveInlining)] get {
    var _var479 = this;
    return (x) =>  => _var479.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Number, Vector2> Compose(LogarithmicSpiral b){
    var _var481 = this;
    {
        var _var480 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var480.Eval(_var481.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, TR> Combine<TR>(LogarithmicSpiral b, System.Func<TR, TR, TR> f){
    var _var484 = b;
    {
        var _var483 = this;
        {
            var _var482 = f;
            return (x) =>  => _var482.Invoke(_var483.Eval(x), _var484.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var486 = f;
    {
        var _var485 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var485.Eval(_var486.Invoke(x));
;
    }
}

public System.Func<Vector2, Number> Function { [MethodImpl(AggressiveInlining)] get {
    var _var487 = this;
    return (x) =>  => _var487.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Number> Compose(LogarithmicSpiral b){
    var _var489 = this;
    {
        var _var488 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var488.Eval(_var489.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Union(LogarithmicSpiral b) => this.Combine(b, (a, b) =>  => a.Max(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Intersection(LogarithmicSpiral b) => this.Combine(b, (a, b) =>  => a.Min(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Difference(LogarithmicSpiral b) => this.Combine(b, (a, b) =>  => a.Max(b.Negative);

public Procedural<Vector2, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) =>  => x.Negative;
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Boolean> Threshold(Number threshold){
    var _var490 = threshold;
    return this.Map((x) =>  => x.GreaterThanOrEquals(_var490);
;
}

public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)false); } 

    // Unimplemented concept functions
    [MethodImpl(AggressiveInlining)]  public Number Distance(Vector2 p) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public Number Eval(Vector2 t) => throw new NotImplementedException();
}
Plato.CSharpWriter.CSharpConcreteTypeWriter}
