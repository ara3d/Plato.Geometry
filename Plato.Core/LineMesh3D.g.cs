// Autogenerated file: DO NOT EDIT
// Created on 2025-03-06 1:31:00 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct LineMesh3D: ILineMesh3D<LineMesh3D>
    {
        // Fields
        [DataMember] public readonly IArray<Vector3> Points;
        [DataMember] public readonly IArray<Integer> Indices;

        // With functions 
        [MethodImpl(AggressiveInlining)] public LineMesh3D WithPoints(IArray<Vector3> points) => new LineMesh3D(points, Indices);
        [MethodImpl(AggressiveInlining)] public LineMesh3D WithIndices(IArray<Integer> indices) => new LineMesh3D(Points, indices);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public LineMesh3D(IArray<Vector3> points, IArray<Integer> indices) { Points = points; Indices = indices; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static LineMesh3D Create(IArray<Vector3> points, IArray<Integer> indices) => new LineMesh3D(points, indices);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (IArray<Vector3>, IArray<Integer>)(LineMesh3D self) => (self.Points, self.Indices);
        [MethodImpl(AggressiveInlining)] public static implicit operator LineMesh3D((IArray<Vector3>, IArray<Integer>) value) => new(value.Item1, value.Item2);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out IArray<Vector3> points, out IArray<Integer> indices) { points = Points; indices = Indices;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(LineMesh3D other) => Points.Equals(other.Points) && Indices.Equals(other.Indices);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(LineMesh3D other) => !Points.Equals(other.Points) && Indices.Equals(other.Indices);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is LineMesh3D other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Points, Indices);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Points\" = {Points}, \"Indices\" = {Indices} }}";

        // Explicit implementation of interfaces by forwarding properties to fields
        IArray<Integer> IIndexedGeometry.Indices { [MethodImpl(AggressiveInlining)] get => Indices; }
        IArray<Vector3> IPointGeometry3D<LineMesh3D>.Points { [MethodImpl(AggressiveInlining)] get => Points; }

        // Implemented concept functions and type functions
        [MethodImpl(AggressiveInlining)]  public LineMesh3D Deform(System.Func<Vector3, Vector3> f) => (this.Points.Map(f), this.Indices);
        public IArray<Line3D> Lines { [MethodImpl(AggressiveInlining)] get  => this.AllFaceVertices.Map((xs) => new Line3D(xs.At(((Integer)0)), xs.At(((Integer)1)))); } 
        [MethodImpl(AggressiveInlining)]  public Vector3 Vertex(Integer n) => this.Points.At(this.Indices.At(n));
        [MethodImpl(AggressiveInlining)]  public IArray<Vector3> FaceVertices(Integer f){
            var _var215 = this;
            return this.FaceIndices.At(f).Map((i) => _var215.Vertex(i));
        }

        public IArray2D<Vector3> AllFaceVertices { [MethodImpl(AggressiveInlining)] get {
            var _var216 = this;
            return this.AllFaceIndices.Map((x) => _var216.Vertex(x));
        }
         } 
        [MethodImpl(AggressiveInlining)]  public IArray<Vector3> Vertices(IArray<Integer> xs){
            var _var217 = this;
            return xs.Map((i) => _var217.Vertex(i));
        }

        public IArray<Vector3> AllVertices { [MethodImpl(AggressiveInlining)] get  => this.Vertices(this.Indices); } 
        public Integer NumPrimitives { [MethodImpl(AggressiveInlining)] get  => this.Indices.Count.Divide(this.PrimitiveSize); } 
        public Integer NumFaces { [MethodImpl(AggressiveInlining)] get  => this.NumPrimitives; } 
        public IArray2D<Integer> AllFaceIndices { [MethodImpl(AggressiveInlining)] get  => this.Indices.Slices(this.PrimitiveSize); } 
        [MethodImpl(AggressiveInlining)]  public LineMesh3D Deform(IdentityTransform3D t){
            var _var218 = t;
            return this.Deform((v) => _var218.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public LineMesh3D Deform(MatrixTransform3D t){
            var _var219 = t;
            return this.Deform((v) => _var219.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public LineMesh3D Deform(Translation3D t){
            var _var220 = t;
            return this.Deform((v) => _var220.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public LineMesh3D Deform(Rotation3D t){
            var _var221 = t;
            return this.Deform((v) => _var221.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public LineMesh3D Deform(LookRotation t){
            var _var222 = t;
            return this.Deform((v) => _var222.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public LineMesh3D Deform(Scaling3D t){
            var _var223 = t;
            return this.Deform((v) => _var223.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public LineMesh3D Deform(TRSTransform3D t){
            var _var224 = t;
            return this.Deform((v) => _var224.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public LineMesh3D Deform(Pose3D t){
            var _var225 = t;
            return this.Deform((v) => _var225.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public LineMesh3D Deform(AxisAngle t){
            var _var226 = t;
            return this.Deform((v) => _var226.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public LineMesh3D Deform(EulerAngles t){
            var _var227 = t;
            return this.Deform((v) => _var227.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public LineMesh3D Deform(Perspective3D t){
            var _var228 = t;
            return this.Deform((v) => _var228.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public LineMesh3D Deform(Orthographic3D t){
            var _var229 = t;
            return this.Deform((v) => _var229.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public LineMesh3D Deform(PlaneProjection t){
            var _var230 = t;
            return this.Deform((v) => _var230.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public LineMesh3D Translate(Vector3 v){
            var _var231 = v;
            return this.Deform((p) => p.Add(_var231));
        }

        [MethodImpl(AggressiveInlining)]  public LineMesh3D Rotate(Quaternion q) => this.Deform(q);
        [MethodImpl(AggressiveInlining)]  public LineMesh3D Scale(Vector3 v){
            var _var232 = v;
            return this.Deform((p) => p.Multiply(_var232));
        }

        [MethodImpl(AggressiveInlining)]  public LineMesh3D Scale(Number s){
            var _var233 = s;
            return this.Deform((p) => p.Multiply(_var233));
        }

        [MethodImpl(AggressiveInlining)]  public LineMesh3D RotateX(Angle a) => this.Rotate(a.RotateX);
        [MethodImpl(AggressiveInlining)]  public LineMesh3D RotateY(Angle a) => this.Rotate(a.RotateY);
        [MethodImpl(AggressiveInlining)]  public LineMesh3D RotateZ(Angle a) => this.Rotate(a.RotateZ);
        [MethodImpl(AggressiveInlining)]  public LineMesh3D TranslateX(Number s){
            var _var234 = s;
            return this.Deform((p) => p.Add((_var234, ((Integer)0), ((Integer)0))));
        }

        [MethodImpl(AggressiveInlining)]  public LineMesh3D TranslateY(Number s){
            var _var235 = s;
            return this.Deform((p) => p.Add((((Integer)0), _var235, ((Integer)0))));
        }

        [MethodImpl(AggressiveInlining)]  public LineMesh3D TranslateZ(Number s){
            var _var236 = s;
            return this.Deform((p) => p.Add((((Integer)0), ((Integer)0), _var236)));
        }

        [MethodImpl(AggressiveInlining)]  public LineMesh3D ScaleX(Number s){
            var _var237 = s;
            return this.Deform((p) => p.Multiply((_var237, ((Integer)1), ((Integer)1))));
        }

        [MethodImpl(AggressiveInlining)]  public LineMesh3D ScaleY(Number s){
            var _var238 = s;
            return this.Deform((p) => p.Multiply((((Integer)1), _var238, ((Integer)1))));
        }

        [MethodImpl(AggressiveInlining)]  public LineMesh3D ScaleZ(Number s){
            var _var239 = s;
            return this.Deform((p) => p.Multiply((((Integer)1), ((Integer)1), _var239)));
        }

        public Integer PrimitiveSize { [MethodImpl(AggressiveInlining)] get  => ((Integer)2); } 

        // Unimplemented concept functions
    }
}
