// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 12:06:56 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Limacon: IPolarCurve, IOpenShape
    {
        // Fields
        [DataMember] public readonly Number A;
        [DataMember] public readonly Number B;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Limacon WithA(Number a) => new Limacon(a, B);
        [MethodImpl(AggressiveInlining)] public Limacon WithB(Number b) => new Limacon(A, b);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Limacon(Number a, Number b) { A = a; B = b; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Limacon Create(Number a, Number b) => new Limacon(a, b);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Number, Number)(Limacon self) => (self.A, self.B);
        [MethodImpl(AggressiveInlining)] public static implicit operator Limacon((Number, Number) value) => new(value.Item1, value.Item2);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Number a, out Number b) { a = A; b = B;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Limacon other) => A.Equals(other.A) && B.Equals(other.B);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Limacon other) => !A.Equals(other.A) && B.Equals(other.B);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Limacon other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(A, B);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"A\" = {A}, \"B\" = {B} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented concept functions and type functions
        [MethodImpl(AggressiveInlining)]  public Number GetRadius(Angle t) => t.Limacon(this.A, this.B);
        [MethodImpl(AggressiveInlining)]  public PolarCoordinate EvalPolar(Angle t) => (this.GetRadius(t), t);
        [MethodImpl(AggressiveInlining)]  public Vector2 Eval(Angle t) => this.EvalPolar(t);
        [MethodImpl(AggressiveInlining)]  public Vector2 Eval(Number t) => this.Eval(t.Turns);
        [MethodImpl(AggressiveInlining)]  public IArray<Vector2> Sample(Integer numPoints){
            var _var263 = this;
            return numPoints.LinearSpace.Map((x) => _var263.Eval(x));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine2D ToPolyLine2D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
        [MethodImpl(AggressiveInlining)]  public Procedural<Number, TR> Combine<TR>(Limacon b, System.Func<TR, TR, TR> f){
            var _var266 = b;
            {
                var _var265 = this;
                {
                    var _var264 = f;
                    return (x) => _var264.Invoke(_var265.Eval(x), _var266.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector2> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var268 = f;
            {
                var _var267 = this;
                return (x) => _var267.Eval(_var268.Invoke(x));
            }
        }

        public System.Func<Number, Vector2> Function { [MethodImpl(AggressiveInlining)] get {
            var _var269 = this;
            return (x) => _var269.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Number, Vector2> Compose(Limacon b){
            var _var271 = this;
            {
                var _var270 = b;
                return (x) => _var270.Eval(_var271.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, TR> Combine<TR>(Limacon b, System.Func<TR, TR, TR> f){
            var _var274 = b;
            {
                var _var273 = this;
                {
                    var _var272 = f;
                    return (x) => _var272.Invoke(_var273.Eval(x), _var274.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var276 = f;
            {
                var _var275 = this;
                return (x) => _var275.Eval(_var276.Invoke(x));
            }
        }

        public System.Func<Vector2, Number> Function { [MethodImpl(AggressiveInlining)] get {
            var _var277 = this;
            return (x) => _var277.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Number> Compose(Limacon b){
            var _var279 = this;
            {
                var _var278 = b;
                return (x) => _var278.Eval(_var279.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Union(Limacon b) => this.Combine(b, (a, b) => a.Max(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Intersection(Limacon b) => this.Combine(b, (a, b) => a.Min(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Difference(Limacon b) => this.Combine(b, (a, b) => a.Max(b.Negative));
        public Procedural<Vector2, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) => x.Negative); } 
        public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)false); } 

        // Unimplemented concept functions
        [MethodImpl(AggressiveInlining)]  public Number Distance(Vector2 p) => throw new NotImplementedException();
        [MethodImpl(AggressiveInlining)]  public Number Eval(Vector2 t) => throw new NotImplementedException();
    }
}
