// Autogenerated file: DO NOT EDIT
// Created on 2025-04-07 4:05:19 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct TorusKnot: IAngularCurve3D, IClosedShape
    {
        // Fields
        [DataMember] public readonly Integer P;
        [DataMember] public readonly Integer Q;
        [DataMember] public readonly Number Radius;

        // With functions 
        [MethodImpl(AggressiveInlining)] public TorusKnot WithP(Integer p) => new TorusKnot(p, Q, Radius);
        [MethodImpl(AggressiveInlining)] public TorusKnot WithQ(Integer q) => new TorusKnot(P, q, Radius);
        [MethodImpl(AggressiveInlining)] public TorusKnot WithRadius(Number radius) => new TorusKnot(P, Q, radius);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public TorusKnot(Integer p, Integer q, Number radius) { P = p; Q = q; Radius = radius; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static TorusKnot Create(Integer p, Integer q, Number radius) => new TorusKnot(p, q, radius);

        // Static default implementation
        public static readonly TorusKnot Default = default;

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Integer, Integer, Number)(TorusKnot self) => (self.P, self.Q, self.Radius);
        [MethodImpl(AggressiveInlining)] public static implicit operator TorusKnot((Integer, Integer, Number) value) => new TorusKnot(value.Item1, value.Item2, value.Item3);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Integer p, out Integer q, out Number radius) { p = P; q = Q; radius = Radius;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(TorusKnot other) => P.Equals(other.P) && Q.Equals(other.Q) && Radius.Equals(other.Radius);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(TorusKnot other) => !P.Equals(other.P) && Q.Equals(other.Q) && Radius.Equals(other.Radius);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is TorusKnot other ? Equals(other).Value : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(P, Q, Radius);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"P\" = {P}, \"Q\" = {Q}, \"Radius\" = {Radius} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented interface functions
        [MethodImpl(AggressiveInlining)]  public Vector3 Eval(Angle t) => t.TorusKnot(this.P, this.Q).Multiply(this.Radius);
[MethodImpl(AggressiveInlining)]  public Vector3 Eval(Number t) => this.Eval(t.Turns);
[MethodImpl(AggressiveInlining)]  public IArray<Vector3> Sample(Integer numPoints){
            var _var83 = this;
            return numPoints.LinearSpace.Map((x)  => _var83.Eval(x));
        }

[MethodImpl(AggressiveInlining)]  public PolyLine3D ToPolyLine3D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 

        // Unimplemented interface functions
    }
}
