// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 8:08:08 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
public partial struct TorusKnot: IAngularCurve3D, IClosedShape
{
    // Fields
    [DataMember] public readonly Integer P;
    [DataMember] public readonly Integer Q;
    [DataMember] public readonly Number Radius;

    // With functions 
    [MethodImpl(AggressiveInlining)] public TorusKnot WithP(Integer p) => new TorusKnot(p, Q, Radius);
    [MethodImpl(AggressiveInlining)] public TorusKnot WithQ(Integer q) => new TorusKnot(P, q, Radius);
    [MethodImpl(AggressiveInlining)] public TorusKnot WithRadius(Number radius) => new TorusKnot(P, Q, radius);

    // Regular Constructor
    [MethodImpl(AggressiveInlining)] public TorusKnot(Integer p, Integer q, Number radius) { P = p; Q = q; Radius = radius; }

    // Static factory function
    [MethodImpl(AggressiveInlining)] public static TorusKnot Create(Integer p, Integer q, Number radius) => new TorusKnot(p, q, radius);

    // Implicit converters to/from value-tuples and deconstructor
    [MethodImpl(AggressiveInlining)] public static implicit operator (Integer, Integer, Number)(TorusKnot self) => (self.P, self.Q, self.Radius);
    [MethodImpl(AggressiveInlining)] public static implicit operator TorusKnot((Integer, Integer, Number) value) => new(value.Item1, value.Item2, value.Item3);
    [MethodImpl(AggressiveInlining)] public void Deconstruct(out Integer p, out Integer q, out Number radius) { p = P; q = Q; radius = Radius;  }

    // Object virtual function overrides: Equals, GetHashCode, ToString
    [MethodImpl(AggressiveInlining)] public Boolean Equals(TorusKnot other) => P.Equals(other.P) && Q.Equals(other.Q) && Radius.Equals(other.Radius);
    [MethodImpl(AggressiveInlining)] public Boolean NotEquals(TorusKnot other) => !P.Equals(other.P) && Q.Equals(other.Q) && Radius.Equals(other.Radius);
    [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is TorusKnot other ? Equals(other) : false;
    [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(P, Q, Radius);
    [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"P\" = {P}, \"Q\" = {Q}, \"Radius\" = {Radius} }}";

    // Explicit implementation of interfaces by forwarding properties to fields

    // Implemented concept functions and type functions
    [MethodImpl(AggressiveInlining)]  public Vector3 Eval(Angle t) => t.TorusKnot(this.P, this.Q).Multiply(this.Radius);
[MethodImpl(AggressiveInlining)]  public Vector3 Eval(Number t) => this.Eval(t.Turns);
[MethodImpl(AggressiveInlining)]  public IArray<Vector3> Sample(Integer numPoints){
    var _var491 = this;
    return numPoints.LinearSpace.Map((x) =>  => _var491.Eval(x);
;
}

[MethodImpl(AggressiveInlining)]  public PolyLine3D ToPolyLine3D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
[MethodImpl(AggressiveInlining)]  public Procedural<Number, TR> Combine<TR>(TorusKnot b, System.Func<TR, TR, TR> f){
    var _var494 = b;
    {
        var _var493 = this;
        {
            var _var492 = f;
            return (x) =>  => _var492.Invoke(_var493.Eval(x), _var494.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector3> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var496 = f;
    {
        var _var495 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var495.Eval(_var496.Invoke(x));
;
    }
}

public System.Func<Number, Vector3> Function { [MethodImpl(AggressiveInlining)] get {
    var _var497 = this;
    return (x) =>  => _var497.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Number, Vector3> Compose(TorusKnot b){
    var _var499 = this;
    {
        var _var498 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var498.Eval(_var499.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, TR> Combine<TR>(TorusKnot b, System.Func<TR, TR, TR> f){
    var _var502 = b;
    {
        var _var501 = this;
        {
            var _var500 = f;
            return (x) =>  => _var500.Invoke(_var501.Eval(x), _var502.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var504 = f;
    {
        var _var503 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var503.Eval(_var504.Invoke(x));
;
    }
}

public System.Func<Vector3, Number> Function { [MethodImpl(AggressiveInlining)] get {
    var _var505 = this;
    return (x) =>  => _var505.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, Number> Compose(TorusKnot b){
    var _var507 = this;
    {
        var _var506 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var506.Eval(_var507.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Union(TorusKnot b) => this.Combine(b, (a, b) =>  => a.Max(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Intersection(TorusKnot b) => this.Combine(b, (a, b) =>  => a.Min(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Difference(TorusKnot b) => this.Combine(b, (a, b) =>  => a.Max(b.Negative);

public Procedural<Vector3, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) =>  => x.Negative;
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, Boolean> Threshold(Number threshold){
    var _var508 = threshold;
    return this.Map((x) =>  => x.GreaterThanOrEquals(_var508);
;
}

public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 

    // Unimplemented concept functions
    [MethodImpl(AggressiveInlining)]  public Number Distance(Vector3 p) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public Number Eval(Vector3 t) => throw new NotImplementedException();
}
Plato.CSharpWriter.CSharpConcreteTypeWriter}
