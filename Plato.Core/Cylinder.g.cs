// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 11:25:56 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Cylinder: ISurface
    {
        // Fields
        [DataMember] public readonly Number Height;
        [DataMember] public readonly Number Radius;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Cylinder WithHeight(Number height) => new Cylinder(height, Radius);
        [MethodImpl(AggressiveInlining)] public Cylinder WithRadius(Number radius) => new Cylinder(Height, radius);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Cylinder(Number height, Number radius) { Height = height; Radius = radius; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Cylinder Create(Number height, Number radius) => new Cylinder(height, radius);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Number, Number)(Cylinder self) => (self.Height, self.Radius);
        [MethodImpl(AggressiveInlining)] public static implicit operator Cylinder((Number, Number) value) => new(value.Item1, value.Item2);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Number height, out Number radius) { height = Height; radius = Radius;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Cylinder other) => Height.Equals(other.Height) && Radius.Equals(other.Radius);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Cylinder other) => !Height.Equals(other.Height) && Radius.Equals(other.Radius);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Cylinder other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Height, Radius);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Height\" = {Height}, \"Radius\" = {Radius} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented concept functions and type functions
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, TR> Combine<TR>(Cylinder b, System.Func<TR, TR, TR> f){
            var _var884 = b;
            {
                var _var883 = this;
                {
                    var _var882 = f;
                    return (x) => _var882.Invoke(_var883.Eval(x), _var884.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var886 = f;
            {
                var _var885 = this;
                return (x) => _var885.Eval(_var886.Invoke(x));
            }
        }

        public System.Func<Vector3, Number> Function { [MethodImpl(AggressiveInlining)] get {
            var _var887 = this;
            return (x) => _var887.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, Number> Compose(Cylinder b){
            var _var889 = this;
            {
                var _var888 = b;
                return (x) => _var888.Eval(_var889.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Union(Cylinder b) => this.Combine(b, (a, b) => a.Max(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Intersection(Cylinder b) => this.Combine(b, (a, b) => a.Min(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Difference(Cylinder b) => this.Combine(b, (a, b) => a.Max(b.Negative));
        public Procedural<Vector3, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) => x.Negative); } 

        // Unimplemented concept functions
        [MethodImpl(AggressiveInlining)]  public Number Distance(Vector3 p) => throw new NotImplementedException();
        [MethodImpl(AggressiveInlining)]  public Number Eval(Vector3 t) => throw new NotImplementedException();
    }
}
