// Autogenerated file: DO NOT EDIT
// Created on 2025-03-06 1:31:00 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Line2D: IPolyLine2D, IOpenShape2D, IArray<Vector2>, IInterval<Vector2>
    {
        // Fields
        [DataMember] public readonly Vector2 A;
        [DataMember] public readonly Vector2 B;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Line2D WithA(Vector2 a) => new Line2D(a, B);
        [MethodImpl(AggressiveInlining)] public Line2D WithB(Vector2 b) => new Line2D(A, b);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Line2D(Vector2 a, Vector2 b) { A = a; B = b; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Line2D Create(Vector2 a, Vector2 b) => new Line2D(a, b);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Vector2, Vector2)(Line2D self) => (self.A, self.B);
        [MethodImpl(AggressiveInlining)] public static implicit operator Line2D((Vector2, Vector2) value) => new(value.Item1, value.Item2);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Vector2 a, out Vector2 b) { a = A; b = B;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Line2D other) => A.Equals(other.A) && B.Equals(other.B);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Line2D other) => !A.Equals(other.A) && B.Equals(other.B);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Line2D other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(A, B);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"A\" = {A}, \"B\" = {B} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Array predefined functions
        [MethodImpl(AggressiveInlining)] public Line2D(IReadOnlyList<Vector2> xs) : this(xs[0], xs[1]) { }
        [MethodImpl(AggressiveInlining)] public Line2D(Vector2[] xs) : this(xs[0], xs[1]) { }
        [MethodImpl(AggressiveInlining)] public static Line2D Create(IReadOnlyList<Vector2> xs) => new Line2D(xs);
        // Implementation of IReadOnlyList
        [MethodImpl(AggressiveInlining)] public System.Collections.Generic.IEnumerator<Vector2> GetEnumerator() => new ArrayEnumerator<Vector2>(this);
        [MethodImpl(AggressiveInlining)] System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => GetEnumerator();
        Vector2 System.Collections.Generic.IReadOnlyList<Vector2>.this[int n] { [MethodImpl(AggressiveInlining)] get => At(n); }
        int System.Collections.Generic.IReadOnlyCollection<Vector2>.Count { [MethodImpl(AggressiveInlining)] get => this.Count; }

        // Implemented concept functions and type functions
        public Number Length { [MethodImpl(AggressiveInlining)] get  => this.B.Subtract(this.A).Length; } 
        public Vector2 Direction { [MethodImpl(AggressiveInlining)] get  => this.B.Subtract(this.A); } 
        public Ray2D Ray2D { [MethodImpl(AggressiveInlining)] get  => (this.A, this.Direction); } 
        [MethodImpl(AggressiveInlining)]  public static implicit operator Ray2D(Line2D x) => x.Ray2D;
        public Line2D Reverse { [MethodImpl(AggressiveInlining)] get  => (this.B, this.A); } 
        public Vector2 Start { [MethodImpl(AggressiveInlining)] get  => this.A; } 
        public Vector2 End { [MethodImpl(AggressiveInlining)] get  => this.B; } 
        [MethodImpl(AggressiveInlining)]  public Vector2 Eval(Number t) => this.A.Lerp(this.B, t);
        public Line3D To3D { [MethodImpl(AggressiveInlining)] get  => (this.A.To3D, this.B.To3D); } 
        public Line3D Line3D { [MethodImpl(AggressiveInlining)] get  => this.To3D; } 
        [MethodImpl(AggressiveInlining)]  public static implicit operator Line3D(Line2D x) => x.Line3D;
        public IArray<Vector2> Points { [MethodImpl(AggressiveInlining)] get  => Intrinsics.MakeArray<Vector2>(this.A, this.B); } 
        public IArray<Line2D> Lines { [MethodImpl(AggressiveInlining)] get  => this.Points.WithNext((a, b) => new Line2D(a, b), this.Closed); } 
        [MethodImpl(AggressiveInlining)]  public IArray<Vector2> Sample(Integer numPoints){
            var _var89 = this;
            return numPoints.LinearSpace.Map((x) => _var89.Eval(x));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine2D ToPolyLine2D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
        public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)false); } 
        public Vector2 Size { [MethodImpl(AggressiveInlining)] get  => this.End.Subtract(this.Start); } 
        [MethodImpl(AggressiveInlining)]  public Vector2 Lerp(Number amount) => this.Start.Lerp(this.End, amount);
        public Vector2 Center { [MethodImpl(AggressiveInlining)] get  => this.Lerp(((Number)0.5)); } 
        [MethodImpl(AggressiveInlining)]  public Boolean Contains(Vector2 value) => value.Between(this.Start, this.End);
        [MethodImpl(AggressiveInlining)]  public Boolean Contains(Line2D y) => this.Contains(y.Start).And(this.Contains(y.End));
        [MethodImpl(AggressiveInlining)]  public Boolean Overlaps(Line2D y) => this.Contains(y.Start).Or(this.Contains(y.End).Or(y.Contains(this.Start).Or(y.Contains(this.End))));
        [MethodImpl(AggressiveInlining)]  public Tuple2<Line2D, Line2D> SplitAt(Number t) => (this.Left(t), this.Right(t));
        public Tuple2<Line2D, Line2D> Split { [MethodImpl(AggressiveInlining)] get  => this.SplitAt(((Number)0.5)); } 
        [MethodImpl(AggressiveInlining)]  public Line2D Left(Number t) => (this.Start, this.Lerp(t));
        [MethodImpl(AggressiveInlining)]  public Line2D Right(Number t) => (this.Lerp(t), this.End);
        [MethodImpl(AggressiveInlining)]  public Line2D MoveTo(Vector2 v) => (v, v.Add(this.Size));
        public Line2D LeftHalf { [MethodImpl(AggressiveInlining)] get  => this.Left(((Number)0.5)); } 
        public Line2D RightHalf { [MethodImpl(AggressiveInlining)] get  => this.Right(((Number)0.5)); } 
        [MethodImpl(AggressiveInlining)]  public Line2D Recenter(Vector2 c) => (c.Subtract(this.Size.Half), c.Add(this.Size.Half));
        [MethodImpl(AggressiveInlining)]  public Line2D Clamp(Line2D y) => (this.Clamp(y.Start), this.Clamp(y.End));
        [MethodImpl(AggressiveInlining)]  public Vector2 Clamp(Vector2 value) => value.Clamp(this.Start, this.End);
        [MethodImpl(AggressiveInlining)]  public IArray<Vector2> LinearSpace(Integer count){
            var _var90 = this;
            return count.LinearSpace.Map((x) => _var90.Lerp(x));
        }

        [MethodImpl(AggressiveInlining)]  public IArray<Vector2> LinearSpaceExclusive(Integer count){
            var _var91 = this;
            return count.LinearSpaceExclusive.Map((x) => _var91.Lerp(x));
        }

        [MethodImpl(AggressiveInlining)]  public IArray<Vector2> GeometricSpace(Integer count){
            var _var92 = this;
            return count.GeometricSpace.Map((x) => _var92.Lerp(x));
        }

        [MethodImpl(AggressiveInlining)]  public IArray<Vector2> GeometricSpaceExclusive(Integer count){
            var _var93 = this;
            return count.GeometricSpaceExclusive.Map((x) => _var93.Lerp(x));
        }

        [MethodImpl(AggressiveInlining)]  public Line2D Subdivide(Number start, Number end) => (this.Lerp(start), this.Lerp(end));
        [MethodImpl(AggressiveInlining)]  public Line2D Subdivide(NumberInterval subInterval) => this.Subdivide(subInterval.Start, subInterval.End);
        [MethodImpl(AggressiveInlining)]  public IArray<Line2D> Subdivide(Integer count){
            var _var94 = this;
            return count.Intervals.Map((i) => _var94.Subdivide(i));
        }


        // Unimplemented concept functions
        [MethodImpl(AggressiveInlining)]  public Number Distance(Vector2 p) => throw new NotImplementedException();
        public Integer Count { [MethodImpl(AggressiveInlining)] get => 2; }
        [MethodImpl(AggressiveInlining)]  public Vector2 At(Integer n) => n == 0 ? A : n == 1 ? B : throw new System.IndexOutOfRangeException();
        public Vector2 this[Integer n] { [MethodImpl(AggressiveInlining)] get => At(n); }
    }
}
