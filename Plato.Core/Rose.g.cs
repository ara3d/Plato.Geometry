// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 11:25:56 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Rose: IPolarCurve, IClosedShape
    {
        // Fields
        [DataMember] public readonly Integer K;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Rose WithK(Integer k) => new Rose(k);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Rose(Integer k) { K = k; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Rose Create(Integer k) => new Rose(k);

        // Implicit converters to/from single field
        [MethodImpl(AggressiveInlining)] public static implicit operator Integer(Rose self) => self.K;
        [MethodImpl(AggressiveInlining)] public static implicit operator Rose(Integer value) => new Rose(value);

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Rose other) => K.Equals(other.K);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Rose other) => !K.Equals(other.K);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Rose other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(K);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"K\" = {K} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented concept functions and type functions
        [MethodImpl(AggressiveInlining)]  public Number GetRadius(Angle t) => t.Rose(this.K);
        [MethodImpl(AggressiveInlining)]  public PolarCoordinate EvalPolar(Angle t) => (this.GetRadius(t), t);
        [MethodImpl(AggressiveInlining)]  public Vector2 Eval(Angle t) => this.EvalPolar(t);
        [MethodImpl(AggressiveInlining)]  public Vector2 Eval(Number t) => this.Eval(t.Turns);
        [MethodImpl(AggressiveInlining)]  public IArray<Vector2> Sample(Integer numPoints){
            var _var297 = this;
            return numPoints.LinearSpace.Map((x) => _var297.Eval(x));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine2D ToPolyLine2D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
        [MethodImpl(AggressiveInlining)]  public Procedural<Number, TR> Combine<TR>(Rose b, System.Func<TR, TR, TR> f){
            var _var300 = b;
            {
                var _var299 = this;
                {
                    var _var298 = f;
                    return (x) => _var298.Invoke(_var299.Eval(x), _var300.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector2> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var302 = f;
            {
                var _var301 = this;
                return (x) => _var301.Eval(_var302.Invoke(x));
            }
        }

        public System.Func<Number, Vector2> Function { [MethodImpl(AggressiveInlining)] get {
            var _var303 = this;
            return (x) => _var303.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Number, Vector2> Compose(Rose b){
            var _var305 = this;
            {
                var _var304 = b;
                return (x) => _var304.Eval(_var305.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, TR> Combine<TR>(Rose b, System.Func<TR, TR, TR> f){
            var _var308 = b;
            {
                var _var307 = this;
                {
                    var _var306 = f;
                    return (x) => _var306.Invoke(_var307.Eval(x), _var308.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var310 = f;
            {
                var _var309 = this;
                return (x) => _var309.Eval(_var310.Invoke(x));
            }
        }

        public System.Func<Vector2, Number> Function { [MethodImpl(AggressiveInlining)] get {
            var _var311 = this;
            return (x) => _var311.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Number> Compose(Rose b){
            var _var313 = this;
            {
                var _var312 = b;
                return (x) => _var312.Eval(_var313.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Union(Rose b) => this.Combine(b, (a, b) => a.Max(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Intersection(Rose b) => this.Combine(b, (a, b) => a.Min(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Difference(Rose b) => this.Combine(b, (a, b) => a.Max(b.Negative));
        public Procedural<Vector2, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) => x.Negative); } 
        public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 

        // Unimplemented concept functions
        [MethodImpl(AggressiveInlining)]  public Number Distance(Vector2 p) => throw new NotImplementedException();
        [MethodImpl(AggressiveInlining)]  public Number Eval(Vector2 t) => throw new NotImplementedException();
    }
}
