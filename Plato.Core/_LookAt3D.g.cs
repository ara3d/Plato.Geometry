// Autogenerated file: DO NOT EDIT
// Created on 2025-04-08 12:25:04 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct LookAt3D: IRotation3D
    {
        // Fields
        [DataMember] public readonly Point3D Origin;
        [DataMember] public readonly Point3D Target;

        // With functions 
        [MethodImpl(AggressiveInlining)] public LookAt3D WithOrigin(Point3D origin) => new LookAt3D(origin, Target);
        [MethodImpl(AggressiveInlining)] public LookAt3D WithTarget(Point3D target) => new LookAt3D(Origin, target);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public LookAt3D(Point3D origin, Point3D target) { Origin = origin; Target = target; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static LookAt3D Create(Point3D origin, Point3D target) => new LookAt3D(origin, target);

        // Static default implementation
        public static readonly LookAt3D Default = default;

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Point3D, Point3D)(LookAt3D self) => (self.Origin, self.Target);
        [MethodImpl(AggressiveInlining)] public static implicit operator LookAt3D((Point3D, Point3D) value) => new LookAt3D(value.Item1, value.Item2);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Point3D origin, out Point3D target) { origin = Origin; target = Target;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(LookAt3D other) => Origin.Equals(other.Origin) && Target.Equals(other.Target);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(LookAt3D other) => !Origin.Equals(other.Origin) && Target.Equals(other.Target);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is LookAt3D other ? Equals(other).Value : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Origin, Target);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Origin\" = {Origin}, \"Target\" = {Target} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented interface functions
        // AMBIGUOUS FUNCTIONS 2
        public Matrix4x4 Matrix { [MethodImpl(AggressiveInlining)] get  => Matrix4x4.CreateWorld(((Number)0), this.Forward, Constants.ZAxis3D); } 
public static LookAt3D Identity { [MethodImpl(AggressiveInlining)] get  => (Constants.Origin3D, Constants.YAxis3D); } 
public Vector3 Forward { [MethodImpl(AggressiveInlining)] get  => this.Target.Subtract(this.Origin).Normalize; } 
[MethodImpl(AggressiveInlining)]  public Point3D Multiply(Point3D v) => this.TransformPoint(v);
[MethodImpl(AggressiveInlining)]  public static Point3D operator *(LookAt3D x, Point3D v) => x.Multiply(v);
        [MethodImpl(AggressiveInlining)]  public Vector3 Multiply(Vector3 v) => this.TransformNormal(v);
[MethodImpl(AggressiveInlining)]  public static Vector3 operator *(LookAt3D x, Vector3 v) => x.Multiply(v);
        [MethodImpl(AggressiveInlining)]  public MatrixTransform3D Multiply(Matrix4x4 m) => this.Compose(m);
[MethodImpl(AggressiveInlining)]  public static MatrixTransform3D operator *(LookAt3D x, Matrix4x4 m) => x.Multiply(m);
        [MethodImpl(AggressiveInlining)]  public Point3D TransformPoint(Point3D v) => v.Vector3.Transform(this.Matrix);
[MethodImpl(AggressiveInlining)]  public Vector3 TransformNormal(Vector3 v) => v.TransformNormal(this.Matrix);
public Matrix4x4 Matrix4x4 { [MethodImpl(AggressiveInlining)] get  => this.Matrix; } 
[MethodImpl(AggressiveInlining)]  public static implicit operator Matrix4x4(LookAt3D t) => t.Matrix4x4;
        public MatrixTransform3D Invert { [MethodImpl(AggressiveInlining)] get  => this.Matrix.Invert; } 
[MethodImpl(AggressiveInlining)]  public MatrixTransform3D Compose(Matrix4x4 m) => this.Matrix.Multiply(m);
public Rotation3D Rotation { [MethodImpl(AggressiveInlining)] get  => this.Matrix.Rotation; } 
public Translation3D Translation { [MethodImpl(AggressiveInlining)] get  => this.Matrix.Translation; } 
public Pose3D Pose { [MethodImpl(AggressiveInlining)] get  => (this.Matrix.Translation, this.Matrix.Rotation); } 

        // Unimplemented interface functions
        public Quaternion Quaternion => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public static implicit operator Quaternion(LookAt3D x) => x.Quaternion;
    }
}
