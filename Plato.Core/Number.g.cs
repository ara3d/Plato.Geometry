// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 12:06:56 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Number: IRealNumber<Number>
    {
        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Number Create() => new Number();

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Number other) => Value.Equals(other.Value);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Number other) => !Value.Equals(other.Value);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Number other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public static Boolean operator==(Number a, Number b) => a.Equals(b);
        [MethodImpl(AggressiveInlining)] public static Boolean operator!=(Number a, Number b) => !a.Equals(b);
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Value.GetHashCode();
        [MethodImpl(AggressiveInlining)] public override string ToString() => Value.ToString();

        // Explicit implementation of interfaces by forwarding properties to fields

        // Vectorspace predefined functions
        public static readonly int NumComponents = 1;
        public IArray<Number> Components { [MethodImpl(AggressiveInlining)] get => Intrinsics.MakeArray<Number>(); }
        [MethodImpl(AggressiveInlining)] public static Number CreateFromComponents(IArray<Number> numbers) => new Number();

        // Implemented concept functions and type functions
        [MethodImpl(AggressiveInlining)]  public Number Linear(Number m, Number b) => m.Multiply(this).Add(b);
        [MethodImpl(AggressiveInlining)]  public Vector2 Linear(Vector2 m, Vector2 b) => m.Multiply(this).Add(b);
        [MethodImpl(AggressiveInlining)]  public Vector3 Linear(Vector3 m, Vector3 b) => m.Multiply(this).Add(b);
        [MethodImpl(AggressiveInlining)]  public Vector4 Linear(Vector4 m, Vector4 b) => m.Multiply(this).Add(b);
        [MethodImpl(AggressiveInlining)]  public Vector8 Linear(Vector8 m, Vector8 b) => m.Multiply(this).Add(b);
        [MethodImpl(AggressiveInlining)]  public Number Quadratic(Number a, Number b, Number c) => a.Multiply(this.Sqr).Add(b.Multiply(this).Add(c));
        [MethodImpl(AggressiveInlining)]  public Vector2 Quadratic(Vector2 a, Vector2 b, Vector2 c) => a.Multiply(this.Sqr).Add(b.Multiply(this).Add(c));
        [MethodImpl(AggressiveInlining)]  public Vector3 Quadratic(Vector3 a, Vector3 b, Vector3 c) => a.Multiply(this.Sqr).Add(b.Multiply(this).Add(c));
        [MethodImpl(AggressiveInlining)]  public Vector4 Quadratic(Vector4 a, Vector4 b, Vector4 c) => a.Multiply(this.Sqr).Add(b.Multiply(this).Add(c));
        [MethodImpl(AggressiveInlining)]  public Vector8 Quadratic(Vector8 a, Vector8 b, Vector8 c) => a.Multiply(this.Sqr).Add(b.Multiply(this).Add(c));
        [MethodImpl(AggressiveInlining)]  public Number Cubic(Number a, Number b, Number c, Number d) => a.Multiply(this.Cube).Add(b.Multiply(this.Sqr).Add(c.Multiply(this).Add(d)));
        [MethodImpl(AggressiveInlining)]  public Vector2 Cubic(Vector2 a, Vector2 b, Vector2 c, Vector2 d) => a.Multiply(this.Cube).Add(b.Multiply(this.Sqr).Add(c.Multiply(this).Add(d)));
        [MethodImpl(AggressiveInlining)]  public Vector3 Cubic(Vector3 a, Vector3 b, Vector3 c, Vector3 d) => a.Multiply(this.Cube).Add(b.Multiply(this.Sqr).Add(c.Multiply(this).Add(d)));
        [MethodImpl(AggressiveInlining)]  public Vector4 Cubic(Vector4 a, Vector4 b, Vector4 c, Vector4 d) => a.Multiply(this.Cube).Add(b.Multiply(this.Sqr).Add(c.Multiply(this).Add(d)));
        [MethodImpl(AggressiveInlining)]  public Vector8 Cubic(Vector8 a, Vector8 b, Vector8 c, Vector8 d) => a.Multiply(this.Cube).Add(b.Multiply(this.Sqr).Add(c.Multiply(this).Add(d)));
        [MethodImpl(AggressiveInlining)]  public Number Quartic(Number a, Number b, Number c, Number d, Number e) => a.Multiply(this.Pow(((Integer)4))).Add(b.Multiply(this.Cube).Add(c.Multiply(this.Sqr).Add(d.Multiply(this).Add(e))));
        [MethodImpl(AggressiveInlining)]  public Vector2 Quartic(Vector2 a, Vector2 b, Vector2 c, Vector2 d, Vector2 e) => a.Multiply(this.Pow(((Integer)4))).Add(b.Multiply(this.Cube).Add(c.Multiply(this.Sqr).Add(d.Multiply(this).Add(e))));
        [MethodImpl(AggressiveInlining)]  public Vector3 Quartic(Vector3 a, Vector3 b, Vector3 c, Vector3 d, Vector3 e) => a.Multiply(this.Pow(((Integer)4))).Add(b.Multiply(this.Cube).Add(c.Multiply(this.Sqr).Add(d.Multiply(this).Add(e))));
        [MethodImpl(AggressiveInlining)]  public Vector4 Quartic(Vector4 a, Vector4 b, Vector4 c, Vector4 d, Vector4 e) => a.Multiply(this.Pow(((Integer)4))).Add(b.Multiply(this.Cube).Add(c.Multiply(this.Sqr).Add(d.Multiply(this).Add(e))));
        [MethodImpl(AggressiveInlining)]  public Vector8 Quartic(Vector8 a, Vector8 b, Vector8 c, Vector8 d, Vector8 e) => a.Multiply(this.Pow(((Integer)4))).Add(b.Multiply(this.Cube).Add(c.Multiply(this.Sqr).Add(d.Multiply(this).Add(e))));
        [MethodImpl(AggressiveInlining)]  public Number LinearDerivative(Number m, Number b) => m;
        [MethodImpl(AggressiveInlining)]  public Vector2 LinearDerivative(Vector2 m, Vector2 b) => m;
        [MethodImpl(AggressiveInlining)]  public Vector3 LinearDerivative(Vector3 m, Vector3 b) => m;
        [MethodImpl(AggressiveInlining)]  public Vector4 LinearDerivative(Vector4 m, Vector4 b) => m;
        [MethodImpl(AggressiveInlining)]  public Vector8 LinearDerivative(Vector8 m, Vector8 b) => m;
        [MethodImpl(AggressiveInlining)]  public Number LinearSecondDerivative(Number m, Number b) => ((Number)0);
        [MethodImpl(AggressiveInlining)]  public Vector2 LinearSecondDerivative(Vector2 m, Vector2 b) => ((Number)0);
        [MethodImpl(AggressiveInlining)]  public Vector3 LinearSecondDerivative(Vector3 m, Vector3 b) => ((Number)0);
        [MethodImpl(AggressiveInlining)]  public Vector4 LinearSecondDerivative(Vector4 m, Vector4 b) => ((Number)0);
        [MethodImpl(AggressiveInlining)]  public Vector8 LinearSecondDerivative(Vector8 m, Vector8 b) => ((Number)0);
        [MethodImpl(AggressiveInlining)]  public Number QuadraticDerivative(Number a, Number b, Number c) => a.Multiply(((Number)2)).Multiply(this).Add(b);
        [MethodImpl(AggressiveInlining)]  public Vector2 QuadraticDerivative(Vector2 a, Vector2 b, Vector2 c) => a.Multiply(((Number)2)).Multiply(this).Add(b);
        [MethodImpl(AggressiveInlining)]  public Vector3 QuadraticDerivative(Vector3 a, Vector3 b, Vector3 c) => a.Multiply(((Number)2)).Multiply(this).Add(b);
        [MethodImpl(AggressiveInlining)]  public Vector4 QuadraticDerivative(Vector4 a, Vector4 b, Vector4 c) => a.Multiply(((Number)2)).Multiply(this).Add(b);
        [MethodImpl(AggressiveInlining)]  public Vector8 QuadraticDerivative(Vector8 a, Vector8 b, Vector8 c) => a.Multiply(((Number)2)).Multiply(this).Add(b);
        [MethodImpl(AggressiveInlining)]  public Number QuadraticSecondDerivative(Number a, Number b, Number c) => a.Multiply(((Number)2));
        [MethodImpl(AggressiveInlining)]  public Vector2 QuadraticSecondDerivative(Vector2 a, Vector2 b, Vector2 c) => a.Multiply(((Number)2));
        [MethodImpl(AggressiveInlining)]  public Vector3 QuadraticSecondDerivative(Vector3 a, Vector3 b, Vector3 c) => a.Multiply(((Number)2));
        [MethodImpl(AggressiveInlining)]  public Vector4 QuadraticSecondDerivative(Vector4 a, Vector4 b, Vector4 c) => a.Multiply(((Number)2));
        [MethodImpl(AggressiveInlining)]  public Vector8 QuadraticSecondDerivative(Vector8 a, Vector8 b, Vector8 c) => a.Multiply(((Number)2));
        [MethodImpl(AggressiveInlining)]  public Number CubicDerivative(Number a, Number b, Number c, Number d) => a.Multiply(((Number)3)).Multiply(this.Sqr).Add(b.Multiply(((Number)2)).Multiply(this).Add(c));
        [MethodImpl(AggressiveInlining)]  public Vector2 CubicDerivative(Vector2 a, Vector2 b, Vector2 c, Vector2 d) => a.Multiply(((Number)3)).Multiply(this.Sqr).Add(b.Multiply(((Number)2)).Multiply(this).Add(c));
        [MethodImpl(AggressiveInlining)]  public Vector3 CubicDerivative(Vector3 a, Vector3 b, Vector3 c, Vector3 d) => a.Multiply(((Number)3)).Multiply(this.Sqr).Add(b.Multiply(((Number)2)).Multiply(this).Add(c));
        [MethodImpl(AggressiveInlining)]  public Vector4 CubicDerivative(Vector4 a, Vector4 b, Vector4 c, Vector4 d) => a.Multiply(((Number)3)).Multiply(this.Sqr).Add(b.Multiply(((Number)2)).Multiply(this).Add(c));
        [MethodImpl(AggressiveInlining)]  public Vector8 CubicDerivative(Vector8 a, Vector8 b, Vector8 c, Vector8 d) => a.Multiply(((Number)3)).Multiply(this.Sqr).Add(b.Multiply(((Number)2)).Multiply(this).Add(c));
        [MethodImpl(AggressiveInlining)]  public Number CubicSecondDerivative(Number a, Number b, Number c, Number d) => a.Multiply(((Number)6)).Multiply(this).Add(b.Multiply(((Number)2)));
        [MethodImpl(AggressiveInlining)]  public Vector2 CubicSecondDerivative(Vector2 a, Vector2 b, Vector2 c, Vector2 d) => a.Multiply(((Number)6)).Multiply(this).Add(b.Multiply(((Number)2)));
        [MethodImpl(AggressiveInlining)]  public Vector3 CubicSecondDerivative(Vector3 a, Vector3 b, Vector3 c, Vector3 d) => a.Multiply(((Number)6)).Multiply(this).Add(b.Multiply(((Number)2)));
        [MethodImpl(AggressiveInlining)]  public Vector4 CubicSecondDerivative(Vector4 a, Vector4 b, Vector4 c, Vector4 d) => a.Multiply(((Number)6)).Multiply(this).Add(b.Multiply(((Number)2)));
        [MethodImpl(AggressiveInlining)]  public Vector8 CubicSecondDerivative(Vector8 a, Vector8 b, Vector8 c, Vector8 d) => a.Multiply(((Number)6)).Multiply(this).Add(b.Multiply(((Number)2)));
        [MethodImpl(AggressiveInlining)]  public Number QuarticDerivative(Number a, Number b, Number c, Number d, Number e) => a.Multiply(((Number)4)).Multiply(this.Pow(((Integer)3))).Add(b.Multiply(((Number)3)).Multiply(this.Sqr).Add(c.Multiply(((Number)2)).Multiply(this).Add(d)));
        [MethodImpl(AggressiveInlining)]  public Vector2 QuarticDerivative(Vector2 a, Vector2 b, Vector2 c, Vector2 d, Vector2 e) => a.Multiply(((Number)4)).Multiply(this.Pow(((Integer)3))).Add(b.Multiply(((Number)3)).Multiply(this.Sqr).Add(c.Multiply(((Number)2)).Multiply(this).Add(d)));
        [MethodImpl(AggressiveInlining)]  public Vector3 QuarticDerivative(Vector3 a, Vector3 b, Vector3 c, Vector3 d, Vector3 e) => a.Multiply(((Number)4)).Multiply(this.Pow(((Integer)3))).Add(b.Multiply(((Number)3)).Multiply(this.Sqr).Add(c.Multiply(((Number)2)).Multiply(this).Add(d)));
        [MethodImpl(AggressiveInlining)]  public Vector4 QuarticDerivative(Vector4 a, Vector4 b, Vector4 c, Vector4 d, Vector4 e) => a.Multiply(((Number)4)).Multiply(this.Pow(((Integer)3))).Add(b.Multiply(((Number)3)).Multiply(this.Sqr).Add(c.Multiply(((Number)2)).Multiply(this).Add(d)));
        [MethodImpl(AggressiveInlining)]  public Vector8 QuarticDerivative(Vector8 a, Vector8 b, Vector8 c, Vector8 d, Vector8 e) => a.Multiply(((Number)4)).Multiply(this.Pow(((Integer)3))).Add(b.Multiply(((Number)3)).Multiply(this.Sqr).Add(c.Multiply(((Number)2)).Multiply(this).Add(d)));
        [MethodImpl(AggressiveInlining)]  public Number QuarticSecondDerivative(Number a, Number b, Number c, Number d, Number e) => a.Multiply(((Number)12)).Multiply(this.Sqr).Add(b.Multiply(((Number)6)).Multiply(this).Add(c.Multiply(((Number)2))));
        [MethodImpl(AggressiveInlining)]  public Vector2 QuarticSecondDerivative(Vector2 a, Vector2 b, Vector2 c, Vector2 d, Vector2 e) => a.Multiply(((Number)12)).Multiply(this.Sqr).Add(b.Multiply(((Number)6)).Multiply(this).Add(c.Multiply(((Number)2))));
        [MethodImpl(AggressiveInlining)]  public Vector3 QuarticSecondDerivative(Vector3 a, Vector3 b, Vector3 c, Vector3 d, Vector3 e) => a.Multiply(((Number)12)).Multiply(this.Sqr).Add(b.Multiply(((Number)6)).Multiply(this).Add(c.Multiply(((Number)2))));
        [MethodImpl(AggressiveInlining)]  public Vector4 QuarticSecondDerivative(Vector4 a, Vector4 b, Vector4 c, Vector4 d, Vector4 e) => a.Multiply(((Number)12)).Multiply(this.Sqr).Add(b.Multiply(((Number)6)).Multiply(this).Add(c.Multiply(((Number)2))));
        [MethodImpl(AggressiveInlining)]  public Vector8 QuarticSecondDerivative(Vector8 a, Vector8 b, Vector8 c, Vector8 d, Vector8 e) => a.Multiply(((Number)12)).Multiply(this.Sqr).Add(b.Multiply(((Number)6)).Multiply(this).Add(c.Multiply(((Number)2))));
        [MethodImpl(AggressiveInlining)]  public Number CubicBezier(Number a, Number b, Number c, Number d) => a.Multiply(((Number)1).Subtract(this).Cube).Add(b.Multiply(((Number)3).Multiply(((Number)1).Subtract(this).Sqr.Multiply(this))).Add(c.Multiply(((Number)3).Multiply(((Number)1).Subtract(this).Multiply(this.Sqr))).Add(d.Multiply(this.Cube))));
        [MethodImpl(AggressiveInlining)]  public Vector2 CubicBezier(Vector2 a, Vector2 b, Vector2 c, Vector2 d) => a.Multiply(((Number)1).Subtract(this).Cube).Add(b.Multiply(((Number)3).Multiply(((Number)1).Subtract(this).Sqr.Multiply(this))).Add(c.Multiply(((Number)3).Multiply(((Number)1).Subtract(this).Multiply(this.Sqr))).Add(d.Multiply(this.Cube))));
        [MethodImpl(AggressiveInlining)]  public Vector3 CubicBezier(Vector3 a, Vector3 b, Vector3 c, Vector3 d) => a.Multiply(((Number)1).Subtract(this).Cube).Add(b.Multiply(((Number)3).Multiply(((Number)1).Subtract(this).Sqr.Multiply(this))).Add(c.Multiply(((Number)3).Multiply(((Number)1).Subtract(this).Multiply(this.Sqr))).Add(d.Multiply(this.Cube))));
        [MethodImpl(AggressiveInlining)]  public Vector4 CubicBezier(Vector4 a, Vector4 b, Vector4 c, Vector4 d) => a.Multiply(((Number)1).Subtract(this).Cube).Add(b.Multiply(((Number)3).Multiply(((Number)1).Subtract(this).Sqr.Multiply(this))).Add(c.Multiply(((Number)3).Multiply(((Number)1).Subtract(this).Multiply(this.Sqr))).Add(d.Multiply(this.Cube))));
        [MethodImpl(AggressiveInlining)]  public Vector8 CubicBezier(Vector8 a, Vector8 b, Vector8 c, Vector8 d) => a.Multiply(((Number)1).Subtract(this).Cube).Add(b.Multiply(((Number)3).Multiply(((Number)1).Subtract(this).Sqr.Multiply(this))).Add(c.Multiply(((Number)3).Multiply(((Number)1).Subtract(this).Multiply(this.Sqr))).Add(d.Multiply(this.Cube))));
        [MethodImpl(AggressiveInlining)]  public Number CubicBezierDerivative(Number a, Number b, Number c, Number d) => b.Subtract(a).Multiply(((Number)3).Multiply(((Number)1).Subtract(this).Sqr)).Add(c.Subtract(b).Multiply(((Number)6).Multiply(((Number)1).Subtract(this).Multiply(this))).Add(d.Subtract(c).Multiply(((Number)3).Multiply(this.Sqr))));
        [MethodImpl(AggressiveInlining)]  public Vector2 CubicBezierDerivative(Vector2 a, Vector2 b, Vector2 c, Vector2 d) => b.Subtract(a).Multiply(((Number)3).Multiply(((Number)1).Subtract(this).Sqr)).Add(c.Subtract(b).Multiply(((Number)6).Multiply(((Number)1).Subtract(this).Multiply(this))).Add(d.Subtract(c).Multiply(((Number)3).Multiply(this.Sqr))));
        [MethodImpl(AggressiveInlining)]  public Vector3 CubicBezierDerivative(Vector3 a, Vector3 b, Vector3 c, Vector3 d) => b.Subtract(a).Multiply(((Number)3).Multiply(((Number)1).Subtract(this).Sqr)).Add(c.Subtract(b).Multiply(((Number)6).Multiply(((Number)1).Subtract(this).Multiply(this))).Add(d.Subtract(c).Multiply(((Number)3).Multiply(this.Sqr))));
        [MethodImpl(AggressiveInlining)]  public Vector4 CubicBezierDerivative(Vector4 a, Vector4 b, Vector4 c, Vector4 d) => b.Subtract(a).Multiply(((Number)3).Multiply(((Number)1).Subtract(this).Sqr)).Add(c.Subtract(b).Multiply(((Number)6).Multiply(((Number)1).Subtract(this).Multiply(this))).Add(d.Subtract(c).Multiply(((Number)3).Multiply(this.Sqr))));
        [MethodImpl(AggressiveInlining)]  public Vector8 CubicBezierDerivative(Vector8 a, Vector8 b, Vector8 c, Vector8 d) => b.Subtract(a).Multiply(((Number)3).Multiply(((Number)1).Subtract(this).Sqr)).Add(c.Subtract(b).Multiply(((Number)6).Multiply(((Number)1).Subtract(this).Multiply(this))).Add(d.Subtract(c).Multiply(((Number)3).Multiply(this.Sqr))));
        [MethodImpl(AggressiveInlining)]  public Number CubicBezierSecondDerivative(Number a, Number b, Number c, Number d) => c.Subtract(b.Multiply(((Number)2)).Add(a)).Multiply(((Number)6).Multiply(((Number)1).Subtract(this))).Add(d.Subtract(c.Multiply(((Number)2)).Add(b)).Multiply(((Number)6).Multiply(this)));
        [MethodImpl(AggressiveInlining)]  public Vector2 CubicBezierSecondDerivative(Vector2 a, Vector2 b, Vector2 c, Vector2 d) => c.Subtract(b.Multiply(((Number)2)).Add(a)).Multiply(((Number)6).Multiply(((Number)1).Subtract(this))).Add(d.Subtract(c.Multiply(((Number)2)).Add(b)).Multiply(((Number)6).Multiply(this)));
        [MethodImpl(AggressiveInlining)]  public Vector3 CubicBezierSecondDerivative(Vector3 a, Vector3 b, Vector3 c, Vector3 d) => c.Subtract(b.Multiply(((Number)2)).Add(a)).Multiply(((Number)6).Multiply(((Number)1).Subtract(this))).Add(d.Subtract(c.Multiply(((Number)2)).Add(b)).Multiply(((Number)6).Multiply(this)));
        [MethodImpl(AggressiveInlining)]  public Vector4 CubicBezierSecondDerivative(Vector4 a, Vector4 b, Vector4 c, Vector4 d) => c.Subtract(b.Multiply(((Number)2)).Add(a)).Multiply(((Number)6).Multiply(((Number)1).Subtract(this))).Add(d.Subtract(c.Multiply(((Number)2)).Add(b)).Multiply(((Number)6).Multiply(this)));
        [MethodImpl(AggressiveInlining)]  public Vector8 CubicBezierSecondDerivative(Vector8 a, Vector8 b, Vector8 c, Vector8 d) => c.Subtract(b.Multiply(((Number)2)).Add(a)).Multiply(((Number)6).Multiply(((Number)1).Subtract(this))).Add(d.Subtract(c.Multiply(((Number)2)).Add(b)).Multiply(((Number)6).Multiply(this)));
        [MethodImpl(AggressiveInlining)]  public Number QuadraticBezier(Number a, Number b, Number c) => a.Multiply(((Number)1).Subtract(this).Sqr).Add(b.Multiply(((Number)2).Multiply(((Number)1).Subtract(this).Multiply(this))).Add(c.Multiply(this.Sqr)));
        [MethodImpl(AggressiveInlining)]  public Vector2 QuadraticBezier(Vector2 a, Vector2 b, Vector2 c) => a.Multiply(((Number)1).Subtract(this).Sqr).Add(b.Multiply(((Number)2).Multiply(((Number)1).Subtract(this).Multiply(this))).Add(c.Multiply(this.Sqr)));
        [MethodImpl(AggressiveInlining)]  public Vector3 QuadraticBezier(Vector3 a, Vector3 b, Vector3 c) => a.Multiply(((Number)1).Subtract(this).Sqr).Add(b.Multiply(((Number)2).Multiply(((Number)1).Subtract(this).Multiply(this))).Add(c.Multiply(this.Sqr)));
        [MethodImpl(AggressiveInlining)]  public Vector4 QuadraticBezier(Vector4 a, Vector4 b, Vector4 c) => a.Multiply(((Number)1).Subtract(this).Sqr).Add(b.Multiply(((Number)2).Multiply(((Number)1).Subtract(this).Multiply(this))).Add(c.Multiply(this.Sqr)));
        [MethodImpl(AggressiveInlining)]  public Vector8 QuadraticBezier(Vector8 a, Vector8 b, Vector8 c) => a.Multiply(((Number)1).Subtract(this).Sqr).Add(b.Multiply(((Number)2).Multiply(((Number)1).Subtract(this).Multiply(this))).Add(c.Multiply(this.Sqr)));
        [MethodImpl(AggressiveInlining)]  public Number QuadraticBezierDerivative(Number a, Number b, Number c) => b.Subtract(a).Multiply(((Number)2).Multiply(((Number)1).Subtract(this))).Add(c.Subtract(b).Multiply(((Number)2).Multiply(this)));
        [MethodImpl(AggressiveInlining)]  public Vector2 QuadraticBezierDerivative(Vector2 a, Vector2 b, Vector2 c) => b.Subtract(a).Multiply(((Number)2).Multiply(((Number)1).Subtract(this))).Add(c.Subtract(b).Multiply(((Number)2).Multiply(this)));
        [MethodImpl(AggressiveInlining)]  public Vector3 QuadraticBezierDerivative(Vector3 a, Vector3 b, Vector3 c) => b.Subtract(a).Multiply(((Number)2).Multiply(((Number)1).Subtract(this))).Add(c.Subtract(b).Multiply(((Number)2).Multiply(this)));
        [MethodImpl(AggressiveInlining)]  public Vector4 QuadraticBezierDerivative(Vector4 a, Vector4 b, Vector4 c) => b.Subtract(a).Multiply(((Number)2).Multiply(((Number)1).Subtract(this))).Add(c.Subtract(b).Multiply(((Number)2).Multiply(this)));
        [MethodImpl(AggressiveInlining)]  public Vector8 QuadraticBezierDerivative(Vector8 a, Vector8 b, Vector8 c) => b.Subtract(a).Multiply(((Number)2).Multiply(((Number)1).Subtract(this))).Add(c.Subtract(b).Multiply(((Number)2).Multiply(this)));
        [MethodImpl(AggressiveInlining)]  public Number QuadraticBezierSecondDerivative(Number a, Number b, Number c) => ((Number)2).Multiply(a.Subtract(b.Multiply(((Number)2)).Add(c)));
        [MethodImpl(AggressiveInlining)]  public Vector2 QuadraticBezierSecondDerivative(Vector2 a, Vector2 b, Vector2 c) => ((Number)2).Multiply(a.Subtract(b.Multiply(((Number)2)).Add(c)));
        [MethodImpl(AggressiveInlining)]  public Vector3 QuadraticBezierSecondDerivative(Vector3 a, Vector3 b, Vector3 c) => ((Number)2).Multiply(a.Subtract(b.Multiply(((Number)2)).Add(c)));
        [MethodImpl(AggressiveInlining)]  public Vector4 QuadraticBezierSecondDerivative(Vector4 a, Vector4 b, Vector4 c) => ((Number)2).Multiply(a.Subtract(b.Multiply(((Number)2)).Add(c)));
        [MethodImpl(AggressiveInlining)]  public Vector8 QuadraticBezierSecondDerivative(Vector8 a, Vector8 b, Vector8 c) => ((Number)2).Multiply(a.Subtract(b.Multiply(((Number)2)).Add(c)));
        [MethodImpl(AggressiveInlining)]  public Number Hermite(Number p0, Number p1, Number m0, Number m1) => p0.Multiply(((Number)2).Multiply(this.Cube).Subtract(((Number)3).Multiply(this.Sqr).Add(((Number)1)))).Add(m0.Multiply(this.Cube.Subtract(((Number)2).Multiply(this.Sqr).Add(this))).Add(p1.Multiply(((Number)2).Multiply(this.Cube).Add(((Number)3).Multiply(this.Sqr)).Negative).Add(m1.Multiply(this.Cube.Subtract(this.Sqr)))));
        [MethodImpl(AggressiveInlining)]  public Vector2 Hermite(Vector2 p0, Vector2 p1, Vector2 m0, Vector2 m1) => p0.Multiply(((Number)2).Multiply(this.Cube).Subtract(((Number)3).Multiply(this.Sqr).Add(((Number)1)))).Add(m0.Multiply(this.Cube.Subtract(((Number)2).Multiply(this.Sqr).Add(this))).Add(p1.Multiply(((Number)2).Multiply(this.Cube).Add(((Number)3).Multiply(this.Sqr)).Negative).Add(m1.Multiply(this.Cube.Subtract(this.Sqr)))));
        [MethodImpl(AggressiveInlining)]  public Vector3 Hermite(Vector3 p0, Vector3 p1, Vector3 m0, Vector3 m1) => p0.Multiply(((Number)2).Multiply(this.Cube).Subtract(((Number)3).Multiply(this.Sqr).Add(((Number)1)))).Add(m0.Multiply(this.Cube.Subtract(((Number)2).Multiply(this.Sqr).Add(this))).Add(p1.Multiply(((Number)2).Multiply(this.Cube).Add(((Number)3).Multiply(this.Sqr)).Negative).Add(m1.Multiply(this.Cube.Subtract(this.Sqr)))));
        [MethodImpl(AggressiveInlining)]  public Vector4 Hermite(Vector4 p0, Vector4 p1, Vector4 m0, Vector4 m1) => p0.Multiply(((Number)2).Multiply(this.Cube).Subtract(((Number)3).Multiply(this.Sqr).Add(((Number)1)))).Add(m0.Multiply(this.Cube.Subtract(((Number)2).Multiply(this.Sqr).Add(this))).Add(p1.Multiply(((Number)2).Multiply(this.Cube).Add(((Number)3).Multiply(this.Sqr)).Negative).Add(m1.Multiply(this.Cube.Subtract(this.Sqr)))));
        [MethodImpl(AggressiveInlining)]  public Vector8 Hermite(Vector8 p0, Vector8 p1, Vector8 m0, Vector8 m1) => p0.Multiply(((Number)2).Multiply(this.Cube).Subtract(((Number)3).Multiply(this.Sqr).Add(((Number)1)))).Add(m0.Multiply(this.Cube.Subtract(((Number)2).Multiply(this.Sqr).Add(this))).Add(p1.Multiply(((Number)2).Multiply(this.Cube).Add(((Number)3).Multiply(this.Sqr)).Negative).Add(m1.Multiply(this.Cube.Subtract(this.Sqr)))));
        [MethodImpl(AggressiveInlining)]  public Number HermiteDerivative(Number p0, Number p1, Number m0, Number m1) => p0.Multiply(((Number)6).Multiply(this.Sqr).Subtract(((Number)6).Multiply(this))).Add(m0.Multiply(((Number)3).Multiply(this.Sqr).Subtract(((Number)4).Multiply(this).Add(((Number)1)))).Add(p1.Multiply(((Number)6).Multiply(this.Sqr).Add(((Number)6).Multiply(this)).Negative).Add(m1.Multiply(((Number)3).Multiply(this.Sqr).Subtract(((Number)2).Multiply(this))))));
        [MethodImpl(AggressiveInlining)]  public Vector2 HermiteDerivative(Vector2 p0, Vector2 p1, Vector2 m0, Vector2 m1) => p0.Multiply(((Number)6).Multiply(this.Sqr).Subtract(((Number)6).Multiply(this))).Add(m0.Multiply(((Number)3).Multiply(this.Sqr).Subtract(((Number)4).Multiply(this).Add(((Number)1)))).Add(p1.Multiply(((Number)6).Multiply(this.Sqr).Add(((Number)6).Multiply(this)).Negative).Add(m1.Multiply(((Number)3).Multiply(this.Sqr).Subtract(((Number)2).Multiply(this))))));
        [MethodImpl(AggressiveInlining)]  public Vector3 HermiteDerivative(Vector3 p0, Vector3 p1, Vector3 m0, Vector3 m1) => p0.Multiply(((Number)6).Multiply(this.Sqr).Subtract(((Number)6).Multiply(this))).Add(m0.Multiply(((Number)3).Multiply(this.Sqr).Subtract(((Number)4).Multiply(this).Add(((Number)1)))).Add(p1.Multiply(((Number)6).Multiply(this.Sqr).Add(((Number)6).Multiply(this)).Negative).Add(m1.Multiply(((Number)3).Multiply(this.Sqr).Subtract(((Number)2).Multiply(this))))));
        [MethodImpl(AggressiveInlining)]  public Vector4 HermiteDerivative(Vector4 p0, Vector4 p1, Vector4 m0, Vector4 m1) => p0.Multiply(((Number)6).Multiply(this.Sqr).Subtract(((Number)6).Multiply(this))).Add(m0.Multiply(((Number)3).Multiply(this.Sqr).Subtract(((Number)4).Multiply(this).Add(((Number)1)))).Add(p1.Multiply(((Number)6).Multiply(this.Sqr).Add(((Number)6).Multiply(this)).Negative).Add(m1.Multiply(((Number)3).Multiply(this.Sqr).Subtract(((Number)2).Multiply(this))))));
        [MethodImpl(AggressiveInlining)]  public Vector8 HermiteDerivative(Vector8 p0, Vector8 p1, Vector8 m0, Vector8 m1) => p0.Multiply(((Number)6).Multiply(this.Sqr).Subtract(((Number)6).Multiply(this))).Add(m0.Multiply(((Number)3).Multiply(this.Sqr).Subtract(((Number)4).Multiply(this).Add(((Number)1)))).Add(p1.Multiply(((Number)6).Multiply(this.Sqr).Add(((Number)6).Multiply(this)).Negative).Add(m1.Multiply(((Number)3).Multiply(this.Sqr).Subtract(((Number)2).Multiply(this))))));
        [MethodImpl(AggressiveInlining)]  public Number CatmullRom(Number p0, Number p1, Number p2, Number p3) => ((Number)0.5).Multiply(p1.Multiply(((Number)2)).Add(p2.Subtract(p0).Multiply(this).Add(p0.Multiply(((Number)2)).Subtract(p1.Multiply(((Number)5)).Add(p2.Multiply(((Number)4)).Subtract(p3))).Multiply(this.Sqr).Add(p0.Add(p1.Multiply(((Number)3)).Subtract(p2.Multiply(((Number)3)).Add(p3))).Negative.Multiply(this.Cube)))));
        [MethodImpl(AggressiveInlining)]  public Vector2 CatmullRom(Vector2 p0, Vector2 p1, Vector2 p2, Vector2 p3) => ((Number)0.5).Multiply(p1.Multiply(((Number)2)).Add(p2.Subtract(p0).Multiply(this).Add(p0.Multiply(((Number)2)).Subtract(p1.Multiply(((Number)5)).Add(p2.Multiply(((Number)4)).Subtract(p3))).Multiply(this.Sqr).Add(p0.Add(p1.Multiply(((Number)3)).Subtract(p2.Multiply(((Number)3)).Add(p3))).Negative.Multiply(this.Cube)))));
        [MethodImpl(AggressiveInlining)]  public Vector3 CatmullRom(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3) => ((Number)0.5).Multiply(p1.Multiply(((Number)2)).Add(p2.Subtract(p0).Multiply(this).Add(p0.Multiply(((Number)2)).Subtract(p1.Multiply(((Number)5)).Add(p2.Multiply(((Number)4)).Subtract(p3))).Multiply(this.Sqr).Add(p0.Add(p1.Multiply(((Number)3)).Subtract(p2.Multiply(((Number)3)).Add(p3))).Negative.Multiply(this.Cube)))));
        [MethodImpl(AggressiveInlining)]  public Vector4 CatmullRom(Vector4 p0, Vector4 p1, Vector4 p2, Vector4 p3) => ((Number)0.5).Multiply(p1.Multiply(((Number)2)).Add(p2.Subtract(p0).Multiply(this).Add(p0.Multiply(((Number)2)).Subtract(p1.Multiply(((Number)5)).Add(p2.Multiply(((Number)4)).Subtract(p3))).Multiply(this.Sqr).Add(p0.Add(p1.Multiply(((Number)3)).Subtract(p2.Multiply(((Number)3)).Add(p3))).Negative.Multiply(this.Cube)))));
        [MethodImpl(AggressiveInlining)]  public Vector8 CatmullRom(Vector8 p0, Vector8 p1, Vector8 p2, Vector8 p3) => ((Number)0.5).Multiply(p1.Multiply(((Number)2)).Add(p2.Subtract(p0).Multiply(this).Add(p0.Multiply(((Number)2)).Subtract(p1.Multiply(((Number)5)).Add(p2.Multiply(((Number)4)).Subtract(p3))).Multiply(this.Sqr).Add(p0.Add(p1.Multiply(((Number)3)).Subtract(p2.Multiply(((Number)3)).Add(p3))).Negative.Multiply(this.Cube)))));
        [MethodImpl(AggressiveInlining)]  public Number CatmullRomDerivative(Number p0, Number p1, Number p2, Number p3) => ((Number)0.5).Multiply(p2.Subtract(p0).Add(((Number)2).Multiply(p0.Multiply(((Number)2)).Subtract(p1.Multiply(((Number)5)).Add(p2.Multiply(((Number)4)).Subtract(p3))).Multiply(this)).Add(((Number)3).Multiply(p0.Add(p1.Multiply(((Number)3)).Subtract(p2.Multiply(((Number)3)).Add(p3))).Negative.Multiply(this.Sqr)))));
        [MethodImpl(AggressiveInlining)]  public Vector2 CatmullRomDerivative(Vector2 p0, Vector2 p1, Vector2 p2, Vector2 p3) => ((Number)0.5).Multiply(p2.Subtract(p0).Add(((Number)2).Multiply(p0.Multiply(((Number)2)).Subtract(p1.Multiply(((Number)5)).Add(p2.Multiply(((Number)4)).Subtract(p3))).Multiply(this)).Add(((Number)3).Multiply(p0.Add(p1.Multiply(((Number)3)).Subtract(p2.Multiply(((Number)3)).Add(p3))).Negative.Multiply(this.Sqr)))));
        [MethodImpl(AggressiveInlining)]  public Vector3 CatmullRomDerivative(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3) => ((Number)0.5).Multiply(p2.Subtract(p0).Add(((Number)2).Multiply(p0.Multiply(((Number)2)).Subtract(p1.Multiply(((Number)5)).Add(p2.Multiply(((Number)4)).Subtract(p3))).Multiply(this)).Add(((Number)3).Multiply(p0.Add(p1.Multiply(((Number)3)).Subtract(p2.Multiply(((Number)3)).Add(p3))).Negative.Multiply(this.Sqr)))));
        [MethodImpl(AggressiveInlining)]  public Vector4 CatmullRomDerivative(Vector4 p0, Vector4 p1, Vector4 p2, Vector4 p3) => ((Number)0.5).Multiply(p2.Subtract(p0).Add(((Number)2).Multiply(p0.Multiply(((Number)2)).Subtract(p1.Multiply(((Number)5)).Add(p2.Multiply(((Number)4)).Subtract(p3))).Multiply(this)).Add(((Number)3).Multiply(p0.Add(p1.Multiply(((Number)3)).Subtract(p2.Multiply(((Number)3)).Add(p3))).Negative.Multiply(this.Sqr)))));
        [MethodImpl(AggressiveInlining)]  public Vector8 CatmullRomDerivative(Vector8 p0, Vector8 p1, Vector8 p2, Vector8 p3) => ((Number)0.5).Multiply(p2.Subtract(p0).Add(((Number)2).Multiply(p0.Multiply(((Number)2)).Subtract(p1.Multiply(((Number)5)).Add(p2.Multiply(((Number)4)).Subtract(p3))).Multiply(this)).Add(((Number)3).Multiply(p0.Add(p1.Multiply(((Number)3)).Subtract(p2.Multiply(((Number)3)).Add(p3))).Negative.Multiply(this.Sqr)))));
        public Angle Turns { [MethodImpl(AggressiveInlining)] get  => this.Multiply(Constants.TwoPi); } 
        public Angle Degrees { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)360)).Turns; } 
        public Angle Gradians { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)400)).Turns; } 
        public Angle ArcMinutes { [MethodImpl(AggressiveInlining)] get  => this.Multiply(((Number)60)).Degrees; } 
        public Angle ArcSeconds { [MethodImpl(AggressiveInlining)] get  => this.Multiply(((Number)60)).ArcMinutes; } 
        [MethodImpl(AggressiveInlining)]  public Boolean Between(Number a, Number b) => this.GreaterThanOrEquals(a).And(this.LessThanOrEquals(b));
        [MethodImpl(AggressiveInlining)]  public Boolean AlmostEqual(Number y) => this.Subtract(y).Abs.LessThanOrEquals(this.MultiplyEpsilon(y));
        public Boolean AlmostZero { [MethodImpl(AggressiveInlining)] get  => this.Abs.LessThan(Constants.Epsilon); } 
        public Boolean AlmostZeroOrOne { [MethodImpl(AggressiveInlining)] get  => this.AlmostEqual(Constants.Zero).Or(this.AlmostEqual(Constants.One)); } 
        public Number Magnitude { [MethodImpl(AggressiveInlining)] get  => this; } 
        [MethodImpl(AggressiveInlining)]  public Number MultiplyEpsilon(Number y) => this.Abs.Greater(y.Abs).Multiply(Constants.Epsilon);
        [MethodImpl(AggressiveInlining)]  public Number SineWave(Number amplitude, Number frequency, Number phase) => amplitude.Multiply(frequency.Multiply(this.Turns.Sin).Add(phase));
        [MethodImpl(AggressiveInlining)]  public Number StaircaseFloor(Integer steps) => this.Multiply(steps).Floor.Divide(steps);
        [MethodImpl(AggressiveInlining)]  public Number StaircaseCeiling(Integer steps) => this.Multiply(steps).Ceiling.Divide(steps);
        [MethodImpl(AggressiveInlining)]  public Number StaircaseRound(Integer steps) => this.Multiply(steps).Round(((Integer)0)).Divide(steps);
        [MethodImpl(AggressiveInlining)]  public Vector2 Spiral(Number R, Number r, Number numTurns) => new Vector2(this.Turns.Multiply(numTurns).Cos, this.Turns.Multiply(numTurns).Sin).Multiply(r.Lerp(R, this));
        [MethodImpl(AggressiveInlining)]  public Matrix4x4 Multiply(Matrix4x4 value1) => this * value1;
        [MethodImpl(AggressiveInlining)]  public Matrix3x2 Multiply(Matrix3x2 value1) => this * value1;
        [MethodImpl(AggressiveInlining)]  public Vector2 Multiply(Vector2 right) => this * right;
        [MethodImpl(AggressiveInlining)]  public Vector3 Multiply(Vector3 right) => this * right;
        [MethodImpl(AggressiveInlining)]  public Vector4 Multiply(Vector4 right) => this * right;
        [MethodImpl(AggressiveInlining)]  public Vector8 Multiply(Vector8 right) => this * right;
        [MethodImpl(AggressiveInlining)]  public Vector8 Divide(Vector8 right) => this / right;
        [MethodImpl(AggressiveInlining)]  public Number Add(Number b) => this + b;
        [MethodImpl(AggressiveInlining)]  public Number Subtract(Number b) => this - b;
        [MethodImpl(AggressiveInlining)]  public Number Multiply(Number b) => this * b;
        [MethodImpl(AggressiveInlining)]  public Number Divide(Number b) => this / b;
        public Number Negative { [MethodImpl(AggressiveInlining)] get => -this; }
        [MethodImpl(AggressiveInlining)]  public Boolean LessThan(Number b) => this < b;
        [MethodImpl(AggressiveInlining)]  public Boolean LessThanOrEquals(Number b) => this <= b;
        [MethodImpl(AggressiveInlining)]  public Boolean GreaterThan(Number b) => this > b;
        [MethodImpl(AggressiveInlining)]  public Boolean GreaterThanOrEquals(Number b) => this >= b;
        [MethodImpl(AggressiveInlining)]  public Angle Multiply(Angle a) => this * a;
        public Scaling3D UniformScaling3D { [MethodImpl(AggressiveInlining)] get  => new Vector3(this); } 
        public Vector2 Vector2 { [MethodImpl(AggressiveInlining)] get  => (this, this); } 
        [MethodImpl(AggressiveInlining)]  public static implicit operator Vector2(Number s) => s.Vector2;
        public Vector3 Vector3 { [MethodImpl(AggressiveInlining)] get  => (this, this, this); } 
        [MethodImpl(AggressiveInlining)]  public static implicit operator Vector3(Number s) => s.Vector3;
        public Vector4 Vector4 { [MethodImpl(AggressiveInlining)] get  => (this, this, this, this); } 
        [MethodImpl(AggressiveInlining)]  public static implicit operator Vector4(Number s) => s.Vector4;
        public Vector8 Vector8 { [MethodImpl(AggressiveInlining)] get  => (this, this, this, this, this, this, this, this); } 
        [MethodImpl(AggressiveInlining)]  public static implicit operator Vector8(Number s) => s.Vector8;
        [MethodImpl(AggressiveInlining)]  public Number Lerp(Number b, Number t) => this.Multiply(t.FromOne).Add(b.Multiply(t));
        [MethodImpl(AggressiveInlining)]  public Number Barycentric(Number v2, Number v3, Vector2 uv) => this.Add(v2.Subtract(this)).Multiply(uv.X).Add(v3.Subtract(this).Multiply(uv.Y));
        public Number SmoothStep { [MethodImpl(AggressiveInlining)] get  => this.Sqr.Multiply(this.Twice.Add(((Number)3)).Negative); } 
        public Number SmootherStep { [MethodImpl(AggressiveInlining)] get  => this.Cube.Multiply(this.Multiply(((Number)6)).Subtract(((Number)15))).Add(((Number)10)); } 
        public Number Pow2 { [MethodImpl(AggressiveInlining)] get  => this.Multiply(this); } 
        public Number Pow3 { [MethodImpl(AggressiveInlining)] get  => this.Pow2.Multiply(this); } 
        public Number Pow4 { [MethodImpl(AggressiveInlining)] get  => this.Pow3.Multiply(this); } 
        public Number Pow5 { [MethodImpl(AggressiveInlining)] get  => this.Pow4.Multiply(this); } 
        public Number Sqr { [MethodImpl(AggressiveInlining)] get  => this.Pow2; } 
        public Number Cube { [MethodImpl(AggressiveInlining)] get  => this.Pow3; } 
        public Number PlusOne { [MethodImpl(AggressiveInlining)] get  => this.Add(Constants.One); } 
        public Number MinusOne { [MethodImpl(AggressiveInlining)] get  => this.Subtract(Constants.One); } 
        public Number FromOne { [MethodImpl(AggressiveInlining)] get  => this.Add(Constants.One).Negative; } 
        [MethodImpl(AggressiveInlining)]  public Number Component(Integer n) => this.Components.At(n);
        public Number MaxComponent { [MethodImpl(AggressiveInlining)] get {
            var r = this.Component(((Integer)0));
            {
                var i = ((Integer)1);
                while (i.LessThan(NumComponents))
                {
                    r = r.Max(this.Component(i));
                    i = i.Add(((Integer)1));
                }

            }
            return r;
        }
         } 
        public Number MinComponent { [MethodImpl(AggressiveInlining)] get {
            var r = this.Component(((Integer)0));
            {
                var i = ((Integer)1);
                while (i.LessThan(NumComponents))
                {
                    r = r.Min(this.Component(i));
                    i = i.Add(((Integer)1));
                }

            }
            return r;
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Number MapComponents(System.Func<Number, Number> f) => Number.CreateFromComponents(this.Components.Map(f));
        [MethodImpl(AggressiveInlining)]  public Number ZipComponents(Number b, System.Func<Number, Number, Number> f) => Number.CreateFromComponents(this.Components.Zip(b.Components, f));
        [MethodImpl(AggressiveInlining)]  public Number ZipComponents(Number b, Number c, System.Func<Number, Number, Number, Number> f) => Number.CreateFromComponents(this.Components.Zip(b.Components, c.Components, f));
        [MethodImpl(AggressiveInlining)]  public Boolean AllZipComponents(Number b, System.Func<Number, Number, Boolean> f) => this.Components.Zip(b.Components, f).All((x) => x);
        [MethodImpl(AggressiveInlining)]  public Boolean AllZipComponents(Number b, Number c, System.Func<Number, Number, Number, Boolean> f) => this.Components.Zip(b.Components, c.Components, f).All((x) => x);
        [MethodImpl(AggressiveInlining)]  public Boolean AnyZipComponents(Number b, System.Func<Number, Number, Boolean> f) => this.Components.Zip(b.Components, f).Any((x) => x);
        [MethodImpl(AggressiveInlining)]  public Boolean AnyZipComponents(Number b, Number c, System.Func<Number, Number, Number, Boolean> f) => this.Components.Zip(b.Components, c.Components, f).Any((x) => x);
        [MethodImpl(AggressiveInlining)]  public Boolean AllComponents(System.Func<Number, Boolean> predicate) => this.Components.All(predicate);
        [MethodImpl(AggressiveInlining)]  public Boolean AnyComponent(System.Func<Number, Boolean> predicate) => this.Components.Any(predicate);
        [MethodImpl(AggressiveInlining)]  public Number InversePow(Number n) => this.Pow(n.Reciprocal);
        public Number Fract { [MethodImpl(AggressiveInlining)] get  => this.Subtract(this.Floor); } 
        public Number ClampZeroOne { [MethodImpl(AggressiveInlining)] get  => this.Clamp(Constants.Zero, Constants.One); } 
        public Boolean BetweenZeroOne { [MethodImpl(AggressiveInlining)] get  => this.Between(Constants.Zero, Constants.One); } 
        public Number Sqrt { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((n) => n.Sqrt); } 
        public Number Half { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)2)); } 
        public Number Quarter { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)4)); } 
        public Number Eight { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)8)); } 
        public Number Sixteenth { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)16)); } 
        public Number Tenth { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)10)); } 
        public Number Twice { [MethodImpl(AggressiveInlining)] get  => this.Multiply(((Number)2)); } 
        public Number Hundred { [MethodImpl(AggressiveInlining)] get  => this.Multiply(((Number)100)); } 
        public Number Thousand { [MethodImpl(AggressiveInlining)] get  => this.Multiply(((Number)1000)); } 
        public Number Million { [MethodImpl(AggressiveInlining)] get  => this.Thousand.Thousand; } 
        public Number Billion { [MethodImpl(AggressiveInlining)] get  => this.Thousand.Million; } 
        public Number Hundredth { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)100)); } 
        public Number Thousandth { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)1000)); } 
        public Number Millionth { [MethodImpl(AggressiveInlining)] get  => this.Thousandth.Thousandth; } 
        public Number Billionth { [MethodImpl(AggressiveInlining)] get  => this.Thousandth.Millionth; } 
        [MethodImpl(AggressiveInlining)]  public Number Lesser(Number b) => this.LessThanOrEquals(b) ? this : b;
        [MethodImpl(AggressiveInlining)]  public Number Greater(Number b) => this.GreaterThanOrEquals(b) ? this : b;

        // Unimplemented concept functions
        [MethodImpl(AggressiveInlining)]  public Number Modulo(Number b) => this % b;
    }
}
