// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 12:06:56 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Cone: ISolid
    {
        // Fields
        [DataMember] public readonly Number Height;
        [DataMember] public readonly Number Radius;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Cone WithHeight(Number height) => new Cone(height, Radius);
        [MethodImpl(AggressiveInlining)] public Cone WithRadius(Number radius) => new Cone(Height, radius);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Cone(Number height, Number radius) { Height = height; Radius = radius; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Cone Create(Number height, Number radius) => new Cone(height, radius);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Number, Number)(Cone self) => (self.Height, self.Radius);
        [MethodImpl(AggressiveInlining)] public static implicit operator Cone((Number, Number) value) => new(value.Item1, value.Item2);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Number height, out Number radius) { height = Height; radius = Radius;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Cone other) => Height.Equals(other.Height) && Radius.Equals(other.Radius);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Cone other) => !Height.Equals(other.Height) && Radius.Equals(other.Radius);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Cone other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Height, Radius);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Height\" = {Height}, \"Radius\" = {Radius} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented concept functions and type functions
        public Boolean ClosedX { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 
        public Boolean ClosedY { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, TR> Combine<TR>(Cone b, System.Func<TR, TR, TR> f){
            var _var908 = b;
            {
                var _var907 = this;
                {
                    var _var906 = f;
                    return (x) => _var906.Invoke(_var907.Eval(x), _var908.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector3> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var910 = f;
            {
                var _var909 = this;
                return (x) => _var909.Eval(_var910.Invoke(x));
            }
        }

        public System.Func<Vector2, Vector3> Function { [MethodImpl(AggressiveInlining)] get {
            var _var911 = this;
            return (x) => _var911.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Vector3> Compose(Cone b){
            var _var913 = this;
            {
                var _var912 = b;
                return (x) => _var912.Eval(_var913.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, TR> Combine<TR>(Cone b, System.Func<TR, TR, TR> f){
            var _var916 = b;
            {
                var _var915 = this;
                {
                    var _var914 = f;
                    return (x) => _var914.Invoke(_var915.Eval(x), _var916.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var918 = f;
            {
                var _var917 = this;
                return (x) => _var917.Eval(_var918.Invoke(x));
            }
        }

        public System.Func<Vector3, Number> Function { [MethodImpl(AggressiveInlining)] get {
            var _var919 = this;
            return (x) => _var919.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, Number> Compose(Cone b){
            var _var921 = this;
            {
                var _var920 = b;
                return (x) => _var920.Eval(_var921.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Union(Cone b) => this.Combine(b, (a, b) => a.Max(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Intersection(Cone b) => this.Combine(b, (a, b) => a.Min(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Difference(Cone b) => this.Combine(b, (a, b) => a.Max(b.Negative));
        public Procedural<Vector3, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) => x.Negative); } 

        // Unimplemented concept functions
        [MethodImpl(AggressiveInlining)]  public Number Distance(Vector3 p) => throw new NotImplementedException();
        [MethodImpl(AggressiveInlining)]  public Number Eval(Vector3 t) => throw new NotImplementedException();
        [MethodImpl(AggressiveInlining)]  public Vector3 Eval(Vector2 t) => throw new NotImplementedException();
    }
}
