// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 8:08:08 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
public partial struct NPrism: ISolid
{
    // Fields
    [DataMember] public readonly Number Height;
    [DataMember] public readonly Number Radius;
    [DataMember] public readonly Integer NumSides;

    // With functions 
    [MethodImpl(AggressiveInlining)] public NPrism WithHeight(Number height) => new NPrism(height, Radius, NumSides);
    [MethodImpl(AggressiveInlining)] public NPrism WithRadius(Number radius) => new NPrism(Height, radius, NumSides);
    [MethodImpl(AggressiveInlining)] public NPrism WithNumSides(Integer numSides) => new NPrism(Height, Radius, numSides);

    // Regular Constructor
    [MethodImpl(AggressiveInlining)] public NPrism(Number height, Number radius, Integer numSides) { Height = height; Radius = radius; NumSides = numSides; }

    // Static factory function
    [MethodImpl(AggressiveInlining)] public static NPrism Create(Number height, Number radius, Integer numSides) => new NPrism(height, radius, numSides);

    // Implicit converters to/from value-tuples and deconstructor
    [MethodImpl(AggressiveInlining)] public static implicit operator (Number, Number, Integer)(NPrism self) => (self.Height, self.Radius, self.NumSides);
    [MethodImpl(AggressiveInlining)] public static implicit operator NPrism((Number, Number, Integer) value) => new(value.Item1, value.Item2, value.Item3);
    [MethodImpl(AggressiveInlining)] public void Deconstruct(out Number height, out Number radius, out Integer numSides) { height = Height; radius = Radius; numSides = NumSides;  }

    // Object virtual function overrides: Equals, GetHashCode, ToString
    [MethodImpl(AggressiveInlining)] public Boolean Equals(NPrism other) => Height.Equals(other.Height) && Radius.Equals(other.Radius) && NumSides.Equals(other.NumSides);
    [MethodImpl(AggressiveInlining)] public Boolean NotEquals(NPrism other) => !Height.Equals(other.Height) && Radius.Equals(other.Radius) && NumSides.Equals(other.NumSides);
    [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is NPrism other ? Equals(other) : false;
    [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Height, Radius, NumSides);
    [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Height\" = {Height}, \"Radius\" = {Radius}, \"NumSides\" = {NumSides} }}";

    // Explicit implementation of interfaces by forwarding properties to fields

    // Implemented concept functions and type functions
    public Boolean ClosedX { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 
public Boolean ClosedY { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, TR> Combine<TR>(NPrism b, System.Func<TR, TR, TR> f){
    var _var1032 = b;
    {
        var _var1031 = this;
        {
            var _var1030 = f;
            return (x) =>  => _var1030.Invoke(_var1031.Eval(x), _var1032.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector3> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var1034 = f;
    {
        var _var1033 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var1033.Eval(_var1034.Invoke(x));
;
    }
}

public System.Func<Vector2, Vector3> Function { [MethodImpl(AggressiveInlining)] get {
    var _var1035 = this;
    return (x) =>  => _var1035.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Vector3> Compose(NPrism b){
    var _var1037 = this;
    {
        var _var1036 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var1036.Eval(_var1037.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, TR> Combine<TR>(NPrism b, System.Func<TR, TR, TR> f){
    var _var1040 = b;
    {
        var _var1039 = this;
        {
            var _var1038 = f;
            return (x) =>  => _var1038.Invoke(_var1039.Eval(x), _var1040.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var1042 = f;
    {
        var _var1041 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var1041.Eval(_var1042.Invoke(x));
;
    }
}

public System.Func<Vector3, Number> Function { [MethodImpl(AggressiveInlining)] get {
    var _var1043 = this;
    return (x) =>  => _var1043.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, Number> Compose(NPrism b){
    var _var1045 = this;
    {
        var _var1044 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var1044.Eval(_var1045.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Union(NPrism b) => this.Combine(b, (a, b) =>  => a.Max(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Intersection(NPrism b) => this.Combine(b, (a, b) =>  => a.Min(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Difference(NPrism b) => this.Combine(b, (a, b) =>  => a.Max(b.Negative);

public Procedural<Vector3, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) =>  => x.Negative;
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, Boolean> Threshold(Number threshold){
    var _var1046 = threshold;
    return this.Map((x) =>  => x.GreaterThanOrEquals(_var1046);
;
}


    // Unimplemented concept functions
    [MethodImpl(AggressiveInlining)]  public Number Distance(Vector3 p) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public Number Eval(Vector3 t) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public Vector3 Eval(Vector2 t) => throw new NotImplementedException();
}
Plato.CSharpWriter.CSharpConcreteTypeWriter}
