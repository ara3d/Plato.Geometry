// Autogenerated file: DO NOT EDIT
// Created on 2025-03-14 12:36:59 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct MatrixTransform3D: ITransform3D
    {
        // Fields
        [DataMember] public readonly Matrix4x4 Matrix;

        // With functions 
        [MethodImpl(AggressiveInlining)] public MatrixTransform3D WithMatrix(Matrix4x4 matrix) => new MatrixTransform3D(matrix);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public MatrixTransform3D(Matrix4x4 matrix) { Matrix = matrix; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static MatrixTransform3D Create(Matrix4x4 matrix) => new MatrixTransform3D(matrix);

        // Implicit converters to/from single field
        [MethodImpl(AggressiveInlining)] public static implicit operator Matrix4x4(MatrixTransform3D self) => self.Matrix;
        [MethodImpl(AggressiveInlining)] public static implicit operator MatrixTransform3D(Matrix4x4 value) => new MatrixTransform3D(value);

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(MatrixTransform3D other) => Matrix.Equals(other.Matrix);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(MatrixTransform3D other) => !Matrix.Equals(other.Matrix);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is MatrixTransform3D other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Matrix);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Matrix\" = {Matrix} }}";

        // Explicit implementation of interfaces by forwarding properties to fields
        Matrix4x4 ITransform3D.Matrix { [MethodImpl(AggressiveInlining)] get => Matrix; }

        // Implemented interface functions
        // Transform(MatrixTransform3D, Vector3):Vector3; [Self=MatrixTransform3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector3 Transform(Vector3 v) => v.Transform(this.Matrix);
// TransformNormal(MatrixTransform3D, Vector3):Vector3; [Self=MatrixTransform3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector3 TransformNormal(Vector3 v) => v.TransformNormal(this.Matrix);
// Identity(MatrixTransform3D):MatrixTransform3D; [Self=MatrixTransform3D;]; <>
        public static MatrixTransform3D Identity { [MethodImpl(AggressiveInlining)] get  => Matrix4x4.Identity; } 
// Matrix4x4(MatrixTransform3D):Matrix4x4; [ITransform3D=MatrixTransform3D;Self=MatrixTransform3D;]; <>
        public Matrix4x4 Matrix4x4 { [MethodImpl(AggressiveInlining)] get  => this.Matrix; } 
// Inverse(MatrixTransform3D):MatrixTransform3D; [ITransform3D=MatrixTransform3D;Self=MatrixTransform3D;]; <>
        public MatrixTransform3D Inverse { [MethodImpl(AggressiveInlining)] get  => this.Matrix.Invert; } 

        // Unimplemented concept functions
    }
}
