// Autogenerated file: DO NOT EDIT
// Created on 2025-04-08 12:25:04 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct RegularPolygon: IPolygon2D<RegularPolygon>
    {
        // Fields
        [DataMember] public readonly Point2D Center;
        [DataMember] public readonly Integer NumPoints;

        // With functions 
        [MethodImpl(AggressiveInlining)] public RegularPolygon WithCenter(Point2D center) => new RegularPolygon(center, NumPoints);
        [MethodImpl(AggressiveInlining)] public RegularPolygon WithNumPoints(Integer numPoints) => new RegularPolygon(Center, numPoints);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public RegularPolygon(Point2D center, Integer numPoints) { Center = center; NumPoints = numPoints; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static RegularPolygon Create(Point2D center, Integer numPoints) => new RegularPolygon(center, numPoints);

        // Static default implementation
        public static readonly RegularPolygon Default = default;

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Point2D, Integer)(RegularPolygon self) => (self.Center, self.NumPoints);
        [MethodImpl(AggressiveInlining)] public static implicit operator RegularPolygon((Point2D, Integer) value) => new RegularPolygon(value.Item1, value.Item2);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Point2D center, out Integer numPoints) { center = Center; numPoints = NumPoints;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(RegularPolygon other) => Center.Equals(other.Center) && NumPoints.Equals(other.NumPoints);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(RegularPolygon other) => !Center.Equals(other.Center) && NumPoints.Equals(other.NumPoints);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is RegularPolygon other ? Equals(other).Value : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Center, NumPoints);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Center\" = {Center}, \"NumPoints\" = {NumPoints} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented interface functions
        public IArray<Point2D> Points { [MethodImpl(AggressiveInlining)] get  => this.NumPoints.CirclePoints; } 
[MethodImpl(AggressiveInlining)]  public Point2D At(Integer n) => n.Number.Divide(this.NumPoints).Turns.UnitCircle;
public Point2D this[Integer n] { [MethodImpl(AggressiveInlining)]  get => At(n); }
        public Integer Count { [MethodImpl(AggressiveInlining)] get  => this.NumPoints; } 
public IArray<Line2D> Lines { [MethodImpl(AggressiveInlining)] get  => this.Points.WithNext((a, b)  => new Line2D(a, b), this.Closed); } 
[MethodImpl(AggressiveInlining)]  public Point2D Point(Integer index) => this.Points.At(index);
[MethodImpl(AggressiveInlining)]  public Triangle2D Triangle(Integer3 f) => (this.Point(f.A), this.Point(f.B), this.Point(f.C));
[MethodImpl(AggressiveInlining)]  public Quad2D Quad(Integer4 f) => (this.Point(f.A), this.Point(f.B), this.Point(f.C), this.Point(f.D));
public Bounds2D Bounds { [MethodImpl(AggressiveInlining)] get  => this.Points.Bounds(); } 
[MethodImpl(AggressiveInlining)]  public IArray<Point2D> Sample(Integer numPoints){
            var _var99 = this;
            return numPoints.LinearSpace.Map((x)  => _var99.Eval(x));
        }

[MethodImpl(AggressiveInlining)]  public PolyLine2D ToPolyLine2D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 

        // Unimplemented interface functions
        [MethodImpl(AggressiveInlining)]  public RegularPolygon Deform(System.Func<Point2D, Point2D> f) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public Point2D Eval(Number t) => throw new NotImplementedException();
}
}
