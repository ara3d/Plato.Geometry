// Autogenerated file: DO NOT EDIT
// Created on 2025-03-14 12:36:59 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct RegularPolygon: IPolygon2D
    {
        // Fields
        [DataMember] public readonly Integer NumPoints;

        // With functions 
        [MethodImpl(AggressiveInlining)] public RegularPolygon WithNumPoints(Integer numPoints) => new RegularPolygon(numPoints);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public RegularPolygon(Integer numPoints) { NumPoints = numPoints; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static RegularPolygon Create(Integer numPoints) => new RegularPolygon(numPoints);

        // Implicit converters to/from single field
        [MethodImpl(AggressiveInlining)] public static implicit operator Integer(RegularPolygon self) => self.NumPoints;
        [MethodImpl(AggressiveInlining)] public static implicit operator RegularPolygon(Integer value) => new RegularPolygon(value);

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(RegularPolygon other) => NumPoints.Equals(other.NumPoints);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(RegularPolygon other) => !NumPoints.Equals(other.NumPoints);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is RegularPolygon other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(NumPoints);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"NumPoints\" = {NumPoints} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented interface functions
        // Points(RegularPolygon):_T0; [Self=RegularPolygon;]; <_T0:IArray<Vector2>>
        public _T0 Points<_T0> { [MethodImpl(AggressiveInlining)] get  => this.NumPoints.CirclePoints; } 
// At(RegularPolygon, Integer):Vector2; [Self=RegularPolygon;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector2 At(Integer n) => n.Number.Divide(this.NumPoints).Turns.UnitCircle;
public Vector2 this[Integer n] { [MethodImpl(AggressiveInlining)]  get => At(n); }
        // Count(RegularPolygon):Integer; [Self=RegularPolygon;]; <>
        public Integer Count { [MethodImpl(AggressiveInlining)] get  => this.NumPoints; } 
// Lines(RegularPolygon):_T0; [IPolyLine2D=RegularPolygon;IPolygon2D=RegularPolygon;Self=RegularPolygon;]; <_T0:IArray<Line2D>>
        public _T0 Lines<_T0> { [MethodImpl(AggressiveInlining)] get  => this.Points.WithNext((a, b)  => new Line2D(a, b), this.Closed); } 
// Sample(RegularPolygon, Integer):_T0; [ICurve2D=RegularPolygon;IPolyLine2D=RegularPolygon;IPolygon2D=RegularPolygon;Self=RegularPolygon;]; <_T0:IArray<Vector2>>
        [MethodImpl(AggressiveInlining)]  public _T0 Sample<_T0>(Integer numPoints){
            var _var90 = this;
            return numPoints.LinearSpace.Map((x)  => _var90.Eval(x));
        }

// ToPolyLine2D(RegularPolygon, Integer):PolyLine2D; [ICurve2D=RegularPolygon;IPolyLine2D=RegularPolygon;IPolygon2D=RegularPolygon;Self=RegularPolygon;]; <>
        [MethodImpl(AggressiveInlining)]  public PolyLine2D ToPolyLine2D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
// Closed(RegularPolygon):Boolean; [IClosedShape=RegularPolygon;IClosedShape2D=RegularPolygon;IPolygon2D=RegularPolygon;Self=RegularPolygon;]; <>
        public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 

        // Unimplemented concept functions
        // PrimitiveSize(RegularPolygon):Integer; [IPrimitiveGeometry=RegularPolygon;IPrimitiveGeometry2D=RegularPolygon;IPointGeometry2D=RegularPolygon;IPolyLine2D=RegularPolygon;IPolygon2D=RegularPolygon;Self=RegularPolygon;]; <>
        public Integer PrimitiveSize => throw new NotImplementedException();
// NumPrimitives(RegularPolygon):Integer; [IPrimitiveGeometry=RegularPolygon;IPrimitiveGeometry2D=RegularPolygon;IPointGeometry2D=RegularPolygon;IPolyLine2D=RegularPolygon;IPolygon2D=RegularPolygon;Self=RegularPolygon;]; <>
        public Integer NumPrimitives => throw new NotImplementedException();
// Corners(RegularPolygon):_T0; [IPrimitiveGeometry2D=RegularPolygon;IPointGeometry2D=RegularPolygon;IPolyLine2D=RegularPolygon;IPolygon2D=RegularPolygon;Self=RegularPolygon;]; <_T0:IArray<Vector2>>
        public _T0 Corners<_T0> => throw new NotImplementedException();
// Eval(RegularPolygon, Number):Vector2; [IProcedural=RegularPolygon;TOut=TRange;TIn=Number;ICurve=RegularPolygon;TRange=Vector2;ICurve2D=RegularPolygon;IPolyLine2D=RegularPolygon;IPolygon2D=RegularPolygon;Self=RegularPolygon;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector2 Eval(Number t) => throw new NotImplementedException();
}
}
