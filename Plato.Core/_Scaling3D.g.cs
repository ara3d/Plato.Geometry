// Autogenerated file: DO NOT EDIT
// Created on 2025-03-14 12:36:59 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Scaling3D: ITransform3D
    {
        // Fields
        [DataMember] public readonly Vector3 Scale;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Scaling3D WithScale(Vector3 scale) => new Scaling3D(scale);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Scaling3D(Vector3 scale) { Scale = scale; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Scaling3D Create(Vector3 scale) => new Scaling3D(scale);

        // Implicit converters to/from single field
        [MethodImpl(AggressiveInlining)] public static implicit operator Vector3(Scaling3D self) => self.Scale;
        [MethodImpl(AggressiveInlining)] public static implicit operator Scaling3D(Vector3 value) => new Scaling3D(value);

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Scaling3D other) => Scale.Equals(other.Scale);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Scaling3D other) => !Scale.Equals(other.Scale);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Scaling3D other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Scale);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Scale\" = {Scale} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented interface functions
        // Matrix(Scaling3D):Matrix4x4; [Self=Scaling3D;]; <>
        public Matrix4x4 Matrix { [MethodImpl(AggressiveInlining)] get  => Matrix4x4.CreateScale(this.Scale.X, this.Scale.Y, this.Scale.Z); } 
// Identity(Scaling3D):Scaling3D; [Self=Scaling3D;]; <>
        public static Scaling3D Identity { [MethodImpl(AggressiveInlining)] get  => new Vector3(Constants.One); } 
// Matrix4x4(Scaling3D):Matrix4x4; [ITransform3D=Scaling3D;Self=Scaling3D;]; <>
        public Matrix4x4 Matrix4x4 { [MethodImpl(AggressiveInlining)] get  => this.Matrix; } 
[MethodImpl(AggressiveInlining)]  public static implicit operator Matrix4x4(Scaling3D t) => t.Matrix4x4;
        // Transform(Scaling3D, Vector3):Vector3; [ITransform3D=Scaling3D;Self=Scaling3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector3 Transform(Vector3 v) => v.Transform(this.Matrix);
// TransformNormal(Scaling3D, Vector3):Vector3; [ITransform3D=Scaling3D;Self=Scaling3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector3 TransformNormal(Vector3 v) => v.TransformNormal(this.Matrix);
// Inverse(Scaling3D):MatrixTransform3D; [ITransform3D=Scaling3D;Self=Scaling3D;]; <>
        public MatrixTransform3D Inverse { [MethodImpl(AggressiveInlining)] get  => this.Matrix.Invert; } 

        // Unimplemented concept functions
    }
}
