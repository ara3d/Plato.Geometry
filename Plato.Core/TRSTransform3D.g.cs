// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 11:25:56 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct TRSTransform3D: ITransform3D
    {
        // Fields
        [DataMember] public readonly Translation3D Translation;
        [DataMember] public readonly Rotation3D Rotation;
        [DataMember] public readonly Scaling3D Scale;

        // With functions 
        [MethodImpl(AggressiveInlining)] public TRSTransform3D WithTranslation(Translation3D translation) => new TRSTransform3D(translation, Rotation, Scale);
        [MethodImpl(AggressiveInlining)] public TRSTransform3D WithRotation(Rotation3D rotation) => new TRSTransform3D(Translation, rotation, Scale);
        [MethodImpl(AggressiveInlining)] public TRSTransform3D WithScale(Scaling3D scale) => new TRSTransform3D(Translation, Rotation, scale);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public TRSTransform3D(Translation3D translation, Rotation3D rotation, Scaling3D scale) { Translation = translation; Rotation = rotation; Scale = scale; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static TRSTransform3D Create(Translation3D translation, Rotation3D rotation, Scaling3D scale) => new TRSTransform3D(translation, rotation, scale);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Translation3D, Rotation3D, Scaling3D)(TRSTransform3D self) => (self.Translation, self.Rotation, self.Scale);
        [MethodImpl(AggressiveInlining)] public static implicit operator TRSTransform3D((Translation3D, Rotation3D, Scaling3D) value) => new(value.Item1, value.Item2, value.Item3);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Translation3D translation, out Rotation3D rotation, out Scaling3D scale) { translation = Translation; rotation = Rotation; scale = Scale;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(TRSTransform3D other) => Translation.Equals(other.Translation) && Rotation.Equals(other.Rotation) && Scale.Equals(other.Scale);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(TRSTransform3D other) => !Translation.Equals(other.Translation) && Rotation.Equals(other.Rotation) && Scale.Equals(other.Scale);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is TRSTransform3D other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Translation, Rotation, Scale);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Translation\" = {Translation}, \"Rotation\" = {Rotation}, \"Scale\" = {Scale} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented concept functions and type functions
        public Matrix4x4 Matrix { [MethodImpl(AggressiveInlining)] get  => this.Translation.Matrix.Multiply(this.Rotation.Matrix.Multiply(this.Scale.Matrix)); } 
        public static TRSTransform3D Identity { [MethodImpl(AggressiveInlining)] get  => (Translation3D.Identity, Rotation3D.Identity, Scaling3D.Identity); } 
        public Matrix4x4 Matrix4x4 { [MethodImpl(AggressiveInlining)] get  => this.Matrix; } 
        [MethodImpl(AggressiveInlining)]  public static implicit operator Matrix4x4(TRSTransform3D t) => t.Matrix4x4;
        [MethodImpl(AggressiveInlining)]  public Vector3 Transform(Vector3 v) => v.Transform(this.Matrix);
        [MethodImpl(AggressiveInlining)]  public Vector3 TransformNormal(Vector3 v) => v.TransformNormal(this.Matrix);
        public MatrixTransform3D Inverse { [MethodImpl(AggressiveInlining)] get  => this.Matrix.Invert; } 

        // Unimplemented concept functions
    }
}
