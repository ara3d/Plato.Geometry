// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 8:08:08 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
public partial struct Limacon: IPolarCurve, IOpenShape
{
    // Fields
    [DataMember] public readonly Number A;
    [DataMember] public readonly Number B;

    // With functions 
    [MethodImpl(AggressiveInlining)] public Limacon WithA(Number a) => new Limacon(a, B);
    [MethodImpl(AggressiveInlining)] public Limacon WithB(Number b) => new Limacon(A, b);

    // Regular Constructor
    [MethodImpl(AggressiveInlining)] public Limacon(Number a, Number b) { A = a; B = b; }

    // Static factory function
    [MethodImpl(AggressiveInlining)] public static Limacon Create(Number a, Number b) => new Limacon(a, b);

    // Implicit converters to/from value-tuples and deconstructor
    [MethodImpl(AggressiveInlining)] public static implicit operator (Number, Number)(Limacon self) => (self.A, self.B);
    [MethodImpl(AggressiveInlining)] public static implicit operator Limacon((Number, Number) value) => new(value.Item1, value.Item2);
    [MethodImpl(AggressiveInlining)] public void Deconstruct(out Number a, out Number b) { a = A; b = B;  }

    // Object virtual function overrides: Equals, GetHashCode, ToString
    [MethodImpl(AggressiveInlining)] public Boolean Equals(Limacon other) => A.Equals(other.A) && B.Equals(other.B);
    [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Limacon other) => !A.Equals(other.A) && B.Equals(other.B);
    [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Limacon other ? Equals(other) : false;
    [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(A, B);
    [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"A\" = {A}, \"B\" = {B} }}";

    // Explicit implementation of interfaces by forwarding properties to fields

    // Implemented concept functions and type functions
    [MethodImpl(AggressiveInlining)]  public Number GetRadius(Angle t) => t.Limacon(this.A, this.B);
[MethodImpl(AggressiveInlining)]  public PolarCoordinate EvalPolar(Angle t) => (this.GetRadius(t), t);
[MethodImpl(AggressiveInlining)]  public Vector2 Eval(Angle t) => this.EvalPolar(t);
[MethodImpl(AggressiveInlining)]  public Vector2 Eval(Number t) => this.Eval(t.Turns);
[MethodImpl(AggressiveInlining)]  public IArray<Vector2> Sample(Integer numPoints){
    var _var275 = this;
    return numPoints.LinearSpace.Map((x) =>  => _var275.Eval(x);
;
}

[MethodImpl(AggressiveInlining)]  public PolyLine2D ToPolyLine2D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
[MethodImpl(AggressiveInlining)]  public Procedural<Number, TR> Combine<TR>(Limacon b, System.Func<TR, TR, TR> f){
    var _var278 = b;
    {
        var _var277 = this;
        {
            var _var276 = f;
            return (x) =>  => _var276.Invoke(_var277.Eval(x), _var278.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector2> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var280 = f;
    {
        var _var279 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var279.Eval(_var280.Invoke(x));
;
    }
}

public System.Func<Number, Vector2> Function { [MethodImpl(AggressiveInlining)] get {
    var _var281 = this;
    return (x) =>  => _var281.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Number, Vector2> Compose(Limacon b){
    var _var283 = this;
    {
        var _var282 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var282.Eval(_var283.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, TR> Combine<TR>(Limacon b, System.Func<TR, TR, TR> f){
    var _var286 = b;
    {
        var _var285 = this;
        {
            var _var284 = f;
            return (x) =>  => _var284.Invoke(_var285.Eval(x), _var286.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var288 = f;
    {
        var _var287 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var287.Eval(_var288.Invoke(x));
;
    }
}

public System.Func<Vector2, Number> Function { [MethodImpl(AggressiveInlining)] get {
    var _var289 = this;
    return (x) =>  => _var289.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Number> Compose(Limacon b){
    var _var291 = this;
    {
        var _var290 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var290.Eval(_var291.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Union(Limacon b) => this.Combine(b, (a, b) =>  => a.Max(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Intersection(Limacon b) => this.Combine(b, (a, b) =>  => a.Min(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Difference(Limacon b) => this.Combine(b, (a, b) =>  => a.Max(b.Negative);

public Procedural<Vector2, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) =>  => x.Negative;
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Boolean> Threshold(Number threshold){
    var _var292 = threshold;
    return this.Map((x) =>  => x.GreaterThanOrEquals(_var292);
;
}

public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)false); } 

    // Unimplemented concept functions
    [MethodImpl(AggressiveInlining)]  public Number Distance(Vector2 p) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public Number Eval(Vector2 t) => throw new NotImplementedException();
}
Plato.CSharpWriter.CSharpConcreteTypeWriter}
