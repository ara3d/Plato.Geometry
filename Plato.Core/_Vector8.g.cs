// Autogenerated file: DO NOT EDIT
// Created on 2025-03-14 12:36:59 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Vector8: IVector<Vector8>
    {
        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Vector8 Create(Number x0, Number x1, Number x2, Number x3, Number x4, Number x5, Number x6, Number x7) => new Vector8(x0, x1, x2, x3, x4, x5, x6, x7);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Number, Number, Number, Number, Number, Number, Number, Number)(Vector8 self) => (self.X0, self.X1, self.X2, self.X3, self.X4, self.X5, self.X6, self.X7);
        [MethodImpl(AggressiveInlining)] public static implicit operator Vector8((Number, Number, Number, Number, Number, Number, Number, Number) value) => new(value.Item1, value.Item2, value.Item3, value.Item4, value.Item5, value.Item6, value.Item7, value.Item8);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Number x0, out Number x1, out Number x2, out Number x3, out Number x4, out Number x5, out Number x6, out Number x7) { x0 = X0; x1 = X1; x2 = X2; x3 = X3; x4 = X4; x5 = X5; x6 = X6; x7 = X7;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Vector8 other) => Value.Equals(other.Value);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Vector8 other) => !Value.Equals(other.Value);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Vector8 other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public static Boolean operator==(Vector8 a, Vector8 b) => a.Equals(b);
        [MethodImpl(AggressiveInlining)] public static Boolean operator!=(Vector8 a, Vector8 b) => !a.Equals(b);
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Value.GetHashCode();
        [MethodImpl(AggressiveInlining)] public override string ToString() => Value.ToString();

        // Explicit implementation of interfaces by forwarding properties to fields

        // Array predefined functions
        [MethodImpl(AggressiveInlining)] public Vector8(IReadOnlyList<Number> xs) : this(xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7]) { }
        [MethodImpl(AggressiveInlining)] public Vector8(Number[] xs) : this(xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7]) { }
        [MethodImpl(AggressiveInlining)] public static Vector8 Create(IReadOnlyList<Number> xs) => new Vector8(xs);
        // Implementation of IReadOnlyList
        [MethodImpl(AggressiveInlining)] public System.Collections.Generic.IEnumerator<Number> GetEnumerator() => new ArrayEnumerator<Number>(this);
        [MethodImpl(AggressiveInlining)] System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => GetEnumerator();
        Number System.Collections.Generic.IReadOnlyList<Number>.this[int n] { [MethodImpl(AggressiveInlining)] get => At(n); }
        int System.Collections.Generic.IReadOnlyCollection<Number>.Count { [MethodImpl(AggressiveInlining)] get => this.Count; }

        // IVectorSpace predefined functions
        public static readonly int NumComponents = 8;
        public IArray<Number> Components { [MethodImpl(AggressiveInlining)] get => Intrinsics.MakeArray<Number>(X0, X1, X2, X3, X4, X5, X6, X7); }
        [MethodImpl(AggressiveInlining)] public static Vector8 CreateFromComponents(IArray<Number> numbers) => new Vector8(numbers[0], numbers[1], numbers[2], numbers[3], numbers[4], numbers[5], numbers[6], numbers[7]);

        // Implemented interface functions
        [MethodImpl(AggressiveInlining)]  public Vector8 Add(Vector8 right) => this + right;
        [MethodImpl(AggressiveInlining)]  public Vector8 Subtract(Vector8 right) => this - right;
        [MethodImpl(AggressiveInlining)]  public Vector8 Multiply(Vector8 right) => this * right;
        [MethodImpl(AggressiveInlining)]  public Vector8 Multiply(Number scalar) => this * scalar;
        [MethodImpl(AggressiveInlining)]  public Vector8 Divide(Vector8 right) => this / right;
        [MethodImpl(AggressiveInlining)]  public Vector8 Divide(Number scalar) => this / scalar;
        public Vector8 Negative { [MethodImpl(AggressiveInlining)] get => -this; }
        [MethodImpl(AggressiveInlining)]  public Vector8 BitwiseAnd(Vector8 b) => this & b;
        [MethodImpl(AggressiveInlining)]  public Vector8 BitwiseOr(Vector8 b) => this | b;
        public Vector8 Complement { [MethodImpl(AggressiveInlining)] get => ~this; }
        [MethodImpl(AggressiveInlining)]  public Vector8 LessThan(Vector8 b) => this < b;
        [MethodImpl(AggressiveInlining)]  public Vector8 LessThanOrEquals(Vector8 b) => this <= b;
        [MethodImpl(AggressiveInlining)]  public Vector8 GreaterThan(Vector8 b) => this > b;
        [MethodImpl(AggressiveInlining)]  public Vector8 GreaterThanOrEquals(Vector8 b) => this >= b;
        // MidPoint(Vector8, Vector8):Vector8; [IVector=Vector8;Self=Vector8;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector8 MidPoint(Vector8 b) => this.Add(b).Half;
// Length(Vector8):Number; [IVector=Vector8;Self=Vector8;]; <>
        public Number Length { [MethodImpl(AggressiveInlining)] get  => this.Magnitude; } 
// LengthSquared(Vector8):Number; [IVector=Vector8;Self=Vector8;]; <>
        public Number LengthSquared { [MethodImpl(AggressiveInlining)] get  => this.MagnitudeSquared; } 
// SumSquares(Vector8):Number; [IVector=Vector8;Self=Vector8;]; <>
        public Number SumSquares { [MethodImpl(AggressiveInlining)] get  => this.Sqr.Sum; } 
// MagnitudeSquared(Vector8):Number; [IVector=Vector8;Self=Vector8;]; <>
        public Number MagnitudeSquared { [MethodImpl(AggressiveInlining)] get  => this.SumSquares; } 
// Magnitude(Vector8):Number; [IVector=Vector8;Self=Vector8;]; <>
        public Number Magnitude { [MethodImpl(AggressiveInlining)] get  => this.MagnitudeSquared.Sqrt; } 
// Normalize(Vector8):Vector8; [IVector=Vector8;Self=Vector8;]; <>
        public Vector8 Normalize { [MethodImpl(AggressiveInlining)] get  => this.MagnitudeSquared.GreaterThan(((Integer)0)) ? this.Divide(this.Magnitude) : Constants.Zero; } 
// Reflect(Vector8, Vector8):Vector8; [IVector=Vector8;Self=Vector8;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector8 Reflect(Vector8 normal) => this.Subtract(normal.Multiply(this.Dot(normal).Multiply(((Number)2))));
// Project(Vector8, Vector8):Vector8; [IVector=Vector8;Self=Vector8;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector8 Project(Vector8 other) => other.Multiply(this.Dot(other));
// Distance(Vector8, Vector8):Number; [IVector=Vector8;Self=Vector8;]; <>
        [MethodImpl(AggressiveInlining)]  public Number Distance(Vector8 b) => b.Subtract(this).Magnitude;
// DistanceSquared(Vector8, Vector8):Number; [IVector=Vector8;Self=Vector8;]; <>
        [MethodImpl(AggressiveInlining)]  public Number DistanceSquared(Vector8 b) => b.Subtract(this).MagnitudeSquared;
// Angle(Vector8, Vector8):Angle; [IVector=Vector8;Self=Vector8;]; <>
        [MethodImpl(AggressiveInlining)]  public Angle Angle(Vector8 b) => this.Dot(b).Divide(this.Magnitude.Multiply(b.Magnitude)).Acos;
// IsParallel(Vector8, Vector8):Boolean; [IVector=Vector8;Self=Vector8;]; <>
        [MethodImpl(AggressiveInlining)]  public Boolean IsParallel(Vector8 b) => this.Dot(b).Abs.GreaterThanOrEquals(Constants.One.Subtract(Constants.Epsilon));
// Lerp(Vector8, Vector8, Number):Vector8; [INumerical=Vector8;IVector=Vector8;Self=Vector8;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector8 Lerp(Vector8 b, Number t) => this.Multiply(t.FromOne).Add(b.Multiply(t));
// SmoothStep(Vector8):Vector8; [INumerical=Vector8;IVector=Vector8;Self=Vector8;]; <>
        public Vector8 SmoothStep { [MethodImpl(AggressiveInlining)] get  => this.Sqr.Multiply(this.Twice.Add(((Number)3)).Negative); } 
// SmootherStep(Vector8):Vector8; [INumerical=Vector8;IVector=Vector8;Self=Vector8;]; <>
        public Vector8 SmootherStep { [MethodImpl(AggressiveInlining)] get  => this.Cube.Multiply(this.Multiply(((Number)6)).Subtract(((Number)15))).Add(((Number)10)); } 
// Pow2(Vector8):Vector8; [INumerical=Vector8;IVector=Vector8;Self=Vector8;]; <>
        public Vector8 Pow2 { [MethodImpl(AggressiveInlining)] get  => this.Multiply(this); } 
// Pow3(Vector8):Vector8; [INumerical=Vector8;IVector=Vector8;Self=Vector8;]; <>
        public Vector8 Pow3 { [MethodImpl(AggressiveInlining)] get  => this.Pow2.Multiply(this); } 
// Pow4(Vector8):Vector8; [INumerical=Vector8;IVector=Vector8;Self=Vector8;]; <>
        public Vector8 Pow4 { [MethodImpl(AggressiveInlining)] get  => this.Pow3.Multiply(this); } 
// Pow5(Vector8):Vector8; [INumerical=Vector8;IVector=Vector8;Self=Vector8;]; <>
        public Vector8 Pow5 { [MethodImpl(AggressiveInlining)] get  => this.Pow4.Multiply(this); } 
// Cube(Vector8):Vector8; [INumerical=Vector8;IVector=Vector8;Self=Vector8;]; <>
        public Vector8 Cube { [MethodImpl(AggressiveInlining)] get  => this.Pow3; } 
// PlusOne(Vector8):Vector8; [IVectorSpace=Vector8;INumerical=Vector8;IVector=Vector8;Self=Vector8;]; <>
        public Vector8 PlusOne { [MethodImpl(AggressiveInlining)] get  => this.Add(Constants.One); } 
// MinusOne(Vector8):Vector8; [IVectorSpace=Vector8;INumerical=Vector8;IVector=Vector8;Self=Vector8;]; <>
        public Vector8 MinusOne { [MethodImpl(AggressiveInlining)] get  => this.Subtract(Constants.One); } 
// FromOne(Vector8):Vector8; [IVectorSpace=Vector8;INumerical=Vector8;IVector=Vector8;Self=Vector8;]; <>
        public Vector8 FromOne { [MethodImpl(AggressiveInlining)] get  => this.Add(Constants.One).Negative; } 
// Component(Vector8, Integer):Number; [IVectorSpace=Vector8;INumerical=Vector8;IVector=Vector8;Self=Vector8;]; <>
        [MethodImpl(AggressiveInlining)]  public Number Component(Integer n) => this.Components.At(n);
// MaxComponent(Vector8):Number; [IVectorSpace=Vector8;INumerical=Vector8;IVector=Vector8;Self=Vector8;]; <>
        public Number MaxComponent { [MethodImpl(AggressiveInlining)] get {
            var r = this.Component(((Integer)0));
            {
                var i = ((Integer)1);
                while (i.LessThan(NumComponents))
                {
                    r = r.Max(this.Component(i));
                    i = i.Add(((Integer)1));
                }

            }
            return r;
        }
         } 
// MinComponent(Vector8):Number; [IVectorSpace=Vector8;INumerical=Vector8;IVector=Vector8;Self=Vector8;]; <>
        public Number MinComponent { [MethodImpl(AggressiveInlining)] get {
            var r = this.Component(((Integer)0));
            {
                var i = ((Integer)1);
                while (i.LessThan(NumComponents))
                {
                    r = r.Min(this.Component(i));
                    i = i.Add(((Integer)1));
                }

            }
            return r;
        }
         } 
// MapComponents(Vector8, Function1<Number, Number>):Vector8; [IVectorSpace=Vector8;INumerical=Vector8;IVector=Vector8;Self=Vector8;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector8 MapComponents(System.Func<Number, Number> f) => Vector8.CreateFromComponents(this.Components.Map(f));
// ZipComponents(Vector8, Vector8, Function2<Number, Number, Number>):Vector8; [IVectorSpace=Vector8;INumerical=Vector8;IVector=Vector8;Self=Vector8;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector8 ZipComponents(Vector8 b, System.Func<Number, Number, Number> f) => Vector8.CreateFromComponents(this.Components.Zip(b.Components, f));
// ZipComponents(Vector8, Vector8, Vector8, Function3<Number, Number, Number, Number>):Vector8; [IVectorSpace=Vector8;INumerical=Vector8;IVector=Vector8;Self=Vector8;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector8 ZipComponents(Vector8 b, Vector8 c, System.Func<Number, Number, Number, Number> f) => Vector8.CreateFromComponents(this.Components.Zip(b.Components, c.Components, f));
// AllZipComponents(Vector8, Vector8, Function2<Number, Number, Boolean>):Boolean; [IVectorSpace=Vector8;INumerical=Vector8;IVector=Vector8;Self=Vector8;]; <>
        [MethodImpl(AggressiveInlining)]  public Boolean AllZipComponents(Vector8 b, System.Func<Number, Number, Boolean> f) => this.Components.Zip(b.Components, f).All((x)  => x);
// AllZipComponents(Vector8, Vector8, Vector8, Function3<Number, Number, Number, Boolean>):Boolean; [IVectorSpace=Vector8;INumerical=Vector8;IVector=Vector8;Self=Vector8;]; <>
        [MethodImpl(AggressiveInlining)]  public Boolean AllZipComponents(Vector8 b, Vector8 c, System.Func<Number, Number, Number, Boolean> f) => this.Components.Zip(b.Components, c.Components, f).All((x)  => x);
// AnyZipComponents(Vector8, Vector8, Function2<Number, Number, Boolean>):Boolean; [IVectorSpace=Vector8;INumerical=Vector8;IVector=Vector8;Self=Vector8;]; <>
        [MethodImpl(AggressiveInlining)]  public Boolean AnyZipComponents(Vector8 b, System.Func<Number, Number, Boolean> f) => this.Components.Zip(b.Components, f).Any((x)  => x);
// AnyZipComponents(Vector8, Vector8, Vector8, Function3<Number, Number, Number, Boolean>):Boolean; [IVectorSpace=Vector8;INumerical=Vector8;IVector=Vector8;Self=Vector8;]; <>
        [MethodImpl(AggressiveInlining)]  public Boolean AnyZipComponents(Vector8 b, Vector8 c, System.Func<Number, Number, Number, Boolean> f) => this.Components.Zip(b.Components, c.Components, f).Any((x)  => x);
// AllComponents(Vector8, Function1<Number, Boolean>):Boolean; [IVectorSpace=Vector8;INumerical=Vector8;IVector=Vector8;Self=Vector8;]; <>
        [MethodImpl(AggressiveInlining)]  public Boolean AllComponents(System.Func<Number, Boolean> predicate) => this.Components.All(predicate);
// AnyComponent(Vector8, Function1<Number, Boolean>):Boolean; [IVectorSpace=Vector8;INumerical=Vector8;IVector=Vector8;Self=Vector8;]; <>
        [MethodImpl(AggressiveInlining)]  public Boolean AnyComponent(System.Func<Number, Boolean> predicate) => this.Components.Any(predicate);
// InversePow(Vector8, Vector8):Vector8; [IVectorSpace=Vector8;INumerical=Vector8;IVector=Vector8;Self=Vector8;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector8 InversePow(Vector8 n) => this.Pow(n.Reciprocal);
// Fract(Vector8):Vector8; [IVectorSpace=Vector8;INumerical=Vector8;IVector=Vector8;Self=Vector8;]; <>
        public Vector8 Fract { [MethodImpl(AggressiveInlining)] get  => this.Subtract(this.Floor); } 
// ClampZeroOne(Vector8):Vector8; [IVectorSpace=Vector8;INumerical=Vector8;IVector=Vector8;Self=Vector8;]; <>
        public Vector8 ClampZeroOne { [MethodImpl(AggressiveInlining)] get  => this.Clamp(Constants.Zero, Constants.One); } 
// Between(Vector8, Vector8, Vector8):Boolean; [IVectorSpace=Vector8;INumerical=Vector8;IVector=Vector8;Self=Vector8;]; <>
        [MethodImpl(AggressiveInlining)]  public Boolean Between(Vector8 a, Vector8 b) => this.AllZipComponents(a, b, (x0, a0, b0)  => x0.Between(a0, b0));
// BetweenZeroOne(Vector8):Boolean; [IVectorSpace=Vector8;INumerical=Vector8;IVector=Vector8;Self=Vector8;]; <>
        public Boolean BetweenZeroOne { [MethodImpl(AggressiveInlining)] get  => this.Between(Constants.Zero, Constants.One); } 
// Pow(Vector8, Vector8):Vector8; [IVectorSpace=Vector8;INumerical=Vector8;IVector=Vector8;Self=Vector8;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector8 Pow(Vector8 y) => this.ZipComponents(y, (a, b)  => a.Pow(b));
// Half(Vector8):Vector8; [IScalarArithmetic=Vector8;IVectorSpace=Vector8;INumerical=Vector8;IVector=Vector8;Self=Vector8;]; <>
        public Vector8 Half { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)2)); } 
// Quarter(Vector8):Vector8; [IScalarArithmetic=Vector8;IVectorSpace=Vector8;INumerical=Vector8;IVector=Vector8;Self=Vector8;]; <>
        public Vector8 Quarter { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)4)); } 
// Eight(Vector8):Vector8; [IScalarArithmetic=Vector8;IVectorSpace=Vector8;INumerical=Vector8;IVector=Vector8;Self=Vector8;]; <>
        public Vector8 Eight { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)8)); } 
// Sixteenth(Vector8):Vector8; [IScalarArithmetic=Vector8;IVectorSpace=Vector8;INumerical=Vector8;IVector=Vector8;Self=Vector8;]; <>
        public Vector8 Sixteenth { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)16)); } 
// Tenth(Vector8):Vector8; [IScalarArithmetic=Vector8;IVectorSpace=Vector8;INumerical=Vector8;IVector=Vector8;Self=Vector8;]; <>
        public Vector8 Tenth { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)10)); } 
// Twice(Vector8):Vector8; [IScalarArithmetic=Vector8;IVectorSpace=Vector8;INumerical=Vector8;IVector=Vector8;Self=Vector8;]; <>
        public Vector8 Twice { [MethodImpl(AggressiveInlining)] get  => this.Multiply(((Number)2)); } 
// Hundred(Vector8):Vector8; [IScalarArithmetic=Vector8;IVectorSpace=Vector8;INumerical=Vector8;IVector=Vector8;Self=Vector8;]; <>
        public Vector8 Hundred { [MethodImpl(AggressiveInlining)] get  => this.Multiply(((Number)100)); } 
// Thousand(Vector8):Vector8; [IScalarArithmetic=Vector8;IVectorSpace=Vector8;INumerical=Vector8;IVector=Vector8;Self=Vector8;]; <>
        public Vector8 Thousand { [MethodImpl(AggressiveInlining)] get  => this.Multiply(((Number)1000)); } 
// Million(Vector8):Vector8; [IScalarArithmetic=Vector8;IVectorSpace=Vector8;INumerical=Vector8;IVector=Vector8;Self=Vector8;]; <>
        public Vector8 Million { [MethodImpl(AggressiveInlining)] get  => this.Thousand.Thousand; } 
// Billion(Vector8):Vector8; [IScalarArithmetic=Vector8;IVectorSpace=Vector8;INumerical=Vector8;IVector=Vector8;Self=Vector8;]; <>
        public Vector8 Billion { [MethodImpl(AggressiveInlining)] get  => this.Thousand.Million; } 
// Hundredth(Vector8):Vector8; [IScalarArithmetic=Vector8;IVectorSpace=Vector8;INumerical=Vector8;IVector=Vector8;Self=Vector8;]; <>
        public Vector8 Hundredth { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)100)); } 
// Thousandth(Vector8):Vector8; [IScalarArithmetic=Vector8;IVectorSpace=Vector8;INumerical=Vector8;IVector=Vector8;Self=Vector8;]; <>
        public Vector8 Thousandth { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)1000)); } 
// Millionth(Vector8):Vector8; [IScalarArithmetic=Vector8;IVectorSpace=Vector8;INumerical=Vector8;IVector=Vector8;Self=Vector8;]; <>
        public Vector8 Millionth { [MethodImpl(AggressiveInlining)] get  => this.Thousandth.Thousandth; } 
// Billionth(Vector8):Vector8; [IScalarArithmetic=Vector8;IVectorSpace=Vector8;INumerical=Vector8;IVector=Vector8;Self=Vector8;]; <>
        public Vector8 Billionth { [MethodImpl(AggressiveInlining)] get  => this.Thousandth.Millionth; } 

        // Unimplemented concept functions
        public Integer Count { [MethodImpl(AggressiveInlining)] get => 8; }
        [MethodImpl(AggressiveInlining)]  public Number At(Integer n) => n == 0 ? X0 : n == 1 ? X1 : n == 2 ? X2 : n == 3 ? X3 : n == 4 ? X4 : n == 5 ? X5 : n == 6 ? X6 : n == 7 ? X7 : throw new System.IndexOutOfRangeException();
        public Number this[Integer n] { [MethodImpl(AggressiveInlining)] get => At(n); }
        [MethodImpl(AggressiveInlining)]  public Vector8 Modulo(Vector8 b) => this % b;
        [MethodImpl(AggressiveInlining)]  public Vector8 Modulo(Number other) => this % other;
    }
}
