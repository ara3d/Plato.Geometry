// Autogenerated file: DO NOT EDIT
// Created on 2025-03-14 12:36:59 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Cardoid: IPolarCurve, IClosedShape
    {
        // Fields

        // With functions 

        // Regular Constructor

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Cardoid Create() => new Cardoid();

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Cardoid;
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Cardoid other) => true;
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Cardoid other) => false;
        [MethodImpl(AggressiveInlining)] public static Boolean operator==(Cardoid a, Cardoid b) => true;
        [MethodImpl(AggressiveInlining)] public static Boolean operator!=(Cardoid a, Cardoid b) => false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes();
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{  }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented interface functions
        // GetRadius(Cardoid, Angle):Number; [Self=Cardoid;]; <>
        [MethodImpl(AggressiveInlining)]  public Number GetRadius(Angle t) => t.Cardoid;
// EvalPolar(Cardoid, Angle):PolarCoordinate; [IPolarCurve=Cardoid;Self=Cardoid;]; <>
        [MethodImpl(AggressiveInlining)]  public PolarCoordinate EvalPolar(Angle t) => (this.GetRadius(t), t);
// Eval(Cardoid, Angle):Vector2; [IPolarCurve=Cardoid;Self=Cardoid;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector2 Eval(Angle t) => this.EvalPolar(t);
// Eval(Cardoid, Number):Vector2; [IAngularCurve2D=Cardoid;IPolarCurve=Cardoid;Self=Cardoid;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector2 Eval(Number t) => this.Eval(t.Turns);
// Sample(Cardoid, Integer):_T0; [ICurve2D=Cardoid;IAngularCurve2D=Cardoid;IPolarCurve=Cardoid;Self=Cardoid;]; <_T0:IArray<Vector2>>
        [MethodImpl(AggressiveInlining)]  public _T0 Sample<_T0>(Integer numPoints){
            var _var68 = this;
            return numPoints.LinearSpace.Map((x)  => _var68.Eval(x));
        }

// ToPolyLine2D(Cardoid, Integer):PolyLine2D; [ICurve2D=Cardoid;IAngularCurve2D=Cardoid;IPolarCurve=Cardoid;Self=Cardoid;]; <>
        [MethodImpl(AggressiveInlining)]  public PolyLine2D ToPolyLine2D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
// Closed(Cardoid):Boolean; [IClosedShape=Cardoid;Self=Cardoid;]; <>
        public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 

        // Unimplemented concept functions
    }
}
