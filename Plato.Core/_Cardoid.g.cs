// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 8:08:08 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
public partial struct Cardoid: IPolarCurve, IClosedShape
{
    // Fields

    // With functions 

    // Regular Constructor

    // Static factory function
    [MethodImpl(AggressiveInlining)] public static Cardoid Create() => new Cardoid();

    // Object virtual function overrides: Equals, GetHashCode, ToString
    [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Cardoid;
    [MethodImpl(AggressiveInlining)] public Boolean Equals(Cardoid other) => true;
    [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Cardoid other) => false;
    [MethodImpl(AggressiveInlining)] public static Boolean operator==(Cardoid a, Cardoid b) => true;
    [MethodImpl(AggressiveInlining)] public static Boolean operator!=(Cardoid a, Cardoid b) => false;
    [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes();
    [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{  }}";

    // Explicit implementation of interfaces by forwarding properties to fields

    // Implemented concept functions and type functions
    [MethodImpl(AggressiveInlining)]  public Number GetRadius(Angle t) => t.Cardoid;
[MethodImpl(AggressiveInlining)]  public PolarCoordinate EvalPolar(Angle t) => (this.GetRadius(t), t);
[MethodImpl(AggressiveInlining)]  public Vector2 Eval(Angle t) => this.EvalPolar(t);
[MethodImpl(AggressiveInlining)]  public Vector2 Eval(Number t) => this.Eval(t.Turns);
[MethodImpl(AggressiveInlining)]  public IArray<Vector2> Sample(Integer numPoints){
    var _var293 = this;
    return numPoints.LinearSpace.Map((x) =>  => _var293.Eval(x);
;
}

[MethodImpl(AggressiveInlining)]  public PolyLine2D ToPolyLine2D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
[MethodImpl(AggressiveInlining)]  public Procedural<Number, TR> Combine<TR>(Cardoid b, System.Func<TR, TR, TR> f){
    var _var296 = b;
    {
        var _var295 = this;
        {
            var _var294 = f;
            return (x) =>  => _var294.Invoke(_var295.Eval(x), _var296.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector2> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var298 = f;
    {
        var _var297 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var297.Eval(_var298.Invoke(x));
;
    }
}

public System.Func<Number, Vector2> Function { [MethodImpl(AggressiveInlining)] get {
    var _var299 = this;
    return (x) =>  => _var299.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Number, Vector2> Compose(Cardoid b){
    var _var301 = this;
    {
        var _var300 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var300.Eval(_var301.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, TR> Combine<TR>(Cardoid b, System.Func<TR, TR, TR> f){
    var _var304 = b;
    {
        var _var303 = this;
        {
            var _var302 = f;
            return (x) =>  => _var302.Invoke(_var303.Eval(x), _var304.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var306 = f;
    {
        var _var305 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var305.Eval(_var306.Invoke(x));
;
    }
}

public System.Func<Vector2, Number> Function { [MethodImpl(AggressiveInlining)] get {
    var _var307 = this;
    return (x) =>  => _var307.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Number> Compose(Cardoid b){
    var _var309 = this;
    {
        var _var308 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var308.Eval(_var309.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Union(Cardoid b) => this.Combine(b, (a, b) =>  => a.Max(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Intersection(Cardoid b) => this.Combine(b, (a, b) =>  => a.Min(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Difference(Cardoid b) => this.Combine(b, (a, b) =>  => a.Max(b.Negative);

public Procedural<Vector2, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) =>  => x.Negative;
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Boolean> Threshold(Number threshold){
    var _var310 = threshold;
    return this.Map((x) =>  => x.GreaterThanOrEquals(_var310);
;
}

public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 

    // Unimplemented concept functions
    [MethodImpl(AggressiveInlining)]  public Number Distance(Vector2 p) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public Number Eval(Vector2 t) => throw new NotImplementedException();
}
Plato.CSharpWriter.CSharpConcreteTypeWriter}
