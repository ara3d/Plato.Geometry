// Autogenerated file: DO NOT EDIT
// Created on 2025-03-14 12:36:59 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct QuadArray2D: IQuadArray2D
    {
        // Fields
        [DataMember] public readonly IArray<Quad2D> Quads;

        // With functions 
        [MethodImpl(AggressiveInlining)] public QuadArray2D WithQuads(IArray<Quad2D> quads) => new QuadArray2D(quads);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public QuadArray2D(IArray<Quad2D> quads) { Quads = quads; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static QuadArray2D Create(IArray<Quad2D> quads) => new QuadArray2D(quads);

        // Implicit converters to/from single field

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(QuadArray2D other) => Quads.Equals(other.Quads);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(QuadArray2D other) => !Quads.Equals(other.Quads);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is QuadArray2D other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Quads);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Quads\" = {Quads} }}";

        // Explicit implementation of interfaces by forwarding properties to fields
        IArray<Quad2D> IQuadGeometry2D.Quads { [MethodImpl(AggressiveInlining)] get => Quads; }

        // Implemented interface functions
        // Indices(QuadArray2D):_T0; [IQuadArray2D=QuadArray2D;Self=QuadArray2D;]; <_T0:IArray<Integer>>
        public _T0 Indices<_T0> { [MethodImpl(AggressiveInlining)] get  => this.Points.Indices(); } 
// Points(QuadArray2D):_T0; [IQuadArray2D=QuadArray2D;Self=QuadArray2D;]; <_T0:IArray<Vector2>>
        public _T0 Points<_T0> { [MethodImpl(AggressiveInlining)] get  => this.Quads.FlatMap((x)  => x.Points); } 
// Lines(QuadArray2D):_T0; [IQuadArray2D=QuadArray2D;Self=QuadArray2D;]; <_T0:IArray<Line2D>>
        public _T0 Lines<_T0> { [MethodImpl(AggressiveInlining)] get  => this.Quads.FlatMap((x)  => x.Lines); } 
// Triangles(QuadArray2D):_T0; [IQuadArray2D=QuadArray2D;Self=QuadArray2D;]; <_T0:IArray<Triangle2D>>
        public _T0 Triangles<_T0> { [MethodImpl(AggressiveInlining)] get  => this.Quads.FlatMap((x)  => x.Triangles); } 
// Faces(QuadArray2D):_T0; [IQuadMesh2D=QuadArray2D;IQuadArray2D=QuadArray2D;Self=QuadArray2D;]; <_T0:IArray<Quad2D>>
        public _T0 Faces<_T0> { [MethodImpl(AggressiveInlining)] get  => this.Quads; } 
// Vertex(QuadArray2D, Integer):Vector2; [IIndexedGeometry2D=QuadArray2D;IQuadMesh2D=QuadArray2D;IQuadArray2D=QuadArray2D;Self=QuadArray2D;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector2 Vertex(Integer n) => this.Points.At(this.Indices.At(n));
// FaceVertices(QuadArray2D, Integer):_T0; [IIndexedGeometry2D=QuadArray2D;IQuadMesh2D=QuadArray2D;IQuadArray2D=QuadArray2D;Self=QuadArray2D;]; <_T0:IArray<Vector2>>
        [MethodImpl(AggressiveInlining)]  public _T0 FaceVertices<_T0>(Integer f){
            var _var177 = this;
            return this.FaceIndices.At(f).Map((i)  => _var177.Vertex(i));
        }

// AllFaceVertices(QuadArray2D):_T0; [IIndexedGeometry2D=QuadArray2D;IQuadMesh2D=QuadArray2D;IQuadArray2D=QuadArray2D;Self=QuadArray2D;]; <_T0:IArray2D<Vector2>>
        public _T0 AllFaceVertices<_T0> { [MethodImpl(AggressiveInlining)] get {
            var _var178 = this;
            return this.AllFaceIndices.Map((x)  => _var178.Vertex(x));
        }
         } 
// Vertices(QuadArray2D, _T0):_T1; [IIndexedGeometry2D=QuadArray2D;IQuadMesh2D=QuadArray2D;IQuadArray2D=QuadArray2D;Self=QuadArray2D;]; <_T0:IArray<Integer>, _T1:IArray<Vector2>>
        [MethodImpl(AggressiveInlining)]  public _T1 Vertices<_T0, _T1>(_T0 xs){
            var _var179 = this;
            return xs.Map((i)  => _var179.Vertex(i));
        }

// AllVertices(QuadArray2D):_T0; [IIndexedGeometry2D=QuadArray2D;IQuadMesh2D=QuadArray2D;IQuadArray2D=QuadArray2D;Self=QuadArray2D;]; <_T0:IArray<Vector2>>
        public _T0 AllVertices<_T0> { [MethodImpl(AggressiveInlining)] get  => this.Vertices(this.Indices); } 
// NumPrimitives(QuadArray2D):Integer; [IIndexedGeometry=QuadArray2D;IIndexedGeometry2D=QuadArray2D;IQuadMesh2D=QuadArray2D;IQuadArray2D=QuadArray2D;Self=QuadArray2D;]; <>
        public Integer NumPrimitives { [MethodImpl(AggressiveInlining)] get  => this.Indices.Count.Divide(this.PrimitiveSize); } 
// NumFaces(QuadArray2D):Integer; [IIndexedGeometry=QuadArray2D;IIndexedGeometry2D=QuadArray2D;IQuadMesh2D=QuadArray2D;IQuadArray2D=QuadArray2D;Self=QuadArray2D;]; <>
        public Integer NumFaces { [MethodImpl(AggressiveInlining)] get  => this.NumPrimitives; } 
// AllFaceIndices(QuadArray2D):_T0; [IIndexedGeometry=QuadArray2D;IIndexedGeometry2D=QuadArray2D;IQuadMesh2D=QuadArray2D;IQuadArray2D=QuadArray2D;Self=QuadArray2D;]; <_T0:IArray2D<Integer>>
        public _T0 AllFaceIndices<_T0> { [MethodImpl(AggressiveInlining)] get  => this.Indices.Slices(this.PrimitiveSize); } 
// PrimitiveSize(QuadArray2D):Integer; [IQuadGeometry=QuadArray2D;IQuadGeometry2D=QuadArray2D;IQuadMesh2D=QuadArray2D;IQuadArray2D=QuadArray2D;Self=QuadArray2D;]; <>
        public Integer PrimitiveSize { [MethodImpl(AggressiveInlining)] get  => ((Integer)4); } 
// FaceIndices(QuadArray2D):_T0; [IQuadGeometry=QuadArray2D;IQuadGeometry2D=QuadArray2D;IQuadMesh2D=QuadArray2D;IQuadArray2D=QuadArray2D;Self=QuadArray2D;]; <_T0:IArray<Integer4>>
        public _T0 FaceIndices<_T0> { [MethodImpl(AggressiveInlining)] get  => this.Indices.Integer4Array; } 

        // Unimplemented concept functions
        // Corners(QuadArray2D):_T0; [IPrimitiveGeometry2D=QuadArray2D;IQuadGeometry2D=QuadArray2D;IQuadMesh2D=QuadArray2D;IQuadArray2D=QuadArray2D;Self=QuadArray2D;]; <_T0:IArray<Vector2>>
        public _T0 Corners<_T0> => throw new NotImplementedException();
}
}
