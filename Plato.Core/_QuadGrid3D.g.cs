// Autogenerated file: DO NOT EDIT
// Created on 2025-04-07 4:05:19 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct QuadGrid3D: IQuadGrid3D<QuadGrid3D>
    {
        // Fields
        [DataMember] public readonly IArray2D<Point3D> PointGrid;
        [DataMember] public readonly Boolean ClosedX;
        [DataMember] public readonly Boolean ClosedY;

        // With functions 
        [MethodImpl(AggressiveInlining)] public QuadGrid3D WithPointGrid(IArray2D<Point3D> pointGrid) => new QuadGrid3D(pointGrid, ClosedX, ClosedY);
        [MethodImpl(AggressiveInlining)] public QuadGrid3D WithClosedX(Boolean closedX) => new QuadGrid3D(PointGrid, closedX, ClosedY);
        [MethodImpl(AggressiveInlining)] public QuadGrid3D WithClosedY(Boolean closedY) => new QuadGrid3D(PointGrid, ClosedX, closedY);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public QuadGrid3D(IArray2D<Point3D> pointGrid, Boolean closedX, Boolean closedY) { PointGrid = pointGrid; ClosedX = closedX; ClosedY = closedY; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static QuadGrid3D Create(IArray2D<Point3D> pointGrid, Boolean closedX, Boolean closedY) => new QuadGrid3D(pointGrid, closedX, closedY);

        // Static default implementation
        public static readonly QuadGrid3D Default = default;

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (IArray2D<Point3D>, Boolean, Boolean)(QuadGrid3D self) => (self.PointGrid, self.ClosedX, self.ClosedY);
        [MethodImpl(AggressiveInlining)] public static implicit operator QuadGrid3D((IArray2D<Point3D>, Boolean, Boolean) value) => new QuadGrid3D(value.Item1, value.Item2, value.Item3);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out IArray2D<Point3D> pointGrid, out Boolean closedX, out Boolean closedY) { pointGrid = PointGrid; closedX = ClosedX; closedY = ClosedY;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(QuadGrid3D other) => PointGrid.Equals(other.PointGrid) && ClosedX.Equals(other.ClosedX) && ClosedY.Equals(other.ClosedY);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(QuadGrid3D other) => !PointGrid.Equals(other.PointGrid) && ClosedX.Equals(other.ClosedX) && ClosedY.Equals(other.ClosedY);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is QuadGrid3D other ? Equals(other).Value : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(PointGrid, ClosedX, ClosedY);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"PointGrid\" = {PointGrid}, \"ClosedX\" = {ClosedX}, \"ClosedY\" = {ClosedY} }}";

        // Explicit implementation of interfaces by forwarding properties to fields
        IArray2D<Point3D> IQuadGrid3D<QuadGrid3D>.PointGrid { [MethodImpl(AggressiveInlining)] get => PointGrid; }
        Boolean IQuadGrid3D<QuadGrid3D>.ClosedX { [MethodImpl(AggressiveInlining)] get => ClosedX; }
        Boolean IQuadGrid3D<QuadGrid3D>.ClosedY { [MethodImpl(AggressiveInlining)] get => ClosedY; }

        // Implemented interface functions
        [MethodImpl(AggressiveInlining)]  public QuadGrid3D Deform(System.Func<Point3D, Point3D> f) => new QuadGrid3D(this.PointGrid.Map(f), this.ClosedX, this.ClosedY);
public Integer NumColumns { [MethodImpl(AggressiveInlining)] get  => this.PointGrid.NumColumns; } 
public Integer NumRows { [MethodImpl(AggressiveInlining)] get  => this.PointGrid.NumRows; } 
public IArray<Vector3> Points { [MethodImpl(AggressiveInlining)] get  => this.PointGrid; } 
public IArray<Integer> Indices { [MethodImpl(AggressiveInlining)] get  => this.PointGrid.AllQuadFaceIndices(this.ClosedX, this.ClosedY).FlatMap((x)  => x.Components); } 
public IArray<Quad3D> Indices { [MethodImpl(AggressiveInlining)] get  => this.FaceIndices.FlatMap((fi)  => fi.Components); } 
public IArray<Quad3D> Faces { [MethodImpl(AggressiveInlining)] get  => this.Quads; } 
public IArray<Quad3D> Quads { [MethodImpl(AggressiveInlining)] get  => this.FaceIndices.Map((xs)  => new Quad3D(xs.At(((Integer)0)), xs.At(((Integer)1)), xs.At(((Integer)2)), xs.At(((Integer)3)))); } 
public Integer NumPrimitives { [MethodImpl(AggressiveInlining)] get  => this.Indices.Count.Divide(this.PrimitiveSize); } 
[MethodImpl(AggressiveInlining)]  public QuadGrid3D Deform<_T0>(_T0 t) where _T0 : ITransform3D{
            var _var172 = t;
            return this.Deform((v)  => _var172.Transform(v));
        }

[MethodImpl(AggressiveInlining)]  public QuadGrid3D Scale(Vector3 v){
            var _var173 = v;
            return this.Deform((p)  => p.Vector3.Multiply(_var173));
        }

[MethodImpl(AggressiveInlining)]  public QuadGrid3D Scale(Number s) => this.Scale((s, s, s));
[MethodImpl(AggressiveInlining)]  public QuadGrid3D ScaleX(Number s) => this.Scale((s, ((Integer)1), ((Integer)1)));
[MethodImpl(AggressiveInlining)]  public QuadGrid3D ScaleY(Number s) => this.Scale((((Integer)1), s, ((Integer)1)));
[MethodImpl(AggressiveInlining)]  public QuadGrid3D ScaleZ(Number s) => this.Scale((((Integer)1), ((Integer)1), s));
[MethodImpl(AggressiveInlining)]  public QuadGrid3D Rotate(Quaternion q){
            var _var174 = q;
            return this.Deform((v)  => _var174.Transform(v));
        }

[MethodImpl(AggressiveInlining)]  public QuadGrid3D RotateX(Angle a) => this.Rotate(a.RotateX);
[MethodImpl(AggressiveInlining)]  public QuadGrid3D RotateY(Angle a) => this.Rotate(a.RotateY);
[MethodImpl(AggressiveInlining)]  public QuadGrid3D RotateZ(Angle a) => this.Rotate(a.RotateZ);
[MethodImpl(AggressiveInlining)]  public QuadGrid3D Translate(Vector3 v){
            var _var175 = v;
            return this.Deform((p)  => p.Add(_var175));
        }

[MethodImpl(AggressiveInlining)]  public QuadGrid3D TranslateX(Number s) => this.Translate(s.XVector3);
[MethodImpl(AggressiveInlining)]  public QuadGrid3D TranslateY(Number s) => this.Translate(s.YVector3);
[MethodImpl(AggressiveInlining)]  public QuadGrid3D TranslateZ(Number s) => this.Translate(s.ZVector3);
public Integer PrimitiveSize { [MethodImpl(AggressiveInlining)] get  => ((Integer)4); } 

        // Unimplemented interface functions
        public Bounds3D Bounds => throw new NotImplementedException();
public IArray<Point3D> Points => throw new NotImplementedException();
public IArray<Quad3D> Primitives => throw new NotImplementedException();
}
}
