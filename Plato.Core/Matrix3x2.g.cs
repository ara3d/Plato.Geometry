// Autogenerated file: DO NOT EDIT
// Created on 2025-01-20 10:41:00 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Matrix3x2: IValue, IArray<Vector3>
    {
        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Matrix3x2 Create(Vector2 row1, Vector2 row2, Vector2 row3) => new Matrix3x2(row1, row2, row3);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Vector2, Vector2, Vector2)(Matrix3x2 self) => (self.Row1, self.Row2, self.Row3);
        [MethodImpl(AggressiveInlining)] public static implicit operator Matrix3x2((Vector2, Vector2, Vector2) value) => new(value.Item1, value.Item2, value.Item3);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Vector2 row1, out Vector2 row2, out Vector2 row3) { row1 = Row1; row2 = Row2; row3 = Row3;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Matrix3x2 other) => Value.Equals(other.Value);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Matrix3x2 other) => !Value.Equals(other.Value);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Matrix3x2 other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public static Boolean operator==(Matrix3x2 a, Matrix3x2 b) => a.Equals(b);
        [MethodImpl(AggressiveInlining)] public static Boolean operator!=(Matrix3x2 a, Matrix3x2 b) => !a.Equals(b);
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Value.GetHashCode();
        [MethodImpl(AggressiveInlining)] public override string ToString() => Value.ToString();

        // Explicit implementation of interfaces by forwarding properties to fields

        // Array predefined functions
        // Implementation of IReadOnlyList
        [MethodImpl(AggressiveInlining)] public System.Collections.Generic.IEnumerator<Vector3> GetEnumerator() => new ArrayEnumerator<Vector3>(this);
        [MethodImpl(AggressiveInlining)] System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => GetEnumerator();
        Vector3 System.Collections.Generic.IReadOnlyList<Vector3>.this[int n] { [MethodImpl(AggressiveInlining)] get => At(n); }
        int System.Collections.Generic.IReadOnlyCollection<Vector3>.Count { [MethodImpl(AggressiveInlining)] get => this.Count; }

        // Implemented concept functions and type functions
        [MethodImpl(AggressiveInlining)]  public Matrix3x2 Add(Matrix3x2 value2) => this + value2;
        [MethodImpl(AggressiveInlining)]  public Matrix3x2 Subtract(Matrix3x2 value2) => this - value2;
        [MethodImpl(AggressiveInlining)]  public Matrix3x2 Multiply(Matrix3x2 value2) => this * value2;
        [MethodImpl(AggressiveInlining)]  public Matrix3x2 Multiply(Number scalar) => this * scalar;
        [MethodImpl(AggressiveInlining)]  public Matrix3x2 Divide(Number scalar) => this / scalar;

        // Unimplemented concept functions
        public Integer Count { [MethodImpl(AggressiveInlining)] get => 3; }
        [MethodImpl(AggressiveInlining)]  public Vector3 At(Integer n) => n == 0 ? Row1 : n == 1 ? Row2 : n == 2 ? Row3 : throw new System.IndexOutOfRangeException();
        public Vector3 this[Integer n] { [MethodImpl(AggressiveInlining)] get => At(n); }
    }
}
