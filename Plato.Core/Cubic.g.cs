// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 11:25:56 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Cubic: IRealFunction
    {
        // Fields
        [DataMember] public readonly Number A;
        [DataMember] public readonly Number B;
        [DataMember] public readonly Number C;
        [DataMember] public readonly Number D;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Cubic WithA(Number a) => new Cubic(a, B, C, D);
        [MethodImpl(AggressiveInlining)] public Cubic WithB(Number b) => new Cubic(A, b, C, D);
        [MethodImpl(AggressiveInlining)] public Cubic WithC(Number c) => new Cubic(A, B, c, D);
        [MethodImpl(AggressiveInlining)] public Cubic WithD(Number d) => new Cubic(A, B, C, d);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Cubic(Number a, Number b, Number c, Number d) { A = a; B = b; C = c; D = d; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Cubic Create(Number a, Number b, Number c, Number d) => new Cubic(a, b, c, d);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Number, Number, Number, Number)(Cubic self) => (self.A, self.B, self.C, self.D);
        [MethodImpl(AggressiveInlining)] public static implicit operator Cubic((Number, Number, Number, Number) value) => new(value.Item1, value.Item2, value.Item3, value.Item4);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Number a, out Number b, out Number c, out Number d) { a = A; b = B; c = C; d = D;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Cubic other) => A.Equals(other.A) && B.Equals(other.B) && C.Equals(other.C) && D.Equals(other.D);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Cubic other) => !A.Equals(other.A) && B.Equals(other.B) && C.Equals(other.C) && D.Equals(other.D);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Cubic other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(A, B, C, D);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"A\" = {A}, \"B\" = {B}, \"C\" = {C}, \"D\" = {D} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented concept functions and type functions
        [MethodImpl(AggressiveInlining)]  public Number Eval(Number x) => x.Cubic(this.A, this.B, this.C, this.D);

        // Unimplemented concept functions
    }
}
