// Autogenerated file: DO NOT EDIT
// Created on 2025-01-17 3:12:39 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct TriangleArray3D: ITriangleArray3D<TriangleArray3D>
    {
        // Fields
        [DataMember] public readonly IArray<Triangle3D> Triangles;

        // With functions 
        [MethodImpl(AggressiveInlining)] public TriangleArray3D WithTriangles(IArray<Triangle3D> triangles) => new TriangleArray3D(triangles);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public TriangleArray3D(IArray<Triangle3D> triangles) { Triangles = triangles; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static TriangleArray3D Create(IArray<Triangle3D> triangles) => new TriangleArray3D(triangles);

        // Implicit converters to/from single field

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(TriangleArray3D other) => Triangles.Equals(other.Triangles);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is TriangleArray3D other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Triangles);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Triangles\" = {Triangles} }}";

        // Explicit implementation of interfaces by forwarding properties to fields
        IArray<Triangle3D> ITriangleGeometry3D<TriangleArray3D>.Triangles { [MethodImpl(AggressiveInlining)] get => Triangles; }

        // Implemented concept functions and type functions
        [MethodImpl(AggressiveInlining)]  public TriangleArray3D Deform(System.Func<Vector3, Vector3> f){
            var _var254 = f;
            return new Any(TriangleArray3D, this.Triangles.Map((t) => t.Deform(_var254)));
        }

        public IArray<Integer> Indices { [MethodImpl(AggressiveInlining)] get  => this.Points.Indices(); } 
        public TriangleMesh3D TriangleMesh3D { [MethodImpl(AggressiveInlining)] get  => (this.Points, this.Points.Indices()); } 
        [MethodImpl(AggressiveInlining)]  public static implicit operator TriangleMesh3D(TriangleArray3D g) => g.TriangleMesh3D;
        public IArray<Vector3> Points { [MethodImpl(AggressiveInlining)] get  => this.Triangles.FlatMap((x) => x.Points); } 
        public IArray<Line3D> Lines { [MethodImpl(AggressiveInlining)] get  => this.Triangles.FlatMap((x) => x.Lines); } 
        public LineMesh3D LineMesh3D { [MethodImpl(AggressiveInlining)] get  => (this.Points, this.AllFaceIndices.FlatMap((a) => Intrinsics.MakeArray(a.At(((Integer)0)), a.At(((Integer)1)), a.At(((Integer)2)), a.At(((Integer)0))))); } 
        [MethodImpl(AggressiveInlining)]  public static implicit operator LineMesh3D(TriangleArray3D g) => g.LineMesh3D;
        public IArray<Triangle3D> Faces { [MethodImpl(AggressiveInlining)] get  => this.Triangles; } 
        [MethodImpl(AggressiveInlining)]  public IArray<Vector3> FaceVertices(Integer f){
            var _var255 = this;
            return this.FaceIndices(f).Map((i) => _var255.Vertex(i));
        }

        [MethodImpl(AggressiveInlining)]  public Vector3 Vertex(Integer n) => this.Points.At(this.Indices.At(n));
        [MethodImpl(AggressiveInlining)]  public IArray<Vector3> Vertices(IArray<Integer> xs){
            var _var256 = this;
            return xs.Map((i) => _var256.Vertex(i));
        }

        public IArray<IArray<Vector3>> AllFaceVertices { [MethodImpl(AggressiveInlining)] get {
            var _var257 = this;
            return this.Indices.Slices(this.PrimitiveSize).Map((xs) => _var257.Vertices(xs));
        }
         } 
        public IArray<Vector3> AllVertices { [MethodImpl(AggressiveInlining)] get  => this.Vertices(this.Indices); } 
        public Integer NumPrimitives { [MethodImpl(AggressiveInlining)] get  => this.Indices.Count.Divide(this.PrimitiveSize); } 
        public Integer NumFaces { [MethodImpl(AggressiveInlining)] get  => this.NumPrimitives; } 
        [MethodImpl(AggressiveInlining)]  public IArray<Integer> FaceIndices(Integer f) => this.Indices.NthSlice(f, this.PrimitiveSize);
        public IArray<IArray<Integer>> AllFaceIndices { [MethodImpl(AggressiveInlining)] get  => this.Indices.Slices(this.PrimitiveSize); } 
        [MethodImpl(AggressiveInlining)]  public TriangleArray3D Deform(ITransform3D t){
            var _var258 = t;
            return this.Deform((v) => _var258.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public TriangleArray3D Translate(Vector3 v){
            var _var259 = v;
            return this.Deform((p) => p.Add(_var259));
        }

        [MethodImpl(AggressiveInlining)]  public TriangleArray3D Rotate(Quaternion q) => this.Deform(q);
        [MethodImpl(AggressiveInlining)]  public TriangleArray3D Scale(Vector3 v){
            var _var260 = v;
            return this.Deform((p) => p.Multiply(_var260));
        }

        [MethodImpl(AggressiveInlining)]  public TriangleArray3D Scale(Number s){
            var _var261 = s;
            return this.Deform((p) => p.Multiply(_var261));
        }

        [MethodImpl(AggressiveInlining)]  public TriangleArray3D RotateX(Angle a) => this.Rotate(a.RotateX);
        [MethodImpl(AggressiveInlining)]  public TriangleArray3D RotateY(Angle a) => this.Rotate(a.RotateY);
        [MethodImpl(AggressiveInlining)]  public TriangleArray3D RotateZ(Angle a) => this.Rotate(a.RotateZ);
        [MethodImpl(AggressiveInlining)]  public TriangleArray3D TranslateX(Number s){
            var _var262 = s;
            return this.Deform((p) => p.Add((_var262, ((Integer)0), ((Integer)0))));
        }

        [MethodImpl(AggressiveInlining)]  public TriangleArray3D TranslateY(Number s){
            var _var263 = s;
            return this.Deform((p) => p.Add((((Integer)0), _var263, ((Integer)0))));
        }

        [MethodImpl(AggressiveInlining)]  public TriangleArray3D TranslateZ(Number s){
            var _var264 = s;
            return this.Deform((p) => p.Add((((Integer)0), ((Integer)0), _var264)));
        }

        [MethodImpl(AggressiveInlining)]  public TriangleArray3D ScaleX(Number s){
            var _var265 = s;
            return this.Deform((p) => p.Multiply((_var265, ((Integer)1), ((Integer)1))));
        }

        [MethodImpl(AggressiveInlining)]  public TriangleArray3D ScaleY(Number s){
            var _var266 = s;
            return this.Deform((p) => p.Multiply((((Integer)1), _var266, ((Integer)1))));
        }

        [MethodImpl(AggressiveInlining)]  public TriangleArray3D ScaleZ(Number s){
            var _var267 = s;
            return this.Deform((p) => p.Multiply((((Integer)1), ((Integer)1), _var267)));
        }

        public Integer PrimitiveSize { [MethodImpl(AggressiveInlining)] get  => ((Integer)3); } 

        // Unimplemented concept functions
    }
}
