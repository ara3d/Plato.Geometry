// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 11:25:56 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct TrefoilKnot: IAngularCurve3D, IClosedShape
    {
        // Fields

        // With functions 

        // Regular Constructor

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static TrefoilKnot Create() => new TrefoilKnot();

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is TrefoilKnot;
        [MethodImpl(AggressiveInlining)] public Boolean Equals(TrefoilKnot other) => true;
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(TrefoilKnot other) => false;
        [MethodImpl(AggressiveInlining)] public static Boolean operator==(TrefoilKnot a, TrefoilKnot b) => true;
        [MethodImpl(AggressiveInlining)] public static Boolean operator!=(TrefoilKnot a, TrefoilKnot b) => false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes();
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{  }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented concept functions and type functions
        [MethodImpl(AggressiveInlining)]  public Vector3 Eval(Angle t) => t.TrefoilKnot;
        [MethodImpl(AggressiveInlining)]  public Vector3 Eval(Number t) => this.Eval(t.Turns);
        [MethodImpl(AggressiveInlining)]  public IArray<Vector3> Sample(Integer numPoints){
            var _var484 = this;
            return numPoints.LinearSpace.Map((x) => _var484.Eval(x));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine3D ToPolyLine3D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
        [MethodImpl(AggressiveInlining)]  public Procedural<Number, TR> Combine<TR>(TrefoilKnot b, System.Func<TR, TR, TR> f){
            var _var487 = b;
            {
                var _var486 = this;
                {
                    var _var485 = f;
                    return (x) => _var485.Invoke(_var486.Eval(x), _var487.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector3> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var489 = f;
            {
                var _var488 = this;
                return (x) => _var488.Eval(_var489.Invoke(x));
            }
        }

        public System.Func<Number, Vector3> Function { [MethodImpl(AggressiveInlining)] get {
            var _var490 = this;
            return (x) => _var490.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Number, Vector3> Compose(TrefoilKnot b){
            var _var492 = this;
            {
                var _var491 = b;
                return (x) => _var491.Eval(_var492.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, TR> Combine<TR>(TrefoilKnot b, System.Func<TR, TR, TR> f){
            var _var495 = b;
            {
                var _var494 = this;
                {
                    var _var493 = f;
                    return (x) => _var493.Invoke(_var494.Eval(x), _var495.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var497 = f;
            {
                var _var496 = this;
                return (x) => _var496.Eval(_var497.Invoke(x));
            }
        }

        public System.Func<Vector3, Number> Function { [MethodImpl(AggressiveInlining)] get {
            var _var498 = this;
            return (x) => _var498.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, Number> Compose(TrefoilKnot b){
            var _var500 = this;
            {
                var _var499 = b;
                return (x) => _var499.Eval(_var500.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Union(TrefoilKnot b) => this.Combine(b, (a, b) => a.Max(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Intersection(TrefoilKnot b) => this.Combine(b, (a, b) => a.Min(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Difference(TrefoilKnot b) => this.Combine(b, (a, b) => a.Max(b.Negative));
        public Procedural<Vector3, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) => x.Negative); } 
        public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 

        // Unimplemented concept functions
        [MethodImpl(AggressiveInlining)]  public Number Distance(Vector3 p) => throw new NotImplementedException();
        [MethodImpl(AggressiveInlining)]  public Number Eval(Vector3 t) => throw new NotImplementedException();
    }
}
