// Autogenerated file: DO NOT EDIT
// Created on 2025-03-14 12:36:59 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Character: IValue, IOrderable<Character>
    {
        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Character Create() => new Character();

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Character other) => Value.Equals(other.Value);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Character other) => !Value.Equals(other.Value);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Character other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public static Boolean operator==(Character a, Character b) => a.Equals(b);
        [MethodImpl(AggressiveInlining)] public static Boolean operator!=(Character a, Character b) => !a.Equals(b);
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Value.GetHashCode();
        [MethodImpl(AggressiveInlining)] public override string ToString() => Value.ToString();

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented interface functions
        // LessThan(Character, Character):Boolean; [IOrderable=Character;Self=Character;]; <>
        [MethodImpl(AggressiveInlining)]  public Boolean LessThan(Character b) => this.LessThanOrEquals(b).And(this.NotEquals(b));
// GreaterThan(Character, Character):Boolean; [IOrderable=Character;Self=Character;]; <>
        [MethodImpl(AggressiveInlining)]  public Boolean GreaterThan(Character b) => b.LessThan(this);
// GreaterThanOrEquals(Character, Character):Boolean; [IOrderable=Character;Self=Character;]; <>
        [MethodImpl(AggressiveInlining)]  public Boolean GreaterThanOrEquals(Character b) => b.LessThanOrEquals(this);
// Lesser(Character, Character):Character; [IOrderable=Character;Self=Character;]; <>
        [MethodImpl(AggressiveInlining)]  public Character Lesser(Character b) => this.LessThanOrEquals(b) ? this : b;
// Greater(Character, Character):Character; [IOrderable=Character;Self=Character;]; <>
        [MethodImpl(AggressiveInlining)]  public Character Greater(Character b) => this.GreaterThanOrEquals(b) ? this : b;
// CompareTo(Character, Character):Integer; [IOrderable=Character;Self=Character;]; <>
        [MethodImpl(AggressiveInlining)]  public Integer CompareTo(Character b) => this.LessThanOrEquals(b) ? this.Equals(b) ? ((Integer)0) : ((Integer)1).Negative : ((Integer)1);

        // Unimplemented concept functions
        [MethodImpl(AggressiveInlining)]  public Boolean LessThanOrEquals(Character y) => this <= y;
    }
}
