// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 11:25:56 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct QuadMesh3D: IQuadMesh3D
    {
        // Fields
        [DataMember] public readonly IArray<Vector3> Points;
        [DataMember] public readonly IArray<Integer> Indices;

        // With functions 
        [MethodImpl(AggressiveInlining)] public QuadMesh3D WithPoints(IArray<Vector3> points) => new QuadMesh3D(points, Indices);
        [MethodImpl(AggressiveInlining)] public QuadMesh3D WithIndices(IArray<Integer> indices) => new QuadMesh3D(Points, indices);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public QuadMesh3D(IArray<Vector3> points, IArray<Integer> indices) { Points = points; Indices = indices; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static QuadMesh3D Create(IArray<Vector3> points, IArray<Integer> indices) => new QuadMesh3D(points, indices);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (IArray<Vector3>, IArray<Integer>)(QuadMesh3D self) => (self.Points, self.Indices);
        [MethodImpl(AggressiveInlining)] public static implicit operator QuadMesh3D((IArray<Vector3>, IArray<Integer>) value) => new(value.Item1, value.Item2);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out IArray<Vector3> points, out IArray<Integer> indices) { points = Points; indices = Indices;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(QuadMesh3D other) => Points.Equals(other.Points) && Indices.Equals(other.Indices);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(QuadMesh3D other) => !Points.Equals(other.Points) && Indices.Equals(other.Indices);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is QuadMesh3D other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Points, Indices);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Points\" = {Points}, \"Indices\" = {Indices} }}";

        // Explicit implementation of interfaces by forwarding properties to fields
        IArray<Integer> IIndexedGeometry.Indices { [MethodImpl(AggressiveInlining)] get => Indices; }

        // Implemented concept functions and type functions
        [MethodImpl(AggressiveInlining)]  public QuadMesh3D Deform(System.Func<Vector3, Vector3> f) => (this.Points.Map(f), this.Indices);
        public LineMesh3D LineMesh3D { [MethodImpl(AggressiveInlining)] get  => (this.Points, this.FaceIndices.FlatMap((a) => Intrinsics.MakeArray(a.At(((Integer)0)), a.At(((Integer)1)), a.At(((Integer)1)), a.At(((Integer)2)), a.At(((Integer)2)), a.At(((Integer)3)), a.At(((Integer)3)), a.At(((Integer)0))))); } 
        [MethodImpl(AggressiveInlining)]  public static implicit operator LineMesh3D(QuadMesh3D g) => g.LineMesh3D;
        public TriangleMesh3D TriangleMesh3D { [MethodImpl(AggressiveInlining)] get  => (this.Points, this.FaceIndices.FlatMap((a) => Intrinsics.MakeArray(a.At(((Integer)0)), a.At(((Integer)1)), a.At(((Integer)2)), a.At(((Integer)2)), a.At(((Integer)3)), a.At(((Integer)0))))); } 
        [MethodImpl(AggressiveInlining)]  public static implicit operator TriangleMesh3D(QuadMesh3D g) => g.TriangleMesh3D;
        public IArray<Quad3D> Faces { [MethodImpl(AggressiveInlining)] get  => this.Quads; } 
        public IArray<Quad3D> Quads { [MethodImpl(AggressiveInlining)] get  => this.AllFaceVertices.Map((xs) => new Quad3D(xs.At(((Integer)0)), xs.At(((Integer)1)), xs.At(((Integer)2)), xs.At(((Integer)3)))); } 
        [MethodImpl(AggressiveInlining)]  public Vector3 Vertex(Integer n) => this.Points.At(this.Indices.At(n));
        [MethodImpl(AggressiveInlining)]  public IArray<Vector3> FaceVertices(Integer f){
            var _var797 = this;
            return this.FaceIndices.At(f).Map((i) => _var797.Vertex(i));
        }

        public IArray2D<Vector3> AllFaceVertices { [MethodImpl(AggressiveInlining)] get {
            var _var798 = this;
            return this.AllFaceIndices.Map((x) => _var798.Vertex(x));
        }
         } 
        [MethodImpl(AggressiveInlining)]  public IArray<Vector3> Vertices(IArray<Integer> xs){
            var _var799 = this;
            return xs.Map((i) => _var799.Vertex(i));
        }

        public IArray<Vector3> AllVertices { [MethodImpl(AggressiveInlining)] get  => this.Vertices(this.Indices); } 
        public Integer NumPrimitives { [MethodImpl(AggressiveInlining)] get  => this.Indices.Count.Divide(this.PrimitiveSize); } 
        public Integer NumFaces { [MethodImpl(AggressiveInlining)] get  => this.NumPrimitives; } 
        public IArray2D<Integer> AllFaceIndices { [MethodImpl(AggressiveInlining)] get  => this.Indices.Slices(this.PrimitiveSize); } 
        public Integer PrimitiveSize { [MethodImpl(AggressiveInlining)] get  => ((Integer)4); } 
        public IArray<Integer4> FaceIndices { [MethodImpl(AggressiveInlining)] get  => this.Indices.Integer4Array; } 

        // Unimplemented concept functions
        public IArray<Vector3> Corners => throw new NotImplementedException();
    }
}
