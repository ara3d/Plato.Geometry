// Autogenerated file: DO NOT EDIT
// Created on 2025-01-20 10:41:00 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct QuadMesh3D: IQuadMesh3D<QuadMesh3D>
    {
        // Fields
        [DataMember] public readonly IArray<Vector3> Points;
        [DataMember] public readonly IArray<Integer> Indices;

        // With functions 
        [MethodImpl(AggressiveInlining)] public QuadMesh3D WithPoints(IArray<Vector3> points) => new QuadMesh3D(points, Indices);
        [MethodImpl(AggressiveInlining)] public QuadMesh3D WithIndices(IArray<Integer> indices) => new QuadMesh3D(Points, indices);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public QuadMesh3D(IArray<Vector3> points, IArray<Integer> indices) { Points = points; Indices = indices; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static QuadMesh3D Create(IArray<Vector3> points, IArray<Integer> indices) => new QuadMesh3D(points, indices);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (IArray<Vector3>, IArray<Integer>)(QuadMesh3D self) => (self.Points, self.Indices);
        [MethodImpl(AggressiveInlining)] public static implicit operator QuadMesh3D((IArray<Vector3>, IArray<Integer>) value) => new(value.Item1, value.Item2);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out IArray<Vector3> points, out IArray<Integer> indices) { points = Points; indices = Indices;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(QuadMesh3D other) => Points.Equals(other.Points) && Indices.Equals(other.Indices);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(QuadMesh3D other) => !Points.Equals(other.Points) && Indices.Equals(other.Indices);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is QuadMesh3D other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Points, Indices);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Points\" = {Points}, \"Indices\" = {Indices} }}";

        // Explicit implementation of interfaces by forwarding properties to fields
        IArray<Integer> IIndexedGeometry.Indices { [MethodImpl(AggressiveInlining)] get => Indices; }
        IArray<Vector3> IPointGeometry3D<QuadMesh3D>.Points { [MethodImpl(AggressiveInlining)] get => Points; }

        // Implemented concept functions and type functions
        [MethodImpl(AggressiveInlining)]  public QuadMesh3D Deform(System.Func<Vector3, Vector3> f) => (this.Points.Map(f), this.Indices);
        public LineMesh3D LineMesh3D { [MethodImpl(AggressiveInlining)] get  => (this.Points, this.AllFaceIndices.FlatMap((a) => Intrinsics.MakeArray(a.At(((Integer)0)), a.At(((Integer)1)), a.At(((Integer)2)), a.At(((Integer)3)), a.At(((Integer)0))))); } 
        [MethodImpl(AggressiveInlining)]  public static implicit operator LineMesh3D(QuadMesh3D g) => g.LineMesh3D;
        public TriangleMesh3D TriangleMesh3D { [MethodImpl(AggressiveInlining)] get  => (this.Points, this.AllFaceIndices.FlatMap((a) => Intrinsics.MakeArray(a.At(((Integer)0)), a.At(((Integer)1)), a.At(((Integer)2)), a.At(((Integer)2)), a.At(((Integer)3)), a.At(((Integer)0))))); } 
        [MethodImpl(AggressiveInlining)]  public static implicit operator TriangleMesh3D(QuadMesh3D g) => g.TriangleMesh3D;
        public IArray<Quad3D> Faces { [MethodImpl(AggressiveInlining)] get  => this.Quads; } 
        public IArray<Quad3D> Quads { [MethodImpl(AggressiveInlining)] get  => this.AllFaceVertices.Map((xs) => new Quad3D(xs.At(((Integer)0)), xs.At(((Integer)1)), xs.At(((Integer)2)), xs.At(((Integer)3)))); } 
        [MethodImpl(AggressiveInlining)]  public IArray<Vector3> FaceVertices(Integer f){
            var _var163 = this;
            return this.FaceIndices(f).Map((i) => _var163.Vertex(i));
        }

        [MethodImpl(AggressiveInlining)]  public Vector3 Vertex(Integer n) => this.Points.At(this.Indices.At(n));
        [MethodImpl(AggressiveInlining)]  public IArray<Vector3> Vertices(IArray<Integer> xs){
            var _var164 = this;
            return xs.Map((i) => _var164.Vertex(i));
        }

        public IArray<IArray<Vector3>> AllFaceVertices { [MethodImpl(AggressiveInlining)] get {
            var _var165 = this;
            return this.Indices.Slices(this.PrimitiveSize).Map((xs) => _var165.Vertices(xs));
        }
         } 
        public IArray<Vector3> AllVertices { [MethodImpl(AggressiveInlining)] get  => this.Vertices(this.Indices); } 
        public Integer NumPrimitives { [MethodImpl(AggressiveInlining)] get  => this.Indices.Count.Divide(this.PrimitiveSize); } 
        public Integer NumFaces { [MethodImpl(AggressiveInlining)] get  => this.NumPrimitives; } 
        [MethodImpl(AggressiveInlining)]  public IArray<Integer> FaceIndices(Integer f) => this.Indices.NthSlice(f, this.PrimitiveSize);
        public IArray<IArray<Integer>> AllFaceIndices { [MethodImpl(AggressiveInlining)] get  => this.Indices.Slices(this.PrimitiveSize); } 
        [MethodImpl(AggressiveInlining)]  public QuadMesh3D Deform(ITransform3D t){
            var _var166 = t;
            return this.Deform((v) => _var166.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public QuadMesh3D Translate(Vector3 v){
            var _var167 = v;
            return this.Deform((p) => p.Add(_var167));
        }

        [MethodImpl(AggressiveInlining)]  public QuadMesh3D Rotate(Quaternion q) => this.Deform(q);
        [MethodImpl(AggressiveInlining)]  public QuadMesh3D Scale(Vector3 v){
            var _var168 = v;
            return this.Deform((p) => p.Multiply(_var168));
        }

        [MethodImpl(AggressiveInlining)]  public QuadMesh3D Scale(Number s){
            var _var169 = s;
            return this.Deform((p) => p.Multiply(_var169));
        }

        [MethodImpl(AggressiveInlining)]  public QuadMesh3D RotateX(Angle a) => this.Rotate(a.RotateX);
        [MethodImpl(AggressiveInlining)]  public QuadMesh3D RotateY(Angle a) => this.Rotate(a.RotateY);
        [MethodImpl(AggressiveInlining)]  public QuadMesh3D RotateZ(Angle a) => this.Rotate(a.RotateZ);
        [MethodImpl(AggressiveInlining)]  public QuadMesh3D TranslateX(Number s){
            var _var170 = s;
            return this.Deform((p) => p.Add((_var170, ((Integer)0), ((Integer)0))));
        }

        [MethodImpl(AggressiveInlining)]  public QuadMesh3D TranslateY(Number s){
            var _var171 = s;
            return this.Deform((p) => p.Add((((Integer)0), _var171, ((Integer)0))));
        }

        [MethodImpl(AggressiveInlining)]  public QuadMesh3D TranslateZ(Number s){
            var _var172 = s;
            return this.Deform((p) => p.Add((((Integer)0), ((Integer)0), _var172)));
        }

        [MethodImpl(AggressiveInlining)]  public QuadMesh3D ScaleX(Number s){
            var _var173 = s;
            return this.Deform((p) => p.Multiply((_var173, ((Integer)1), ((Integer)1))));
        }

        [MethodImpl(AggressiveInlining)]  public QuadMesh3D ScaleY(Number s){
            var _var174 = s;
            return this.Deform((p) => p.Multiply((((Integer)1), _var174, ((Integer)1))));
        }

        [MethodImpl(AggressiveInlining)]  public QuadMesh3D ScaleZ(Number s){
            var _var175 = s;
            return this.Deform((p) => p.Multiply((((Integer)1), ((Integer)1), _var175)));
        }

        public Integer PrimitiveSize { [MethodImpl(AggressiveInlining)] get  => ((Integer)4); } 

        // Unimplemented concept functions
    }
}
