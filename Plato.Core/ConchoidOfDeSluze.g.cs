// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 11:25:56 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct ConchoidOfDeSluze: IPolarCurve, IOpenShape
    {
        // Fields
        [DataMember] public readonly Number A;

        // With functions 
        [MethodImpl(AggressiveInlining)] public ConchoidOfDeSluze WithA(Number a) => new ConchoidOfDeSluze(a);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public ConchoidOfDeSluze(Number a) { A = a; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static ConchoidOfDeSluze Create(Number a) => new ConchoidOfDeSluze(a);

        // Implicit converters to/from single field
        [MethodImpl(AggressiveInlining)] public static implicit operator Number(ConchoidOfDeSluze self) => self.A;
        [MethodImpl(AggressiveInlining)] public static implicit operator ConchoidOfDeSluze(Number value) => new ConchoidOfDeSluze(value);
        [MethodImpl(AggressiveInlining)] public static implicit operator ConchoidOfDeSluze(Integer value) => new ConchoidOfDeSluze(value);
        [MethodImpl(AggressiveInlining)] public static implicit operator ConchoidOfDeSluze(int value) => new Integer(value);
        [MethodImpl(AggressiveInlining)] public static implicit operator ConchoidOfDeSluze(float value) => new Number(value);
        [MethodImpl(AggressiveInlining)] public static implicit operator float(ConchoidOfDeSluze value) => value.A;

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(ConchoidOfDeSluze other) => A.Equals(other.A);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(ConchoidOfDeSluze other) => !A.Equals(other.A);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is ConchoidOfDeSluze other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(A);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"A\" = {A} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented concept functions and type functions
        [MethodImpl(AggressiveInlining)]  public Number GetRadius(Angle t) => t.ConchoidOfDeSluze(this.A);
        [MethodImpl(AggressiveInlining)]  public PolarCoordinate EvalPolar(Angle t) => (this.GetRadius(t), t);
        [MethodImpl(AggressiveInlining)]  public Vector2 Eval(Angle t) => this.EvalPolar(t);
        [MethodImpl(AggressiveInlining)]  public Vector2 Eval(Number t) => this.Eval(t.Turns);
        [MethodImpl(AggressiveInlining)]  public IArray<Vector2> Sample(Integer numPoints){
            var _var382 = this;
            return numPoints.LinearSpace.Map((x) => _var382.Eval(x));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine2D ToPolyLine2D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
        [MethodImpl(AggressiveInlining)]  public Procedural<Number, TR> Combine<TR>(ConchoidOfDeSluze b, System.Func<TR, TR, TR> f){
            var _var385 = b;
            {
                var _var384 = this;
                {
                    var _var383 = f;
                    return (x) => _var383.Invoke(_var384.Eval(x), _var385.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector2> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var387 = f;
            {
                var _var386 = this;
                return (x) => _var386.Eval(_var387.Invoke(x));
            }
        }

        public System.Func<Number, Vector2> Function { [MethodImpl(AggressiveInlining)] get {
            var _var388 = this;
            return (x) => _var388.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Number, Vector2> Compose(ConchoidOfDeSluze b){
            var _var390 = this;
            {
                var _var389 = b;
                return (x) => _var389.Eval(_var390.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, TR> Combine<TR>(ConchoidOfDeSluze b, System.Func<TR, TR, TR> f){
            var _var393 = b;
            {
                var _var392 = this;
                {
                    var _var391 = f;
                    return (x) => _var391.Invoke(_var392.Eval(x), _var393.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var395 = f;
            {
                var _var394 = this;
                return (x) => _var394.Eval(_var395.Invoke(x));
            }
        }

        public System.Func<Vector2, Number> Function { [MethodImpl(AggressiveInlining)] get {
            var _var396 = this;
            return (x) => _var396.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Number> Compose(ConchoidOfDeSluze b){
            var _var398 = this;
            {
                var _var397 = b;
                return (x) => _var397.Eval(_var398.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Union(ConchoidOfDeSluze b) => this.Combine(b, (a, b) => a.Max(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Intersection(ConchoidOfDeSluze b) => this.Combine(b, (a, b) => a.Min(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Difference(ConchoidOfDeSluze b) => this.Combine(b, (a, b) => a.Max(b.Negative));
        public Procedural<Vector2, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) => x.Negative); } 
        public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)false); } 

        // Unimplemented concept functions
        [MethodImpl(AggressiveInlining)]  public Number Distance(Vector2 p) => throw new NotImplementedException();
        [MethodImpl(AggressiveInlining)]  public Number Eval(Vector2 t) => throw new NotImplementedException();
    }
}
