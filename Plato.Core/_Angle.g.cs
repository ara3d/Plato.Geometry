// Autogenerated file: DO NOT EDIT
// Created on 2025-04-07 4:05:19 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Angle: IMeasure<Angle>
    {
        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Angle Create() => new Angle();

        // Static default implementation
        public static readonly Angle Default = default;

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Angle other) => Value.Equals(other.Value);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Angle other) => !Value.Equals(other.Value);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Angle other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public static Boolean operator==(Angle a, Angle b) => a.Equals(b);
        [MethodImpl(AggressiveInlining)] public static Boolean operator!=(Angle a, Angle b) => !a.Equals(b);
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Value.GetHashCode();
        [MethodImpl(AggressiveInlining)] public override string ToString() => Value.ToString();

        // Explicit implementation of interfaces by forwarding properties to fields

        // IArrayLike predefined functions
        public Integer NumComponents { [MethodImpl(AggressiveInlining)] get => 1; }
        public IArray<Number> Components { [MethodImpl(AggressiveInlining)] get => Intrinsics.MakeArray<Number>(Value); }
        [MethodImpl(AggressiveInlining)] public static Angle CreateFromComponents(IArray<Number> numbers) => new Angle(numbers[0]);

        [MethodImpl(AggressiveInlining)] public static Angle CreateFromComponent(Number x) => new Angle(x);

        // Implemented interface functions
        public Number Turns { [MethodImpl(AggressiveInlining)] get  => this.Radians.Divide(Constants.TwoPi); } 
public Number Degrees { [MethodImpl(AggressiveInlining)] get  => this.Turns.Multiply(((Number)360)); } 
public Number Gradians { [MethodImpl(AggressiveInlining)] get  => this.Turns.Multiply(((Number)400)); } 
public Number Sec { [MethodImpl(AggressiveInlining)] get  => this.Cos.Reciprocal; } 
public Number Csc { [MethodImpl(AggressiveInlining)] get  => this.Sin.Reciprocal; } 
public Number Cot { [MethodImpl(AggressiveInlining)] get  => this.Tan.Reciprocal; } 
public Vector2 UnitCircle { [MethodImpl(AggressiveInlining)] get  => (this.Cos, this.Sin); } 
[MethodImpl(AggressiveInlining)]  public Vector2 Circle(Vector2 center, Number radius) => this.UnitCircle.Multiply(radius).Add(center);
[MethodImpl(AggressiveInlining)]  public Vector2 Ellipse(Vector2 center, Vector2 size) => this.UnitCircle.Multiply(size).Add(center);
[MethodImpl(AggressiveInlining)]  public Vector2 Epicycloid(Number R, Number r) => (R.Add(r).Multiply(this.Cos).Subtract(r.Multiply(R.Add(r).Multiply(this.Divide(r).Cos))), R.Add(r).Multiply(this.Sin).Subtract(r.Multiply(R.Add(r).Multiply(this.Divide(r).Sin))));
[MethodImpl(AggressiveInlining)]  public Vector2 Hypocycloid(Number R, Number r) => (R.Subtract(r).Multiply(this.Cos).Add(r.Multiply(R.Subtract(r).Multiply(this.Divide(r).Cos))), R.Subtract(r).Multiply(this.Sin).Subtract(r.Multiply(R.Subtract(r).Multiply(this.Divide(r).Sin))));
[MethodImpl(AggressiveInlining)]  public Vector2 Epitrochoid(Number R, Number r, Number d) => (R.Add(r).Multiply(this.Cos).Subtract(d.Multiply(R.Add(r).Multiply(this.Divide(r).Cos))), R.Add(r).Multiply(this.Sin).Subtract(d.Multiply(R.Add(r).Multiply(this.Divide(r).Sin))));
[MethodImpl(AggressiveInlining)]  public Vector2 Hypotrochoid(Number R, Number r, Number d) => (R.Subtract(r).Multiply(this.Cos).Add(d.Multiply(R.Subtract(r).Multiply(this.Divide(r).Cos))), R.Subtract(r).Multiply(this.Sin).Subtract(d.Multiply(R.Subtract(r).Multiply(this.Divide(r).Sin))));
public Vector2 ButterflyCurve { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)6)).ButterflyCurveSection; } 
public Vector2 ButterflyCurveSection { [MethodImpl(AggressiveInlining)] get  => (this.Multiply(this.Cos.Exp.Subtract(((Number)2).Multiply(this.Multiply(((Number)4)).Cos).Subtract(this.Divide(((Number)12)).Sin.Pow(((Number)5))))).Sin, this.Multiply(this.Cos.Exp.Subtract(((Number)2).Multiply(this.Multiply(((Number)4)).Cos).Subtract(this.Divide(((Number)12)).Sin.Pow(((Number)5))))).Cos); } 
[MethodImpl(AggressiveInlining)]  public Vector2 Lissajous(Number a, Number b, Angle d) => (this.Add(d).Sin, b.Turns.Sin);
public Number CycloidOfCeva { [MethodImpl(AggressiveInlining)] get  => ((Number)1).Add(this.Multiply(((Number)2)).Cos.Multiply(((Number)2))); } 
[MethodImpl(AggressiveInlining)]  public Number Limacon(Number a, Number b) => a.Multiply(this.Cos).Add(b);
public Number Cardoid { [MethodImpl(AggressiveInlining)] get  => ((Number)1).Add(this.Cos); } 
[MethodImpl(AggressiveInlining)]  public Number TschirnhausenCubic(Number a) => a.Multiply(this.Divide(((Number)3)).Sec.Cube);
[MethodImpl(AggressiveInlining)]  public Number Rose(Number k) => k.Multiply(this.Cos);
[MethodImpl(AggressiveInlining)]  public Number ArchimedeanSpiral(Number a, Number b) => a.Add(b.Multiply(this.Turns));
[MethodImpl(AggressiveInlining)]  public Number ConicSection(Number semiLatusRectum, Number eccentricity) => semiLatusRectum.Divide(((Number)1).Subtract(eccentricity.Multiply(this.Cos)));
[MethodImpl(AggressiveInlining)]  public Number LemniscateOfBernoulli(Number a) => a.Sqr.Multiply(this.Multiply(((Number)2)).Cos).Sqrt;
[MethodImpl(AggressiveInlining)]  public Number TrisectrixOfMaclaurin(Number a) => ((Number)2).Multiply(a).Divide(this.Divide(((Number)3)).Cos);
[MethodImpl(AggressiveInlining)]  public Number ConchoidOfDeSluze(Number a) => this.Sec.Add(a.Multiply(this.Cos));
[MethodImpl(AggressiveInlining)]  public Number SinusoidalSpiral(Number a, Number n) => a.Pow(n).Multiply(this.Multiply(n).Cos).InversePow(a);
[MethodImpl(AggressiveInlining)]  public Number FermatsSpiral(Number a) => a.Multiply(this.Turns.Sqr).Sqrt;
[MethodImpl(AggressiveInlining)]  public Number LogarithmicSpiral(Number a, Number k) => a.Multiply(this.Radians.Multiply(k).Exp);
[MethodImpl(AggressiveInlining)]  public Vector3 TorusKnot(Number p, Number q){
            var r = this.Multiply(q).Cos.Add(((Number)2));
            var x = r.Multiply(this.Multiply(p).Cos);
            var y = r.Multiply(this.Multiply(p).Sin);
            var z = this.Multiply(q).Sin.Negative;
            return (x, y, z);
        }

public Vector3 TrefoilKnot { [MethodImpl(AggressiveInlining)] get  => (this.Sin.Add(this.Multiply(((Number)2)).Sin.Multiply(((Number)2))), this.Cos.Add(this.Multiply(((Number)2)).Cos.Multiply(((Number)2))), this.Multiply(((Number)3)).Sin.Negative); } 
public Vector3 FigureEightKnot { [MethodImpl(AggressiveInlining)] get  => (((Number)2).Add(this.Multiply(((Number)2)).Cos).Multiply(this.Multiply(((Number)3)).Cos), ((Number)2).Add(this.Multiply(((Number)2)).Cos).Multiply(this.Multiply(((Number)3)).Sin), this.Multiply(((Number)4)).Sin); } 
[MethodImpl(AggressiveInlining)]  public Vector3 Helix(Number revs) => (this.Multiply(revs).Sin, this.Multiply(revs).Cos, this.Turns);
[MethodImpl(AggressiveInlining)]  public Angle Add(Angle b) => this + b;
        [MethodImpl(AggressiveInlining)]  public Angle Subtract(Angle b) => this - b;
        [MethodImpl(AggressiveInlining)]  public Angle Multiply(Number x) => this * x;
        [MethodImpl(AggressiveInlining)]  public Angle Divide(Number x) => this / x;
        public Angle Negative { [MethodImpl(AggressiveInlining)] get => -this; }
        [MethodImpl(AggressiveInlining)]  public Boolean LessThan(Angle b) => this < b;
        [MethodImpl(AggressiveInlining)]  public Boolean LessThanOrEquals(Angle b) => this <= b;
        [MethodImpl(AggressiveInlining)]  public Boolean GreaterThan(Angle b) => this > b;
        [MethodImpl(AggressiveInlining)]  public Boolean GreaterThanOrEquals(Angle b) => this >= b;
        public AxisAngle RotateX { [MethodImpl(AggressiveInlining)] get  => (Constants.XAxis3D, this); } 
public AxisAngle RotateY { [MethodImpl(AggressiveInlining)] get  => (Constants.YAxis3D, this); } 
public AxisAngle RotateZ { [MethodImpl(AggressiveInlining)] get  => (Constants.ZAxis3D, this); } 
[MethodImpl(AggressiveInlining)]  public Number Reduce(Number initial, System.Func<Number, Number, Number> f) => this.Components.Reduce(initial, f);
public Number MinComponent { [MethodImpl(AggressiveInlining)] get  => this.Reduce(this.At(((Integer)0)), (a, b)  => a.Min(b)); } 
public Number MaxComponent { [MethodImpl(AggressiveInlining)] get  => this.Reduce(this.At(((Integer)0)), (a, b)  => a.Max(b)); } 
public Number SumComponents { [MethodImpl(AggressiveInlining)] get  => this.Reduce(((Number)0), (a, b)  => a.Add(b)); } 
public Number SumSqrComponents { [MethodImpl(AggressiveInlining)] get  => this.Reduce(((Number)0), (a, b)  => a.Add(b.Multiply(b))); } 
public Number AvgComponent { [MethodImpl(AggressiveInlining)] get  => this.SumComponents.Divide(this.Count); } 
public Number Magnitude { [MethodImpl(AggressiveInlining)] get  => this.MagnitudeSquared.Sqrt; } 
public Number MagnitudeSquared { [MethodImpl(AggressiveInlining)] get  => this.SumSqrComponents.Divide(this.Count); } 
public Angle Abs { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x)  => x.Abs); } 
public Angle BitDecrement { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x)  => x.BitDecrement); } 
public Angle BitIncrement { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x)  => x.BitIncrement); } 
public Angle Cbrt { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x)  => x.Cbrt); } 
public Angle Ceiling { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x)  => x.Ceiling); } 
[MethodImpl(AggressiveInlining)]  public Angle Clamp(Angle min, Angle max) => this.ZipComponents(min, max, (a, b, c)  => a.Clamp(b, c));
[MethodImpl(AggressiveInlining)]  public Angle CopySign(Angle y) => this.ZipComponents(y, (a, b)  => a.CopySign(b));
public Angle Exp { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x)  => x.Exp); } 
public Angle Floor { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x)  => x.Floor); } 
[MethodImpl(AggressiveInlining)]  public Angle FusedMultiplyAdd(Angle y, Angle z) => this.ZipComponents(y, z, (a, b, c)  => a.FusedMultiplyAdd(b, c));
public Angle ILogB { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x)  => x.ILogB); } 
[MethodImpl(AggressiveInlining)]  public Angle IEEERemainder(Angle y) => this.ZipComponents(y, (a, b)  => a.IEEERemainder(b));
[MethodImpl(AggressiveInlining)]  public Angle Log(Angle newBase) => this.ZipComponents(newBase, (a, b)  => a.Log(b));
public Angle Log10 { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x)  => x.Log10); } 
public Angle Log2 { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x)  => x.Log2); } 
[MethodImpl(AggressiveInlining)]  public Angle Min(Angle other) => this.ZipComponents(other, (a, b)  => a.Min(b));
[MethodImpl(AggressiveInlining)]  public Angle MinMagnitude(Angle other) => this.ZipComponents(other, (a, b)  => a.MinMagnitude(b));
[MethodImpl(AggressiveInlining)]  public Angle Max(Angle other) => this.ZipComponents(other, (a, b)  => a.Max(b));
[MethodImpl(AggressiveInlining)]  public Angle MaxMagnitude(Angle other) => this.ZipComponents(other, (a, b)  => a.MaxMagnitude(b));
public Angle NaturalLog { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x)  => x.NaturalLog); } 
[MethodImpl(AggressiveInlining)]  public Angle Pow(Angle power) => this.ZipComponents(power, (a, b)  => a.Pow(b));
public Angle Reciprocal { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x)  => x.Reciprocal); } 
public Angle ReciprocalEstimate { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x)  => x.ReciprocalEstimate); } 
public Angle ReciprocalSquareRootEstimate { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x)  => x.ReciprocalSquareRootEstimate); } 
[MethodImpl(AggressiveInlining)]  public Angle Round(Integer digits){
            var _var176 = digits;
            return this.MapComponents((x)  => x.Round(_var176));
        }

[MethodImpl(AggressiveInlining)]  public Angle RoundAwayFromZero(Integer digits){
            var _var177 = digits;
            return this.MapComponents((x)  => x.RoundAwayFromZero(_var177));
        }

[MethodImpl(AggressiveInlining)]  public Angle RoundToZero(Integer digits){
            var _var178 = digits;
            return this.MapComponents((x)  => x.RoundToZero(_var178));
        }

[MethodImpl(AggressiveInlining)]  public Angle ScaleB(Integer n){
            var _var179 = n;
            return this.MapComponents((x)  => x.ScaleB(_var179));
        }

public Integer Sign { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x)  => x.Sign); } 
public Angle SquareRoot { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x)  => x.SquareRoot); } 
public Angle Square { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x)  => x.Sqr); } 
public Angle Truncate { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x)  => x.Truncate); } 
[MethodImpl(AggressiveInlining)]  public Boolean AlmostEqual(Angle y) => this.AllZipComponents(y, (a, b)  => a.AlmostEqual(b));
public Boolean AlmostZero { [MethodImpl(AggressiveInlining)] get  => this.AllComponents((x)  => x.AlmostZero); } 
[MethodImpl(AggressiveInlining)]  public Angle Average(Angle y) => this.Lerp(y, ((Number)0.5));
[MethodImpl(AggressiveInlining)]  public Boolean Between(Angle a, Angle b) => this.AllZipComponents(a, b, (x1, a1, b1)  => x1.Between(a1, b1));
public Boolean Between01 { [MethodImpl(AggressiveInlining)] get  => this.AllComponents((x1)  => x1.Between01); } 
public Angle ClampZeroOne { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x1)  => x1.ClampZeroOne); } 
public Angle Fract { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x1)  => x1.Fract); } 
[MethodImpl(AggressiveInlining)]  public Angle InversePow(Angle y) => this.ZipComponents(y, (x1, y1)  => x1.InversePow(y1));
[MethodImpl(AggressiveInlining)]  public Angle Lerp(Angle b, Angle t) => this.ZipComponents(b, t, (a1, b1, t1)  => a1.Lerp(b1, t1));
[MethodImpl(AggressiveInlining)]  public Angle MultiplyEpsilon(Angle y) => this.ZipComponents(y, (x1, y1)  => x1.MultiplyEpsilon(y1));
public Angle Pow2 { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x1)  => x1.Pow2); } 
public Angle Pow3 { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x1)  => x1.Pow3); } 
public Angle Pow4 { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x1)  => x1.Pow4); } 
public Angle Pow5 { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x1)  => x1.Pow5); } 
public Angle Sqr { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x1)  => x1.Sqr); } 
public Angle Sqrt { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x1)  => x1.Sqrt); } 
public Angle Half { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)2)); } 
public Angle Quarter { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)4)); } 
public Angle Eight { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)8)); } 
public Angle Sixteenth { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)16)); } 
public Angle Tenth { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)10)); } 
public Angle Twice { [MethodImpl(AggressiveInlining)] get  => this.Multiply(((Number)2)); } 
public Angle Hundred { [MethodImpl(AggressiveInlining)] get  => this.Multiply(((Number)100)); } 
public Angle Thousand { [MethodImpl(AggressiveInlining)] get  => this.Multiply(((Number)1000)); } 
public Angle Million { [MethodImpl(AggressiveInlining)] get  => this.Thousand.Thousand; } 
public Angle Billion { [MethodImpl(AggressiveInlining)] get  => this.Thousand.Million; } 
public Angle Hundredth { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)100)); } 
public Angle Thousandth { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)1000)); } 
public Angle Millionth { [MethodImpl(AggressiveInlining)] get  => this.Thousandth.Thousandth; } 
public Angle Billionth { [MethodImpl(AggressiveInlining)] get  => this.Thousandth.Millionth; } 
[MethodImpl(AggressiveInlining)]  public Number At(Integer n) => this.Components.At(n);
public Number this[Integer n] { [MethodImpl(AggressiveInlining)]  get => At(n); }
        [MethodImpl(AggressiveInlining)]  public Angle MapComponents(System.Func<Number, Number> f) => Angle.CreateFromComponents(this.Components.Map(f));
[MethodImpl(AggressiveInlining)]  public Angle ZipComponents(Angle b, System.Func<Number, Number, Number> f) => Angle.CreateFromComponents(this.Components.Zip(b.Components, f));
[MethodImpl(AggressiveInlining)]  public Angle ZipComponents(Angle b, Angle c, System.Func<Number, Number, Number, Number> f) => Angle.CreateFromComponents(this.Components.Zip(b.Components, c.Components, f));
[MethodImpl(AggressiveInlining)]  public Boolean AllZipComponents(Angle b, System.Func<Number, Number, Boolean> f) => this.Components.Zip(b.Components, f).All((x)  => x);
[MethodImpl(AggressiveInlining)]  public Boolean AllZipComponents(Angle b, Angle c, System.Func<Number, Number, Number, Boolean> f) => this.Components.Zip(b.Components, c.Components, f).All((x)  => x);
[MethodImpl(AggressiveInlining)]  public Boolean AnyZipComponents(Angle b, System.Func<Number, Number, Boolean> f) => this.Components.Zip(b.Components, f).Any((x)  => x);
[MethodImpl(AggressiveInlining)]  public Boolean AnyZipComponents(Angle b, Angle c, System.Func<Number, Number, Number, Boolean> f) => this.Components.Zip(b.Components, c.Components, f).Any((x)  => x);
[MethodImpl(AggressiveInlining)]  public Boolean AllComponents(System.Func<Number, Boolean> predicate) => this.Components.All(predicate);
[MethodImpl(AggressiveInlining)]  public Boolean AnyComponent(System.Func<Number, Boolean> predicate) => this.Components.Any(predicate);
[MethodImpl(AggressiveInlining)]  public Angle Lesser(Angle b) => this.LessThanOrEquals(b) ? this : b;
[MethodImpl(AggressiveInlining)]  public Angle Greater(Angle b) => this.GreaterThanOrEquals(b) ? this : b;

        // Unimplemented interface functions
        [MethodImpl(AggressiveInlining)]  public Angle Modulo(Number other) => this % other;
    }
}
