// Autogenerated file: DO NOT EDIT
// Created on 2025-01-17 3:12:39 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct QuadArray3D: IQuadArray3D<QuadArray3D>
    {
        // Fields
        [DataMember] public readonly IArray<Quad3D> Quads;

        // With functions 
        [MethodImpl(AggressiveInlining)] public QuadArray3D WithQuads(IArray<Quad3D> quads) => new QuadArray3D(quads);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public QuadArray3D(IArray<Quad3D> quads) { Quads = quads; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static QuadArray3D Create(IArray<Quad3D> quads) => new QuadArray3D(quads);

        // Implicit converters to/from single field

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(QuadArray3D other) => Quads.Equals(other.Quads);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is QuadArray3D other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Quads);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Quads\" = {Quads} }}";

        // Explicit implementation of interfaces by forwarding properties to fields
        IArray<Quad3D> IQuadGeometry3D<QuadArray3D>.Quads { [MethodImpl(AggressiveInlining)] get => Quads; }

        // Implemented concept functions and type functions
        [MethodImpl(AggressiveInlining)]  public QuadArray3D Deform(System.Func<Vector3, Vector3> f){
            var _var271 = f;
            return new Any(QuadArray3D, this.Quads.Map((q) => q.Deform(_var271)));
        }

        public IArray<Integer> Indices { [MethodImpl(AggressiveInlining)] get  => this.Points.Indices(); } 
        public TriangleArray3D TriangleArray3D { [MethodImpl(AggressiveInlining)] get  => new Any(TriangleArray3D, this.Triangles); } 
        [MethodImpl(AggressiveInlining)]  public static implicit operator TriangleArray3D(QuadArray3D q) => q.TriangleArray3D;
        public QuadMesh3D QuadMesh3D { [MethodImpl(AggressiveInlining)] get  => (this.Points, this.Points.Indices()); } 
        [MethodImpl(AggressiveInlining)]  public static implicit operator QuadMesh3D(QuadArray3D self) => self.QuadMesh3D;
        public TriangleMesh3D TriangleMesh3D { [MethodImpl(AggressiveInlining)] get  => this.TriangleArray3D; } 
        [MethodImpl(AggressiveInlining)]  public static implicit operator TriangleMesh3D(QuadArray3D g) => g.TriangleMesh3D;
        public IArray<Vector3> Points { [MethodImpl(AggressiveInlining)] get  => this.Quads.FlatMap((x) => x.Points); } 
        public IArray<Line3D> Lines { [MethodImpl(AggressiveInlining)] get  => this.Quads.FlatMap((x) => x.Lines); } 
        public IArray<Triangle3D> Triangles { [MethodImpl(AggressiveInlining)] get  => this.Quads.FlatMap((x) => x.Triangles); } 
        public LineMesh3D LineMesh3D { [MethodImpl(AggressiveInlining)] get  => (this.Points, this.AllFaceIndices.FlatMap((a) => Intrinsics.MakeArray(a.At(((Integer)0)), a.At(((Integer)1)), a.At(((Integer)2)), a.At(((Integer)3)), a.At(((Integer)0))))); } 
        [MethodImpl(AggressiveInlining)]  public static implicit operator LineMesh3D(QuadArray3D g) => g.LineMesh3D;
        public IArray<Quad3D> Faces { [MethodImpl(AggressiveInlining)] get  => this.Quads; } 
        [MethodImpl(AggressiveInlining)]  public IArray<Vector3> FaceVertices(Integer f){
            var _var272 = this;
            return this.FaceIndices(f).Map((i) => _var272.Vertex(i));
        }

        [MethodImpl(AggressiveInlining)]  public Vector3 Vertex(Integer n) => this.Points.At(this.Indices.At(n));
        [MethodImpl(AggressiveInlining)]  public IArray<Vector3> Vertices(IArray<Integer> xs){
            var _var273 = this;
            return xs.Map((i) => _var273.Vertex(i));
        }

        public IArray<IArray<Vector3>> AllFaceVertices { [MethodImpl(AggressiveInlining)] get {
            var _var274 = this;
            return this.Indices.Slices(this.PrimitiveSize).Map((xs) => _var274.Vertices(xs));
        }
         } 
        public IArray<Vector3> AllVertices { [MethodImpl(AggressiveInlining)] get  => this.Vertices(this.Indices); } 
        public Integer NumPrimitives { [MethodImpl(AggressiveInlining)] get  => this.Indices.Count.Divide(this.PrimitiveSize); } 
        public Integer NumFaces { [MethodImpl(AggressiveInlining)] get  => this.NumPrimitives; } 
        [MethodImpl(AggressiveInlining)]  public IArray<Integer> FaceIndices(Integer f) => this.Indices.NthSlice(f, this.PrimitiveSize);
        public IArray<IArray<Integer>> AllFaceIndices { [MethodImpl(AggressiveInlining)] get  => this.Indices.Slices(this.PrimitiveSize); } 
        [MethodImpl(AggressiveInlining)]  public QuadArray3D Deform(ITransform3D t){
            var _var275 = t;
            return this.Deform((v) => _var275.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public QuadArray3D Translate(Vector3 v){
            var _var276 = v;
            return this.Deform((p) => p.Add(_var276));
        }

        [MethodImpl(AggressiveInlining)]  public QuadArray3D Rotate(Quaternion q) => this.Deform(q);
        [MethodImpl(AggressiveInlining)]  public QuadArray3D Scale(Vector3 v){
            var _var277 = v;
            return this.Deform((p) => p.Multiply(_var277));
        }

        [MethodImpl(AggressiveInlining)]  public QuadArray3D Scale(Number s){
            var _var278 = s;
            return this.Deform((p) => p.Multiply(_var278));
        }

        [MethodImpl(AggressiveInlining)]  public QuadArray3D RotateX(Angle a) => this.Rotate(a.RotateX);
        [MethodImpl(AggressiveInlining)]  public QuadArray3D RotateY(Angle a) => this.Rotate(a.RotateY);
        [MethodImpl(AggressiveInlining)]  public QuadArray3D RotateZ(Angle a) => this.Rotate(a.RotateZ);
        [MethodImpl(AggressiveInlining)]  public QuadArray3D TranslateX(Number s){
            var _var279 = s;
            return this.Deform((p) => p.Add((_var279, ((Integer)0), ((Integer)0))));
        }

        [MethodImpl(AggressiveInlining)]  public QuadArray3D TranslateY(Number s){
            var _var280 = s;
            return this.Deform((p) => p.Add((((Integer)0), _var280, ((Integer)0))));
        }

        [MethodImpl(AggressiveInlining)]  public QuadArray3D TranslateZ(Number s){
            var _var281 = s;
            return this.Deform((p) => p.Add((((Integer)0), ((Integer)0), _var281)));
        }

        [MethodImpl(AggressiveInlining)]  public QuadArray3D ScaleX(Number s){
            var _var282 = s;
            return this.Deform((p) => p.Multiply((_var282, ((Integer)1), ((Integer)1))));
        }

        [MethodImpl(AggressiveInlining)]  public QuadArray3D ScaleY(Number s){
            var _var283 = s;
            return this.Deform((p) => p.Multiply((((Integer)1), _var283, ((Integer)1))));
        }

        [MethodImpl(AggressiveInlining)]  public QuadArray3D ScaleZ(Number s){
            var _var284 = s;
            return this.Deform((p) => p.Multiply((((Integer)1), ((Integer)1), _var284)));
        }

        public Integer PrimitiveSize { [MethodImpl(AggressiveInlining)] get  => ((Integer)4); } 

        // Unimplemented concept functions
    }
}
