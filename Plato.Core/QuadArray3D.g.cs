// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 11:25:56 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct QuadArray3D: IQuadArray3D
    {
        // Fields
        [DataMember] public readonly IArray<Quad3D> Quads;

        // With functions 
        [MethodImpl(AggressiveInlining)] public QuadArray3D WithQuads(IArray<Quad3D> quads) => new QuadArray3D(quads);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public QuadArray3D(IArray<Quad3D> quads) { Quads = quads; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static QuadArray3D Create(IArray<Quad3D> quads) => new QuadArray3D(quads);

        // Implicit converters to/from single field

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(QuadArray3D other) => Quads.Equals(other.Quads);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(QuadArray3D other) => !Quads.Equals(other.Quads);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is QuadArray3D other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Quads);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Quads\" = {Quads} }}";

        // Explicit implementation of interfaces by forwarding properties to fields
        IArray<Quad3D> IQuadGeometry3D.Quads { [MethodImpl(AggressiveInlining)] get => Quads; }

        // Implemented concept functions and type functions
        [MethodImpl(AggressiveInlining)]  public QuadArray3D Deform(System.Func<Vector3, Vector3> f){
            var _var851 = f;
            return new QuadArray3D(this.Quads.Map((q) => q.Deform(_var851)));
        }

        public IArray<Integer> Indices { [MethodImpl(AggressiveInlining)] get  => this.Points.Indices(); } 
        public TriangleArray3D TriangleArray3D { [MethodImpl(AggressiveInlining)] get  => new TriangleArray3D(this.Triangles); } 
        [MethodImpl(AggressiveInlining)]  public static implicit operator TriangleArray3D(QuadArray3D q) => q.TriangleArray3D;
        public QuadMesh3D QuadMesh3D { [MethodImpl(AggressiveInlining)] get  => (this.Points, this.Points.Indices()); } 
        [MethodImpl(AggressiveInlining)]  public static implicit operator QuadMesh3D(QuadArray3D self) => self.QuadMesh3D;
        public TriangleMesh3D TriangleMesh3D { [MethodImpl(AggressiveInlining)] get  => this.TriangleArray3D; } 
        [MethodImpl(AggressiveInlining)]  public static implicit operator TriangleMesh3D(QuadArray3D g) => g.TriangleMesh3D;
        public IArray<Vector3> Points { [MethodImpl(AggressiveInlining)] get  => this.Quads.FlatMap((x) => x.Points); } 
        public IArray<Line3D> Lines { [MethodImpl(AggressiveInlining)] get  => this.Quads.FlatMap((x) => x.Lines); } 
        public IArray<Triangle3D> Triangles { [MethodImpl(AggressiveInlining)] get  => this.Quads.FlatMap((x) => x.Triangles); } 
        public LineMesh3D LineMesh3D { [MethodImpl(AggressiveInlining)] get  => (this.Points, this.FaceIndices.FlatMap((a) => Intrinsics.MakeArray(a.At(((Integer)0)), a.At(((Integer)1)), a.At(((Integer)1)), a.At(((Integer)2)), a.At(((Integer)2)), a.At(((Integer)3)), a.At(((Integer)3)), a.At(((Integer)0))))); } 
        [MethodImpl(AggressiveInlining)]  public static implicit operator LineMesh3D(QuadArray3D g) => g.LineMesh3D;
        public IArray<Quad3D> Faces { [MethodImpl(AggressiveInlining)] get  => this.Quads; } 
        [MethodImpl(AggressiveInlining)]  public Vector3 Vertex(Integer n) => this.Points.At(this.Indices.At(n));
        [MethodImpl(AggressiveInlining)]  public IArray<Vector3> FaceVertices(Integer f){
            var _var852 = this;
            return this.FaceIndices.At(f).Map((i) => _var852.Vertex(i));
        }

        public IArray2D<Vector3> AllFaceVertices { [MethodImpl(AggressiveInlining)] get {
            var _var853 = this;
            return this.AllFaceIndices.Map((x) => _var853.Vertex(x));
        }
         } 
        [MethodImpl(AggressiveInlining)]  public IArray<Vector3> Vertices(IArray<Integer> xs){
            var _var854 = this;
            return xs.Map((i) => _var854.Vertex(i));
        }

        public IArray<Vector3> AllVertices { [MethodImpl(AggressiveInlining)] get  => this.Vertices(this.Indices); } 
        public Integer NumPrimitives { [MethodImpl(AggressiveInlining)] get  => this.Indices.Count.Divide(this.PrimitiveSize); } 
        public Integer NumFaces { [MethodImpl(AggressiveInlining)] get  => this.NumPrimitives; } 
        public IArray2D<Integer> AllFaceIndices { [MethodImpl(AggressiveInlining)] get  => this.Indices.Slices(this.PrimitiveSize); } 
        public Integer PrimitiveSize { [MethodImpl(AggressiveInlining)] get  => ((Integer)4); } 
        public IArray<Integer4> FaceIndices { [MethodImpl(AggressiveInlining)] get  => this.Indices.Integer4Array; } 

        // Unimplemented concept functions
        public IArray<Vector3> Corners => throw new NotImplementedException();
    }
}
