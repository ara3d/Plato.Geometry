// Autogenerated file: DO NOT EDIT
// Created on 2025-03-14 12:36:59 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct PointArray2D: IPointArray2D
    {
        // Fields
        [DataMember] public readonly IArray<Vector2> Points;

        // With functions 
        [MethodImpl(AggressiveInlining)] public PointArray2D WithPoints(IArray<Vector2> points) => new PointArray2D(points);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public PointArray2D(IArray<Vector2> points) { Points = points; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static PointArray2D Create(IArray<Vector2> points) => new PointArray2D(points);

        // Implicit converters to/from single field

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(PointArray2D other) => Points.Equals(other.Points);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(PointArray2D other) => !Points.Equals(other.Points);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is PointArray2D other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Points);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Points\" = {Points} }}";

        // Explicit implementation of interfaces by forwarding properties to fields
        IArray<Vector2> IPointGeometry2D.Points { [MethodImpl(AggressiveInlining)] get => Points; }

        // Implemented interface functions
        // Indices(PointArray2D):_T0; [IPointArray2D=PointArray2D;Self=PointArray2D;]; <_T0:IArray<Integer>>
        public _T0 Indices<_T0> { [MethodImpl(AggressiveInlining)] get  => this.Points.Indices(); } 

        // Unimplemented concept functions
        // PrimitiveSize(PointArray2D):Integer; [IPrimitiveGeometry=PointArray2D;IPrimitiveGeometry2D=PointArray2D;IPointGeometry2D=PointArray2D;IPointArray2D=PointArray2D;Self=PointArray2D;]; <>
        public Integer PrimitiveSize => throw new NotImplementedException();
// NumPrimitives(PointArray2D):Integer; [IPrimitiveGeometry=PointArray2D;IPrimitiveGeometry2D=PointArray2D;IPointGeometry2D=PointArray2D;IPointArray2D=PointArray2D;Self=PointArray2D;]; <>
        public Integer NumPrimitives => throw new NotImplementedException();
// Corners(PointArray2D):_T0; [IPrimitiveGeometry2D=PointArray2D;IPointGeometry2D=PointArray2D;IPointArray2D=PointArray2D;Self=PointArray2D;]; <_T0:IArray<Vector2>>
        public _T0 Corners<_T0> => throw new NotImplementedException();
}
}
