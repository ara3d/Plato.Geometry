// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 11:25:56 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Hypotrochoid: IAngularCurve2D, IOpenShape
    {
        // Fields
        [DataMember] public readonly Number Radius1;
        [DataMember] public readonly Number Radius2;
        [DataMember] public readonly Number Dist;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Hypotrochoid WithRadius1(Number radius1) => new Hypotrochoid(radius1, Radius2, Dist);
        [MethodImpl(AggressiveInlining)] public Hypotrochoid WithRadius2(Number radius2) => new Hypotrochoid(Radius1, radius2, Dist);
        [MethodImpl(AggressiveInlining)] public Hypotrochoid WithDist(Number dist) => new Hypotrochoid(Radius1, Radius2, dist);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Hypotrochoid(Number radius1, Number radius2, Number dist) { Radius1 = radius1; Radius2 = radius2; Dist = dist; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Hypotrochoid Create(Number radius1, Number radius2, Number dist) => new Hypotrochoid(radius1, radius2, dist);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Number, Number, Number)(Hypotrochoid self) => (self.Radius1, self.Radius2, self.Dist);
        [MethodImpl(AggressiveInlining)] public static implicit operator Hypotrochoid((Number, Number, Number) value) => new(value.Item1, value.Item2, value.Item3);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Number radius1, out Number radius2, out Number dist) { radius1 = Radius1; radius2 = Radius2; dist = Dist;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Hypotrochoid other) => Radius1.Equals(other.Radius1) && Radius2.Equals(other.Radius2) && Dist.Equals(other.Dist);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Hypotrochoid other) => !Radius1.Equals(other.Radius1) && Radius2.Equals(other.Radius2) && Dist.Equals(other.Dist);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Hypotrochoid other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Radius1, Radius2, Dist);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Radius1\" = {Radius1}, \"Radius2\" = {Radius2}, \"Dist\" = {Dist} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented concept functions and type functions
        [MethodImpl(AggressiveInlining)]  public Vector2 Eval(Angle t) => t.Hypotrochoid(this.Radius1, this.Radius2, this.Dist);
        [MethodImpl(AggressiveInlining)]  public Vector2 Eval(Number t) => this.Eval(t.Turns);
        [MethodImpl(AggressiveInlining)]  public IArray<Vector2> Sample(Integer numPoints){
            var _var195 = this;
            return numPoints.LinearSpace.Map((x) => _var195.Eval(x));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine2D ToPolyLine2D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
        [MethodImpl(AggressiveInlining)]  public Procedural<Number, TR> Combine<TR>(Hypotrochoid b, System.Func<TR, TR, TR> f){
            var _var198 = b;
            {
                var _var197 = this;
                {
                    var _var196 = f;
                    return (x) => _var196.Invoke(_var197.Eval(x), _var198.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector2> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var200 = f;
            {
                var _var199 = this;
                return (x) => _var199.Eval(_var200.Invoke(x));
            }
        }

        public System.Func<Number, Vector2> Function { [MethodImpl(AggressiveInlining)] get {
            var _var201 = this;
            return (x) => _var201.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Number, Vector2> Compose(Hypotrochoid b){
            var _var203 = this;
            {
                var _var202 = b;
                return (x) => _var202.Eval(_var203.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, TR> Combine<TR>(Hypotrochoid b, System.Func<TR, TR, TR> f){
            var _var206 = b;
            {
                var _var205 = this;
                {
                    var _var204 = f;
                    return (x) => _var204.Invoke(_var205.Eval(x), _var206.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var208 = f;
            {
                var _var207 = this;
                return (x) => _var207.Eval(_var208.Invoke(x));
            }
        }

        public System.Func<Vector2, Number> Function { [MethodImpl(AggressiveInlining)] get {
            var _var209 = this;
            return (x) => _var209.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Number> Compose(Hypotrochoid b){
            var _var211 = this;
            {
                var _var210 = b;
                return (x) => _var210.Eval(_var211.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Union(Hypotrochoid b) => this.Combine(b, (a, b) => a.Max(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Intersection(Hypotrochoid b) => this.Combine(b, (a, b) => a.Min(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Difference(Hypotrochoid b) => this.Combine(b, (a, b) => a.Max(b.Negative));
        public Procedural<Vector2, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) => x.Negative); } 
        public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)false); } 

        // Unimplemented concept functions
        [MethodImpl(AggressiveInlining)]  public Number Distance(Vector2 p) => throw new NotImplementedException();
        [MethodImpl(AggressiveInlining)]  public Number Eval(Vector2 t) => throw new NotImplementedException();
    }
}
