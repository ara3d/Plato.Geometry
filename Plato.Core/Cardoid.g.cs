// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 12:06:56 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Cardoid: IPolarCurve, IClosedShape
    {
        // Fields

        // With functions 

        // Regular Constructor

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Cardoid Create() => new Cardoid();

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Cardoid;
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Cardoid other) => true;
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Cardoid other) => false;
        [MethodImpl(AggressiveInlining)] public static Boolean operator==(Cardoid a, Cardoid b) => true;
        [MethodImpl(AggressiveInlining)] public static Boolean operator!=(Cardoid a, Cardoid b) => false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes();
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{  }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented concept functions and type functions
        [MethodImpl(AggressiveInlining)]  public Number GetRadius(Angle t) => t.Cardoid;
        [MethodImpl(AggressiveInlining)]  public PolarCoordinate EvalPolar(Angle t) => (this.GetRadius(t), t);
        [MethodImpl(AggressiveInlining)]  public Vector2 Eval(Angle t) => this.EvalPolar(t);
        [MethodImpl(AggressiveInlining)]  public Vector2 Eval(Number t) => this.Eval(t.Turns);
        [MethodImpl(AggressiveInlining)]  public IArray<Vector2> Sample(Integer numPoints){
            var _var280 = this;
            return numPoints.LinearSpace.Map((x) => _var280.Eval(x));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine2D ToPolyLine2D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
        [MethodImpl(AggressiveInlining)]  public Procedural<Number, TR> Combine<TR>(Cardoid b, System.Func<TR, TR, TR> f){
            var _var283 = b;
            {
                var _var282 = this;
                {
                    var _var281 = f;
                    return (x) => _var281.Invoke(_var282.Eval(x), _var283.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector2> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var285 = f;
            {
                var _var284 = this;
                return (x) => _var284.Eval(_var285.Invoke(x));
            }
        }

        public System.Func<Number, Vector2> Function { [MethodImpl(AggressiveInlining)] get {
            var _var286 = this;
            return (x) => _var286.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Number, Vector2> Compose(Cardoid b){
            var _var288 = this;
            {
                var _var287 = b;
                return (x) => _var287.Eval(_var288.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, TR> Combine<TR>(Cardoid b, System.Func<TR, TR, TR> f){
            var _var291 = b;
            {
                var _var290 = this;
                {
                    var _var289 = f;
                    return (x) => _var289.Invoke(_var290.Eval(x), _var291.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var293 = f;
            {
                var _var292 = this;
                return (x) => _var292.Eval(_var293.Invoke(x));
            }
        }

        public System.Func<Vector2, Number> Function { [MethodImpl(AggressiveInlining)] get {
            var _var294 = this;
            return (x) => _var294.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Number> Compose(Cardoid b){
            var _var296 = this;
            {
                var _var295 = b;
                return (x) => _var295.Eval(_var296.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Union(Cardoid b) => this.Combine(b, (a, b) => a.Max(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Intersection(Cardoid b) => this.Combine(b, (a, b) => a.Min(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Difference(Cardoid b) => this.Combine(b, (a, b) => a.Max(b.Negative));
        public Procedural<Vector2, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) => x.Negative); } 
        public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 

        // Unimplemented concept functions
        [MethodImpl(AggressiveInlining)]  public Number Distance(Vector2 p) => throw new NotImplementedException();
        [MethodImpl(AggressiveInlining)]  public Number Eval(Vector2 t) => throw new NotImplementedException();
    }
}
