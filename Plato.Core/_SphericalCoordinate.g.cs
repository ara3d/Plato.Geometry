// Autogenerated file: DO NOT EDIT
// Created on 2025-04-08 12:25:04 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct SphericalCoordinate: ICoordinate
    {
        // Fields
        [DataMember] public readonly Number RadialDistance;
        [DataMember] public readonly Angle Azimuth;
        [DataMember] public readonly Angle Polar;

        // With functions 
        [MethodImpl(AggressiveInlining)] public SphericalCoordinate WithRadialDistance(Number radialDistance) => new SphericalCoordinate(radialDistance, Azimuth, Polar);
        [MethodImpl(AggressiveInlining)] public SphericalCoordinate WithAzimuth(Angle azimuth) => new SphericalCoordinate(RadialDistance, azimuth, Polar);
        [MethodImpl(AggressiveInlining)] public SphericalCoordinate WithPolar(Angle polar) => new SphericalCoordinate(RadialDistance, Azimuth, polar);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public SphericalCoordinate(Number radialDistance, Angle azimuth, Angle polar) { RadialDistance = radialDistance; Azimuth = azimuth; Polar = polar; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static SphericalCoordinate Create(Number radialDistance, Angle azimuth, Angle polar) => new SphericalCoordinate(radialDistance, azimuth, polar);

        // Static default implementation
        public static readonly SphericalCoordinate Default = default;

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Number, Angle, Angle)(SphericalCoordinate self) => (self.RadialDistance, self.Azimuth, self.Polar);
        [MethodImpl(AggressiveInlining)] public static implicit operator SphericalCoordinate((Number, Angle, Angle) value) => new SphericalCoordinate(value.Item1, value.Item2, value.Item3);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Number radialDistance, out Angle azimuth, out Angle polar) { radialDistance = RadialDistance; azimuth = Azimuth; polar = Polar;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(SphericalCoordinate other) => RadialDistance.Equals(other.RadialDistance) && Azimuth.Equals(other.Azimuth) && Polar.Equals(other.Polar);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(SphericalCoordinate other) => !RadialDistance.Equals(other.RadialDistance) && Azimuth.Equals(other.Azimuth) && Polar.Equals(other.Polar);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is SphericalCoordinate other ? Equals(other).Value : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(RadialDistance, Azimuth, Polar);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"RadialDistance\" = {RadialDistance}, \"Azimuth\" = {Azimuth}, \"Polar\" = {Polar} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented interface functions

        // Unimplemented interface functions
    }
}
