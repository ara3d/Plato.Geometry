// Autogenerated file: DO NOT EDIT
// Created on 2025-01-29 8:54:01 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Color: ICoordinate
    {
        // Fields
        [DataMember] public readonly Number R;
        [DataMember] public readonly Number G;
        [DataMember] public readonly Number B;
        [DataMember] public readonly Number A;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Color WithR(Number r) => new Color(r, G, B, A);
        [MethodImpl(AggressiveInlining)] public Color WithG(Number g) => new Color(R, g, B, A);
        [MethodImpl(AggressiveInlining)] public Color WithB(Number b) => new Color(R, G, b, A);
        [MethodImpl(AggressiveInlining)] public Color WithA(Number a) => new Color(R, G, B, a);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Color(Number r, Number g, Number b, Number a) { R = r; G = g; B = b; A = a; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Color Create(Number r, Number g, Number b, Number a) => new Color(r, g, b, a);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Number, Number, Number, Number)(Color self) => (self.R, self.G, self.B, self.A);
        [MethodImpl(AggressiveInlining)] public static implicit operator Color((Number, Number, Number, Number) value) => new(value.Item1, value.Item2, value.Item3, value.Item4);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Number r, out Number g, out Number b, out Number a) { r = R; g = G; b = B; a = A;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Color other) => R.Equals(other.R) && G.Equals(other.G) && B.Equals(other.B) && A.Equals(other.A);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Color other) => !R.Equals(other.R) && G.Equals(other.G) && B.Equals(other.B) && A.Equals(other.A);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Color other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(R, G, B, A);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"R\" = {R}, \"G\" = {G}, \"B\" = {B}, \"A\" = {A} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented concept functions and type functions

        // Unimplemented concept functions
    }
}
