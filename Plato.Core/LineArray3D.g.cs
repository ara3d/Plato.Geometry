// Autogenerated file: DO NOT EDIT
// Created on 2025-03-06 1:31:00 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct LineArray3D: ILineArray3D<LineArray3D>
    {
        // Fields
        [DataMember] public readonly IArray<Line3D> Lines;

        // With functions 
        [MethodImpl(AggressiveInlining)] public LineArray3D WithLines(IArray<Line3D> lines) => new LineArray3D(lines);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public LineArray3D(IArray<Line3D> lines) { Lines = lines; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static LineArray3D Create(IArray<Line3D> lines) => new LineArray3D(lines);

        // Implicit converters to/from single field

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(LineArray3D other) => Lines.Equals(other.Lines);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(LineArray3D other) => !Lines.Equals(other.Lines);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is LineArray3D other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Lines);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Lines\" = {Lines} }}";

        // Explicit implementation of interfaces by forwarding properties to fields
        IArray<Line3D> ILineGeometry3D<LineArray3D>.Lines { [MethodImpl(AggressiveInlining)] get => Lines; }

        // Implemented concept functions and type functions
        [MethodImpl(AggressiveInlining)]  public LineArray3D Deform(System.Func<Vector3, Vector3> f){
            var _var339 = f;
            return new LineArray3D(this.Lines.Map((l) => l.Deform(_var339)));
        }

        public IArray<Integer> Indices { [MethodImpl(AggressiveInlining)] get  => this.Points.Indices(); } 
        public IArray<Integer2> FaceIndices { [MethodImpl(AggressiveInlining)] get  => this.Indices.Integer2Array; } 
        public IArray<Vector3> Points { [MethodImpl(AggressiveInlining)] get  => this.Lines.FlatMap((x) => x.Points); } 
        [MethodImpl(AggressiveInlining)]  public Vector3 Vertex(Integer n) => this.Points.At(this.Indices.At(n));
        [MethodImpl(AggressiveInlining)]  public IArray<Vector3> FaceVertices(Integer f){
            var _var340 = this;
            return this.FaceIndices.At(f).Map((i) => _var340.Vertex(i));
        }

        public IArray2D<Vector3> AllFaceVertices { [MethodImpl(AggressiveInlining)] get {
            var _var341 = this;
            return this.AllFaceIndices.Map((x) => _var341.Vertex(x));
        }
         } 
        [MethodImpl(AggressiveInlining)]  public IArray<Vector3> Vertices(IArray<Integer> xs){
            var _var342 = this;
            return xs.Map((i) => _var342.Vertex(i));
        }

        public IArray<Vector3> AllVertices { [MethodImpl(AggressiveInlining)] get  => this.Vertices(this.Indices); } 
        public Integer NumPrimitives { [MethodImpl(AggressiveInlining)] get  => this.Indices.Count.Divide(this.PrimitiveSize); } 
        public Integer NumFaces { [MethodImpl(AggressiveInlining)] get  => this.NumPrimitives; } 
        public IArray2D<Integer> AllFaceIndices { [MethodImpl(AggressiveInlining)] get  => this.Indices.Slices(this.PrimitiveSize); } 
        [MethodImpl(AggressiveInlining)]  public LineArray3D Deform(IdentityTransform3D t){
            var _var343 = t;
            return this.Deform((v) => _var343.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public LineArray3D Deform(MatrixTransform3D t){
            var _var344 = t;
            return this.Deform((v) => _var344.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public LineArray3D Deform(Translation3D t){
            var _var345 = t;
            return this.Deform((v) => _var345.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public LineArray3D Deform(Rotation3D t){
            var _var346 = t;
            return this.Deform((v) => _var346.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public LineArray3D Deform(LookRotation t){
            var _var347 = t;
            return this.Deform((v) => _var347.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public LineArray3D Deform(Scaling3D t){
            var _var348 = t;
            return this.Deform((v) => _var348.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public LineArray3D Deform(TRSTransform3D t){
            var _var349 = t;
            return this.Deform((v) => _var349.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public LineArray3D Deform(Pose3D t){
            var _var350 = t;
            return this.Deform((v) => _var350.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public LineArray3D Deform(AxisAngle t){
            var _var351 = t;
            return this.Deform((v) => _var351.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public LineArray3D Deform(EulerAngles t){
            var _var352 = t;
            return this.Deform((v) => _var352.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public LineArray3D Deform(Perspective3D t){
            var _var353 = t;
            return this.Deform((v) => _var353.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public LineArray3D Deform(Orthographic3D t){
            var _var354 = t;
            return this.Deform((v) => _var354.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public LineArray3D Deform(PlaneProjection t){
            var _var355 = t;
            return this.Deform((v) => _var355.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public LineArray3D Translate(Vector3 v){
            var _var356 = v;
            return this.Deform((p) => p.Add(_var356));
        }

        [MethodImpl(AggressiveInlining)]  public LineArray3D Rotate(Quaternion q) => this.Deform(q);
        [MethodImpl(AggressiveInlining)]  public LineArray3D Scale(Vector3 v){
            var _var357 = v;
            return this.Deform((p) => p.Multiply(_var357));
        }

        [MethodImpl(AggressiveInlining)]  public LineArray3D Scale(Number s){
            var _var358 = s;
            return this.Deform((p) => p.Multiply(_var358));
        }

        [MethodImpl(AggressiveInlining)]  public LineArray3D RotateX(Angle a) => this.Rotate(a.RotateX);
        [MethodImpl(AggressiveInlining)]  public LineArray3D RotateY(Angle a) => this.Rotate(a.RotateY);
        [MethodImpl(AggressiveInlining)]  public LineArray3D RotateZ(Angle a) => this.Rotate(a.RotateZ);
        [MethodImpl(AggressiveInlining)]  public LineArray3D TranslateX(Number s){
            var _var359 = s;
            return this.Deform((p) => p.Add((_var359, ((Integer)0), ((Integer)0))));
        }

        [MethodImpl(AggressiveInlining)]  public LineArray3D TranslateY(Number s){
            var _var360 = s;
            return this.Deform((p) => p.Add((((Integer)0), _var360, ((Integer)0))));
        }

        [MethodImpl(AggressiveInlining)]  public LineArray3D TranslateZ(Number s){
            var _var361 = s;
            return this.Deform((p) => p.Add((((Integer)0), ((Integer)0), _var361)));
        }

        [MethodImpl(AggressiveInlining)]  public LineArray3D ScaleX(Number s){
            var _var362 = s;
            return this.Deform((p) => p.Multiply((_var362, ((Integer)1), ((Integer)1))));
        }

        [MethodImpl(AggressiveInlining)]  public LineArray3D ScaleY(Number s){
            var _var363 = s;
            return this.Deform((p) => p.Multiply((((Integer)1), _var363, ((Integer)1))));
        }

        [MethodImpl(AggressiveInlining)]  public LineArray3D ScaleZ(Number s){
            var _var364 = s;
            return this.Deform((p) => p.Multiply((((Integer)1), ((Integer)1), _var364)));
        }

        public Integer PrimitiveSize { [MethodImpl(AggressiveInlining)] get  => ((Integer)2); } 

        // Unimplemented concept functions
    }
}
