// Autogenerated file: DO NOT EDIT
// Created on 2025-01-20 10:41:00 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct LineArray3D: ILineArray3D<LineArray3D>
    {
        // Fields
        [DataMember] public readonly IArray<Line3D> Lines;

        // With functions 
        [MethodImpl(AggressiveInlining)] public LineArray3D WithLines(IArray<Line3D> lines) => new LineArray3D(lines);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public LineArray3D(IArray<Line3D> lines) { Lines = lines; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static LineArray3D Create(IArray<Line3D> lines) => new LineArray3D(lines);

        // Implicit converters to/from single field

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(LineArray3D other) => Lines.Equals(other.Lines);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(LineArray3D other) => !Lines.Equals(other.Lines);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is LineArray3D other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Lines);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Lines\" = {Lines} }}";

        // Explicit implementation of interfaces by forwarding properties to fields
        IArray<Line3D> ILineGeometry3D<LineArray3D>.Lines { [MethodImpl(AggressiveInlining)] get => Lines; }

        // Implemented concept functions and type functions
        [MethodImpl(AggressiveInlining)]  public LineArray3D Deform(System.Func<Vector3, Vector3> f){
            var _var201 = f;
            return new LineArray3D(this.Lines.Map((l) => l.Deform(_var201)));
        }

        public IArray<Integer> Indices { [MethodImpl(AggressiveInlining)] get  => this.Points.Indices(); } 
        public IArray<Vector3> Points { [MethodImpl(AggressiveInlining)] get  => this.Lines.FlatMap((x) => x.Points); } 
        [MethodImpl(AggressiveInlining)]  public IArray<Vector3> FaceVertices(Integer f){
            var _var202 = this;
            return this.FaceIndices(f).Map((i) => _var202.Vertex(i));
        }

        [MethodImpl(AggressiveInlining)]  public Vector3 Vertex(Integer n) => this.Points.At(this.Indices.At(n));
        [MethodImpl(AggressiveInlining)]  public IArray<Vector3> Vertices(IArray<Integer> xs){
            var _var203 = this;
            return xs.Map((i) => _var203.Vertex(i));
        }

        public IArray<IArray<Vector3>> AllFaceVertices { [MethodImpl(AggressiveInlining)] get {
            var _var204 = this;
            return this.Indices.Slices(this.PrimitiveSize).Map((xs) => _var204.Vertices(xs));
        }
         } 
        public IArray<Vector3> AllVertices { [MethodImpl(AggressiveInlining)] get  => this.Vertices(this.Indices); } 
        public Integer NumPrimitives { [MethodImpl(AggressiveInlining)] get  => this.Indices.Count.Divide(this.PrimitiveSize); } 
        public Integer NumFaces { [MethodImpl(AggressiveInlining)] get  => this.NumPrimitives; } 
        [MethodImpl(AggressiveInlining)]  public IArray<Integer> FaceIndices(Integer f) => this.Indices.NthSlice(f, this.PrimitiveSize);
        public IArray<IArray<Integer>> AllFaceIndices { [MethodImpl(AggressiveInlining)] get  => this.Indices.Slices(this.PrimitiveSize); } 
        [MethodImpl(AggressiveInlining)]  public LineArray3D Deform(ITransform3D t){
            var _var205 = t;
            return this.Deform((v) => _var205.Transform(v));
        }

        [MethodImpl(AggressiveInlining)]  public LineArray3D Translate(Vector3 v){
            var _var206 = v;
            return this.Deform((p) => p.Add(_var206));
        }

        [MethodImpl(AggressiveInlining)]  public LineArray3D Rotate(Quaternion q) => this.Deform(q);
        [MethodImpl(AggressiveInlining)]  public LineArray3D Scale(Vector3 v){
            var _var207 = v;
            return this.Deform((p) => p.Multiply(_var207));
        }

        [MethodImpl(AggressiveInlining)]  public LineArray3D Scale(Number s){
            var _var208 = s;
            return this.Deform((p) => p.Multiply(_var208));
        }

        [MethodImpl(AggressiveInlining)]  public LineArray3D RotateX(Angle a) => this.Rotate(a.RotateX);
        [MethodImpl(AggressiveInlining)]  public LineArray3D RotateY(Angle a) => this.Rotate(a.RotateY);
        [MethodImpl(AggressiveInlining)]  public LineArray3D RotateZ(Angle a) => this.Rotate(a.RotateZ);
        [MethodImpl(AggressiveInlining)]  public LineArray3D TranslateX(Number s){
            var _var209 = s;
            return this.Deform((p) => p.Add((_var209, ((Integer)0), ((Integer)0))));
        }

        [MethodImpl(AggressiveInlining)]  public LineArray3D TranslateY(Number s){
            var _var210 = s;
            return this.Deform((p) => p.Add((((Integer)0), _var210, ((Integer)0))));
        }

        [MethodImpl(AggressiveInlining)]  public LineArray3D TranslateZ(Number s){
            var _var211 = s;
            return this.Deform((p) => p.Add((((Integer)0), ((Integer)0), _var211)));
        }

        [MethodImpl(AggressiveInlining)]  public LineArray3D ScaleX(Number s){
            var _var212 = s;
            return this.Deform((p) => p.Multiply((_var212, ((Integer)1), ((Integer)1))));
        }

        [MethodImpl(AggressiveInlining)]  public LineArray3D ScaleY(Number s){
            var _var213 = s;
            return this.Deform((p) => p.Multiply((((Integer)1), _var213, ((Integer)1))));
        }

        [MethodImpl(AggressiveInlining)]  public LineArray3D ScaleZ(Number s){
            var _var214 = s;
            return this.Deform((p) => p.Multiply((((Integer)1), ((Integer)1), _var214)));
        }

        public Integer PrimitiveSize { [MethodImpl(AggressiveInlining)] get  => ((Integer)2); } 

        // Unimplemented concept functions
    }
}
