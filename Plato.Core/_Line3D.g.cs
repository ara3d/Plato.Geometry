// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 8:08:08 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
public partial struct Line3D: IPolyLine3D, IOpenShape3D, IDeformable3D<Line3D>, IArray<Vector3>, IInterval<Vector3>
{
    // Fields
    [DataMember] public readonly Vector3 A;
    [DataMember] public readonly Vector3 B;

    // With functions 
    [MethodImpl(AggressiveInlining)] public Line3D WithA(Vector3 a) => new Line3D(a, B);
    [MethodImpl(AggressiveInlining)] public Line3D WithB(Vector3 b) => new Line3D(A, b);

    // Regular Constructor
    [MethodImpl(AggressiveInlining)] public Line3D(Vector3 a, Vector3 b) { A = a; B = b; }

    // Static factory function
    [MethodImpl(AggressiveInlining)] public static Line3D Create(Vector3 a, Vector3 b) => new Line3D(a, b);

    // Implicit converters to/from value-tuples and deconstructor
    [MethodImpl(AggressiveInlining)] public static implicit operator (Vector3, Vector3)(Line3D self) => (self.A, self.B);
    [MethodImpl(AggressiveInlining)] public static implicit operator Line3D((Vector3, Vector3) value) => new(value.Item1, value.Item2);
    [MethodImpl(AggressiveInlining)] public void Deconstruct(out Vector3 a, out Vector3 b) { a = A; b = B;  }

    // Object virtual function overrides: Equals, GetHashCode, ToString
    [MethodImpl(AggressiveInlining)] public Boolean Equals(Line3D other) => A.Equals(other.A) && B.Equals(other.B);
    [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Line3D other) => !A.Equals(other.A) && B.Equals(other.B);
    [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Line3D other ? Equals(other) : false;
    [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(A, B);
    [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"A\" = {A}, \"B\" = {B} }}";

    // Explicit implementation of interfaces by forwarding properties to fields

    // Array predefined functions
    [MethodImpl(AggressiveInlining)] public Line3D(IReadOnlyList<Vector3> xs) : this(xs[0], xs[1]) { }
    [MethodImpl(AggressiveInlining)] public Line3D(Vector3[] xs) : this(xs[0], xs[1]) { }
    [MethodImpl(AggressiveInlining)] public static Line3D Create(IReadOnlyList<Vector3> xs) => new Line3D(xs);
    // Implementation of IReadOnlyList
    [MethodImpl(AggressiveInlining)] public System.Collections.Generic.IEnumerator<Vector3> GetEnumerator() => new ArrayEnumerator<Vector3>(this);
    [MethodImpl(AggressiveInlining)] System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => GetEnumerator();
    Vector3 System.Collections.Generic.IReadOnlyList<Vector3>.this[int n] { [MethodImpl(AggressiveInlining)] get => At(n); }
    int System.Collections.Generic.IReadOnlyCollection<Vector3>.Count { [MethodImpl(AggressiveInlining)] get => this.Count; }

    // Implemented concept functions and type functions
    public Number Length { [MethodImpl(AggressiveInlining)] get  => this.B.Subtract(this.A).Length; } 
public Vector3 Direction { [MethodImpl(AggressiveInlining)] get  => this.B.Subtract(this.A); } 
public Ray3D Ray3D { [MethodImpl(AggressiveInlining)] get  => (this.A, this.Direction.Normalize); } 
[MethodImpl(AggressiveInlining)]  public static implicit operator Ray3D(Line3D x) => x.Ray3D;
    public Line3D Reverse { [MethodImpl(AggressiveInlining)] get  => (this.B, this.A); } 
public Bounds3D Bounds3D { [MethodImpl(AggressiveInlining)] get  => (this.A.Min(this.B), this.A.Max(this.B)); } 
[MethodImpl(AggressiveInlining)]  public static implicit operator Bounds3D(Line3D x) => x.Bounds3D;
    public Vector3 Start { [MethodImpl(AggressiveInlining)] get  => this.A; } 
public Vector3 End { [MethodImpl(AggressiveInlining)] get  => this.B; } 
[MethodImpl(AggressiveInlining)]  public Vector3 Eval(Number t) => this.A.Lerp(this.B, t);
public IArray<Vector3> Points { [MethodImpl(AggressiveInlining)] get  => Intrinsics.MakeArray<Vector3>(this.A, this.B); } 
[MethodImpl(AggressiveInlining)]  public Line3D Deform(System.Func<Vector3, Vector3> f) => (f.Invoke(this.A), f.Invoke(this.B));
public IArray<Line3D> Lines { [MethodImpl(AggressiveInlining)] get  => this.Points.WithNext((a, b) =>  => new Line3D(a, b);
 } 
[MethodImpl(AggressiveInlining)]  public IArray<Vector3> Sample(Integer numPoints){
    var _var680 = this;
    return numPoints.LinearSpace.Map((x) =>  => _var680.Eval(x);
;
}

[MethodImpl(AggressiveInlining)]  public PolyLine3D ToPolyLine3D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
[MethodImpl(AggressiveInlining)]  public Procedural<Number, TR> Combine<TR>(Line3D b, System.Func<TR, TR, TR> f){
    var _var683 = b;
    {
        var _var682 = this;
        {
            var _var681 = f;
            return (x) =>  => _var681.Invoke(_var682.Eval(x), _var683.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector3> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var685 = f;
    {
        var _var684 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var684.Eval(_var685.Invoke(x));
;
    }
}

public System.Func<Number, Vector3> Function { [MethodImpl(AggressiveInlining)] get {
    var _var686 = this;
    return (x) =>  => _var686.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Number, Vector3> Compose(Line3D b){
    var _var688 = this;
    {
        var _var687 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var687.Eval(_var688.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, TR> Combine<TR>(Line3D b, System.Func<TR, TR, TR> f){
    var _var691 = b;
    {
        var _var690 = this;
        {
            var _var689 = f;
            return (x) =>  => _var689.Invoke(_var690.Eval(x), _var691.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var693 = f;
    {
        var _var692 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var692.Eval(_var693.Invoke(x));
;
    }
}

public System.Func<Vector3, Number> Function { [MethodImpl(AggressiveInlining)] get {
    var _var694 = this;
    return (x) =>  => _var694.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, Number> Compose(Line3D b){
    var _var696 = this;
    {
        var _var695 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var695.Eval(_var696.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Union(Line3D b) => this.Combine(b, (a, b) =>  => a.Max(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Intersection(Line3D b) => this.Combine(b, (a, b) =>  => a.Min(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Difference(Line3D b) => this.Combine(b, (a, b) =>  => a.Max(b.Negative);

public Procedural<Vector3, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) =>  => x.Negative;
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, Boolean> Threshold(Number threshold){
    var _var697 = threshold;
    return this.Map((x) =>  => x.GreaterThanOrEquals(_var697);
;
}

public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)false); } 
[MethodImpl(AggressiveInlining)]  public Line3D Deform(IdentityTransform3D t){
    var _var698 = t;
    return this.Deform((v) =>  => _var698.Transform(v);
;
}

[MethodImpl(AggressiveInlining)]  public Line3D Deform(MatrixTransform3D t){
    var _var699 = t;
    return this.Deform((v) =>  => _var699.Transform(v);
;
}

[MethodImpl(AggressiveInlining)]  public Line3D Deform(Translation3D t){
    var _var700 = t;
    return this.Deform((v) =>  => _var700.Transform(v);
;
}

[MethodImpl(AggressiveInlining)]  public Line3D Deform(Rotation3D t){
    var _var701 = t;
    return this.Deform((v) =>  => _var701.Transform(v);
;
}

[MethodImpl(AggressiveInlining)]  public Line3D Deform(LookRotation t){
    var _var702 = t;
    return this.Deform((v) =>  => _var702.Transform(v);
;
}

[MethodImpl(AggressiveInlining)]  public Line3D Deform(Scaling3D t){
    var _var703 = t;
    return this.Deform((v) =>  => _var703.Transform(v);
;
}

[MethodImpl(AggressiveInlining)]  public Line3D Deform(TRSTransform3D t){
    var _var704 = t;
    return this.Deform((v) =>  => _var704.Transform(v);
;
}

[MethodImpl(AggressiveInlining)]  public Line3D Deform(Pose3D t){
    var _var705 = t;
    return this.Deform((v) =>  => _var705.Transform(v);
;
}

[MethodImpl(AggressiveInlining)]  public Line3D Deform(AxisAngle t){
    var _var706 = t;
    return this.Deform((v) =>  => _var706.Transform(v);
;
}

[MethodImpl(AggressiveInlining)]  public Line3D Deform(EulerAngles t){
    var _var707 = t;
    return this.Deform((v) =>  => _var707.Transform(v);
;
}

[MethodImpl(AggressiveInlining)]  public Line3D Deform(Perspective3D t){
    var _var708 = t;
    return this.Deform((v) =>  => _var708.Transform(v);
;
}

[MethodImpl(AggressiveInlining)]  public Line3D Deform(Orthographic3D t){
    var _var709 = t;
    return this.Deform((v) =>  => _var709.Transform(v);
;
}

[MethodImpl(AggressiveInlining)]  public Line3D Deform(PlaneProjection t){
    var _var710 = t;
    return this.Deform((v) =>  => _var710.Transform(v);
;
}

[MethodImpl(AggressiveInlining)]  public Line3D Translate(Vector3 v){
    var _var711 = v;
    return this.Deform((p) =>  => p.Add(_var711);
;
}

[MethodImpl(AggressiveInlining)]  public Line3D Rotate(Quaternion q) => this.Deform(q);
[MethodImpl(AggressiveInlining)]  public Line3D Scale(Vector3 v){
    var _var712 = v;
    return this.Deform((p) =>  => p.Multiply(_var712);
;
}

[MethodImpl(AggressiveInlining)]  public Line3D Scale(Number s){
    var _var713 = s;
    return this.Deform((p) =>  => p.Multiply(_var713);
;
}

[MethodImpl(AggressiveInlining)]  public Line3D RotateX(Angle a) => this.Rotate(a.RotateX);
[MethodImpl(AggressiveInlining)]  public Line3D RotateY(Angle a) => this.Rotate(a.RotateY);
[MethodImpl(AggressiveInlining)]  public Line3D RotateZ(Angle a) => this.Rotate(a.RotateZ);
[MethodImpl(AggressiveInlining)]  public Line3D TranslateX(Number s){
    var _var714 = s;
    return this.Deform((p) =>  => p.Add((_var714, ((Integer)0), ((Integer)0)));
;
}

[MethodImpl(AggressiveInlining)]  public Line3D TranslateY(Number s){
    var _var715 = s;
    return this.Deform((p) =>  => p.Add((((Integer)0), _var715, ((Integer)0)));
;
}

[MethodImpl(AggressiveInlining)]  public Line3D TranslateZ(Number s){
    var _var716 = s;
    return this.Deform((p) =>  => p.Add((((Integer)0), ((Integer)0), _var716));
;
}

[MethodImpl(AggressiveInlining)]  public Line3D ScaleX(Number s){
    var _var717 = s;
    return this.Deform((p) =>  => p.Multiply((_var717, ((Integer)1), ((Integer)1)));
;
}

[MethodImpl(AggressiveInlining)]  public Line3D ScaleY(Number s){
    var _var718 = s;
    return this.Deform((p) =>  => p.Multiply((((Integer)1), _var718, ((Integer)1)));
;
}

[MethodImpl(AggressiveInlining)]  public Line3D ScaleZ(Number s){
    var _var719 = s;
    return this.Deform((p) =>  => p.Multiply((((Integer)1), ((Integer)1), _var719));
;
}

public Vector3 Size { [MethodImpl(AggressiveInlining)] get  => this.End.Subtract(this.Start); } 
[MethodImpl(AggressiveInlining)]  public Vector3 Lerp(Number amount) => this.Start.Lerp(this.End, amount);
public Vector3 Center { [MethodImpl(AggressiveInlining)] get  => this.Lerp(((Number)0.5)); } 
[MethodImpl(AggressiveInlining)]  public Boolean Contains(Vector3 value) => value.Between(this.Start, this.End);
[MethodImpl(AggressiveInlining)]  public Boolean Contains(Line3D y) => this.Contains(y.Start).And(this.Contains(y.End));
[MethodImpl(AggressiveInlining)]  public Boolean Overlaps(Line3D y) => this.Contains(y.Start).Or(this.Contains(y.End).Or(y.Contains(this.Start).Or(y.Contains(this.End))));
[MethodImpl(AggressiveInlining)]  public Tuple2<Line3D, Line3D> SplitAt(Number t) => (this.Left(t), this.Right(t));
public Tuple2<Line3D, Line3D> Split { [MethodImpl(AggressiveInlining)] get  => this.SplitAt(((Number)0.5)); } 
[MethodImpl(AggressiveInlining)]  public Line3D Left(Number t) => (this.Start, this.Lerp(t));
[MethodImpl(AggressiveInlining)]  public Line3D Right(Number t) => (this.Lerp(t), this.End);
[MethodImpl(AggressiveInlining)]  public Line3D MoveTo(Vector3 v) => (v, v.Add(this.Size));
public Line3D LeftHalf { [MethodImpl(AggressiveInlining)] get  => this.Left(((Number)0.5)); } 
public Line3D RightHalf { [MethodImpl(AggressiveInlining)] get  => this.Right(((Number)0.5)); } 
[MethodImpl(AggressiveInlining)]  public Line3D Recenter(Vector3 c) => (c.Subtract(this.Size.Half), c.Add(this.Size.Half));
[MethodImpl(AggressiveInlining)]  public Line3D Clamp(Line3D y) => (this.Clamp(y.Start), this.Clamp(y.End));
[MethodImpl(AggressiveInlining)]  public Vector3 Clamp(Vector3 value) => value.Clamp(this.Start, this.End);
[MethodImpl(AggressiveInlining)]  public IArray<Vector3> LinearSpace(Integer count){
    var _var720 = this;
    return count.LinearSpace.Map((x) =>  => _var720.Lerp(x);
;
}

[MethodImpl(AggressiveInlining)]  public IArray<Vector3> LinearSpaceExclusive(Integer count){
    var _var721 = this;
    return count.LinearSpaceExclusive.Map((x) =>  => _var721.Lerp(x);
;
}

[MethodImpl(AggressiveInlining)]  public IArray<Vector3> GeometricSpace(Integer count){
    var _var722 = this;
    return count.GeometricSpace.Map((x) =>  => _var722.Lerp(x);
;
}

[MethodImpl(AggressiveInlining)]  public IArray<Vector3> GeometricSpaceExclusive(Integer count){
    var _var723 = this;
    return count.GeometricSpaceExclusive.Map((x) =>  => _var723.Lerp(x);
;
}

[MethodImpl(AggressiveInlining)]  public Line3D Subdivide(Number start, Number end) => (this.Lerp(start), this.Lerp(end));
[MethodImpl(AggressiveInlining)]  public Line3D Subdivide(NumberInterval subInterval) => this.Subdivide(subInterval.Start, subInterval.End);
[MethodImpl(AggressiveInlining)]  public IArray<Line3D> Subdivide(Integer count){
    var _var724 = this;
    return count.Intervals.Map((i) =>  => _var724.Subdivide(i);
;
}


    // Unimplemented concept functions
    [MethodImpl(AggressiveInlining)]  public Number Distance(Vector3 p) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public Number Eval(Vector3 t) => throw new NotImplementedException();
public IArray<Vector3> Corners => throw new NotImplementedException();
public Integer PrimitiveSize => throw new NotImplementedException();
public Integer NumPrimitives => throw new NotImplementedException();
public Integer Count { [MethodImpl(AggressiveInlining)] get => 2; }
    [MethodImpl(AggressiveInlining)]  public Vector3 At(Integer n) => n == 0 ? A : n == 1 ? B : throw new System.IndexOutOfRangeException();
    public Vector3 this[Integer n] { [MethodImpl(AggressiveInlining)] get => At(n); }
}
Plato.CSharpWriter.CSharpConcreteTypeWriter}
