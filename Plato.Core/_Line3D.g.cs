// Autogenerated file: DO NOT EDIT
// Created on 2025-03-14 12:36:59 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Line3D: IPolyLine3D, IOpenShape3D, IDeformable3D<Line3D>, IArray<Vector3>, IInterval<Vector3>
    {
        // Fields
        [DataMember] public readonly Vector3 A;
        [DataMember] public readonly Vector3 B;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Line3D WithA(Vector3 a) => new Line3D(a, B);
        [MethodImpl(AggressiveInlining)] public Line3D WithB(Vector3 b) => new Line3D(A, b);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Line3D(Vector3 a, Vector3 b) { A = a; B = b; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Line3D Create(Vector3 a, Vector3 b) => new Line3D(a, b);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Vector3, Vector3)(Line3D self) => (self.A, self.B);
        [MethodImpl(AggressiveInlining)] public static implicit operator Line3D((Vector3, Vector3) value) => new(value.Item1, value.Item2);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Vector3 a, out Vector3 b) { a = A; b = B;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Line3D other) => A.Equals(other.A) && B.Equals(other.B);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Line3D other) => !A.Equals(other.A) && B.Equals(other.B);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Line3D other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(A, B);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"A\" = {A}, \"B\" = {B} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Array predefined functions
        [MethodImpl(AggressiveInlining)] public Line3D(IReadOnlyList<Vector3> xs) : this(xs[0], xs[1]) { }
        [MethodImpl(AggressiveInlining)] public Line3D(Vector3[] xs) : this(xs[0], xs[1]) { }
        [MethodImpl(AggressiveInlining)] public static Line3D Create(IReadOnlyList<Vector3> xs) => new Line3D(xs);
        // Implementation of IReadOnlyList
        [MethodImpl(AggressiveInlining)] public System.Collections.Generic.IEnumerator<Vector3> GetEnumerator() => new ArrayEnumerator<Vector3>(this);
        [MethodImpl(AggressiveInlining)] System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => GetEnumerator();
        Vector3 System.Collections.Generic.IReadOnlyList<Vector3>.this[int n] { [MethodImpl(AggressiveInlining)] get => At(n); }
        int System.Collections.Generic.IReadOnlyCollection<Vector3>.Count { [MethodImpl(AggressiveInlining)] get => this.Count; }

        // Implemented interface functions
        // Length(Line3D):Number; [Self=Line3D;]; <>
        public Number Length { [MethodImpl(AggressiveInlining)] get  => this.B.Subtract(this.A).Length; } 
// Direction(Line3D):Vector3; [Self=Line3D;]; <>
        public Vector3 Direction { [MethodImpl(AggressiveInlining)] get  => this.B.Subtract(this.A); } 
// Ray3D(Line3D):Ray3D; [Self=Line3D;]; <>
        public Ray3D Ray3D { [MethodImpl(AggressiveInlining)] get  => (this.A, this.Direction.Normalize); } 
[MethodImpl(AggressiveInlining)]  public static implicit operator Ray3D(Line3D x) => x.Ray3D;
        // Reverse(Line3D):Line3D; [Self=Line3D;]; <>
        public Line3D Reverse { [MethodImpl(AggressiveInlining)] get  => (this.B, this.A); } 
// Bounds3D(Line3D):Bounds3D; [Self=Line3D;]; <>
        public Bounds3D Bounds3D { [MethodImpl(AggressiveInlining)] get  => (this.A.Min(this.B), this.A.Max(this.B)); } 
[MethodImpl(AggressiveInlining)]  public static implicit operator Bounds3D(Line3D x) => x.Bounds3D;
        // Start(Line3D):Vector3; [Self=Line3D;]; <>
        public Vector3 Start { [MethodImpl(AggressiveInlining)] get  => this.A; } 
// End(Line3D):Vector3; [Self=Line3D;]; <>
        public Vector3 End { [MethodImpl(AggressiveInlining)] get  => this.B; } 
// Eval(Line3D, Number):Vector3; [Self=Line3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector3 Eval(Number t) => this.A.Lerp(this.B, t);
// Points(Line3D):_T0; [Self=Line3D;]; <_T0:IArray<Vector3>>
        public _T0 Points<_T0> { [MethodImpl(AggressiveInlining)] get  => Intrinsics.MakeArray(this.A, this.B); } 
// Deform(Line3D, Function1<Vector3, Vector3>):Line3D; [Self=Line3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Line3D Deform(System.Func<Vector3, Vector3> f) => (f.Invoke(this.A), f.Invoke(this.B));
// Lines(Line3D):_T0; [IPolyLine3D=Line3D;Self=Line3D;]; <_T0:IArray<Line3D>>
        public _T0 Lines<_T0> { [MethodImpl(AggressiveInlining)] get  => this.Points.WithNext((a, b)  => new Line3D(a, b), this.Closed); } 
// Sample(Line3D, Integer):_T0; [ICurve3D=Line3D;IPolyLine3D=Line3D;Self=Line3D;]; <_T0:IArray<Vector3>>
        [MethodImpl(AggressiveInlining)]  public _T0 Sample<_T0>(Integer numPoints){
            var _var102 = this;
            return numPoints.LinearSpace.Map((x)  => _var102.Eval(x));
        }

// ToPolyLine3D(Line3D, Integer):PolyLine3D; [ICurve3D=Line3D;IPolyLine3D=Line3D;Self=Line3D;]; <>
        [MethodImpl(AggressiveInlining)]  public PolyLine3D ToPolyLine3D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
// Closed(Line3D):Boolean; [IOpenShape=Line3D;IOpenShape3D=Line3D;Self=Line3D;]; <>
        public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)false); } 
// Deform(Line3D, _T0):Line3D; [IDeformable3D=Line3D;Self=Line3D;]; <_T0:ITransform3D>
        [MethodImpl(AggressiveInlining)]  public Line3D Deform<_T0>(_T0 t){
            var _var103 = t;
            return this.Deform((v)  => _var103.Transform(v));
        }

// Translate(Line3D, Vector3):Line3D; [IDeformable3D=Line3D;Self=Line3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Line3D Translate(Vector3 v){
            var _var104 = v;
            return this.Deform((p)  => p.Add(_var104));
        }

// Rotate(Line3D, Quaternion):Line3D; [IDeformable3D=Line3D;Self=Line3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Line3D Rotate(Quaternion q){
            var _var105 = q;
            return this.Deform((v)  => _var105.Transform(v));
        }

// Scale(Line3D, Vector3):Line3D; [IDeformable3D=Line3D;Self=Line3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Line3D Scale(Vector3 v){
            var _var106 = v;
            return this.Deform((p)  => p.Multiply(_var106));
        }

// Scale(Line3D, Number):Line3D; [IDeformable3D=Line3D;Self=Line3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Line3D Scale(Number s){
            var _var107 = s;
            return this.Deform((p)  => p.Multiply(_var107));
        }

// RotateX(Line3D, Angle):Line3D; [IDeformable3D=Line3D;Self=Line3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Line3D RotateX(Angle a) => this.Rotate(a.RotateX);
// RotateY(Line3D, Angle):Line3D; [IDeformable3D=Line3D;Self=Line3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Line3D RotateY(Angle a) => this.Rotate(a.RotateY);
// RotateZ(Line3D, Angle):Line3D; [IDeformable3D=Line3D;Self=Line3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Line3D RotateZ(Angle a) => this.Rotate(a.RotateZ);
// TranslateX(Line3D, Number):Line3D; [IDeformable3D=Line3D;Self=Line3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Line3D TranslateX(Number s){
            var _var108 = s;
            return this.Deform((p)  => p.Add((_var108, ((Integer)0), ((Integer)0))));
        }

// TranslateY(Line3D, Number):Line3D; [IDeformable3D=Line3D;Self=Line3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Line3D TranslateY(Number s){
            var _var109 = s;
            return this.Deform((p)  => p.Add((((Integer)0), _var109, ((Integer)0))));
        }

// TranslateZ(Line3D, Number):Line3D; [IDeformable3D=Line3D;Self=Line3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Line3D TranslateZ(Number s){
            var _var110 = s;
            return this.Deform((p)  => p.Add((((Integer)0), ((Integer)0), _var110)));
        }

// ScaleX(Line3D, Number):Line3D; [IDeformable3D=Line3D;Self=Line3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Line3D ScaleX(Number s){
            var _var111 = s;
            return this.Deform((p)  => p.Multiply((_var111, ((Integer)1), ((Integer)1))));
        }

// ScaleY(Line3D, Number):Line3D; [IDeformable3D=Line3D;Self=Line3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Line3D ScaleY(Number s){
            var _var112 = s;
            return this.Deform((p)  => p.Multiply((((Integer)1), _var112, ((Integer)1))));
        }

// ScaleZ(Line3D, Number):Line3D; [IDeformable3D=Line3D;Self=Line3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Line3D ScaleZ(Number s){
            var _var113 = s;
            return this.Deform((p)  => p.Multiply((((Integer)1), ((Integer)1), _var113)));
        }

// Size(Line3D):Vector3; [$T=Vector3;IInterval=Line3D;T=Vector3;Self=Line3D;]; <>
        public Vector3 Size { [MethodImpl(AggressiveInlining)] get  => this.End.Subtract(this.Start); } 
// Lerp(Line3D, Number):Vector3; [$T=Vector3;IInterval=Line3D;T=Vector3;Self=Line3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector3 Lerp(Number amount) => this.Start.Lerp(this.End, amount);
// Center(Line3D):Vector3; [$T=Vector3;IInterval=Line3D;T=Vector3;Self=Line3D;]; <>
        public Vector3 Center { [MethodImpl(AggressiveInlining)] get  => this.Lerp(((Number)0.5)); } 
// Contains(Line3D, Vector3):Boolean; [$T=Vector3;IInterval=Line3D;T=Vector3;Self=Line3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Boolean Contains(Vector3 value) => value.Between(this.Start, this.End);
// Contains(Line3D, Line3D):Boolean; [$T=Vector3;IInterval=Line3D;T=Vector3;Self=Line3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Boolean Contains(Line3D y) => this.Contains(y.Start).And(this.Contains(y.End));
// Overlaps(Line3D, Line3D):Boolean; [$T=Vector3;IInterval=Line3D;T=Vector3;Self=Line3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Boolean Overlaps(Line3D y) => this.Contains(y.Start).Or(this.Contains(y.End).Or(y.Contains(this.Start).Or(y.Contains(this.End))));
// SplitAt(Line3D, Number):Tuple2<Line3D, Line3D>; [$T=Vector3;IInterval=Line3D;T=Vector3;Self=Line3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Tuple2<Line3D, Line3D> SplitAt(Number t) => (this.Left(t), this.Right(t));
// Split(Line3D):Tuple2<Line3D, Line3D>; [$T=Vector3;IInterval=Line3D;T=Vector3;Self=Line3D;]; <>
        public Tuple2<Line3D, Line3D> Split { [MethodImpl(AggressiveInlining)] get  => this.SplitAt(((Number)0.5)); } 
// Left(Line3D, Number):Line3D; [$T=Vector3;IInterval=Line3D;T=Vector3;Self=Line3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Line3D Left(Number t) => (this.Start, this.Lerp(t));
// Right(Line3D, Number):Line3D; [$T=Vector3;IInterval=Line3D;T=Vector3;Self=Line3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Line3D Right(Number t) => (this.Lerp(t), this.End);
// MoveTo(Line3D, Vector3):Line3D; [$T=Vector3;IInterval=Line3D;T=Vector3;Self=Line3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Line3D MoveTo(Vector3 v) => (v, v.Add(this.Size));
// LeftHalf(Line3D):Line3D; [$T=Vector3;IInterval=Line3D;T=Vector3;Self=Line3D;]; <>
        public Line3D LeftHalf { [MethodImpl(AggressiveInlining)] get  => this.Left(((Number)0.5)); } 
// RightHalf(Line3D):Line3D; [$T=Vector3;IInterval=Line3D;T=Vector3;Self=Line3D;]; <>
        public Line3D RightHalf { [MethodImpl(AggressiveInlining)] get  => this.Right(((Number)0.5)); } 
// Recenter(Line3D, Vector3):Line3D; [$T=Vector3;IInterval=Line3D;T=Vector3;Self=Line3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Line3D Recenter(Vector3 c) => (c.Subtract(this.Size.Half), c.Add(this.Size.Half));
// Clamp(Line3D, Line3D):Line3D; [$T=Vector3;IInterval=Line3D;T=Vector3;Self=Line3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Line3D Clamp(Line3D y) => (this.Clamp(y.Start), this.Clamp(y.End));
// Clamp(Line3D, Vector3):Vector3; [$T=Vector3;IInterval=Line3D;T=Vector3;Self=Line3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector3 Clamp(Vector3 value) => value.Clamp(this.Start, this.End);
// LinearSpace(Line3D, Integer):_T0; [$T=Vector3;IInterval=Line3D;T=Vector3;Self=Line3D;]; <_T0:IArray<Vector3>>
        [MethodImpl(AggressiveInlining)]  public _T0 LinearSpace<_T0>(Integer count){
            var _var114 = this;
            return count.LinearSpace.Map((x)  => _var114.Lerp(x));
        }

// LinearSpaceExclusive(Line3D, Integer):_T0; [$T=Vector3;IInterval=Line3D;T=Vector3;Self=Line3D;]; <_T0:IArray<Vector3>>
        [MethodImpl(AggressiveInlining)]  public _T0 LinearSpaceExclusive<_T0>(Integer count){
            var _var115 = this;
            return count.LinearSpaceExclusive.Map((x)  => _var115.Lerp(x));
        }

// Subdivide(Line3D, Number, Number):Line3D; [$T=Vector3;IInterval=Line3D;T=Vector3;Self=Line3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Line3D Subdivide(Number start, Number end) => (this.Lerp(start), this.Lerp(end));
// Subdivide(Line3D, NumberInterval):Line3D; [$T=Vector3;IInterval=Line3D;T=Vector3;Self=Line3D;]; <>
        [MethodImpl(AggressiveInlining)]  public Line3D Subdivide(NumberInterval subInterval) => this.Subdivide(subInterval.Start, subInterval.End);
// Subdivide(Line3D, Integer):_T0; [$T=Vector3;IInterval=Line3D;T=Vector3;Self=Line3D;]; <_T0:IArray<Line3D>>
        [MethodImpl(AggressiveInlining)]  public _T0 Subdivide<_T0>(Integer count){
            var _var116 = this;
            return count.Intervals.Map((i)  => _var116.Subdivide(i));
        }


        // Unimplemented concept functions
        public Integer Count { [MethodImpl(AggressiveInlining)] get => 2; }
        [MethodImpl(AggressiveInlining)]  public Vector3 At(Integer n) => n == 0 ? A : n == 1 ? B : throw new System.IndexOutOfRangeException();
        public Vector3 this[Integer n] { [MethodImpl(AggressiveInlining)] get => At(n); }
        // PrimitiveSize(Line3D):Integer; [IPrimitiveGeometry=Line3D;IPrimitiveGeometry3D=Line3D;IPointGeometry3D=Line3D;IPolyLine3D=Line3D;Self=Line3D;]; <>
        public Integer PrimitiveSize => throw new NotImplementedException();
// NumPrimitives(Line3D):Integer; [IPrimitiveGeometry=Line3D;IPrimitiveGeometry3D=Line3D;IPointGeometry3D=Line3D;IPolyLine3D=Line3D;Self=Line3D;]; <>
        public Integer NumPrimitives => throw new NotImplementedException();
// Corners(Line3D):_T0; [IPrimitiveGeometry3D=Line3D;IPointGeometry3D=Line3D;IPolyLine3D=Line3D;Self=Line3D;]; <_T0:IArray<Vector3>>
        public _T0 Corners<_T0> => throw new NotImplementedException();
}
}
