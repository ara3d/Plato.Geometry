// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 8:08:08 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
public partial struct Box: ISolid
{
    // Fields
    [DataMember] public readonly Vector3 Extent;

    // With functions 
    [MethodImpl(AggressiveInlining)] public Box WithExtent(Vector3 extent) => new Box(extent);

    // Regular Constructor
    [MethodImpl(AggressiveInlining)] public Box(Vector3 extent) { Extent = extent; }

    // Static factory function
    [MethodImpl(AggressiveInlining)] public static Box Create(Vector3 extent) => new Box(extent);

    // Implicit converters to/from single field
    [MethodImpl(AggressiveInlining)] public static implicit operator Vector3(Box self) => self.Extent;
    [MethodImpl(AggressiveInlining)] public static implicit operator Box(Vector3 value) => new Box(value);

    // Object virtual function overrides: Equals, GetHashCode, ToString
    [MethodImpl(AggressiveInlining)] public Boolean Equals(Box other) => Extent.Equals(other.Extent);
    [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Box other) => !Extent.Equals(other.Extent);
    [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Box other ? Equals(other) : false;
    [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Extent);
    [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Extent\" = {Extent} }}";

    // Explicit implementation of interfaces by forwarding properties to fields

    // Implemented concept functions and type functions
    public Boolean ClosedX { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 
public Boolean ClosedY { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, TR> Combine<TR>(Box b, System.Func<TR, TR, TR> f){
    var _var981 = b;
    {
        var _var980 = this;
        {
            var _var979 = f;
            return (x) =>  => _var979.Invoke(_var980.Eval(x), _var981.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector3> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var983 = f;
    {
        var _var982 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var982.Eval(_var983.Invoke(x));
;
    }
}

public System.Func<Vector2, Vector3> Function { [MethodImpl(AggressiveInlining)] get {
    var _var984 = this;
    return (x) =>  => _var984.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Vector3> Compose(Box b){
    var _var986 = this;
    {
        var _var985 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var985.Eval(_var986.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, TR> Combine<TR>(Box b, System.Func<TR, TR, TR> f){
    var _var989 = b;
    {
        var _var988 = this;
        {
            var _var987 = f;
            return (x) =>  => _var987.Invoke(_var988.Eval(x), _var989.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var991 = f;
    {
        var _var990 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var990.Eval(_var991.Invoke(x));
;
    }
}

public System.Func<Vector3, Number> Function { [MethodImpl(AggressiveInlining)] get {
    var _var992 = this;
    return (x) =>  => _var992.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, Number> Compose(Box b){
    var _var994 = this;
    {
        var _var993 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var993.Eval(_var994.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Union(Box b) => this.Combine(b, (a, b) =>  => a.Max(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Intersection(Box b) => this.Combine(b, (a, b) =>  => a.Min(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Difference(Box b) => this.Combine(b, (a, b) =>  => a.Max(b.Negative);

public Procedural<Vector3, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) =>  => x.Negative;
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, Boolean> Threshold(Number threshold){
    var _var995 = threshold;
    return this.Map((x) =>  => x.GreaterThanOrEquals(_var995);
;
}


    // Unimplemented concept functions
    [MethodImpl(AggressiveInlining)]  public Number Distance(Vector3 p) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public Number Eval(Vector3 t) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public Vector3 Eval(Vector2 t) => throw new NotImplementedException();
}
Plato.CSharpWriter.CSharpConcreteTypeWriter}
