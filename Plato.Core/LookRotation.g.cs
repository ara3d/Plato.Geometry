// Autogenerated file: DO NOT EDIT
// Created on 2025-01-24 1:12:52 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct LookRotation: IRotationalTransform3D
    {
        // Fields
        [DataMember] public readonly Vector3 Forward;
        [DataMember] public readonly Vector3 Up;

        // With functions 
        [MethodImpl(AggressiveInlining)] public LookRotation WithForward(Vector3 forward) => new LookRotation(forward, Up);
        [MethodImpl(AggressiveInlining)] public LookRotation WithUp(Vector3 up) => new LookRotation(Forward, up);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public LookRotation(Vector3 forward, Vector3 up) { Forward = forward; Up = up; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static LookRotation Create(Vector3 forward, Vector3 up) => new LookRotation(forward, up);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Vector3, Vector3)(LookRotation self) => (self.Forward, self.Up);
        [MethodImpl(AggressiveInlining)] public static implicit operator LookRotation((Vector3, Vector3) value) => new(value.Item1, value.Item2);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Vector3 forward, out Vector3 up) { forward = Forward; up = Up;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(LookRotation other) => Forward.Equals(other.Forward) && Up.Equals(other.Up);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(LookRotation other) => !Forward.Equals(other.Forward) && Up.Equals(other.Up);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is LookRotation other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Forward, Up);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Forward\" = {Forward}, \"Up\" = {Up} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented concept functions and type functions
        public Matrix4x4 Matrix { [MethodImpl(AggressiveInlining)] get  => Matrix4x4.CreateWorld(Constants.Zero, this.Forward, this.Up); } 
        public Quaternion Quaternion { [MethodImpl(AggressiveInlining)] get  => Quaternion.CreateFromRotationMatrix(this.Matrix); } 
        [MethodImpl(AggressiveInlining)]  public static implicit operator Quaternion(LookRotation r) => r.Quaternion;
        public static LookRotation Identity { [MethodImpl(AggressiveInlining)] get  => (Vector3.UnitY, Vector3.UnitZ); } 
        [MethodImpl(AggressiveInlining)]  public Vector3 Transform(Vector3 v) => v.Transform(this.Quaternion);
        [MethodImpl(AggressiveInlining)]  public Vector3 TransformNormal(Vector3 v) => v.TransformNormal(this.Quaternion);
        public Rotation3D Rotation { [MethodImpl(AggressiveInlining)] get  => this.Quaternion; } 
        public Translation3D Translation { [MethodImpl(AggressiveInlining)] get  => Translation3D.Identity; } 
        public Matrix4x4 Matrix4x4 { [MethodImpl(AggressiveInlining)] get  => this.Matrix; } 
        [MethodImpl(AggressiveInlining)]  public static implicit operator Matrix4x4(LookRotation t) => t.Matrix4x4;
        public MatrixTransform3D Inverse { [MethodImpl(AggressiveInlining)] get  => this.Matrix.Invert; } 

        // Unimplemented concept functions
    }
}
