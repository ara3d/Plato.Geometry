// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 12:06:56 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct IdentityTransform3D: IValue, IRotationalTransform3D
    {
        // Fields

        // With functions 

        // Regular Constructor

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static IdentityTransform3D Create() => new IdentityTransform3D();

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is IdentityTransform3D;
        [MethodImpl(AggressiveInlining)] public Boolean Equals(IdentityTransform3D other) => true;
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(IdentityTransform3D other) => false;
        [MethodImpl(AggressiveInlining)] public static Boolean operator==(IdentityTransform3D a, IdentityTransform3D b) => true;
        [MethodImpl(AggressiveInlining)] public static Boolean operator!=(IdentityTransform3D a, IdentityTransform3D b) => false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes();
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{  }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented concept functions and type functions
        public Matrix4x4 Matrix { [MethodImpl(AggressiveInlining)] get  => Matrix4x4.Identity; } 
        public Quaternion Quaternion { [MethodImpl(AggressiveInlining)] get  => Quaternion.Identity; } 
        [MethodImpl(AggressiveInlining)]  public static implicit operator Quaternion(IdentityTransform3D t) => t.Quaternion;
        [MethodImpl(AggressiveInlining)]  public Vector3 Transform(Vector3 v) => v;
        [MethodImpl(AggressiveInlining)]  public Vector3 TransformDirection(Vector3 v) => v;
        [MethodImpl(AggressiveInlining)]  public Vector3 TransformNormal(Vector3 v) => v.TransformNormal(this.Quaternion);
        public Rotation3D Rotation { [MethodImpl(AggressiveInlining)] get  => this.Quaternion; } 
        public Translation3D Translation { [MethodImpl(AggressiveInlining)] get  => Translation3D.Identity; } 
        public Matrix4x4 Matrix4x4 { [MethodImpl(AggressiveInlining)] get  => this.Matrix; } 
        [MethodImpl(AggressiveInlining)]  public static implicit operator Matrix4x4(IdentityTransform3D t) => t.Matrix4x4;
        public MatrixTransform3D Inverse { [MethodImpl(AggressiveInlining)] get  => this.Matrix.Invert; } 

        // Unimplemented concept functions
    }
}
