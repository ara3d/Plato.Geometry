// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 8:08:08 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
public partial struct Tube: ISolid
{
    // Fields
    [DataMember] public readonly Number Height;
    [DataMember] public readonly Number InnerRadius;
    [DataMember] public readonly Number OuterRadius;

    // With functions 
    [MethodImpl(AggressiveInlining)] public Tube WithHeight(Number height) => new Tube(height, InnerRadius, OuterRadius);
    [MethodImpl(AggressiveInlining)] public Tube WithInnerRadius(Number innerRadius) => new Tube(Height, innerRadius, OuterRadius);
    [MethodImpl(AggressiveInlining)] public Tube WithOuterRadius(Number outerRadius) => new Tube(Height, InnerRadius, outerRadius);

    // Regular Constructor
    [MethodImpl(AggressiveInlining)] public Tube(Number height, Number innerRadius, Number outerRadius) { Height = height; InnerRadius = innerRadius; OuterRadius = outerRadius; }

    // Static factory function
    [MethodImpl(AggressiveInlining)] public static Tube Create(Number height, Number innerRadius, Number outerRadius) => new Tube(height, innerRadius, outerRadius);

    // Implicit converters to/from value-tuples and deconstructor
    [MethodImpl(AggressiveInlining)] public static implicit operator (Number, Number, Number)(Tube self) => (self.Height, self.InnerRadius, self.OuterRadius);
    [MethodImpl(AggressiveInlining)] public static implicit operator Tube((Number, Number, Number) value) => new(value.Item1, value.Item2, value.Item3);
    [MethodImpl(AggressiveInlining)] public void Deconstruct(out Number height, out Number innerRadius, out Number outerRadius) { height = Height; innerRadius = InnerRadius; outerRadius = OuterRadius;  }

    // Object virtual function overrides: Equals, GetHashCode, ToString
    [MethodImpl(AggressiveInlining)] public Boolean Equals(Tube other) => Height.Equals(other.Height) && InnerRadius.Equals(other.InnerRadius) && OuterRadius.Equals(other.OuterRadius);
    [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Tube other) => !Height.Equals(other.Height) && InnerRadius.Equals(other.InnerRadius) && OuterRadius.Equals(other.OuterRadius);
    [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Tube other ? Equals(other) : false;
    [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Height, InnerRadius, OuterRadius);
    [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Height\" = {Height}, \"InnerRadius\" = {InnerRadius}, \"OuterRadius\" = {OuterRadius} }}";

    // Explicit implementation of interfaces by forwarding properties to fields

    // Implemented concept functions and type functions
    public Boolean ClosedX { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 
public Boolean ClosedY { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, TR> Combine<TR>(Tube b, System.Func<TR, TR, TR> f){
    var _var1049 = b;
    {
        var _var1048 = this;
        {
            var _var1047 = f;
            return (x) =>  => _var1047.Invoke(_var1048.Eval(x), _var1049.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector3> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var1051 = f;
    {
        var _var1050 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var1050.Eval(_var1051.Invoke(x));
;
    }
}

public System.Func<Vector2, Vector3> Function { [MethodImpl(AggressiveInlining)] get {
    var _var1052 = this;
    return (x) =>  => _var1052.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Vector3> Compose(Tube b){
    var _var1054 = this;
    {
        var _var1053 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var1053.Eval(_var1054.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, TR> Combine<TR>(Tube b, System.Func<TR, TR, TR> f){
    var _var1057 = b;
    {
        var _var1056 = this;
        {
            var _var1055 = f;
            return (x) =>  => _var1055.Invoke(_var1056.Eval(x), _var1057.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var1059 = f;
    {
        var _var1058 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var1058.Eval(_var1059.Invoke(x));
;
    }
}

public System.Func<Vector3, Number> Function { [MethodImpl(AggressiveInlining)] get {
    var _var1060 = this;
    return (x) =>  => _var1060.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, Number> Compose(Tube b){
    var _var1062 = this;
    {
        var _var1061 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var1061.Eval(_var1062.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Union(Tube b) => this.Combine(b, (a, b) =>  => a.Max(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Intersection(Tube b) => this.Combine(b, (a, b) =>  => a.Min(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Difference(Tube b) => this.Combine(b, (a, b) =>  => a.Max(b.Negative);

public Procedural<Vector3, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) =>  => x.Negative;
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, Boolean> Threshold(Number threshold){
    var _var1063 = threshold;
    return this.Map((x) =>  => x.GreaterThanOrEquals(_var1063);
;
}


    // Unimplemented concept functions
    [MethodImpl(AggressiveInlining)]  public Number Distance(Vector3 p) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public Number Eval(Vector3 t) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public Vector3 Eval(Vector2 t) => throw new NotImplementedException();
}
Plato.CSharpWriter.CSharpConcreteTypeWriter}
