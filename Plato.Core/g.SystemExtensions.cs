// This file is auto-generated
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Intrinsics;
using static System.Runtime.CompilerServices.MethodImplOptions;
using static Plato.Intrinsics;

namespace Plato
{
    public static class SystemExtensions
    {
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 Value(this System.Numerics.Matrix4x4 self) => Intrinsics.Value((Matrix4x4)self);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 Identity(this System.Numerics.Matrix4x4 self) => Intrinsics.Identity((Matrix4x4)self);
        [MethodImpl(AggressiveInlining)] public static Number Determinant(this System.Numerics.Matrix4x4 self) => Intrinsics.Determinant((Matrix4x4)self);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 Transpose(this System.Numerics.Matrix4x4 self) => Intrinsics.Transpose((Matrix4x4)self);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 Add(this System.Numerics.Matrix4x4 self, Matrix4x4 value1, Matrix4x4 value2) => Intrinsics.Add((Matrix4x4)self, value1, value2);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 Subtract(this System.Numerics.Matrix4x4 self, Matrix4x4 value1, Matrix4x4 value2) => Intrinsics.Subtract((Matrix4x4)self, value1, value2);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 Multiply(this System.Numerics.Matrix4x4 self, Matrix4x4 value1, Matrix4x4 value2) => Intrinsics.Multiply((Matrix4x4)self, value1, value2);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 CreateTranslation(this System.Numerics.Matrix4x4 self, Vector3 position) => Intrinsics.CreateTranslation((Matrix4x4)self, position);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 CreateScale(this System.Numerics.Matrix4x4 self, Number scale) => Intrinsics.CreateScale((Matrix4x4)self, scale);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 CreateScale(this System.Numerics.Matrix4x4 self, Number xScale, Number yScale, Number zScale) => Intrinsics.CreateScale((Matrix4x4)self, xScale, yScale, zScale);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 CreateRotationX(this System.Numerics.Matrix4x4 self, Angle angle) => Intrinsics.CreateRotationX((Matrix4x4)self, angle);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 CreateRotationY(this System.Numerics.Matrix4x4 self, Angle angle) => Intrinsics.CreateRotationY((Matrix4x4)self, angle);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 CreateRotationZ(this System.Numerics.Matrix4x4 self, Angle angle) => Intrinsics.CreateRotationZ((Matrix4x4)self, angle);
        [MethodImpl(AggressiveInlining)] public static ValueTuple<Vector3, Quaternion, Vector3, Boolean> Decompose(this System.Numerics.Matrix4x4 self) => Intrinsics.Decompose((Matrix4x4)self);
        [MethodImpl(AggressiveInlining)] public static int GetHashCode(this System.Numerics.Matrix4x4 self) => Intrinsics.GetHashCode((Matrix4x4)self);
        [MethodImpl(AggressiveInlining)] public static string ToString(this System.Numerics.Matrix4x4 self) => Intrinsics.ToString((Matrix4x4)self);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 Lerp(this System.Numerics.Matrix4x4 self, Matrix4x4 matrix1, Matrix4x4 matrix2, Number amount) => Intrinsics.Lerp((Matrix4x4)self, matrix1, matrix2, amount);
        [MethodImpl(AggressiveInlining)] public static ValueTuple<Matrix4x4, Boolean> Invert(this System.Numerics.Matrix4x4 self) => Intrinsics.Invert((Matrix4x4)self);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 CreatePerspectiveFieldOfView(this System.Numerics.Matrix4x4 self, Number fieldOfView, Number aspectRatio, Number nearPlane, Number farPlane) => Intrinsics.CreatePerspectiveFieldOfView((Matrix4x4)self, fieldOfView, aspectRatio, nearPlane, farPlane);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 CreateBillboard(this System.Numerics.Matrix4x4 self, Vector3 objectPosition, Vector3 cameraPosition, Vector3 cameraUpVector, Vector3 cameraForwardVector) => Intrinsics.CreateBillboard((Matrix4x4)self, objectPosition, cameraPosition, cameraUpVector, cameraForwardVector);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 CreateConstrainedBillboard(this System.Numerics.Matrix4x4 self, Vector3 objectPosition, Vector3 cameraPosition, Vector3 rotateAxis, Vector3 cameraForwardVector, Vector3 objectForwardVector) => Intrinsics.CreateConstrainedBillboard((Matrix4x4)self, objectPosition, cameraPosition, rotateAxis, cameraForwardVector, objectForwardVector);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 CreateFromAxisAngle(this System.Numerics.Matrix4x4 self, Vector3 axis, Angle angle) => Intrinsics.CreateFromAxisAngle((Matrix4x4)self, axis, angle);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 CreateFromQuaternion(this System.Numerics.Matrix4x4 self, Quaternion quaternion) => Intrinsics.CreateFromQuaternion((Matrix4x4)self, quaternion);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 CreateFromYawPitchRoll(this System.Numerics.Matrix4x4 self, Angle yaw, Angle pitch, Angle roll) => Intrinsics.CreateFromYawPitchRoll((Matrix4x4)self, yaw, pitch, roll);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 CreateLookAt(this System.Numerics.Matrix4x4 self, Vector3 cameraPosition, Vector3 cameraTarget, Vector3 cameraUpVector) => Intrinsics.CreateLookAt((Matrix4x4)self, cameraPosition, cameraTarget, cameraUpVector);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 CreateOrthographic(this System.Numerics.Matrix4x4 self, Number width, Number height, Number zNearPlane, Number zFarPlane) => Intrinsics.CreateOrthographic((Matrix4x4)self, width, height, zNearPlane, zFarPlane);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 CreateOrthographicOffCenter(this System.Numerics.Matrix4x4 self, Number left, Number right, Number bottom, Number top, Number zNearPlane, Number zFarPlane) => Intrinsics.CreateOrthographicOffCenter((Matrix4x4)self, left, right, bottom, top, zNearPlane, zFarPlane);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 CreatePerspective(this System.Numerics.Matrix4x4 self, Number width, Number height, Number nearPlaneDistance, Number farPlaneDistance) => Intrinsics.CreatePerspective((Matrix4x4)self, width, height, nearPlaneDistance, farPlaneDistance);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 CreatePerspectiveOffCenter(this System.Numerics.Matrix4x4 self, Number left, Number right, Number bottom, Number top, Number nearPlaneDistance, Number farPlaneDistance) => Intrinsics.CreatePerspectiveOffCenter((Matrix4x4)self, left, right, bottom, top, nearPlaneDistance, farPlaneDistance);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 CreateReflection(this System.Numerics.Matrix4x4 self, Plane value) => Intrinsics.CreateReflection((Matrix4x4)self, value);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 CreateShadow(this System.Numerics.Matrix4x4 self, Vector3 lightDirection, Plane plane) => Intrinsics.CreateShadow((Matrix4x4)self, lightDirection, plane);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 CreateWorld(this System.Numerics.Matrix4x4 self, Vector3 position, Vector3 forward, Vector3 up) => Intrinsics.CreateWorld((Matrix4x4)self, position, forward, up);
        [MethodImpl(AggressiveInlining)] public static Type GetType(this System.Numerics.Matrix4x4 self) => Intrinsics.GetType((Matrix4x4)self);
        [MethodImpl(AggressiveInlining)] public static Matrix3x2 Value(this System.Numerics.Matrix3x2 self) => Intrinsics.Value((Matrix3x2)self);
        [MethodImpl(AggressiveInlining)] public static Matrix3x2 Identity(this System.Numerics.Matrix3x2 self) => Intrinsics.Identity((Matrix3x2)self);
        [MethodImpl(AggressiveInlining)] public static Number Determinant(this System.Numerics.Matrix3x2 self) => Intrinsics.Determinant((Matrix3x2)self);
        [MethodImpl(AggressiveInlining)] public static Matrix3x2 CreateTranslation(this System.Numerics.Matrix3x2 self, Number xPosition, Number yPosition) => Intrinsics.CreateTranslation((Matrix3x2)self, xPosition, yPosition);
        [MethodImpl(AggressiveInlining)] public static Matrix3x2 CreateTranslation(this System.Numerics.Matrix3x2 self, Vector2 position) => Intrinsics.CreateTranslation((Matrix3x2)self, position);
        [MethodImpl(AggressiveInlining)] public static Matrix3x2 CreateScale(this System.Numerics.Matrix3x2 self, Number scale) => Intrinsics.CreateScale((Matrix3x2)self, scale);
        [MethodImpl(AggressiveInlining)] public static Matrix3x2 CreateScale(this System.Numerics.Matrix3x2 self, Number xScale, Number yScale) => Intrinsics.CreateScale((Matrix3x2)self, xScale, yScale);
        [MethodImpl(AggressiveInlining)] public static Matrix3x2 CreateScale(this System.Numerics.Matrix3x2 self, Vector2 scales) => Intrinsics.CreateScale((Matrix3x2)self, scales);
        [MethodImpl(AggressiveInlining)] public static Matrix3x2 CreateScale(this System.Numerics.Matrix3x2 self, Number xScale, Number yScale, Vector2 centerPoint) => Intrinsics.CreateScale((Matrix3x2)self, xScale, yScale, centerPoint);
        [MethodImpl(AggressiveInlining)] public static Matrix3x2 CreateRotation(this System.Numerics.Matrix3x2 self, Number radians) => Intrinsics.CreateRotation((Matrix3x2)self, radians);
        [MethodImpl(AggressiveInlining)] public static Matrix3x2 CreateRotation(this System.Numerics.Matrix3x2 self, Number radians, Vector2 centerPoint) => Intrinsics.CreateRotation((Matrix3x2)self, radians, centerPoint);
        [MethodImpl(AggressiveInlining)] public static ValueTuple<Matrix3x2, Boolean> Invert(this System.Numerics.Matrix3x2 self) => Intrinsics.Invert((Matrix3x2)self);
        [MethodImpl(AggressiveInlining)] public static Matrix3x2 Lerp(this System.Numerics.Matrix3x2 self, Matrix3x2 matrix2, Number amount) => Intrinsics.Lerp((Matrix3x2)self, matrix2, amount);
        [MethodImpl(AggressiveInlining)] public static int GetHashCode(this System.Numerics.Matrix3x2 self) => Intrinsics.GetHashCode((Matrix3x2)self);
        [MethodImpl(AggressiveInlining)] public static string ToString(this System.Numerics.Matrix3x2 self) => Intrinsics.ToString((Matrix3x2)self);
        [MethodImpl(AggressiveInlining)] public static Type GetType(this System.Numerics.Matrix3x2 self) => Intrinsics.GetType((Matrix3x2)self);
        [MethodImpl(AggressiveInlining)] public static Vector2 Value(this System.Numerics.Vector2 self) => Intrinsics.Value((Vector2)self);
        [MethodImpl(AggressiveInlining)] public static Vector2 E(this System.Numerics.Vector2 self) => Intrinsics.E((Vector2)self);
        [MethodImpl(AggressiveInlining)] public static Vector2 Epsilon(this System.Numerics.Vector2 self) => Intrinsics.Epsilon((Vector2)self);
        [MethodImpl(AggressiveInlining)] public static Vector2 NaN(this System.Numerics.Vector2 self) => Intrinsics.NaN((Vector2)self);
        [MethodImpl(AggressiveInlining)] public static Vector2 NegativeInfinity(this System.Numerics.Vector2 self) => Intrinsics.NegativeInfinity((Vector2)self);
        [MethodImpl(AggressiveInlining)] public static Vector2 NegativeZero(this System.Numerics.Vector2 self) => Intrinsics.NegativeZero((Vector2)self);
        [MethodImpl(AggressiveInlining)] public static Vector2 One(this System.Numerics.Vector2 self) => Intrinsics.One((Vector2)self);
        [MethodImpl(AggressiveInlining)] public static Vector2 Pi(this System.Numerics.Vector2 self) => Intrinsics.Pi((Vector2)self);
        [MethodImpl(AggressiveInlining)] public static Vector2 PositiveInfinity(this System.Numerics.Vector2 self) => Intrinsics.PositiveInfinity((Vector2)self);
        [MethodImpl(AggressiveInlining)] public static Vector2 Tau(this System.Numerics.Vector2 self) => Intrinsics.Tau((Vector2)self);
        [MethodImpl(AggressiveInlining)] public static Vector2 UnitX(this System.Numerics.Vector2 self) => Intrinsics.UnitX((Vector2)self);
        [MethodImpl(AggressiveInlining)] public static Vector2 UnitY(this System.Numerics.Vector2 self) => Intrinsics.UnitY((Vector2)self);
        [MethodImpl(AggressiveInlining)] public static Vector2 Zero(this System.Numerics.Vector2 self) => Intrinsics.Zero((Vector2)self);
        [MethodImpl(AggressiveInlining)] public static Integer Count(this System.Numerics.Vector2 self) => Intrinsics.Count((Vector2)self);
        [MethodImpl(AggressiveInlining)] public static Number X(this System.Numerics.Vector2 self) => Intrinsics.X((Vector2)self);
        [MethodImpl(AggressiveInlining)] public static Number Y(this System.Numerics.Vector2 self) => Intrinsics.Y((Vector2)self);
        [MethodImpl(AggressiveInlining)] public static Vector2 Normalize(this System.Numerics.Vector2 self) => Intrinsics.Normalize((Vector2)self);
        [MethodImpl(AggressiveInlining)] public static float Length(this System.Numerics.Vector2 self) => Intrinsics.Length((Vector2)self);
        [MethodImpl(AggressiveInlining)] public static float LengthSquared(this System.Numerics.Vector2 self) => Intrinsics.LengthSquared((Vector2)self);
        [MethodImpl(AggressiveInlining)] public static Vector2 Abs(this System.Numerics.Vector2 self) => Intrinsics.Abs((Vector2)self);
        [MethodImpl(AggressiveInlining)] public static Vector2 SquareRoot(this System.Numerics.Vector2 self) => Intrinsics.SquareRoot((Vector2)self);
        [MethodImpl(AggressiveInlining)] public static Vector2 Sin(this System.Numerics.Vector2 self) => Intrinsics.Sin((Vector2)self);
        [MethodImpl(AggressiveInlining)] public static Vector2 Cos(this System.Numerics.Vector2 self) => Intrinsics.Cos((Vector2)self);
        [MethodImpl(AggressiveInlining)] public static ValueTuple<Vector2, Vector2> SinCos(this System.Numerics.Vector2 self) => Intrinsics.SinCos((Vector2)self);
        [MethodImpl(AggressiveInlining)] public static Vector2 DegreesToRadians(this System.Numerics.Vector2 self) => Intrinsics.DegreesToRadians((Vector2)self);
        [MethodImpl(AggressiveInlining)] public static Vector2 RadiansToDegrees(this System.Numerics.Vector2 self) => Intrinsics.RadiansToDegrees((Vector2)self);
        [MethodImpl(AggressiveInlining)] public static Vector2 Exp(this System.Numerics.Vector2 self) => Intrinsics.Exp((Vector2)self);
        [MethodImpl(AggressiveInlining)] public static Vector2 Log(this System.Numerics.Vector2 self) => Intrinsics.Log((Vector2)self);
        [MethodImpl(AggressiveInlining)] public static Vector2 Log2(this System.Numerics.Vector2 self) => Intrinsics.Log2((Vector2)self);
        [MethodImpl(AggressiveInlining)] public static Vector2 Truncate(this System.Numerics.Vector2 self) => Intrinsics.Truncate((Vector2)self);
        [MethodImpl(AggressiveInlining)] public static Vector2 Round(this System.Numerics.Vector2 self) => Intrinsics.Round((Vector2)self);
        [MethodImpl(AggressiveInlining)] public static Vector2 RoundTowardsZero(this System.Numerics.Vector2 self) => Intrinsics.RoundTowardsZero((Vector2)self);
        [MethodImpl(AggressiveInlining)] public static Vector2 RoundAwayFromZero(this System.Numerics.Vector2 self) => Intrinsics.RoundAwayFromZero((Vector2)self);
        [MethodImpl(AggressiveInlining)] public static Vector2 Floor(this System.Numerics.Vector2 self) => Intrinsics.Floor((Vector2)self);
        [MethodImpl(AggressiveInlining)] public static Vector2 Ceiling(this System.Numerics.Vector2 self) => Intrinsics.Ceiling((Vector2)self);
        [MethodImpl(AggressiveInlining)] public static Vector2 WithX(this System.Numerics.Vector2 self, Number x) => Intrinsics.WithX((Vector2)self, x);
        [MethodImpl(AggressiveInlining)] public static Vector2 WithY(this System.Numerics.Vector2 self, Number y) => Intrinsics.WithY((Vector2)self, y);
        [MethodImpl(AggressiveInlining)] public static int GetHashCode(this System.Numerics.Vector2 self) => Intrinsics.GetHashCode((Vector2)self);
        [MethodImpl(AggressiveInlining)] public static float Dot(this System.Numerics.Vector2 self, Vector2 right) => Intrinsics.Dot((Vector2)self, right);
        [MethodImpl(AggressiveInlining)] public static float Distance(this System.Numerics.Vector2 self, Vector2 value2) => Intrinsics.Distance((Vector2)self, value2);
        [MethodImpl(AggressiveInlining)] public static float DistanceSquared(this System.Numerics.Vector2 self, Vector2 value2) => Intrinsics.DistanceSquared((Vector2)self, value2);
        [MethodImpl(AggressiveInlining)] public static Vector2 Clamp(this System.Numerics.Vector2 self, Vector2 min, Vector2 max) => Intrinsics.Clamp((Vector2)self, min, max);
        [MethodImpl(AggressiveInlining)] public static Vector2 Reflect(this System.Numerics.Vector2 self, Vector2 normal) => Intrinsics.Reflect((Vector2)self, normal);
        [MethodImpl(AggressiveInlining)] public static Vector2 Transform(this System.Numerics.Vector2 self, Matrix3x2 matrix) => Intrinsics.Transform((Vector2)self, matrix);
        [MethodImpl(AggressiveInlining)] public static Vector2 Transform(this System.Numerics.Vector2 self, Matrix4x4 matrix) => Intrinsics.Transform((Vector2)self, matrix);
        [MethodImpl(AggressiveInlining)] public static Vector2 Transform(this System.Numerics.Vector2 self, Quaternion rotation) => Intrinsics.Transform((Vector2)self, rotation);
        [MethodImpl(AggressiveInlining)] public static Vector2 TransformNormal(this System.Numerics.Vector2 self, Matrix3x2 matrix) => Intrinsics.TransformNormal((Vector2)self, matrix);
        [MethodImpl(AggressiveInlining)] public static Vector2 TransformNormal(this System.Numerics.Vector2 self, Matrix4x4 matrix) => Intrinsics.TransformNormal((Vector2)self, matrix);
        [MethodImpl(AggressiveInlining)] public static Vector2 Max(this System.Numerics.Vector2 self, Vector2 value2) => Intrinsics.Max((Vector2)self, value2);
        [MethodImpl(AggressiveInlining)] public static Vector2 Min(this System.Numerics.Vector2 self, Vector2 value2) => Intrinsics.Min((Vector2)self, value2);
        [MethodImpl(AggressiveInlining)] public static string ToString(this System.Numerics.Vector2 self) => Intrinsics.ToString((Vector2)self);
        [MethodImpl(AggressiveInlining)] public static Type GetType(this System.Numerics.Vector2 self) => Intrinsics.GetType((Vector2)self);
        [MethodImpl(AggressiveInlining)] public static Vector3 Value(this System.Numerics.Vector3 self) => Intrinsics.Value((Vector3)self);
        [MethodImpl(AggressiveInlining)] public static Vector3 E(this System.Numerics.Vector3 self) => Intrinsics.E((Vector3)self);
        [MethodImpl(AggressiveInlining)] public static Vector3 Epsilon(this System.Numerics.Vector3 self) => Intrinsics.Epsilon((Vector3)self);
        [MethodImpl(AggressiveInlining)] public static Vector3 NaN(this System.Numerics.Vector3 self) => Intrinsics.NaN((Vector3)self);
        [MethodImpl(AggressiveInlining)] public static Vector3 NegativeInfinity(this System.Numerics.Vector3 self) => Intrinsics.NegativeInfinity((Vector3)self);
        [MethodImpl(AggressiveInlining)] public static Vector3 NegativeZero(this System.Numerics.Vector3 self) => Intrinsics.NegativeZero((Vector3)self);
        [MethodImpl(AggressiveInlining)] public static Vector3 One(this System.Numerics.Vector3 self) => Intrinsics.One((Vector3)self);
        [MethodImpl(AggressiveInlining)] public static Vector3 Pi(this System.Numerics.Vector3 self) => Intrinsics.Pi((Vector3)self);
        [MethodImpl(AggressiveInlining)] public static Vector3 PositiveInfinity(this System.Numerics.Vector3 self) => Intrinsics.PositiveInfinity((Vector3)self);
        [MethodImpl(AggressiveInlining)] public static Vector3 Tau(this System.Numerics.Vector3 self) => Intrinsics.Tau((Vector3)self);
        [MethodImpl(AggressiveInlining)] public static Vector3 UnitX(this System.Numerics.Vector3 self) => Intrinsics.UnitX((Vector3)self);
        [MethodImpl(AggressiveInlining)] public static Vector3 UnitY(this System.Numerics.Vector3 self) => Intrinsics.UnitY((Vector3)self);
        [MethodImpl(AggressiveInlining)] public static Vector3 UnitZ(this System.Numerics.Vector3 self) => Intrinsics.UnitZ((Vector3)self);
        [MethodImpl(AggressiveInlining)] public static Vector3 Zero(this System.Numerics.Vector3 self) => Intrinsics.Zero((Vector3)self);
        [MethodImpl(AggressiveInlining)] public static Integer Count(this System.Numerics.Vector3 self) => Intrinsics.Count((Vector3)self);
        [MethodImpl(AggressiveInlining)] public static Number X(this System.Numerics.Vector3 self) => Intrinsics.X((Vector3)self);
        [MethodImpl(AggressiveInlining)] public static Number Y(this System.Numerics.Vector3 self) => Intrinsics.Y((Vector3)self);
        [MethodImpl(AggressiveInlining)] public static Number Z(this System.Numerics.Vector3 self) => Intrinsics.Z((Vector3)self);
        [MethodImpl(AggressiveInlining)] public static Vector3 Normalize(this System.Numerics.Vector3 self) => Intrinsics.Normalize((Vector3)self);
        [MethodImpl(AggressiveInlining)] public static Number Length(this System.Numerics.Vector3 self) => Intrinsics.Length((Vector3)self);
        [MethodImpl(AggressiveInlining)] public static Number LengthSquared(this System.Numerics.Vector3 self) => Intrinsics.LengthSquared((Vector3)self);
        [MethodImpl(AggressiveInlining)] public static Vector3 Abs(this System.Numerics.Vector3 self) => Intrinsics.Abs((Vector3)self);
        [MethodImpl(AggressiveInlining)] public static Vector3 SquareRoot(this System.Numerics.Vector3 self) => Intrinsics.SquareRoot((Vector3)self);
        [MethodImpl(AggressiveInlining)] public static Vector3 Sin(this System.Numerics.Vector3 self) => Intrinsics.Sin((Vector3)self);
        [MethodImpl(AggressiveInlining)] public static Vector3 Cos(this System.Numerics.Vector3 self) => Intrinsics.Cos((Vector3)self);
        [MethodImpl(AggressiveInlining)] public static ValueTuple<Vector3, Vector3> SinCos(this System.Numerics.Vector3 self) => Intrinsics.SinCos((Vector3)self);
        [MethodImpl(AggressiveInlining)] public static Vector3 DegreesToRadians(this System.Numerics.Vector3 self) => Intrinsics.DegreesToRadians((Vector3)self);
        [MethodImpl(AggressiveInlining)] public static Vector3 RadiansToDegrees(this System.Numerics.Vector3 self) => Intrinsics.RadiansToDegrees((Vector3)self);
        [MethodImpl(AggressiveInlining)] public static Vector3 Exp(this System.Numerics.Vector3 self) => Intrinsics.Exp((Vector3)self);
        [MethodImpl(AggressiveInlining)] public static Vector3 Log(this System.Numerics.Vector3 self) => Intrinsics.Log((Vector3)self);
        [MethodImpl(AggressiveInlining)] public static Vector3 Log2(this System.Numerics.Vector3 self) => Intrinsics.Log2((Vector3)self);
        [MethodImpl(AggressiveInlining)] public static Vector3 Truncate(this System.Numerics.Vector3 self) => Intrinsics.Truncate((Vector3)self);
        [MethodImpl(AggressiveInlining)] public static Vector3 Round(this System.Numerics.Vector3 self) => Intrinsics.Round((Vector3)self);
        [MethodImpl(AggressiveInlining)] public static Vector3 RoundTowardsZero(this System.Numerics.Vector3 self) => Intrinsics.RoundTowardsZero((Vector3)self);
        [MethodImpl(AggressiveInlining)] public static Vector3 RoundAwayFromZero(this System.Numerics.Vector3 self) => Intrinsics.RoundAwayFromZero((Vector3)self);
        [MethodImpl(AggressiveInlining)] public static Vector3 Floor(this System.Numerics.Vector3 self) => Intrinsics.Floor((Vector3)self);
        [MethodImpl(AggressiveInlining)] public static Vector3 Ceiling(this System.Numerics.Vector3 self) => Intrinsics.Ceiling((Vector3)self);
        [MethodImpl(AggressiveInlining)] public static Vector3 WithX(this System.Numerics.Vector3 self, Number x) => Intrinsics.WithX((Vector3)self, x);
        [MethodImpl(AggressiveInlining)] public static Vector3 WithY(this System.Numerics.Vector3 self, Number y) => Intrinsics.WithY((Vector3)self, y);
        [MethodImpl(AggressiveInlining)] public static Vector3 WithZ(this System.Numerics.Vector3 self, Number z) => Intrinsics.WithZ((Vector3)self, z);
        [MethodImpl(AggressiveInlining)] public static int GetHashCode(this System.Numerics.Vector3 self) => Intrinsics.GetHashCode((Vector3)self);
        [MethodImpl(AggressiveInlining)] public static Number Dot(this System.Numerics.Vector3 self, Vector3 right) => Intrinsics.Dot((Vector3)self, right);
        [MethodImpl(AggressiveInlining)] public static Vector3 Cross(this System.Numerics.Vector3 self, Vector3 right) => Intrinsics.Cross((Vector3)self, right);
        [MethodImpl(AggressiveInlining)] public static Number Distance(this System.Numerics.Vector3 self, Vector3 value2) => Intrinsics.Distance((Vector3)self, value2);
        [MethodImpl(AggressiveInlining)] public static Number DistanceSquared(this System.Numerics.Vector3 self, Vector3 value2) => Intrinsics.DistanceSquared((Vector3)self, value2);
        [MethodImpl(AggressiveInlining)] public static Vector3 Clamp(this System.Numerics.Vector3 self, Vector3 min, Vector3 max) => Intrinsics.Clamp((Vector3)self, min, max);
        [MethodImpl(AggressiveInlining)] public static Vector3 Reflect(this System.Numerics.Vector3 self, Vector3 normal) => Intrinsics.Reflect((Vector3)self, normal);
        [MethodImpl(AggressiveInlining)] public static Vector3 Transform(this System.Numerics.Vector3 self, Matrix4x4 matrix) => Intrinsics.Transform((Vector3)self, matrix);
        [MethodImpl(AggressiveInlining)] public static Vector3 Transform(this System.Numerics.Vector3 self, Quaternion rotation) => Intrinsics.Transform((Vector3)self, rotation);
        [MethodImpl(AggressiveInlining)] public static Vector3 TransformNormal(this System.Numerics.Vector3 self, Matrix4x4 matrix) => Intrinsics.TransformNormal((Vector3)self, matrix);
        [MethodImpl(AggressiveInlining)] public static Vector3 Max(this System.Numerics.Vector3 self, Vector3 value2) => Intrinsics.Max((Vector3)self, value2);
        [MethodImpl(AggressiveInlining)] public static Vector3 Min(this System.Numerics.Vector3 self, Vector3 value2) => Intrinsics.Min((Vector3)self, value2);
        [MethodImpl(AggressiveInlining)] public static string ToString(this System.Numerics.Vector3 self) => Intrinsics.ToString((Vector3)self);
        [MethodImpl(AggressiveInlining)] public static Type GetType(this System.Numerics.Vector3 self) => Intrinsics.GetType((Vector3)self);
        [MethodImpl(AggressiveInlining)] public static Vector4 Value(this System.Numerics.Vector4 self) => Intrinsics.Value((Vector4)self);
        [MethodImpl(AggressiveInlining)] public static Vector4 E(this System.Numerics.Vector4 self) => Intrinsics.E((Vector4)self);
        [MethodImpl(AggressiveInlining)] public static Vector4 Epsilon(this System.Numerics.Vector4 self) => Intrinsics.Epsilon((Vector4)self);
        [MethodImpl(AggressiveInlining)] public static Vector4 NaN(this System.Numerics.Vector4 self) => Intrinsics.NaN((Vector4)self);
        [MethodImpl(AggressiveInlining)] public static Vector4 NegativeInfinity(this System.Numerics.Vector4 self) => Intrinsics.NegativeInfinity((Vector4)self);
        [MethodImpl(AggressiveInlining)] public static Vector4 NegativeZero(this System.Numerics.Vector4 self) => Intrinsics.NegativeZero((Vector4)self);
        [MethodImpl(AggressiveInlining)] public static Vector4 One(this System.Numerics.Vector4 self) => Intrinsics.One((Vector4)self);
        [MethodImpl(AggressiveInlining)] public static Vector4 Pi(this System.Numerics.Vector4 self) => Intrinsics.Pi((Vector4)self);
        [MethodImpl(AggressiveInlining)] public static Vector4 PositiveInfinity(this System.Numerics.Vector4 self) => Intrinsics.PositiveInfinity((Vector4)self);
        [MethodImpl(AggressiveInlining)] public static Vector4 Tau(this System.Numerics.Vector4 self) => Intrinsics.Tau((Vector4)self);
        [MethodImpl(AggressiveInlining)] public static Vector4 UnitX(this System.Numerics.Vector4 self) => Intrinsics.UnitX((Vector4)self);
        [MethodImpl(AggressiveInlining)] public static Vector4 UnitY(this System.Numerics.Vector4 self) => Intrinsics.UnitY((Vector4)self);
        [MethodImpl(AggressiveInlining)] public static Vector4 UnitZ(this System.Numerics.Vector4 self) => Intrinsics.UnitZ((Vector4)self);
        [MethodImpl(AggressiveInlining)] public static Vector4 UnitW(this System.Numerics.Vector4 self) => Intrinsics.UnitW((Vector4)self);
        [MethodImpl(AggressiveInlining)] public static Vector4 Zero(this System.Numerics.Vector4 self) => Intrinsics.Zero((Vector4)self);
        [MethodImpl(AggressiveInlining)] public static Integer Count(this System.Numerics.Vector4 self) => Intrinsics.Count((Vector4)self);
        [MethodImpl(AggressiveInlining)] public static Number X(this System.Numerics.Vector4 self) => Intrinsics.X((Vector4)self);
        [MethodImpl(AggressiveInlining)] public static Number Y(this System.Numerics.Vector4 self) => Intrinsics.Y((Vector4)self);
        [MethodImpl(AggressiveInlining)] public static Number Z(this System.Numerics.Vector4 self) => Intrinsics.Z((Vector4)self);
        [MethodImpl(AggressiveInlining)] public static Number W(this System.Numerics.Vector4 self) => Intrinsics.W((Vector4)self);
        [MethodImpl(AggressiveInlining)] public static Vector4 Normalize(this System.Numerics.Vector4 self) => Intrinsics.Normalize((Vector4)self);
        [MethodImpl(AggressiveInlining)] public static float Length(this System.Numerics.Vector4 self) => Intrinsics.Length((Vector4)self);
        [MethodImpl(AggressiveInlining)] public static float LengthSquared(this System.Numerics.Vector4 self) => Intrinsics.LengthSquared((Vector4)self);
        [MethodImpl(AggressiveInlining)] public static Vector4 Abs(this System.Numerics.Vector4 self) => Intrinsics.Abs((Vector4)self);
        [MethodImpl(AggressiveInlining)] public static Vector4 SquareRoot(this System.Numerics.Vector4 self) => Intrinsics.SquareRoot((Vector4)self);
        [MethodImpl(AggressiveInlining)] public static Vector4 Sin(this System.Numerics.Vector4 self) => Intrinsics.Sin((Vector4)self);
        [MethodImpl(AggressiveInlining)] public static Vector4 Cos(this System.Numerics.Vector4 self) => Intrinsics.Cos((Vector4)self);
        [MethodImpl(AggressiveInlining)] public static ValueTuple<Vector4, Vector4> SinCos(this System.Numerics.Vector4 self) => Intrinsics.SinCos((Vector4)self);
        [MethodImpl(AggressiveInlining)] public static Vector4 DegreesToRadians(this System.Numerics.Vector4 self) => Intrinsics.DegreesToRadians((Vector4)self);
        [MethodImpl(AggressiveInlining)] public static Vector4 RadiansToDegrees(this System.Numerics.Vector4 self) => Intrinsics.RadiansToDegrees((Vector4)self);
        [MethodImpl(AggressiveInlining)] public static Vector4 Exp(this System.Numerics.Vector4 self) => Intrinsics.Exp((Vector4)self);
        [MethodImpl(AggressiveInlining)] public static Vector4 Log(this System.Numerics.Vector4 self) => Intrinsics.Log((Vector4)self);
        [MethodImpl(AggressiveInlining)] public static Vector4 Log2(this System.Numerics.Vector4 self) => Intrinsics.Log2((Vector4)self);
        [MethodImpl(AggressiveInlining)] public static Vector4 Round(this System.Numerics.Vector4 self) => Intrinsics.Round((Vector4)self);
        [MethodImpl(AggressiveInlining)] public static Vector4 RoundTowardsZero(this System.Numerics.Vector4 self) => Intrinsics.RoundTowardsZero((Vector4)self);
        [MethodImpl(AggressiveInlining)] public static Vector4 RoundAwayFromZero(this System.Numerics.Vector4 self) => Intrinsics.RoundAwayFromZero((Vector4)self);
        [MethodImpl(AggressiveInlining)] public static Vector4 Floor(this System.Numerics.Vector4 self) => Intrinsics.Floor((Vector4)self);
        [MethodImpl(AggressiveInlining)] public static Vector4 Ceiling(this System.Numerics.Vector4 self) => Intrinsics.Ceiling((Vector4)self);
        [MethodImpl(AggressiveInlining)] public static Vector4 WithX(this System.Numerics.Vector4 self, Number x) => Intrinsics.WithX((Vector4)self, x);
        [MethodImpl(AggressiveInlining)] public static Vector4 WithY(this System.Numerics.Vector4 self, Number y) => Intrinsics.WithY((Vector4)self, y);
        [MethodImpl(AggressiveInlining)] public static Vector4 WithZ(this System.Numerics.Vector4 self, Number z) => Intrinsics.WithZ((Vector4)self, z);
        [MethodImpl(AggressiveInlining)] public static Vector4 WithW(this System.Numerics.Vector4 self, Number w) => Intrinsics.WithW((Vector4)self, w);
        [MethodImpl(AggressiveInlining)] public static int GetHashCode(this System.Numerics.Vector4 self) => Intrinsics.GetHashCode((Vector4)self);
        [MethodImpl(AggressiveInlining)] public static float Dot(this System.Numerics.Vector4 self, Vector4 right) => Intrinsics.Dot((Vector4)self, right);
        [MethodImpl(AggressiveInlining)] public static float Distance(this System.Numerics.Vector4 self, Vector4 value2) => Intrinsics.Distance((Vector4)self, value2);
        [MethodImpl(AggressiveInlining)] public static float DistanceSquared(this System.Numerics.Vector4 self, Vector4 value2) => Intrinsics.DistanceSquared((Vector4)self, value2);
        [MethodImpl(AggressiveInlining)] public static Vector4 Clamp(this System.Numerics.Vector4 self, Vector4 min, Vector4 max) => Intrinsics.Clamp((Vector4)self, min, max);
        [MethodImpl(AggressiveInlining)] public static Vector4 Transform(this System.Numerics.Vector4 self, Matrix4x4 matrix) => Intrinsics.Transform((Vector4)self, matrix);
        [MethodImpl(AggressiveInlining)] public static Vector4 Transform(this System.Numerics.Vector4 self, Quaternion rotation) => Intrinsics.Transform((Vector4)self, rotation);
        [MethodImpl(AggressiveInlining)] public static Vector4 Max(this System.Numerics.Vector4 self, Vector4 value2) => Intrinsics.Max((Vector4)self, value2);
        [MethodImpl(AggressiveInlining)] public static Vector4 Min(this System.Numerics.Vector4 self, Vector4 value2) => Intrinsics.Min((Vector4)self, value2);
        [MethodImpl(AggressiveInlining)] public static Vector4 Truncate(this System.Numerics.Vector4 self) => Intrinsics.Truncate((Vector4)self);
        [MethodImpl(AggressiveInlining)] public static string ToString(this System.Numerics.Vector4 self) => Intrinsics.ToString((Vector4)self);
        [MethodImpl(AggressiveInlining)] public static Type GetType(this System.Numerics.Vector4 self) => Intrinsics.GetType((Vector4)self);
        [MethodImpl(AggressiveInlining)] public static Vector256<float> Value(this System.Runtime.Intrinsics.Vector256<float> self) => Intrinsics.Value((Vector8)self);
        [MethodImpl(AggressiveInlining)] public static Vector8 Zero(this System.Runtime.Intrinsics.Vector256<float> self) => Intrinsics.Zero((Vector8)self);
        [MethodImpl(AggressiveInlining)] public static Vector8 One(this System.Runtime.Intrinsics.Vector256<float> self) => Intrinsics.One((Vector8)self);
        [MethodImpl(AggressiveInlining)] public static Vector8 AllBitsSet(this System.Runtime.Intrinsics.Vector256<float> self) => Intrinsics.AllBitsSet((Vector8)self);
        [MethodImpl(AggressiveInlining)] public static Vector8 SignMask(this System.Runtime.Intrinsics.Vector256<float> self) => Intrinsics.SignMask((Vector8)self);
        [MethodImpl(AggressiveInlining)] public static Vector8 Indices(this System.Runtime.Intrinsics.Vector256<float> self) => Intrinsics.Indices((Vector8)self);
        [MethodImpl(AggressiveInlining)] public static Integer Count(this System.Runtime.Intrinsics.Vector256<float> self) => Intrinsics.Count((Vector8)self);
        [MethodImpl(AggressiveInlining)] public static Vector128<float> Lower(this System.Runtime.Intrinsics.Vector256<float> self) => Intrinsics.Lower((Vector8)self);
        [MethodImpl(AggressiveInlining)] public static Vector128<float> Upper(this System.Runtime.Intrinsics.Vector256<float> self) => Intrinsics.Upper((Vector8)self);
        [MethodImpl(AggressiveInlining)] public static Vector8 Sin(this System.Runtime.Intrinsics.Vector256<float> self) => Intrinsics.Sin((Vector8)self);
        [MethodImpl(AggressiveInlining)] public static Vector8 Cos(this System.Runtime.Intrinsics.Vector256<float> self) => Intrinsics.Cos((Vector8)self);
        [MethodImpl(AggressiveInlining)] public static ValueTuple<Vector8, Vector8> SinCos(this System.Runtime.Intrinsics.Vector256<float> self) => Intrinsics.SinCos((Vector8)self);
        [MethodImpl(AggressiveInlining)] public static Vector8 Abs(this System.Runtime.Intrinsics.Vector256<float> self) => Intrinsics.Abs((Vector8)self);
        [MethodImpl(AggressiveInlining)] public static Vector8 Ceiling(this System.Runtime.Intrinsics.Vector256<float> self) => Intrinsics.Ceiling((Vector8)self);
        [MethodImpl(AggressiveInlining)] public static Vector8 DegreesToRadians(this System.Runtime.Intrinsics.Vector256<float> self) => Intrinsics.DegreesToRadians((Vector8)self);
        [MethodImpl(AggressiveInlining)] public static Vector8 Exp(this System.Runtime.Intrinsics.Vector256<float> self) => Intrinsics.Exp((Vector8)self);
        [MethodImpl(AggressiveInlining)] public static Vector8 Floor(this System.Runtime.Intrinsics.Vector256<float> self) => Intrinsics.Floor((Vector8)self);
        [MethodImpl(AggressiveInlining)] public static Vector8 IsNaN(this System.Runtime.Intrinsics.Vector256<float> self) => Intrinsics.IsNaN((Vector8)self);
        [MethodImpl(AggressiveInlining)] public static Vector8 IsNegative(this System.Runtime.Intrinsics.Vector256<float> self) => Intrinsics.IsNegative((Vector8)self);
        [MethodImpl(AggressiveInlining)] public static Vector8 IsPositive(this System.Runtime.Intrinsics.Vector256<float> self) => Intrinsics.IsPositive((Vector8)self);
        [MethodImpl(AggressiveInlining)] public static Vector8 IsPositiveInfinity(this System.Runtime.Intrinsics.Vector256<float> self) => Intrinsics.IsPositiveInfinity((Vector8)self);
        [MethodImpl(AggressiveInlining)] public static Vector8 IsZero(this System.Runtime.Intrinsics.Vector256<float> self) => Intrinsics.IsZero((Vector8)self);
        [MethodImpl(AggressiveInlining)] public static Vector8 Log(this System.Runtime.Intrinsics.Vector256<float> self) => Intrinsics.Log((Vector8)self);
        [MethodImpl(AggressiveInlining)] public static Vector8 Log2(this System.Runtime.Intrinsics.Vector256<float> self) => Intrinsics.Log2((Vector8)self);
        [MethodImpl(AggressiveInlining)] public static Vector8 RadiansToDegrees(this System.Runtime.Intrinsics.Vector256<float> self) => Intrinsics.RadiansToDegrees((Vector8)self);
        [MethodImpl(AggressiveInlining)] public static Vector8 Reciprocal(this System.Runtime.Intrinsics.Vector256<float> self) => Intrinsics.Reciprocal((Vector8)self);
        [MethodImpl(AggressiveInlining)] public static Vector8 ReciprocalSqrt(this System.Runtime.Intrinsics.Vector256<float> self) => Intrinsics.ReciprocalSqrt((Vector8)self);
        [MethodImpl(AggressiveInlining)] public static Vector8 Round(this System.Runtime.Intrinsics.Vector256<float> self) => Intrinsics.Round((Vector8)self);
        [MethodImpl(AggressiveInlining)] public static Vector8 Sign(this System.Runtime.Intrinsics.Vector256<float> self) => Intrinsics.Sign((Vector8)self);
        [MethodImpl(AggressiveInlining)] public static Vector8 SquareRoot(this System.Runtime.Intrinsics.Vector256<float> self) => Intrinsics.SquareRoot((Vector8)self);
        [MethodImpl(AggressiveInlining)] public static Vector8 Square(this System.Runtime.Intrinsics.Vector256<float> self) => Intrinsics.Square((Vector8)self);
        [MethodImpl(AggressiveInlining)] public static Number Sum(this System.Runtime.Intrinsics.Vector256<float> self) => Intrinsics.Sum((Vector8)self);
        [MethodImpl(AggressiveInlining)] public static Vector8 Tan(this System.Runtime.Intrinsics.Vector256<float> self) => Intrinsics.Tan((Vector8)self);
        [MethodImpl(AggressiveInlining)] public static Vector8 AndNot(this System.Runtime.Intrinsics.Vector256<float> self, Vector8 a, Vector8 b) => Intrinsics.AndNot((Vector8)self, a, b);
        [MethodImpl(AggressiveInlining)] public static Vector8 ConditionalSelect(this System.Runtime.Intrinsics.Vector256<float> self, Vector8 condition, Vector8 a, Vector8 b) => Intrinsics.ConditionalSelect((Vector8)self, condition, a, b);
        [MethodImpl(AggressiveInlining)] public static Vector8 Max(this System.Runtime.Intrinsics.Vector256<float> self, Vector8 other) => Intrinsics.Max((Vector8)self, other);
        [MethodImpl(AggressiveInlining)] public static Vector8 Min(this System.Runtime.Intrinsics.Vector256<float> self, Vector8 other) => Intrinsics.Min((Vector8)self, other);
        [MethodImpl(AggressiveInlining)] public static Vector8 Clamp(this System.Runtime.Intrinsics.Vector256<float> self, Vector8 min, Vector8 max) => Intrinsics.Clamp((Vector8)self, min, max);
        [MethodImpl(AggressiveInlining)] public static Vector8 CopySign(this System.Runtime.Intrinsics.Vector256<float> self, Vector8 sign) => Intrinsics.CopySign((Vector8)self, sign);
        [MethodImpl(AggressiveInlining)] public static Number Dot(this System.Runtime.Intrinsics.Vector256<float> self, Vector8 other) => Intrinsics.Dot((Vector8)self, other);
        [MethodImpl(AggressiveInlining)] public static Vector8 Hypot(this System.Runtime.Intrinsics.Vector256<float> self, Vector8 other) => Intrinsics.Hypot((Vector8)self, other);
        [MethodImpl(AggressiveInlining)] public static Vector8 Lerp(this System.Runtime.Intrinsics.Vector256<float> self, Vector8 b, Vector8 t) => Intrinsics.Lerp((Vector8)self, b, t);
        [MethodImpl(AggressiveInlining)] public static Number FirstElement(this System.Runtime.Intrinsics.Vector256<float> self) => Intrinsics.FirstElement((Vector8)self);
        [MethodImpl(AggressiveInlining)] public static Vector8 Truncate(this System.Runtime.Intrinsics.Vector256<float> self) => Intrinsics.Truncate((Vector8)self);
        [MethodImpl(AggressiveInlining)] public static Vector8 WithElement(this System.Runtime.Intrinsics.Vector256<float> self, int i, Number f) => Intrinsics.WithElement((Vector8)self, i, f);
        [MethodImpl(AggressiveInlining)] public static Vector8 WithLower(this System.Runtime.Intrinsics.Vector256<float> self, Vector128<float> lower) => Intrinsics.WithLower((Vector8)self, lower);
        [MethodImpl(AggressiveInlining)] public static Vector8 WithUpper(this System.Runtime.Intrinsics.Vector256<float> self, Vector128<float> upper) => Intrinsics.WithUpper((Vector8)self, upper);
        [MethodImpl(AggressiveInlining)] public static string ToString(this System.Runtime.Intrinsics.Vector256<float> self) => Intrinsics.ToString((Vector8)self);
        [MethodImpl(AggressiveInlining)] public static int GetHashCode(this System.Runtime.Intrinsics.Vector256<float> self) => Intrinsics.GetHashCode((Vector8)self);
        [MethodImpl(AggressiveInlining)] public static Type GetType(this System.Runtime.Intrinsics.Vector256<float> self) => Intrinsics.GetType((Vector8)self);
        [MethodImpl(AggressiveInlining)] public static Plane Value(this System.Numerics.Plane self) => Intrinsics.Value((Plane)self);
        [MethodImpl(AggressiveInlining)] public static Vector3 Normal(this System.Numerics.Plane self) => Intrinsics.Normal((Plane)self);
        [MethodImpl(AggressiveInlining)] public static Number D(this System.Numerics.Plane self) => Intrinsics.D((Plane)self);
        [MethodImpl(AggressiveInlining)] public static Plane Normalize(this System.Numerics.Plane self) => Intrinsics.Normalize((Plane)self);
        [MethodImpl(AggressiveInlining)] public static Plane WithNormal(this System.Numerics.Plane self, Vector3 normal) => Intrinsics.WithNormal((Plane)self, normal);
        [MethodImpl(AggressiveInlining)] public static Plane WithD(this System.Numerics.Plane self, Number d) => Intrinsics.WithD((Plane)self, d);
        [MethodImpl(AggressiveInlining)] public static int GetHashCode(this System.Numerics.Plane self) => Intrinsics.GetHashCode((Plane)self);
        [MethodImpl(AggressiveInlining)] public static string ToString(this System.Numerics.Plane self) => Intrinsics.ToString((Plane)self);
        [MethodImpl(AggressiveInlining)] public static Plane CreateFromVertices(this System.Numerics.Plane self, Vector3 point1, Vector3 point2, Vector3 point3) => Intrinsics.CreateFromVertices((Plane)self, point1, point2, point3);
        [MethodImpl(AggressiveInlining)] public static float Dot(this System.Numerics.Plane self, Vector4 value) => Intrinsics.Dot((Plane)self, value);
        [MethodImpl(AggressiveInlining)] public static float DotCoordinate(this System.Numerics.Plane self, Vector3 value) => Intrinsics.DotCoordinate((Plane)self, value);
        [MethodImpl(AggressiveInlining)] public static float DotNormal(this System.Numerics.Plane self, Vector3 value) => Intrinsics.DotNormal((Plane)self, value);
        [MethodImpl(AggressiveInlining)] public static Plane Transform(this System.Numerics.Plane self, Quaternion rotation) => Intrinsics.Transform((Plane)self, rotation);
        [MethodImpl(AggressiveInlining)] public static Plane Transform(this System.Numerics.Plane self, Matrix4x4 matrix) => Intrinsics.Transform((Plane)self, matrix);
        [MethodImpl(AggressiveInlining)] public static Type GetType(this System.Numerics.Plane self) => Intrinsics.GetType((Plane)self);
        [MethodImpl(AggressiveInlining)] public static Quaternion Value(this System.Numerics.Quaternion self) => Intrinsics.Value((Quaternion)self);
        [MethodImpl(AggressiveInlining)] public static Quaternion Identity(this System.Numerics.Quaternion self) => Intrinsics.Identity((Quaternion)self);
        [MethodImpl(AggressiveInlining)] public static Number X(this System.Numerics.Quaternion self) => Intrinsics.X((Quaternion)self);
        [MethodImpl(AggressiveInlining)] public static Number Y(this System.Numerics.Quaternion self) => Intrinsics.Y((Quaternion)self);
        [MethodImpl(AggressiveInlining)] public static Number Z(this System.Numerics.Quaternion self) => Intrinsics.Z((Quaternion)self);
        [MethodImpl(AggressiveInlining)] public static Number W(this System.Numerics.Quaternion self) => Intrinsics.W((Quaternion)self);
        [MethodImpl(AggressiveInlining)] public static Number Length(this System.Numerics.Quaternion self) => Intrinsics.Length((Quaternion)self);
        [MethodImpl(AggressiveInlining)] public static Number LengthSquared(this System.Numerics.Quaternion self) => Intrinsics.LengthSquared((Quaternion)self);
        [MethodImpl(AggressiveInlining)] public static Quaternion Normalize(this System.Numerics.Quaternion self) => Intrinsics.Normalize((Quaternion)self);
        [MethodImpl(AggressiveInlining)] public static Quaternion Conjugate(this System.Numerics.Quaternion self) => Intrinsics.Conjugate((Quaternion)self);
        [MethodImpl(AggressiveInlining)] public static Quaternion Inverse(this System.Numerics.Quaternion self) => Intrinsics.Inverse((Quaternion)self);
        [MethodImpl(AggressiveInlining)] public static Quaternion WithX(this System.Numerics.Quaternion self, Number x) => Intrinsics.WithX((Quaternion)self, x);
        [MethodImpl(AggressiveInlining)] public static Quaternion WithY(this System.Numerics.Quaternion self, Number y) => Intrinsics.WithY((Quaternion)self, y);
        [MethodImpl(AggressiveInlining)] public static Quaternion WithZ(this System.Numerics.Quaternion self, Number z) => Intrinsics.WithZ((Quaternion)self, z);
        [MethodImpl(AggressiveInlining)] public static Quaternion WithW(this System.Numerics.Quaternion self, Number w) => Intrinsics.WithW((Quaternion)self, w);
        [MethodImpl(AggressiveInlining)] public static Quaternion CreateFromAxisAngle(this System.Numerics.Quaternion self, Vector3 axis, Number angle) => Intrinsics.CreateFromAxisAngle((Quaternion)self, axis, angle);
        [MethodImpl(AggressiveInlining)] public static Quaternion CreateFromYawPitchRoll(this System.Numerics.Quaternion self, Angle yaw, Angle pitch, Angle roll) => Intrinsics.CreateFromYawPitchRoll((Quaternion)self, yaw, pitch, roll);
        [MethodImpl(AggressiveInlining)] public static Quaternion CreateFromRotationMatrix(this System.Numerics.Quaternion self, Matrix4x4 matrix) => Intrinsics.CreateFromRotationMatrix((Quaternion)self, matrix);
        [MethodImpl(AggressiveInlining)] public static Quaternion Concatenate(this System.Numerics.Quaternion self, Quaternion value2) => Intrinsics.Concatenate((Quaternion)self, value2);
        [MethodImpl(AggressiveInlining)] public static Number Dot(this System.Numerics.Quaternion self, Quaternion quaternion2) => Intrinsics.Dot((Quaternion)self, quaternion2);
        [MethodImpl(AggressiveInlining)] public static Quaternion Lerp(this System.Numerics.Quaternion self, Quaternion quaternion1, Quaternion quaternion2, Number amount) => Intrinsics.Lerp((Quaternion)self, quaternion1, quaternion2, amount);
        [MethodImpl(AggressiveInlining)] public static Quaternion Slerp(this System.Numerics.Quaternion self, Quaternion quaternion1, Quaternion quaternion2, Number amount) => Intrinsics.Slerp((Quaternion)self, quaternion1, quaternion2, amount);
        [MethodImpl(AggressiveInlining)] public static int GetHashCode(this System.Numerics.Quaternion self) => Intrinsics.GetHashCode((Quaternion)self);
        [MethodImpl(AggressiveInlining)] public static string ToString(this System.Numerics.Quaternion self) => Intrinsics.ToString((Quaternion)self);
        [MethodImpl(AggressiveInlining)] public static Type GetType(this System.Numerics.Quaternion self) => Intrinsics.GetType((Quaternion)self);
        [MethodImpl(AggressiveInlining)] public static float Value(this float self) => Intrinsics.Value((Number)self);
        [MethodImpl(AggressiveInlining)] public static Number Zero(this float self) => Intrinsics.Zero((Number)self);
        [MethodImpl(AggressiveInlining)] public static Number One(this float self) => Intrinsics.One((Number)self);
        [MethodImpl(AggressiveInlining)] public static Number NegativeOne(this float self) => Intrinsics.NegativeOne((Number)self);
        [MethodImpl(AggressiveInlining)] public static Number E(this float self) => Intrinsics.E((Number)self);
        [MethodImpl(AggressiveInlining)] public static Number Pi(this float self) => Intrinsics.Pi((Number)self);
        [MethodImpl(AggressiveInlining)] public static Number Tau(this float self) => Intrinsics.Tau((Number)self);
        [MethodImpl(AggressiveInlining)] public static Number HalfPi(this float self) => Intrinsics.HalfPi((Number)self);
        [MethodImpl(AggressiveInlining)] public static Number TwoPi(this float self) => Intrinsics.TwoPi((Number)self);
        [MethodImpl(AggressiveInlining)] public static Number Sqrt2(this float self) => Intrinsics.Sqrt2((Number)self);
        [MethodImpl(AggressiveInlining)] public static Number Sqrt3(this float self) => Intrinsics.Sqrt3((Number)self);
        [MethodImpl(AggressiveInlining)] public static Number NegativeInfinity(this float self) => Intrinsics.NegativeInfinity((Number)self);
        [MethodImpl(AggressiveInlining)] public static Number PositiveInfinity(this float self) => Intrinsics.PositiveInfinity((Number)self);
        [MethodImpl(AggressiveInlining)] public static Number NaN(this float self) => Intrinsics.NaN((Number)self);
        [MethodImpl(AggressiveInlining)] public static Number MinValue(this float self) => Intrinsics.MinValue((Number)self);
        [MethodImpl(AggressiveInlining)] public static Number MaxValue(this float self) => Intrinsics.MaxValue((Number)self);
        [MethodImpl(AggressiveInlining)] public static Number Epsilon(this float self) => Intrinsics.Epsilon((Number)self);
        [MethodImpl(AggressiveInlining)] public static Angle HalfTurns(this float self) => Intrinsics.HalfTurns((Number)self);
        [MethodImpl(AggressiveInlining)] public static Angle Turns(this float self) => Intrinsics.Turns((Number)self);
        [MethodImpl(AggressiveInlining)] public static Angle Degrees(this float self) => Intrinsics.Degrees((Number)self);
        [MethodImpl(AggressiveInlining)] public static Angle Radians(this float self) => Intrinsics.Radians((Number)self);
        [MethodImpl(AggressiveInlining)] public static Number Abs(this float self) => Intrinsics.Abs((Number)self);
        [MethodImpl(AggressiveInlining)] public static Angle Acos(this float self) => Intrinsics.Acos((Number)self);
        [MethodImpl(AggressiveInlining)] public static Angle Acosh(this float self) => Intrinsics.Acosh((Number)self);
        [MethodImpl(AggressiveInlining)] public static Angle Asin(this float self) => Intrinsics.Asin((Number)self);
        [MethodImpl(AggressiveInlining)] public static Angle Asinh(this float self) => Intrinsics.Asinh((Number)self);
        [MethodImpl(AggressiveInlining)] public static Angle Atan(this float self) => Intrinsics.Atan((Number)self);
        [MethodImpl(AggressiveInlining)] public static Angle Atanh(this float self) => Intrinsics.Atanh((Number)self);
        [MethodImpl(AggressiveInlining)] public static Number BitDecrement(this float self) => Intrinsics.BitDecrement((Number)self);
        [MethodImpl(AggressiveInlining)] public static Number BitIncrement(this float self) => Intrinsics.BitIncrement((Number)self);
        [MethodImpl(AggressiveInlining)] public static Number Cbrt(this float self) => Intrinsics.Cbrt((Number)self);
        [MethodImpl(AggressiveInlining)] public static Number Ceiling(this float self) => Intrinsics.Ceiling((Number)self);
        [MethodImpl(AggressiveInlining)] public static Number Exp(this float self) => Intrinsics.Exp((Number)self);
        [MethodImpl(AggressiveInlining)] public static Number Floor(this float self) => Intrinsics.Floor((Number)self);
        [MethodImpl(AggressiveInlining)] public static Number ILogB(this float self) => Intrinsics.ILogB((Number)self);
        [MethodImpl(AggressiveInlining)] public static Number NaturalLog(this float self) => Intrinsics.NaturalLog((Number)self);
        [MethodImpl(AggressiveInlining)] public static Number Log10(this float self) => Intrinsics.Log10((Number)self);
        [MethodImpl(AggressiveInlining)] public static Number Log2(this float self) => Intrinsics.Log2((Number)self);
        [MethodImpl(AggressiveInlining)] public static Number Reciprocal(this float self) => Intrinsics.Reciprocal((Number)self);
        [MethodImpl(AggressiveInlining)] public static Number ReciprocalEstimate(this float self) => Intrinsics.ReciprocalEstimate((Number)self);
        [MethodImpl(AggressiveInlining)] public static Number ReciprocalSquareRootEstimate(this float self) => Intrinsics.ReciprocalSquareRootEstimate((Number)self);
        [MethodImpl(AggressiveInlining)] public static Integer Sign(this float self) => Intrinsics.Sign((Number)self);
        [MethodImpl(AggressiveInlining)] public static Number SquareRoot(this float self) => Intrinsics.SquareRoot((Number)self);
        [MethodImpl(AggressiveInlining)] public static Number Square(this float self) => Intrinsics.Square((Number)self);
        [MethodImpl(AggressiveInlining)] public static Number Truncate(this float self) => Intrinsics.Truncate((Number)self);
        [MethodImpl(AggressiveInlining)] public static int GetHashCode(this float self) => Intrinsics.GetHashCode((Number)self);
        [MethodImpl(AggressiveInlining)] public static string ToString(this float self) => Intrinsics.ToString((Number)self);
        [MethodImpl(AggressiveInlining)] public static int CompareTo(this float self, Number other) => Intrinsics.CompareTo((Number)self, other);
        [MethodImpl(AggressiveInlining)] public static int CompareTo(this float self, object obj) => Intrinsics.CompareTo((Number)self, obj);
        [MethodImpl(AggressiveInlining)] public static Angle Atan2(this float self, Number x) => Intrinsics.Atan2((Number)self, x);
        [MethodImpl(AggressiveInlining)] public static Number CopySign(this float self, Number y) => Intrinsics.CopySign((Number)self, y);
        [MethodImpl(AggressiveInlining)] public static Number FusedMultiplyAdd(this float self, Number y, Number z) => Intrinsics.FusedMultiplyAdd((Number)self, y, z);
        [MethodImpl(AggressiveInlining)] public static Number IEEERemainder(this float self, Number y) => Intrinsics.IEEERemainder((Number)self, y);
        [MethodImpl(AggressiveInlining)] public static Number Log(this float self, Number newBase) => Intrinsics.Log((Number)self, newBase);
        [MethodImpl(AggressiveInlining)] public static Number Max(this float self, Number other) => Intrinsics.Max((Number)self, other);
        [MethodImpl(AggressiveInlining)] public static Number MaxMagnitude(this float self, Number other) => Intrinsics.MaxMagnitude((Number)self, other);
        [MethodImpl(AggressiveInlining)] public static Number Min(this float self, Number other) => Intrinsics.Min((Number)self, other);
        [MethodImpl(AggressiveInlining)] public static Number MinMagnitude(this float self, Number other) => Intrinsics.MinMagnitude((Number)self, other);
        [MethodImpl(AggressiveInlining)] public static Number Pow(this float self, Number power) => Intrinsics.Pow((Number)self, power);
        [MethodImpl(AggressiveInlining)] public static Number RoundToZero(this float self, int digits) => Intrinsics.RoundToZero((Number)self, digits);
        [MethodImpl(AggressiveInlining)] public static Number RoundAwayFromZero(this float self, int digits) => Intrinsics.RoundAwayFromZero((Number)self, digits);
        [MethodImpl(AggressiveInlining)] public static Number Round(this float self, int digits) => Intrinsics.Round((Number)self, digits);
        [MethodImpl(AggressiveInlining)] public static Number ScaleB(this float self, Integer n) => Intrinsics.ScaleB((Number)self, n);
        [MethodImpl(AggressiveInlining)] public static Type GetType(this float self) => Intrinsics.GetType((Number)self);
        [MethodImpl(AggressiveInlining)] public static int Value(this int self) => Intrinsics.Value((Integer)self);
        [MethodImpl(AggressiveInlining)] public static Integer Zero(this int self) => Intrinsics.Zero((Integer)self);
        [MethodImpl(AggressiveInlining)] public static Integer One(this int self) => Intrinsics.One((Integer)self);
        [MethodImpl(AggressiveInlining)] public static Integer NegativeOne(this int self) => Intrinsics.NegativeOne((Integer)self);
        [MethodImpl(AggressiveInlining)] public static Integer MinValue(this int self) => Intrinsics.MinValue((Integer)self);
        [MethodImpl(AggressiveInlining)] public static Integer MaxValue(this int self) => Intrinsics.MaxValue((Integer)self);
        [MethodImpl(AggressiveInlining)] public static Integer Abs(this int self) => Intrinsics.Abs((Integer)self);
        [MethodImpl(AggressiveInlining)] public static Integer Sign(this int self) => Intrinsics.Sign((Integer)self);
        [MethodImpl(AggressiveInlining)] public static Integer Increment(this int self) => Intrinsics.Increment((Integer)self);
        [MethodImpl(AggressiveInlining)] public static Integer Decrement(this int self) => Intrinsics.Decrement((Integer)self);
        [MethodImpl(AggressiveInlining)] public static int GetHashCode(this int self) => Intrinsics.GetHashCode((Integer)self);
        [MethodImpl(AggressiveInlining)] public static string ToString(this int self) => Intrinsics.ToString((Integer)self);
        [MethodImpl(AggressiveInlining)] public static int CompareTo(this int self, Integer other) => Intrinsics.CompareTo((Integer)self, other);
        [MethodImpl(AggressiveInlining)] public static int CompareTo(this int self, object obj) => Intrinsics.CompareTo((Integer)self, obj);
        [MethodImpl(AggressiveInlining)] public static Type GetType(this int self) => Intrinsics.GetType((Integer)self);
        [MethodImpl(AggressiveInlining)] public static bool Value(this bool self) => Intrinsics.Value((Boolean)self);
        [MethodImpl(AggressiveInlining)] public static bool True(this bool self) => Intrinsics.True((Boolean)self);
        [MethodImpl(AggressiveInlining)] public static bool False(this bool self) => Intrinsics.False((Boolean)self);
        [MethodImpl(AggressiveInlining)] public static Boolean IsTrue(this bool self) => Intrinsics.IsTrue((Boolean)self);
        [MethodImpl(AggressiveInlining)] public static Boolean IsFalse(this bool self) => Intrinsics.IsFalse((Boolean)self);
        [MethodImpl(AggressiveInlining)] public static Boolean Toggle(this bool self) => Intrinsics.Toggle((Boolean)self);
        [MethodImpl(AggressiveInlining)] public static int GetHashCode(this bool self) => Intrinsics.GetHashCode((Boolean)self);
        [MethodImpl(AggressiveInlining)] public static string ToString(this bool self) => Intrinsics.ToString((Boolean)self);
        [MethodImpl(AggressiveInlining)] public static int CompareTo(this bool self, Boolean other) => Intrinsics.CompareTo((Boolean)self, other);
        [MethodImpl(AggressiveInlining)] public static int CompareTo(this bool self, object obj) => Intrinsics.CompareTo((Boolean)self, obj);
        [MethodImpl(AggressiveInlining)] public static Type GetType(this bool self) => Intrinsics.GetType((Boolean)self);
        [MethodImpl(AggressiveInlining)] public static float Value(this float self) => Intrinsics.Value((Angle)self);
        [MethodImpl(AggressiveInlining)] public static Angle FullTurn(this float self) => Intrinsics.FullTurn((Angle)self);
        [MethodImpl(AggressiveInlining)] public static Angle HalfTurn(this float self) => Intrinsics.HalfTurn((Angle)self);
        [MethodImpl(AggressiveInlining)] public static Angle QuarterTurn(this float self) => Intrinsics.QuarterTurn((Angle)self);
        [MethodImpl(AggressiveInlining)] public static Angle Degree(this float self) => Intrinsics.Degree((Angle)self);
        [MethodImpl(AggressiveInlining)] public static Angle Zero(this float self) => Intrinsics.Zero((Angle)self);
        [MethodImpl(AggressiveInlining)] public static Number Radians(this float self) => Intrinsics.Radians((Angle)self);
        [MethodImpl(AggressiveInlining)] public static Number Degrees(this float self) => Intrinsics.Degrees((Angle)self);
        [MethodImpl(AggressiveInlining)] public static Number Turns(this float self) => Intrinsics.Turns((Angle)self);
        [MethodImpl(AggressiveInlining)] public static Number HalfTurns(this float self) => Intrinsics.HalfTurns((Angle)self);
        [MethodImpl(AggressiveInlining)] public static Number Cos(this float self) => Intrinsics.Cos((Angle)self);
        [MethodImpl(AggressiveInlining)] public static Number Cosh(this float self) => Intrinsics.Cosh((Angle)self);
        [MethodImpl(AggressiveInlining)] public static Number Sin(this float self) => Intrinsics.Sin((Angle)self);
        [MethodImpl(AggressiveInlining)] public static ValueTuple<Number, Number> SinCos(this float self) => Intrinsics.SinCos((Angle)self);
        [MethodImpl(AggressiveInlining)] public static Number Sinh(this float self) => Intrinsics.Sinh((Angle)self);
        [MethodImpl(AggressiveInlining)] public static Number Tan(this float self) => Intrinsics.Tan((Angle)self);
        [MethodImpl(AggressiveInlining)] public static Number Tanh(this float self) => Intrinsics.Tanh((Angle)self);
        [MethodImpl(AggressiveInlining)] public static int GetHashCode(this float self) => Intrinsics.GetHashCode((Angle)self);
        [MethodImpl(AggressiveInlining)] public static string ToString(this float self) => Intrinsics.ToString((Angle)self);
        [MethodImpl(AggressiveInlining)] public static int CompareTo(this float self, Angle other) => Intrinsics.CompareTo((Angle)self, other);
        [MethodImpl(AggressiveInlining)] public static int CompareTo(this float self, object obj) => Intrinsics.CompareTo((Angle)self, obj);
        [MethodImpl(AggressiveInlining)] public static Type GetType(this float self) => Intrinsics.GetType((Angle)self);
    }
}
