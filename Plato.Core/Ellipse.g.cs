// Autogenerated file: DO NOT EDIT
// Created on 2025-01-24 1:12:52 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Ellipse: IAngularCurve2D, IClosedCurve2D
    {
        // Fields
        [DataMember] public readonly Vector2 Center;
        [DataMember] public readonly Vector2 Size;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Ellipse WithCenter(Vector2 center) => new Ellipse(center, Size);
        [MethodImpl(AggressiveInlining)] public Ellipse WithSize(Vector2 size) => new Ellipse(Center, size);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Ellipse(Vector2 center, Vector2 size) { Center = center; Size = size; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Ellipse Create(Vector2 center, Vector2 size) => new Ellipse(center, size);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Vector2, Vector2)(Ellipse self) => (self.Center, self.Size);
        [MethodImpl(AggressiveInlining)] public static implicit operator Ellipse((Vector2, Vector2) value) => new(value.Item1, value.Item2);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Vector2 center, out Vector2 size) { center = Center; size = Size;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Ellipse other) => Center.Equals(other.Center) && Size.Equals(other.Size);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Ellipse other) => !Center.Equals(other.Center) && Size.Equals(other.Size);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Ellipse other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Center, Size);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Center\" = {Center}, \"Size\" = {Size} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented concept functions and type functions
        [MethodImpl(AggressiveInlining)]  public Vector2 Eval(Angle t) => t.UnitCircle.Multiply(this.Size).Add(this.Center);
        [MethodImpl(AggressiveInlining)]  public Vector2 Eval(Number t) => this.Eval(t.Turns);
        [MethodImpl(AggressiveInlining)]  public IArray<Vector2> Sample(Integer numPoints){
            var _var45 = this;
            return numPoints.LinearSpace.Map((x) => _var45.Eval(x));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine2D ToPolyLine2D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
        public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 

        // Unimplemented concept functions
        [MethodImpl(AggressiveInlining)]  public Number Distance(Vector2 p) => throw new NotImplementedException();
    }
}
