// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 11:25:56 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Ellipse: IAngularCurve2D, IClosedCurve2D
    {
        // Fields
        [DataMember] public readonly Vector2 Center;
        [DataMember] public readonly Vector2 Size;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Ellipse WithCenter(Vector2 center) => new Ellipse(center, Size);
        [MethodImpl(AggressiveInlining)] public Ellipse WithSize(Vector2 size) => new Ellipse(Center, size);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Ellipse(Vector2 center, Vector2 size) { Center = center; Size = size; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Ellipse Create(Vector2 center, Vector2 size) => new Ellipse(center, size);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Vector2, Vector2)(Ellipse self) => (self.Center, self.Size);
        [MethodImpl(AggressiveInlining)] public static implicit operator Ellipse((Vector2, Vector2) value) => new(value.Item1, value.Item2);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Vector2 center, out Vector2 size) { center = Center; size = Size;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Ellipse other) => Center.Equals(other.Center) && Size.Equals(other.Size);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Ellipse other) => !Center.Equals(other.Center) && Size.Equals(other.Size);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Ellipse other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Center, Size);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Center\" = {Center}, \"Size\" = {Size} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented concept functions and type functions
        [MethodImpl(AggressiveInlining)]  public Vector2 Eval(Angle t) => t.UnitCircle.Multiply(this.Size).Add(this.Center);
        [MethodImpl(AggressiveInlining)]  public Vector2 Eval(Number t) => this.Eval(t.Turns);
        [MethodImpl(AggressiveInlining)]  public IArray<Vector2> Sample(Integer numPoints){
            var _var127 = this;
            return numPoints.LinearSpace.Map((x) => _var127.Eval(x));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine2D ToPolyLine2D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
        [MethodImpl(AggressiveInlining)]  public Procedural<Number, TR> Combine<TR>(Ellipse b, System.Func<TR, TR, TR> f){
            var _var130 = b;
            {
                var _var129 = this;
                {
                    var _var128 = f;
                    return (x) => _var128.Invoke(_var129.Eval(x), _var130.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector2> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var132 = f;
            {
                var _var131 = this;
                return (x) => _var131.Eval(_var132.Invoke(x));
            }
        }

        public System.Func<Number, Vector2> Function { [MethodImpl(AggressiveInlining)] get {
            var _var133 = this;
            return (x) => _var133.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Number, Vector2> Compose(Ellipse b){
            var _var135 = this;
            {
                var _var134 = b;
                return (x) => _var134.Eval(_var135.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, TR> Combine<TR>(Ellipse b, System.Func<TR, TR, TR> f){
            var _var138 = b;
            {
                var _var137 = this;
                {
                    var _var136 = f;
                    return (x) => _var136.Invoke(_var137.Eval(x), _var138.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var140 = f;
            {
                var _var139 = this;
                return (x) => _var139.Eval(_var140.Invoke(x));
            }
        }

        public System.Func<Vector2, Number> Function { [MethodImpl(AggressiveInlining)] get {
            var _var141 = this;
            return (x) => _var141.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Number> Compose(Ellipse b){
            var _var143 = this;
            {
                var _var142 = b;
                return (x) => _var142.Eval(_var143.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Union(Ellipse b) => this.Combine(b, (a, b) => a.Max(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Intersection(Ellipse b) => this.Combine(b, (a, b) => a.Min(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Difference(Ellipse b) => this.Combine(b, (a, b) => a.Max(b.Negative));
        public Procedural<Vector2, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) => x.Negative); } 
        public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 

        // Unimplemented concept functions
        [MethodImpl(AggressiveInlining)]  public Number Distance(Vector2 p) => throw new NotImplementedException();
        [MethodImpl(AggressiveInlining)]  public Number Eval(Vector2 t) => throw new NotImplementedException();
    }
}
