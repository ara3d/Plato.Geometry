// Autogenerated file: DO NOT EDIT
// Created on 2025-04-07 4:05:19 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct YawPitch: IRotation3D
    {
        // Fields
        [DataMember] public readonly Angle Yaw;
        [DataMember] public readonly Angle Pitch;

        // With functions 
        [MethodImpl(AggressiveInlining)] public YawPitch WithYaw(Angle yaw) => new YawPitch(yaw, Pitch);
        [MethodImpl(AggressiveInlining)] public YawPitch WithPitch(Angle pitch) => new YawPitch(Yaw, pitch);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public YawPitch(Angle yaw, Angle pitch) { Yaw = yaw; Pitch = pitch; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static YawPitch Create(Angle yaw, Angle pitch) => new YawPitch(yaw, pitch);

        // Static default implementation
        public static readonly YawPitch Default = default;

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Angle, Angle)(YawPitch self) => (self.Yaw, self.Pitch);
        [MethodImpl(AggressiveInlining)] public static implicit operator YawPitch((Angle, Angle) value) => new YawPitch(value.Item1, value.Item2);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Angle yaw, out Angle pitch) { yaw = Yaw; pitch = Pitch;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(YawPitch other) => Yaw.Equals(other.Yaw) && Pitch.Equals(other.Pitch);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(YawPitch other) => !Yaw.Equals(other.Yaw) && Pitch.Equals(other.Pitch);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is YawPitch other ? Equals(other).Value : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Yaw, Pitch);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Yaw\" = {Yaw}, \"Pitch\" = {Pitch} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented interface functions
        public Quaternion Quaternion { [MethodImpl(AggressiveInlining)] get  => Quaternion.CreateFromYawPitchRoll(this.Yaw, this.Pitch, ((Integer)0)); } 
[MethodImpl(AggressiveInlining)]  public static implicit operator Quaternion(YawPitch e) => e.Quaternion;
        public Matrix4x4 Matrix { [MethodImpl(AggressiveInlining)] get  => this.Quaternion.Matrix; } 
[MethodImpl(AggressiveInlining)]  public Point3D Multiply(Point3D v) => this.TransformPoint(v);
[MethodImpl(AggressiveInlining)]  public static Point3D operator *(YawPitch x, Point3D v) => x.Multiply(v);
        [MethodImpl(AggressiveInlining)]  public Vector3 Multiply(Vector3 v) => this.TransformNormal(v);
[MethodImpl(AggressiveInlining)]  public static Vector3 operator *(YawPitch x, Vector3 v) => x.Multiply(v);
        [MethodImpl(AggressiveInlining)]  public MatrixTransform3D Multiply(Matrix4x4 m) => this.Compose(y);
[MethodImpl(AggressiveInlining)]  public static MatrixTransform3D operator *(YawPitch x, Matrix4x4 m) => x.Multiply(m);
        [MethodImpl(AggressiveInlining)]  public Point3D TransformPoint(Point3D v) => v.Vector.Transform(this.Matrix);
[MethodImpl(AggressiveInlining)]  public Vector3 TransformNormal(Vector3 v) => v.Vector.TransformNormal(this.Matrix);
public Matrix4x4 Matrix4x4 { [MethodImpl(AggressiveInlining)] get  => this.Matrix; } 
[MethodImpl(AggressiveInlining)]  public static implicit operator Matrix4x4(YawPitch t) => t.Matrix4x4;
        public MatrixTransform3D MatrixTransform3D { [MethodImpl(AggressiveInlining)] get  => this.Matrix; } 
[MethodImpl(AggressiveInlining)]  public static implicit operator MatrixTransform3D(YawPitch t) => t.MatrixTransform3D;
        public MatrixTransform3D Invert { [MethodImpl(AggressiveInlining)] get  => this.Matrix.Invert; } 
[MethodImpl(AggressiveInlining)]  public MatrixTransform3D Compose(Matrix4x4 m) => this.Matrix.Multiply(m);
public Rotation3D Rotation { [MethodImpl(AggressiveInlining)] get  => this.Matrix.Rotation; } 
public Translation3D Translation { [MethodImpl(AggressiveInlining)] get  => this.Matrix.Translation; } 
public Pose3D Pose { [MethodImpl(AggressiveInlining)] get  => (this.Matrix.Translation, this.Matrix.Rotation); } 

        // Unimplemented interface functions
    }
}
