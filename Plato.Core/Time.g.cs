// Autogenerated file: DO NOT EDIT
// Created on 2025-01-17 3:12:39 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Time: IMeasure<Time>
    {
        // Fields
        [DataMember] public readonly Number Seconds;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Time WithSeconds(Number seconds) => new Time(seconds);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Time(Number seconds) { Seconds = seconds; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Time Create(Number seconds) => new Time(seconds);

        // Implicit converters to/from single field
        [MethodImpl(AggressiveInlining)] public static implicit operator Number(Time self) => self.Seconds;
        [MethodImpl(AggressiveInlining)] public static implicit operator Time(Number value) => new Time(value);
        [MethodImpl(AggressiveInlining)] public static implicit operator Time(Integer value) => new Time(value);
        [MethodImpl(AggressiveInlining)] public static implicit operator Time(int value) => new Integer(value);
        [MethodImpl(AggressiveInlining)] public static implicit operator Time(float value) => new Number(value);
        [MethodImpl(AggressiveInlining)] public static implicit operator float(Time value) => value.Seconds;

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Time other) => Seconds.Equals(other.Seconds);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Time other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Seconds);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Seconds\" = {Seconds} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Numerical predefined functions
        public IArray<Number> Components { [MethodImpl(AggressiveInlining)] get => Intrinsics.MakeArray<Number>(Seconds); }
        [MethodImpl(AggressiveInlining)] public Time FromComponents(IArray<Number> numbers) => new Time(numbers[0]);

        // Implemented concept functions and type functions
        [MethodImpl(AggressiveInlining)]  public Time Multiply(Time y) => this.FromNumber(this.ToNumber.Multiply(y.ToNumber));
        [MethodImpl(AggressiveInlining)]  public static Time operator *(Time x, Time y) => x.Multiply(y);
        [MethodImpl(AggressiveInlining)]  public Time Divide(Time y) => this.FromNumber(this.ToNumber.Divide(y.ToNumber));
        [MethodImpl(AggressiveInlining)]  public static Time operator /(Time x, Time y) => x.Divide(y);
        [MethodImpl(AggressiveInlining)]  public Time Modulo(Time y) => this.FromNumber(this.ToNumber.Modulo(y.ToNumber));
        [MethodImpl(AggressiveInlining)]  public static Time operator %(Time x, Time y) => x.Modulo(y);
        public Number Number { [MethodImpl(AggressiveInlining)] get  => this.ToNumber; } 
        public Number ToNumber { [MethodImpl(AggressiveInlining)] get  => this.Component(((Integer)0)); } 
        [MethodImpl(AggressiveInlining)]  public Time FromNumber(Number n) => this.FromComponents(Intrinsics.MakeArray(n));
        [MethodImpl(AggressiveInlining)]  public Integer Compare(Time b) => this.ToNumber.LessThan(b.ToNumber) ? ((Integer)1).Negative : this.ToNumber.GreaterThan(b.ToNumber) ? ((Integer)1) : ((Integer)0);
        [MethodImpl(AggressiveInlining)]  public Time Add(Number y) => this.FromNumber(this.ToNumber.Add(y));
        [MethodImpl(AggressiveInlining)]  public static Time operator +(Time x, Number y) => x.Add(y);
        [MethodImpl(AggressiveInlining)]  public Time Subract(Number y) => this.FromNumber(this.ToNumber.Subtract(y));
        public Time PlusOne { [MethodImpl(AggressiveInlining)] get  => this.Add(this.One); } 
        public Time MinusOne { [MethodImpl(AggressiveInlining)] get  => this.Subtract(this.One); } 
        public Time FromOne { [MethodImpl(AggressiveInlining)] get  => this.One.Subtract(this); } 
        [MethodImpl(AggressiveInlining)]  public Number Component(Integer n) => this.Components.At(n);
        public Integer NumComponents { [MethodImpl(AggressiveInlining)] get  => this.Components.Count; } 
        [MethodImpl(AggressiveInlining)]  public Time MapComponents(System.Func<Number, Number> f) => this.FromComponents(this.Components.Map(f));
        [MethodImpl(AggressiveInlining)]  public Time ZipComponents(Time y, System.Func<Number, Number, Number> f) => this.FromComponents(this.Components.Zip(y.Components, f));
        public Time Zero { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((i) => ((Number)0)); } 
        public Time One { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((i) => ((Number)1)); } 
        public Number MaxComponent { [MethodImpl(AggressiveInlining)] get {
            var n = this.NumComponents;
            if (n.Equals(((Integer)0)))
            return ((Integer)0);
            var r = this.Component(((Integer)0));
            {
                var i = ((Integer)1);
                while (i.LessThan(n))
                {
                    r = r.Max(this.Component(i));
                    i = i.Add(((Integer)1));
                }

            }
            return r;
        }
         } 
        public Number MinComponent { [MethodImpl(AggressiveInlining)] get {
            var n = this.NumComponents;
            if (n.Equals(((Integer)0)))
            return ((Integer)0);
            var r = this.Component(((Integer)0));
            {
                var i = ((Integer)1);
                while (i.LessThan(n))
                {
                    r = r.Min(this.Component(i));
                    i = i.Add(((Integer)1));
                }

            }
            return r;
        }
         } 
        public Time MinValue { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x) => x.MinValue); } 
        public Time MaxValue { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x) => x.MaxValue); } 
        [MethodImpl(AggressiveInlining)]  public Boolean AllComponents(System.Func<Number, Boolean> predicate) => this.Components.All(predicate);
        [MethodImpl(AggressiveInlining)]  public Boolean AnyComponent(System.Func<Number, Boolean> predicate) => this.Components.Any(predicate);
        [MethodImpl(AggressiveInlining)]  public Boolean Between(Time a, Time b) => this.Components.Zip(a.Components, b.Components, (x0, a0, b0) => x0.Between(a0, b0)).All((x0) => x0);
        public Boolean BetweenZeroOne { [MethodImpl(AggressiveInlining)] get  => this.Between(this.Zero, this.One); } 
        [MethodImpl(AggressiveInlining)]  public Time Clamp(Time a, Time b) => this.FromComponents(this.Components.Zip(a.Components, b.Components, (x0, a0, b0) => x0.Clamp(a0, b0)));
        public Time ClampZeroOne { [MethodImpl(AggressiveInlining)] get  => this.Clamp(this.Zero, this.One); } 
        public Time Clamp01 { [MethodImpl(AggressiveInlining)] get  => this.ClampZeroOne; } 
        public Time Abs { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((i) => i.Abs); } 
        [MethodImpl(AggressiveInlining)]  public Time Min(Time y) => this.ZipComponents(y, (a, b) => a.Min(b));
        [MethodImpl(AggressiveInlining)]  public Time Max(Time y) => this.ZipComponents(y, (a, b) => a.Max(b));
        public Time Floor { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((c) => c.Floor); } 
        public Time Fract { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((c) => c.Fract); } 
        [MethodImpl(AggressiveInlining)]  public Time Multiply(Number s){
            var _var52 = s;
            return this.MapComponents((i) => i.Multiply(_var52));
        }

        [MethodImpl(AggressiveInlining)]  public static Time operator *(Time x, Number s) => x.Multiply(s);
        [MethodImpl(AggressiveInlining)]  public Time Divide(Number s){
            var _var53 = s;
            return this.MapComponents((i) => i.Divide(_var53));
        }

        [MethodImpl(AggressiveInlining)]  public static Time operator /(Time x, Number s) => x.Divide(s);
        [MethodImpl(AggressiveInlining)]  public Time Modulo(Number s){
            var _var54 = s;
            return this.MapComponents((i) => i.Modulo(_var54));
        }

        [MethodImpl(AggressiveInlining)]  public static Time operator %(Time x, Number s) => x.Modulo(s);
        [MethodImpl(AggressiveInlining)]  public Time Add(Time y) => this.ZipComponents(y, (a, b) => a.Add(b));
        [MethodImpl(AggressiveInlining)]  public static Time operator +(Time x, Time y) => x.Add(y);
        [MethodImpl(AggressiveInlining)]  public Time Subtract(Time y) => this.ZipComponents(y, (a, b) => a.Subtract(b));
        [MethodImpl(AggressiveInlining)]  public static Time operator -(Time x, Time y) => x.Subtract(y);
        public Time Negative { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((a) => a.Negative); } 
        [MethodImpl(AggressiveInlining)]  public static Time operator -(Time x) => x.Negative;
        [MethodImpl(AggressiveInlining)]  public IArray<Time> Repeat(Integer n){
            var _var55 = this;
            return n.MapRange((i) => _var55);
        }

        public Time Half { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)2)); } 
        public Time Quarter { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)4)); } 
        public Time Eight { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)8)); } 
        public Time Sixteenth { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)16)); } 
        public Time Tenth { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)10)); } 
        public Time Twice { [MethodImpl(AggressiveInlining)] get  => this.Multiply(((Number)2)); } 
        public Time Hundred { [MethodImpl(AggressiveInlining)] get  => this.Multiply(((Number)100)); } 
        public Time Thousand { [MethodImpl(AggressiveInlining)] get  => this.Multiply(((Number)1000)); } 
        public Time Million { [MethodImpl(AggressiveInlining)] get  => this.Thousand.Thousand; } 
        public Time Billion { [MethodImpl(AggressiveInlining)] get  => this.Thousand.Million; } 
        [MethodImpl(AggressiveInlining)]  public Boolean LessThan(Time b) => this.LessThanOrEquals(b).And(this.NotEquals(b));
        [MethodImpl(AggressiveInlining)]  public static Boolean operator <(Time a, Time b) => a.LessThan(b);
        [MethodImpl(AggressiveInlining)]  public Boolean GreaterThan(Time b) => b.LessThan(this);
        [MethodImpl(AggressiveInlining)]  public static Boolean operator >(Time a, Time b) => a.GreaterThan(b);
        [MethodImpl(AggressiveInlining)]  public Boolean GreaterThanOrEquals(Time b) => b.LessThanOrEquals(this);
        [MethodImpl(AggressiveInlining)]  public static Boolean operator >=(Time a, Time b) => a.GreaterThanOrEquals(b);
        [MethodImpl(AggressiveInlining)]  public Time Lesser(Time b) => this.LessThanOrEquals(b) ? this : b;
        [MethodImpl(AggressiveInlining)]  public Time Greater(Time b) => this.GreaterThanOrEquals(b) ? this : b;
        [MethodImpl(AggressiveInlining)]  public Integer CompareTo(Time b) => this.LessThanOrEquals(b) ? this.Equals(b) ? ((Integer)0) : ((Integer)1).Negative : ((Integer)1);
        [MethodImpl(AggressiveInlining)]  public Time Lerp(Time b, Number t) => this.Multiply(t.FromOne).Add(b.Multiply(t));
        [MethodImpl(AggressiveInlining)]  public Time Barycentric(Time v2, Time v3, Vector2 uv) => this.Add(v2.Subtract(this)).Multiply(uv.X).Add(v3.Subtract(this).Multiply(uv.Y));

        // Unimplemented concept functions
        [MethodImpl(AggressiveInlining)]  public Boolean LessThanOrEquals(Time y) => throw new NotImplementedException();
        [MethodImpl(AggressiveInlining)]  public static Boolean operator <=(Time x, Time y) => x.LessThanOrEquals(y);
    }
}
