// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 11:25:56 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Circle: IAngularCurve2D, IClosedCurve2D
    {
        // Fields
        [DataMember] public readonly Vector2 Center;
        [DataMember] public readonly Number Radius;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Circle WithCenter(Vector2 center) => new Circle(center, Radius);
        [MethodImpl(AggressiveInlining)] public Circle WithRadius(Number radius) => new Circle(Center, radius);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Circle(Vector2 center, Number radius) { Center = center; Radius = radius; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Circle Create(Vector2 center, Number radius) => new Circle(center, radius);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Vector2, Number)(Circle self) => (self.Center, self.Radius);
        [MethodImpl(AggressiveInlining)] public static implicit operator Circle((Vector2, Number) value) => new(value.Item1, value.Item2);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Vector2 center, out Number radius) { center = Center; radius = Radius;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Circle other) => Center.Equals(other.Center) && Radius.Equals(other.Radius);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Circle other) => !Center.Equals(other.Center) && Radius.Equals(other.Radius);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Circle other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Center, Radius);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Center\" = {Center}, \"Radius\" = {Radius} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented concept functions and type functions
        [MethodImpl(AggressiveInlining)]  public Vector2 Eval(Angle t) => t.Circle(this.Center, this.Radius);
        [MethodImpl(AggressiveInlining)]  public Vector2 Eval(Number t) => this.Eval(t.Turns);
        [MethodImpl(AggressiveInlining)]  public IArray<Vector2> Sample(Integer numPoints){
            var _var110 = this;
            return numPoints.LinearSpace.Map((x) => _var110.Eval(x));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine2D ToPolyLine2D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
        [MethodImpl(AggressiveInlining)]  public Procedural<Number, TR> Combine<TR>(Circle b, System.Func<TR, TR, TR> f){
            var _var113 = b;
            {
                var _var112 = this;
                {
                    var _var111 = f;
                    return (x) => _var111.Invoke(_var112.Eval(x), _var113.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector2> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var115 = f;
            {
                var _var114 = this;
                return (x) => _var114.Eval(_var115.Invoke(x));
            }
        }

        public System.Func<Number, Vector2> Function { [MethodImpl(AggressiveInlining)] get {
            var _var116 = this;
            return (x) => _var116.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Number, Vector2> Compose(Circle b){
            var _var118 = this;
            {
                var _var117 = b;
                return (x) => _var117.Eval(_var118.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, TR> Combine<TR>(Circle b, System.Func<TR, TR, TR> f){
            var _var121 = b;
            {
                var _var120 = this;
                {
                    var _var119 = f;
                    return (x) => _var119.Invoke(_var120.Eval(x), _var121.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var123 = f;
            {
                var _var122 = this;
                return (x) => _var122.Eval(_var123.Invoke(x));
            }
        }

        public System.Func<Vector2, Number> Function { [MethodImpl(AggressiveInlining)] get {
            var _var124 = this;
            return (x) => _var124.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Number> Compose(Circle b){
            var _var126 = this;
            {
                var _var125 = b;
                return (x) => _var125.Eval(_var126.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Union(Circle b) => this.Combine(b, (a, b) => a.Max(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Intersection(Circle b) => this.Combine(b, (a, b) => a.Min(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Difference(Circle b) => this.Combine(b, (a, b) => a.Max(b.Negative));
        public Procedural<Vector2, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) => x.Negative); } 
        public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 

        // Unimplemented concept functions
        [MethodImpl(AggressiveInlining)]  public Number Distance(Vector2 p) => throw new NotImplementedException();
        [MethodImpl(AggressiveInlining)]  public Number Eval(Vector2 t) => throw new NotImplementedException();
    }
}
