// Autogenerated file: DO NOT EDIT
// Created on 2025-01-24 1:12:52 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct TriangleArray2D: ITriangleArray2D
    {
        // Fields
        [DataMember] public readonly IArray<Triangle2D> Triangles;

        // With functions 
        [MethodImpl(AggressiveInlining)] public TriangleArray2D WithTriangles(IArray<Triangle2D> triangles) => new TriangleArray2D(triangles);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public TriangleArray2D(IArray<Triangle2D> triangles) { Triangles = triangles; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static TriangleArray2D Create(IArray<Triangle2D> triangles) => new TriangleArray2D(triangles);

        // Implicit converters to/from single field

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(TriangleArray2D other) => Triangles.Equals(other.Triangles);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(TriangleArray2D other) => !Triangles.Equals(other.Triangles);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is TriangleArray2D other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Triangles);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Triangles\" = {Triangles} }}";

        // Explicit implementation of interfaces by forwarding properties to fields
        IArray<Triangle2D> ITriangleGeometry2D.Triangles { [MethodImpl(AggressiveInlining)] get => Triangles; }

        // Implemented concept functions and type functions

        // Unimplemented concept functions
        public Integer PrimitiveSize => throw new NotImplementedException();
        public Integer NumPrimitives => throw new NotImplementedException();
        public IArray<Vector2> Points => throw new NotImplementedException();
        public IArray<Integer> Indices => throw new NotImplementedException();
    }
}
