// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 8:08:08 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
public partial struct ConeSegment: ISolid
{
    // Fields
    [DataMember] public readonly Number Height;
    [DataMember] public readonly Number Radius1;
    [DataMember] public readonly Number Radius2;

    // With functions 
    [MethodImpl(AggressiveInlining)] public ConeSegment WithHeight(Number height) => new ConeSegment(height, Radius1, Radius2);
    [MethodImpl(AggressiveInlining)] public ConeSegment WithRadius1(Number radius1) => new ConeSegment(Height, radius1, Radius2);
    [MethodImpl(AggressiveInlining)] public ConeSegment WithRadius2(Number radius2) => new ConeSegment(Height, Radius1, radius2);

    // Regular Constructor
    [MethodImpl(AggressiveInlining)] public ConeSegment(Number height, Number radius1, Number radius2) { Height = height; Radius1 = radius1; Radius2 = radius2; }

    // Static factory function
    [MethodImpl(AggressiveInlining)] public static ConeSegment Create(Number height, Number radius1, Number radius2) => new ConeSegment(height, radius1, radius2);

    // Implicit converters to/from value-tuples and deconstructor
    [MethodImpl(AggressiveInlining)] public static implicit operator (Number, Number, Number)(ConeSegment self) => (self.Height, self.Radius1, self.Radius2);
    [MethodImpl(AggressiveInlining)] public static implicit operator ConeSegment((Number, Number, Number) value) => new(value.Item1, value.Item2, value.Item3);
    [MethodImpl(AggressiveInlining)] public void Deconstruct(out Number height, out Number radius1, out Number radius2) { height = Height; radius1 = Radius1; radius2 = Radius2;  }

    // Object virtual function overrides: Equals, GetHashCode, ToString
    [MethodImpl(AggressiveInlining)] public Boolean Equals(ConeSegment other) => Height.Equals(other.Height) && Radius1.Equals(other.Radius1) && Radius2.Equals(other.Radius2);
    [MethodImpl(AggressiveInlining)] public Boolean NotEquals(ConeSegment other) => !Height.Equals(other.Height) && Radius1.Equals(other.Radius1) && Radius2.Equals(other.Radius2);
    [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is ConeSegment other ? Equals(other) : false;
    [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Height, Radius1, Radius2);
    [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Height\" = {Height}, \"Radius1\" = {Radius1}, \"Radius2\" = {Radius2} }}";

    // Explicit implementation of interfaces by forwarding properties to fields

    // Implemented concept functions and type functions
    public Boolean ClosedX { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 
public Boolean ClosedY { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, TR> Combine<TR>(ConeSegment b, System.Func<TR, TR, TR> f){
    var _var964 = b;
    {
        var _var963 = this;
        {
            var _var962 = f;
            return (x) =>  => _var962.Invoke(_var963.Eval(x), _var964.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector3> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var966 = f;
    {
        var _var965 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var965.Eval(_var966.Invoke(x));
;
    }
}

public System.Func<Vector2, Vector3> Function { [MethodImpl(AggressiveInlining)] get {
    var _var967 = this;
    return (x) =>  => _var967.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Vector3> Compose(ConeSegment b){
    var _var969 = this;
    {
        var _var968 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var968.Eval(_var969.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, TR> Combine<TR>(ConeSegment b, System.Func<TR, TR, TR> f){
    var _var972 = b;
    {
        var _var971 = this;
        {
            var _var970 = f;
            return (x) =>  => _var970.Invoke(_var971.Eval(x), _var972.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var974 = f;
    {
        var _var973 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var973.Eval(_var974.Invoke(x));
;
    }
}

public System.Func<Vector3, Number> Function { [MethodImpl(AggressiveInlining)] get {
    var _var975 = this;
    return (x) =>  => _var975.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, Number> Compose(ConeSegment b){
    var _var977 = this;
    {
        var _var976 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var976.Eval(_var977.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Union(ConeSegment b) => this.Combine(b, (a, b) =>  => a.Max(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Intersection(ConeSegment b) => this.Combine(b, (a, b) =>  => a.Min(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, $TOut> Difference(ConeSegment b) => this.Combine(b, (a, b) =>  => a.Max(b.Negative);

public Procedural<Vector3, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) =>  => x.Negative;
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector3, Boolean> Threshold(Number threshold){
    var _var978 = threshold;
    return this.Map((x) =>  => x.GreaterThanOrEquals(_var978);
;
}


    // Unimplemented concept functions
    [MethodImpl(AggressiveInlining)]  public Number Distance(Vector3 p) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public Number Eval(Vector3 t) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public Vector3 Eval(Vector2 t) => throw new NotImplementedException();
}
Plato.CSharpWriter.CSharpConcreteTypeWriter}
