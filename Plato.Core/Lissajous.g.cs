// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 11:25:56 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Lissajous: IAngularCurve2D, IOpenShape
    {
        // Fields
        [DataMember] public readonly Angle Delta;
        [DataMember] public readonly Number A;
        [DataMember] public readonly Number B;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Lissajous WithDelta(Angle delta) => new Lissajous(delta, A, B);
        [MethodImpl(AggressiveInlining)] public Lissajous WithA(Number a) => new Lissajous(Delta, a, B);
        [MethodImpl(AggressiveInlining)] public Lissajous WithB(Number b) => new Lissajous(Delta, A, b);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Lissajous(Angle delta, Number a, Number b) { Delta = delta; A = a; B = b; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Lissajous Create(Angle delta, Number a, Number b) => new Lissajous(delta, a, b);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Angle, Number, Number)(Lissajous self) => (self.Delta, self.A, self.B);
        [MethodImpl(AggressiveInlining)] public static implicit operator Lissajous((Angle, Number, Number) value) => new(value.Item1, value.Item2, value.Item3);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Angle delta, out Number a, out Number b) { delta = Delta; a = A; b = B;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Lissajous other) => Delta.Equals(other.Delta) && A.Equals(other.A) && B.Equals(other.B);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Lissajous other) => !Delta.Equals(other.Delta) && A.Equals(other.A) && B.Equals(other.B);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Lissajous other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Delta, A, B);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Delta\" = {Delta}, \"A\" = {A}, \"B\" = {B} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented concept functions and type functions
        [MethodImpl(AggressiveInlining)]  public Vector2 Eval(Angle t) => t.Lissajous(this.A, this.B, this.Delta);
        [MethodImpl(AggressiveInlining)]  public Vector2 Eval(Number t) => this.Eval(t.Turns);
        [MethodImpl(AggressiveInlining)]  public IArray<Vector2> Sample(Integer numPoints){
            var _var229 = this;
            return numPoints.LinearSpace.Map((x) => _var229.Eval(x));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine2D ToPolyLine2D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
        [MethodImpl(AggressiveInlining)]  public Procedural<Number, TR> Combine<TR>(Lissajous b, System.Func<TR, TR, TR> f){
            var _var232 = b;
            {
                var _var231 = this;
                {
                    var _var230 = f;
                    return (x) => _var230.Invoke(_var231.Eval(x), _var232.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector2> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var234 = f;
            {
                var _var233 = this;
                return (x) => _var233.Eval(_var234.Invoke(x));
            }
        }

        public System.Func<Number, Vector2> Function { [MethodImpl(AggressiveInlining)] get {
            var _var235 = this;
            return (x) => _var235.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Number, Vector2> Compose(Lissajous b){
            var _var237 = this;
            {
                var _var236 = b;
                return (x) => _var236.Eval(_var237.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, TR> Combine<TR>(Lissajous b, System.Func<TR, TR, TR> f){
            var _var240 = b;
            {
                var _var239 = this;
                {
                    var _var238 = f;
                    return (x) => _var238.Invoke(_var239.Eval(x), _var240.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var242 = f;
            {
                var _var241 = this;
                return (x) => _var241.Eval(_var242.Invoke(x));
            }
        }

        public System.Func<Vector2, Number> Function { [MethodImpl(AggressiveInlining)] get {
            var _var243 = this;
            return (x) => _var243.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Number> Compose(Lissajous b){
            var _var245 = this;
            {
                var _var244 = b;
                return (x) => _var244.Eval(_var245.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Union(Lissajous b) => this.Combine(b, (a, b) => a.Max(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Intersection(Lissajous b) => this.Combine(b, (a, b) => a.Min(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Difference(Lissajous b) => this.Combine(b, (a, b) => a.Max(b.Negative));
        public Procedural<Vector2, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) => x.Negative); } 
        public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)false); } 

        // Unimplemented concept functions
        [MethodImpl(AggressiveInlining)]  public Number Distance(Vector2 p) => throw new NotImplementedException();
        [MethodImpl(AggressiveInlining)]  public Number Eval(Vector2 t) => throw new NotImplementedException();
    }
}
