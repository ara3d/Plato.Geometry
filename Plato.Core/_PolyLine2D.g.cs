// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 8:08:08 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
public partial struct PolyLine2D: IPolyLine2D
{
    // Fields
    [DataMember] public readonly IArray<Vector2> Points;
    [DataMember] public readonly Boolean Closed;

    // With functions 
    [MethodImpl(AggressiveInlining)] public PolyLine2D WithPoints(IArray<Vector2> points) => new PolyLine2D(points, Closed);
    [MethodImpl(AggressiveInlining)] public PolyLine2D WithClosed(Boolean closed) => new PolyLine2D(Points, closed);

    // Regular Constructor
    [MethodImpl(AggressiveInlining)] public PolyLine2D(IArray<Vector2> points, Boolean closed) { Points = points; Closed = closed; }

    // Static factory function
    [MethodImpl(AggressiveInlining)] public static PolyLine2D Create(IArray<Vector2> points, Boolean closed) => new PolyLine2D(points, closed);

    // Implicit converters to/from value-tuples and deconstructor
    [MethodImpl(AggressiveInlining)] public static implicit operator (IArray<Vector2>, Boolean)(PolyLine2D self) => (self.Points, self.Closed);
    [MethodImpl(AggressiveInlining)] public static implicit operator PolyLine2D((IArray<Vector2>, Boolean) value) => new(value.Item1, value.Item2);
    [MethodImpl(AggressiveInlining)] public void Deconstruct(out IArray<Vector2> points, out Boolean closed) { points = Points; closed = Closed;  }

    // Object virtual function overrides: Equals, GetHashCode, ToString
    [MethodImpl(AggressiveInlining)] public Boolean Equals(PolyLine2D other) => Points.Equals(other.Points) && Closed.Equals(other.Closed);
    [MethodImpl(AggressiveInlining)] public Boolean NotEquals(PolyLine2D other) => !Points.Equals(other.Points) && Closed.Equals(other.Closed);
    [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is PolyLine2D other ? Equals(other) : false;
    [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Points, Closed);
    [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Points\" = {Points}, \"Closed\" = {Closed} }}";

    // Explicit implementation of interfaces by forwarding properties to fields
    IArray<Vector2> IPointGeometry2D.Points { [MethodImpl(AggressiveInlining)] get => Points; }
    Boolean IOpenClosedShape.Closed { [MethodImpl(AggressiveInlining)] get => Closed; }

    // Implemented concept functions and type functions
    public PolyLine3D To3D { [MethodImpl(AggressiveInlining)] get  => (this.Points.Map((p) =>  => p.To3D;
 } 
public PolyLine3D PolyLine3D { [MethodImpl(AggressiveInlining)] get  => this.To3D; } 
[MethodImpl(AggressiveInlining)]  public static implicit operator PolyLine3D(PolyLine2D x) => x.PolyLine3D;
    public IArray<Line2D> Lines { [MethodImpl(AggressiveInlining)] get  => this.Points.WithNext((a, b) =>  => new Line2D(a, b);
 } 
[MethodImpl(AggressiveInlining)]  public IArray<Vector2> Sample(Integer numPoints){
    var _var836 = this;
    return numPoints.LinearSpace.Map((x) =>  => _var836.Eval(x);
;
}

[MethodImpl(AggressiveInlining)]  public PolyLine2D ToPolyLine2D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
[MethodImpl(AggressiveInlining)]  public Procedural<Number, TR> Combine<TR>(PolyLine2D b, System.Func<TR, TR, TR> f){
    var _var839 = b;
    {
        var _var838 = this;
        {
            var _var837 = f;
            return (x) =>  => _var837.Invoke(_var838.Eval(x), _var839.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector2> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var841 = f;
    {
        var _var840 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var840.Eval(_var841.Invoke(x));
;
    }
}

public System.Func<Number, Vector2> Function { [MethodImpl(AggressiveInlining)] get {
    var _var842 = this;
    return (x) =>  => _var842.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Number, Vector2> Compose(PolyLine2D b){
    var _var844 = this;
    {
        var _var843 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var843.Eval(_var844.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, TR> Combine<TR>(PolyLine2D b, System.Func<TR, TR, TR> f){
    var _var847 = b;
    {
        var _var846 = this;
        {
            var _var845 = f;
            return (x) =>  => _var845.Invoke(_var846.Eval(x), _var847.Eval(x));
;
        }
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
    var _var849 = f;
    {
        var _var848 = this;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var848.Eval(_var849.Invoke(x));
;
    }
}

public System.Func<Vector2, Number> Function { [MethodImpl(AggressiveInlining)] get {
    var _var850 = this;
    return (x) =>  => _var850.Eval(x);
;
}
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Number> Compose(PolyLine2D b){
    var _var852 = this;
    {
        var _var851 = b;
        return new Procedural<$TIn2,$TOut>((x) =>  => _var851.Eval(_var852.Eval(x));
;
    }
}

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Union(PolyLine2D b) => this.Combine(b, (a, b) =>  => a.Max(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Intersection(PolyLine2D b) => this.Combine(b, (a, b) =>  => a.Min(b);

[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Difference(PolyLine2D b) => this.Combine(b, (a, b) =>  => a.Max(b.Negative);

public Procedural<Vector2, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) =>  => x.Negative;
 } 
[MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Boolean> Threshold(Number threshold){
    var _var853 = threshold;
    return this.Map((x) =>  => x.GreaterThanOrEquals(_var853);
;
}


    // Unimplemented concept functions
    [MethodImpl(AggressiveInlining)]  public Number Distance(Vector2 p) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public Number Eval(Vector2 t) => throw new NotImplementedException();
[MethodImpl(AggressiveInlining)]  public Vector2 Eval(Number t) => throw new NotImplementedException();
public IArray<Vector2> Corners => throw new NotImplementedException();
public Integer PrimitiveSize => throw new NotImplementedException();
public Integer NumPrimitives => throw new NotImplementedException();
}
Plato.CSharpWriter.CSharpConcreteTypeWriter}
