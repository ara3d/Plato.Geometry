// Autogenerated file: DO NOT EDIT
// Created on 2025-04-08 12:25:04 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct PolyLine2D: IPolyLine2D<PolyLine2D>
    {
        // Fields
        [DataMember] public readonly IArray<Point2D> Points;
        [DataMember] public readonly Boolean Closed;

        // With functions 
        [MethodImpl(AggressiveInlining)] public PolyLine2D WithPoints(IArray<Point2D> points) => new PolyLine2D(points, Closed);
        [MethodImpl(AggressiveInlining)] public PolyLine2D WithClosed(Boolean closed) => new PolyLine2D(Points, closed);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public PolyLine2D(IArray<Point2D> points, Boolean closed) { Points = points; Closed = closed; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static PolyLine2D Create(IArray<Point2D> points, Boolean closed) => new PolyLine2D(points, closed);

        // Static default implementation
        public static readonly PolyLine2D Default = default;

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (IArray<Point2D>, Boolean)(PolyLine2D self) => (self.Points, self.Closed);
        [MethodImpl(AggressiveInlining)] public static implicit operator PolyLine2D((IArray<Point2D>, Boolean) value) => new PolyLine2D(value.Item1, value.Item2);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out IArray<Point2D> points, out Boolean closed) { points = Points; closed = Closed;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(PolyLine2D other) => Points.Equals(other.Points) && Closed.Equals(other.Closed);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(PolyLine2D other) => !Points.Equals(other.Points) && Closed.Equals(other.Closed);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is PolyLine2D other ? Equals(other).Value : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Points, Closed);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Points\" = {Points}, \"Closed\" = {Closed} }}";

        // Explicit implementation of interfaces by forwarding properties to fields
        Boolean IOpenClosedShape.Closed { [MethodImpl(AggressiveInlining)] get => Closed; }
        IArray<Point2D> IPointGeometry2D<PolyLine2D>.Points { [MethodImpl(AggressiveInlining)] get => Points; }

        // Implemented interface functions
        public PolyLine3D To3D { [MethodImpl(AggressiveInlining)] get  => (this.Points.Map((p)  => p.To3D), this.Closed); } 
public PolyLine3D PolyLine3D { [MethodImpl(AggressiveInlining)] get  => this.To3D; } 
[MethodImpl(AggressiveInlining)]  public static implicit operator PolyLine3D(PolyLine2D x) => x.PolyLine3D;
        [MethodImpl(AggressiveInlining)]  public PolyLine2D Deform(System.Func<Point2D, Point2D> f) => (this.Points.Map(f), this.Closed);
public IArray<Line2D> Lines { [MethodImpl(AggressiveInlining)] get  => this.Points.WithNext((a, b)  => new Line2D(a, b), this.Closed); } 
[MethodImpl(AggressiveInlining)]  public Point2D Point(Integer index) => this.Points.At(index);
[MethodImpl(AggressiveInlining)]  public Triangle2D Triangle(Integer3 f) => (this.Point(f.A), this.Point(f.B), this.Point(f.C));
[MethodImpl(AggressiveInlining)]  public Quad2D Quad(Integer4 f) => (this.Point(f.A), this.Point(f.B), this.Point(f.C), this.Point(f.D));
public Bounds2D Bounds { [MethodImpl(AggressiveInlining)] get  => this.Points.Bounds(); } 
[MethodImpl(AggressiveInlining)]  public IArray<Point2D> Sample(Integer numPoints){
            var _var147 = this;
            return numPoints.LinearSpace.Map((x)  => _var147.Eval(x));
        }

[MethodImpl(AggressiveInlining)]  public PolyLine2D ToPolyLine2D(Integer numPoints) => (this.Sample(numPoints), this.Closed);

        // Unimplemented interface functions
        [MethodImpl(AggressiveInlining)]  public Point2D Eval(Number t) => throw new NotImplementedException();
}
}
