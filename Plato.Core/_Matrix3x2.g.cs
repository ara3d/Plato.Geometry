// Autogenerated file: DO NOT EDIT
// Created on 2025-04-07 4:05:19 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Matrix3x2: IValue, IArrayLike<Matrix3x2, Number>
    {
        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Matrix3x2 Create(Vector2 row1, Vector2 row2, Vector2 row3) => new Matrix3x2(row1, row2, row3);

        // Static default implementation
        public static readonly Matrix3x2 Default = default;

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Vector2, Vector2, Vector2)(Matrix3x2 self) => (self.Row1, self.Row2, self.Row3);
        [MethodImpl(AggressiveInlining)] public static implicit operator Matrix3x2((Vector2, Vector2, Vector2) value) => new Matrix3x2(value.Item1, value.Item2, value.Item3);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Vector2 row1, out Vector2 row2, out Vector2 row3) { row1 = Row1; row2 = Row2; row3 = Row3;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Matrix3x2 other) => Value.Equals(other.Value);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Matrix3x2 other) => !Value.Equals(other.Value);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Matrix3x2 other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public static Boolean operator==(Matrix3x2 a, Matrix3x2 b) => a.Equals(b);
        [MethodImpl(AggressiveInlining)] public static Boolean operator!=(Matrix3x2 a, Matrix3x2 b) => !a.Equals(b);
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Value.GetHashCode();
        [MethodImpl(AggressiveInlining)] public override string ToString() => Value.ToString();

        // Explicit implementation of interfaces by forwarding properties to fields

        // IArrayLike predefined functions
        public Integer NumComponents { [MethodImpl(AggressiveInlining)] get => 6; }
        public IArray<Number> Components { [MethodImpl(AggressiveInlining)] get => Intrinsics.MakeArray<Number>(M11, M12, M21, M22, M31, M32); }
        [MethodImpl(AggressiveInlining)] public static Matrix3x2 CreateFromComponents(IArray<Number> numbers) => new Matrix3x2(numbers[0], numbers[1], numbers[2], numbers[3], numbers[4], numbers[5]);

        [MethodImpl(AggressiveInlining)] public static Matrix3x2 CreateFromComponent(Number x) => new Matrix3x2(x, x, x, x, x, x);

        // Implemented interface functions
        [MethodImpl(AggressiveInlining)]  public Matrix3x2 Add(Matrix3x2 value2) => this + value2;
        [MethodImpl(AggressiveInlining)]  public Matrix3x2 Subtract(Matrix3x2 value2) => this - value2;
        [MethodImpl(AggressiveInlining)]  public Matrix3x2 Multiply(Matrix3x2 value2) => this * value2;
        [MethodImpl(AggressiveInlining)]  public Matrix3x2 Multiply(Number scalar) => this * scalar;
        [MethodImpl(AggressiveInlining)]  public Matrix3x2 Divide(Number scalar) => this / scalar;
        [MethodImpl(AggressiveInlining)]  public Number At(Integer n) => this.Components.At(n);
public Number this[Integer n] { [MethodImpl(AggressiveInlining)]  get => At(n); }
        [MethodImpl(AggressiveInlining)]  public Matrix3x2 MapComponents(System.Func<Number, Number> f) => Matrix3x2.CreateFromComponents(this.Components.Map(f));
[MethodImpl(AggressiveInlining)]  public Matrix3x2 ZipComponents(Matrix3x2 b, System.Func<Number, Number, Number> f) => Matrix3x2.CreateFromComponents(this.Components.Zip(b.Components, f));
[MethodImpl(AggressiveInlining)]  public Matrix3x2 ZipComponents(Matrix3x2 b, Matrix3x2 c, System.Func<Number, Number, Number, Number> f) => Matrix3x2.CreateFromComponents(this.Components.Zip(b.Components, c.Components, f));
[MethodImpl(AggressiveInlining)]  public Boolean AllZipComponents(Matrix3x2 b, System.Func<Number, Number, Boolean> f) => this.Components.Zip(b.Components, f).All((x)  => x);
[MethodImpl(AggressiveInlining)]  public Boolean AllZipComponents(Matrix3x2 b, Matrix3x2 c, System.Func<Number, Number, Number, Boolean> f) => this.Components.Zip(b.Components, c.Components, f).All((x)  => x);
[MethodImpl(AggressiveInlining)]  public Boolean AnyZipComponents(Matrix3x2 b, System.Func<Number, Number, Boolean> f) => this.Components.Zip(b.Components, f).Any((x)  => x);
[MethodImpl(AggressiveInlining)]  public Boolean AnyZipComponents(Matrix3x2 b, Matrix3x2 c, System.Func<Number, Number, Number, Boolean> f) => this.Components.Zip(b.Components, c.Components, f).Any((x)  => x);
[MethodImpl(AggressiveInlining)]  public Boolean AllComponents(System.Func<Number, Boolean> predicate) => this.Components.All(predicate);
[MethodImpl(AggressiveInlining)]  public Boolean AnyComponent(System.Func<Number, Boolean> predicate) => this.Components.Any(predicate);

        // Unimplemented interface functions
    }
}
