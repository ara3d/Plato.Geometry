// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 8:08:08 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
public partial struct CubicBezier3D: IArray<Vector3>, IOpenShape
{
    // Fields
    [DataMember] public readonly Vector3 A;
    [DataMember] public readonly Vector3 B;
    [DataMember] public readonly Vector3 C;
    [DataMember] public readonly Vector3 D;

    // With functions 
    [MethodImpl(AggressiveInlining)] public CubicBezier3D WithA(Vector3 a) => new CubicBezier3D(a, B, C, D);
    [MethodImpl(AggressiveInlining)] public CubicBezier3D WithB(Vector3 b) => new CubicBezier3D(A, b, C, D);
    [MethodImpl(AggressiveInlining)] public CubicBezier3D WithC(Vector3 c) => new CubicBezier3D(A, B, c, D);
    [MethodImpl(AggressiveInlining)] public CubicBezier3D WithD(Vector3 d) => new CubicBezier3D(A, B, C, d);

    // Regular Constructor
    [MethodImpl(AggressiveInlining)] public CubicBezier3D(Vector3 a, Vector3 b, Vector3 c, Vector3 d) { A = a; B = b; C = c; D = d; }

    // Static factory function
    [MethodImpl(AggressiveInlining)] public static CubicBezier3D Create(Vector3 a, Vector3 b, Vector3 c, Vector3 d) => new CubicBezier3D(a, b, c, d);

    // Implicit converters to/from value-tuples and deconstructor
    [MethodImpl(AggressiveInlining)] public static implicit operator (Vector3, Vector3, Vector3, Vector3)(CubicBezier3D self) => (self.A, self.B, self.C, self.D);
    [MethodImpl(AggressiveInlining)] public static implicit operator CubicBezier3D((Vector3, Vector3, Vector3, Vector3) value) => new(value.Item1, value.Item2, value.Item3, value.Item4);
    [MethodImpl(AggressiveInlining)] public void Deconstruct(out Vector3 a, out Vector3 b, out Vector3 c, out Vector3 d) { a = A; b = B; c = C; d = D;  }

    // Object virtual function overrides: Equals, GetHashCode, ToString
    [MethodImpl(AggressiveInlining)] public Boolean Equals(CubicBezier3D other) => A.Equals(other.A) && B.Equals(other.B) && C.Equals(other.C) && D.Equals(other.D);
    [MethodImpl(AggressiveInlining)] public Boolean NotEquals(CubicBezier3D other) => !A.Equals(other.A) && B.Equals(other.B) && C.Equals(other.C) && D.Equals(other.D);
    [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is CubicBezier3D other ? Equals(other) : false;
    [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(A, B, C, D);
    [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"A\" = {A}, \"B\" = {B}, \"C\" = {C}, \"D\" = {D} }}";

    // Explicit implementation of interfaces by forwarding properties to fields

    // Array predefined functions
    [MethodImpl(AggressiveInlining)] public CubicBezier3D(IReadOnlyList<Vector3> xs) : this(xs[0], xs[1], xs[2], xs[3]) { }
    [MethodImpl(AggressiveInlining)] public CubicBezier3D(Vector3[] xs) : this(xs[0], xs[1], xs[2], xs[3]) { }
    [MethodImpl(AggressiveInlining)] public static CubicBezier3D Create(IReadOnlyList<Vector3> xs) => new CubicBezier3D(xs);
    // Implementation of IReadOnlyList
    [MethodImpl(AggressiveInlining)] public System.Collections.Generic.IEnumerator<Vector3> GetEnumerator() => new ArrayEnumerator<Vector3>(this);
    [MethodImpl(AggressiveInlining)] System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => GetEnumerator();
    Vector3 System.Collections.Generic.IReadOnlyList<Vector3>.this[int n] { [MethodImpl(AggressiveInlining)] get => At(n); }
    int System.Collections.Generic.IReadOnlyCollection<Vector3>.Count { [MethodImpl(AggressiveInlining)] get => this.Count; }

    // Implemented concept functions and type functions
    [MethodImpl(AggressiveInlining)]  public Vector3 Eval(Number t) => t.QuadraticBezier(this.A, this.B, this.C);
public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)false); } 

    // Unimplemented concept functions
    public Integer Count { [MethodImpl(AggressiveInlining)] get => 4; }
    [MethodImpl(AggressiveInlining)]  public Vector3 At(Integer n) => n == 0 ? A : n == 1 ? B : n == 2 ? C : n == 3 ? D : throw new System.IndexOutOfRangeException();
    public Vector3 this[Integer n] { [MethodImpl(AggressiveInlining)] get => At(n); }
}
Plato.CSharpWriter.CSharpConcreteTypeWriter}
