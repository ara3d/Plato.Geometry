// Autogenerated file: DO NOT EDIT
// Created on 2025-03-14 12:36:59 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Rose: IPolarCurve, IClosedShape
    {
        // Fields
        [DataMember] public readonly Integer K;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Rose WithK(Integer k) => new Rose(k);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Rose(Integer k) { K = k; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Rose Create(Integer k) => new Rose(k);

        // Implicit converters to/from single field
        [MethodImpl(AggressiveInlining)] public static implicit operator Integer(Rose self) => self.K;
        [MethodImpl(AggressiveInlining)] public static implicit operator Rose(Integer value) => new Rose(value);

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Rose other) => K.Equals(other.K);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Rose other) => !K.Equals(other.K);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Rose other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(K);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"K\" = {K} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented interface functions
        // GetRadius(Rose, Angle):Number; [Self=Rose;]; <>
        [MethodImpl(AggressiveInlining)]  public Number GetRadius(Angle t) => t.Rose(this.K);
// EvalPolar(Rose, Angle):PolarCoordinate; [IPolarCurve=Rose;Self=Rose;]; <>
        [MethodImpl(AggressiveInlining)]  public PolarCoordinate EvalPolar(Angle t) => (this.GetRadius(t), t);
// Eval(Rose, Angle):Vector2; [IPolarCurve=Rose;Self=Rose;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector2 Eval(Angle t) => this.EvalPolar(t);
// Eval(Rose, Number):Vector2; [IAngularCurve2D=Rose;IPolarCurve=Rose;Self=Rose;]; <>
        [MethodImpl(AggressiveInlining)]  public Vector2 Eval(Number t) => this.Eval(t.Turns);
// Sample(Rose, Integer):_T0; [ICurve2D=Rose;IAngularCurve2D=Rose;IPolarCurve=Rose;Self=Rose;]; <_T0:IArray<Vector2>>
        [MethodImpl(AggressiveInlining)]  public _T0 Sample<_T0>(Integer numPoints){
            var _var69 = this;
            return numPoints.LinearSpace.Map((x)  => _var69.Eval(x));
        }

// ToPolyLine2D(Rose, Integer):PolyLine2D; [ICurve2D=Rose;IAngularCurve2D=Rose;IPolarCurve=Rose;Self=Rose;]; <>
        [MethodImpl(AggressiveInlining)]  public PolyLine2D ToPolyLine2D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
// Closed(Rose):Boolean; [IClosedShape=Rose;Self=Rose;]; <>
        public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 

        // Unimplemented concept functions
    }
}
