// Autogenerated file: DO NOT EDIT
// Created on 2025-04-08 12:25:04 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Rose: IPolarCurve, IClosedShape
    {
        // Fields
        [DataMember] public readonly Integer K;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Rose WithK(Integer k) => new Rose(k);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Rose(Integer k) { K = k; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Rose Create(Integer k) => new Rose(k);

        // Static default implementation
        public static readonly Rose Default = default;

        // Implicit converters to/from single field
        [MethodImpl(AggressiveInlining)] public static implicit operator Integer(Rose self) => self.K;
        [MethodImpl(AggressiveInlining)] public static implicit operator Rose(Integer value) => new Rose(value);

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Rose other) => K.Equals(other.K);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Rose other) => !K.Equals(other.K);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Rose other ? Equals(other).Value : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(K);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"K\" = {K} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented interface functions
        [MethodImpl(AggressiveInlining)]  public Number GetRadius(Angle t) => t.Rose(this.K);
[MethodImpl(AggressiveInlining)]  public PolarCoordinate EvalPolar(Angle t) => (this.GetRadius(t), t);
[MethodImpl(AggressiveInlining)]  public Point2D Eval(Angle t) => this.EvalPolar(t);
[MethodImpl(AggressiveInlining)]  public Point2D Eval(Number t) => this.Eval(t.Turns);
[MethodImpl(AggressiveInlining)]  public IArray<Point2D> Sample(Integer numPoints){
            var _var74 = this;
            return numPoints.LinearSpace.Map((x)  => _var74.Eval(x));
        }

[MethodImpl(AggressiveInlining)]  public PolyLine2D ToPolyLine2D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)true); } 

        // Unimplemented interface functions
    }
}
