// Autogenerated file: DO NOT EDIT
// Created on 2025-01-17 3:12:39 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Vector2: IVector<Vector2>
    {
        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Vector2 Create(Number x, Number y) => new Vector2(x, y);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Number, Number)(Vector2 self) => (self.X, self.Y);
        [MethodImpl(AggressiveInlining)] public static implicit operator Vector2((Number, Number) value) => new(value.Item1, value.Item2);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Number x, out Number y) { x = X; y = Y;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Vector2 other) => Value.Equals(other.Value);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Vector2 other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override string ToString() => Value.ToString();
        [MethodImpl(AggressiveInlining)] public static Boolean operator==(Vector2 a, Vector2 b) => a.Equals(b);
        [MethodImpl(AggressiveInlining)] public static Boolean operator!=(Vector2 a, Vector2 b) => !a.Equals(b);

        // Explicit implementation of interfaces by forwarding properties to fields

        // Array predefined functions
        [MethodImpl(AggressiveInlining)] public Vector2(IReadOnlyList<Number> xs) : this(xs[0], xs[1]) { }
        [MethodImpl(AggressiveInlining)] public Vector2(Number[] xs) : this(xs[0], xs[1]) { }
        [MethodImpl(AggressiveInlining)] public static Vector2 Create(IReadOnlyList<Number> xs) => new Vector2(xs);
        // Implementation of IReadOnlyList
        [MethodImpl(AggressiveInlining)] public System.Collections.Generic.IEnumerator<Number> GetEnumerator() => new ArrayEnumerator<Number>(this);
        [MethodImpl(AggressiveInlining)] System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => GetEnumerator();
        Number System.Collections.Generic.IReadOnlyList<Number>.this[int n] { [MethodImpl(AggressiveInlining)] get => At(n); }
        int System.Collections.Generic.IReadOnlyCollection<Number>.Count { [MethodImpl(AggressiveInlining)] get => this.Count; }

        // Numerical predefined functions
        public IArray<Number> Components { [MethodImpl(AggressiveInlining)] get => Intrinsics.MakeArray<Number>(X, Y); }
        [MethodImpl(AggressiveInlining)] public Vector2 FromComponents(IArray<Number> numbers) => new Vector2(numbers[0], numbers[1]);

        // Implemented concept functions and type functions
        public Vector3 To3D { [MethodImpl(AggressiveInlining)] get  => this; } 
        public static Vector2 UnitX { [MethodImpl(AggressiveInlining)] get  => (((Number)1), ((Number)0)); } 
        public static Vector2 UnitY { [MethodImpl(AggressiveInlining)] get  => (((Number)0), ((Number)1)); } 
        [MethodImpl(AggressiveInlining)]  public Line2D Line(Vector2 b) => (this, b);
        [MethodImpl(AggressiveInlining)]  public Ray2D Ray(Vector2 b) => (this, b);
        [MethodImpl(AggressiveInlining)]  public Ray2D RayTo(Vector2 b) => (this, b.Subtract(this));
        public Vector3 Vector3 { [MethodImpl(AggressiveInlining)] get  => this.Vector3(((Integer)0)); } 
        [MethodImpl(AggressiveInlining)]  public static implicit operator Vector3(Vector2 v) => v.Vector3;
        [MethodImpl(AggressiveInlining)]  public Vector3 Vector3(Number z) => (this.X, this.Y, z);
        [MethodImpl(AggressiveInlining)]  public Vector2 Modulo(Vector2 y) => this.ZipComponents(y, (a, b) => a.Modulo(b));
        [MethodImpl(AggressiveInlining)]  public Vector2 MidPoint(Vector2 b) => this.Add(b).Divide(((Number)2));
        public Number Sum { [MethodImpl(AggressiveInlining)] get  => this.Reduce(((Number)0), (a, b) => a.Add(b)); } 
        public Number SumSquares { [MethodImpl(AggressiveInlining)] get  => this.Square.Sum; } 
        public Number MagnitudeSquared { [MethodImpl(AggressiveInlining)] get  => this.SumSquares; } 
        public Number Magnitude { [MethodImpl(AggressiveInlining)] get  => this.MagnitudeSquared.SquareRoot; } 
        [MethodImpl(AggressiveInlining)]  public Vector2 Project(Vector2 other) => other.Multiply(this.Dot(other));
        [MethodImpl(AggressiveInlining)]  public Angle Angle(Vector2 b) => this.Dot(b).Divide(this.Magnitude.Multiply(b.Magnitude)).Acos;
        [MethodImpl(AggressiveInlining)]  public Boolean IsParallel(Vector2 b) => this.Dot(b).Abs.GreaterThan(((Number)1).Subtract(Constants.Epsilon));
        public Vector2 PlusOne { [MethodImpl(AggressiveInlining)] get  => this.Add(this.One); } 
        public Vector2 MinusOne { [MethodImpl(AggressiveInlining)] get  => this.Subtract(this.One); } 
        public Vector2 FromOne { [MethodImpl(AggressiveInlining)] get  => this.One.Subtract(this); } 
        [MethodImpl(AggressiveInlining)]  public Number Component(Integer n) => this.Components.At(n);
        public Integer NumComponents { [MethodImpl(AggressiveInlining)] get  => this.Components.Count; } 
        [MethodImpl(AggressiveInlining)]  public Vector2 MapComponents(System.Func<Number, Number> f) => this.FromComponents(this.Components.Map(f));
        [MethodImpl(AggressiveInlining)]  public Vector2 ZipComponents(Vector2 y, System.Func<Number, Number, Number> f) => this.FromComponents(this.Components.Zip(y.Components, f));
        public Vector2 Zero { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((i) => ((Number)0)); } 
        public Vector2 One { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((i) => ((Number)1)); } 
        public Number MaxComponent { [MethodImpl(AggressiveInlining)] get {
            var n = this.NumComponents;
            if (n.Equals(((Integer)0)))
            return ((Integer)0);
            var r = this.Component(((Integer)0));
            {
                var i = ((Integer)1);
                while (i.LessThan(n))
                {
                    r = r.Max(this.Component(i));
                    i = i.Add(((Integer)1));
                }

            }
            return r;
        }
         } 
        public Number MinComponent { [MethodImpl(AggressiveInlining)] get {
            var n = this.NumComponents;
            if (n.Equals(((Integer)0)))
            return ((Integer)0);
            var r = this.Component(((Integer)0));
            {
                var i = ((Integer)1);
                while (i.LessThan(n))
                {
                    r = r.Min(this.Component(i));
                    i = i.Add(((Integer)1));
                }

            }
            return r;
        }
         } 
        public Vector2 MinValue { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x) => x.MinValue); } 
        public Vector2 MaxValue { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x) => x.MaxValue); } 
        [MethodImpl(AggressiveInlining)]  public Boolean AllComponents(System.Func<Number, Boolean> predicate) => this.Components.All(predicate);
        [MethodImpl(AggressiveInlining)]  public Boolean AnyComponent(System.Func<Number, Boolean> predicate) => this.Components.Any(predicate);
        [MethodImpl(AggressiveInlining)]  public Boolean Between(Vector2 a, Vector2 b) => this.Components.Zip(a.Components, b.Components, (x0, a0, b0) => x0.Between(a0, b0)).All((x0) => x0);
        public Boolean BetweenZeroOne { [MethodImpl(AggressiveInlining)] get  => this.Between(this.Zero, this.One); } 
        public Vector2 ClampZeroOne { [MethodImpl(AggressiveInlining)] get  => this.Clamp(this.Zero, this.One); } 
        public Vector2 Clamp01 { [MethodImpl(AggressiveInlining)] get  => this.ClampZeroOne; } 
        public Vector2 Fract { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((c) => c.Fract); } 
        [MethodImpl(AggressiveInlining)]  public Vector2 Modulo(Number s){
            var _var310 = s;
            return this.MapComponents((i) => i.Modulo(_var310));
        }

        [MethodImpl(AggressiveInlining)]  public IArray<Vector2> Repeat(Integer n){
            var _var311 = this;
            return n.MapRange((i) => _var311);
        }

        public Vector2 Half { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)2)); } 
        public Vector2 Quarter { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)4)); } 
        public Vector2 Eight { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)8)); } 
        public Vector2 Sixteenth { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)16)); } 
        public Vector2 Tenth { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)10)); } 
        public Vector2 Twice { [MethodImpl(AggressiveInlining)] get  => this.Multiply(((Number)2)); } 
        public Vector2 Hundred { [MethodImpl(AggressiveInlining)] get  => this.Multiply(((Number)100)); } 
        public Vector2 Thousand { [MethodImpl(AggressiveInlining)] get  => this.Multiply(((Number)1000)); } 
        public Vector2 Million { [MethodImpl(AggressiveInlining)] get  => this.Thousand.Thousand; } 
        public Vector2 Billion { [MethodImpl(AggressiveInlining)] get  => this.Thousand.Million; } 
        public Vector2 Pow2 { [MethodImpl(AggressiveInlining)] get  => this.Multiply(this); } 
        public Vector2 Pow3 { [MethodImpl(AggressiveInlining)] get  => this.Pow2.Multiply(this); } 
        public Vector2 Pow4 { [MethodImpl(AggressiveInlining)] get  => this.Pow3.Multiply(this); } 
        public Vector2 Pow5 { [MethodImpl(AggressiveInlining)] get  => this.Pow4.Multiply(this); } 
        public Vector2 Square { [MethodImpl(AggressiveInlining)] get  => this.Pow2; } 
        public Vector2 Sqr { [MethodImpl(AggressiveInlining)] get  => this.Pow2; } 
        public Vector2 Cube { [MethodImpl(AggressiveInlining)] get  => this.Pow3; } 
        public Vector2 Parabola { [MethodImpl(AggressiveInlining)] get  => this.Sqr; } 
        [MethodImpl(AggressiveInlining)]  public Vector2 Lerp(Vector2 b, Number t) => this.Multiply(t.FromOne).Add(b.Multiply(t));
        [MethodImpl(AggressiveInlining)]  public Vector2 Barycentric(Vector2 v2, Vector2 v3, Vector2 uv) => this.Add(v2.Subtract(this)).Multiply(uv.X).Add(v3.Subtract(this).Multiply(uv.Y));
        [MethodImpl(AggressiveInlining)]  public Vector2 CubicBezier(Vector2 b, Vector2 c, Vector2 d, Number t) => this.Multiply(((Number)1).Subtract(t).Cube).Add(b.Multiply(((Number)3).Multiply(((Number)1).Subtract(t).Sqr.Multiply(t))).Add(c.Multiply(((Number)3).Multiply(((Number)1).Subtract(t).Multiply(t.Sqr))).Add(d.Multiply(t.Cube))));
        [MethodImpl(AggressiveInlining)]  public Vector2 CubicBezierDerivative(Vector2 b, Vector2 c, Vector2 d, Number t) => b.Subtract(this).Multiply(((Number)3).Multiply(((Number)1).Subtract(t).Sqr)).Add(c.Subtract(b).Multiply(((Number)6).Multiply(((Number)1).Subtract(t).Multiply(t))).Add(d.Subtract(c).Multiply(((Number)3).Multiply(t.Sqr))));
        [MethodImpl(AggressiveInlining)]  public Vector2 CubicBezierSecondDerivative(Vector2 b, Vector2 c, Vector2 d, Number t) => c.Subtract(b.Multiply(((Number)2)).Add(this)).Multiply(((Number)6).Multiply(((Number)1).Subtract(t))).Add(d.Subtract(c.Multiply(((Number)2)).Add(this)).Multiply(((Number)6).Multiply(t)));
        [MethodImpl(AggressiveInlining)]  public Vector2 QuadraticBezier(Vector2 b, Vector2 c, Number t) => this.Multiply(((Number)1).Subtract(t).Sqr).Add(b.Multiply(((Number)2).Multiply(((Number)1).Subtract(t).Multiply(t))).Add(c.Multiply(t.Sqr)));
        [MethodImpl(AggressiveInlining)]  public Vector2 QuadraticBezierDerivative(Vector2 b, Vector2 c, Number t) => b.Subtract(b).Multiply(((Number)2).Multiply(((Number)1).Subtract(t))).Add(c.Subtract(b).Multiply(((Number)2).Multiply(t)));
        [MethodImpl(AggressiveInlining)]  public Vector2 QuadraticBezierSecondDerivative(Vector2 b, Vector2 c, Number t) => c.Subtract(b.Multiply(((Number)2)).Add(this));

        // Unimplemented concept functions
        [MethodImpl(AggressiveInlining)]  public Number At(Integer n) { [MethodImpl(AggressiveInlining)] get => n == 0 ? X : n == 1 ? Y : throw new System.IndexOutOfRangeException(); }
        public Number this[Integer n] => n == 0 ? X : n == 1 ? Y : throw new System.IndexOutOfRangeException();
    }
}
