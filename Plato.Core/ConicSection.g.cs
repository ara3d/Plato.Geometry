// Autogenerated file: DO NOT EDIT
// Created on 2025-03-09 12:06:56 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct ConicSection: IPolarCurve, IOpenShape
    {
        // Fields
        [DataMember] public readonly Number Eccentricity;
        [DataMember] public readonly Number SemiLatusRectum;

        // With functions 
        [MethodImpl(AggressiveInlining)] public ConicSection WithEccentricity(Number eccentricity) => new ConicSection(eccentricity, SemiLatusRectum);
        [MethodImpl(AggressiveInlining)] public ConicSection WithSemiLatusRectum(Number semiLatusRectum) => new ConicSection(Eccentricity, semiLatusRectum);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public ConicSection(Number eccentricity, Number semiLatusRectum) { Eccentricity = eccentricity; SemiLatusRectum = semiLatusRectum; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static ConicSection Create(Number eccentricity, Number semiLatusRectum) => new ConicSection(eccentricity, semiLatusRectum);

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Number, Number)(ConicSection self) => (self.Eccentricity, self.SemiLatusRectum);
        [MethodImpl(AggressiveInlining)] public static implicit operator ConicSection((Number, Number) value) => new(value.Item1, value.Item2);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Number eccentricity, out Number semiLatusRectum) { eccentricity = Eccentricity; semiLatusRectum = SemiLatusRectum;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(ConicSection other) => Eccentricity.Equals(other.Eccentricity) && SemiLatusRectum.Equals(other.SemiLatusRectum);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(ConicSection other) => !Eccentricity.Equals(other.Eccentricity) && SemiLatusRectum.Equals(other.SemiLatusRectum);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is ConicSection other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Eccentricity, SemiLatusRectum);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Eccentricity\" = {Eccentricity}, \"SemiLatusRectum\" = {SemiLatusRectum} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented concept functions and type functions
        [MethodImpl(AggressiveInlining)]  public Number GetRadius(Angle t) => t.ConicSection(this.SemiLatusRectum, this.Eccentricity);
        [MethodImpl(AggressiveInlining)]  public PolarCoordinate EvalPolar(Angle t) => (this.GetRadius(t), t);
        [MethodImpl(AggressiveInlining)]  public Vector2 Eval(Angle t) => this.EvalPolar(t);
        [MethodImpl(AggressiveInlining)]  public Vector2 Eval(Number t) => this.Eval(t.Turns);
        [MethodImpl(AggressiveInlining)]  public IArray<Vector2> Sample(Integer numPoints){
            var _var331 = this;
            return numPoints.LinearSpace.Map((x) => _var331.Eval(x));
        }

        [MethodImpl(AggressiveInlining)]  public PolyLine2D ToPolyLine2D(Integer numPoints) => (this.Sample(numPoints), this.Closed);
        [MethodImpl(AggressiveInlining)]  public Procedural<Number, TR> Combine<TR>(ConicSection b, System.Func<TR, TR, TR> f){
            var _var334 = b;
            {
                var _var333 = this;
                {
                    var _var332 = f;
                    return (x) => _var332.Invoke(_var333.Eval(x), _var334.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Vector2> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var336 = f;
            {
                var _var335 = this;
                return (x) => _var335.Eval(_var336.Invoke(x));
            }
        }

        public System.Func<Number, Vector2> Function { [MethodImpl(AggressiveInlining)] get {
            var _var337 = this;
            return (x) => _var337.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Number, Vector2> Compose(ConicSection b){
            var _var339 = this;
            {
                var _var338 = b;
                return (x) => _var338.Eval(_var339.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, TR> Combine<TR>(ConicSection b, System.Func<TR, TR, TR> f){
            var _var342 = b;
            {
                var _var341 = this;
                {
                    var _var340 = f;
                    return (x) => _var340.Invoke(_var341.Eval(x), _var342.Eval(x));
                }
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<TR, Number> MapDomain<T0, TR>(System.Func<T0, TR> f){
            var _var344 = f;
            {
                var _var343 = this;
                return (x) => _var343.Eval(_var344.Invoke(x));
            }
        }

        public System.Func<Vector2, Number> Function { [MethodImpl(AggressiveInlining)] get {
            var _var345 = this;
            return (x) => _var345.Eval(x);
        }
         } 
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, Number> Compose(ConicSection b){
            var _var347 = this;
            {
                var _var346 = b;
                return (x) => _var346.Eval(_var347.Eval(x));
            }
        }

        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Union(ConicSection b) => this.Combine(b, (a, b) => a.Max(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Intersection(ConicSection b) => this.Combine(b, (a, b) => a.Min(b));
        [MethodImpl(AggressiveInlining)]  public Procedural<Vector2, $TOut> Difference(ConicSection b) => this.Combine(b, (a, b) => a.Max(b.Negative));
        public Procedural<Vector2, Number> Inverse { [MethodImpl(AggressiveInlining)] get  => this.Map((x) => x.Negative); } 
        public Boolean Closed { [MethodImpl(AggressiveInlining)] get  => ((Boolean)false); } 

        // Unimplemented concept functions
        [MethodImpl(AggressiveInlining)]  public Number Distance(Vector2 p) => throw new NotImplementedException();
        [MethodImpl(AggressiveInlining)]  public Number Eval(Vector2 t) => throw new NotImplementedException();
    }
}
