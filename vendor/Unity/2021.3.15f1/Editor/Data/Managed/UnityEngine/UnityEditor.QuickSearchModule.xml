<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<doc>
  <members>
    <assembly>
      <name>UnityEditor.QuickSearchModule</name>
    </assembly>
    <member name="T:UnityEditor.Search.CustomObjectIndexerAttribute">
      <summary>
        <para>Allows a user to register a custom Indexing function for a specific type.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.CustomObjectIndexerAttribute.type">
      <summary>
        <para>Each time an object of a specific type is indexed, the registered function is called.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.CustomObjectIndexerAttribute.version">
      <summary>
        <para>Version of the custom indexer. Increment this number to have the indexer re-index the indexes.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.CustomObjectIndexerAttribute.#ctor(System.Type)">
      <summary>
        <para>Register a new Indexing function bound to the specific type.</para>
      </summary>
      <param name="type">Type of object to be indexed.</param>
    </member>
    <member name="T:UnityEditor.Search.CustomObjectIndexerTarget">
      <summary>
        <para>Represents a descriptor for the object that is about to be indexed. It stores a reference to the object itself as well as an already set up SerializedObject.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.CustomObjectIndexerTarget.documentIndex">
      <summary>
        <para>Document Index which owns the object to index.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.CustomObjectIndexerTarget.id">
      <summary>
        <para>Object Id. The object path for an asset or the GlobalObjectId for a scene object.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.CustomObjectIndexerTarget.serializedObject">
      <summary>
        <para>Serialized representation of the object to be indexed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.CustomObjectIndexerTarget.target">
      <summary>
        <para>Object to index.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.CustomObjectIndexerTarget.targetType">
      <summary>
        <para>Object type to index.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.DisplayMode">
      <summary>
        <para>Options for setting the display mode to use for a search view.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.DisplayMode.Grid">
      <summary>
        <para>Display as a grid of icons of various sizes.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.DisplayMode.List">
      <summary>
        <para>Display as a list view.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.DisplayMode.None">
      <summary>
        <para>Unspecified ISearchView display mode.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.DisplayMode.Table">
      <summary>
        <para>Display search results in a table.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.FetchPreviewOptions">
      <summary>
        <para>Options for the search provider on how the preview should be fetched.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.FetchPreviewOptions.Large">
      <summary>
        <para>Indicates that the preview resolution should be higher than 256x256.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.FetchPreviewOptions.None">
      <summary>
        <para>No options are defined.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.FetchPreviewOptions.Normal">
      <summary>
        <para>Indicates that the preview size should be around 128x128.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.FetchPreviewOptions.Preview2D">
      <summary>
        <para>Indicates that the search provider should generate a 2D preview.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.FetchPreviewOptions.Preview3D">
      <summary>
        <para>Indicates that the search provider should generate a 3D preview.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.FuzzySearch">
      <summary>
        <para>Provides a method to match query text using a fuzzy search algorithm.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.FuzzySearch.FuzzyMatch(System.String,System.String,System.Int64&amp;,System.Collections.Generic.List`1&lt;System.Int32&gt;)">
      <summary>
        <para>Performs a fuzzy search for a pattern on a string.</para>
      </summary>
      <param name="pattern">The pattern that the method is searching for in the string.</param>
      <param name="origin">The string the method is searching.</param>
      <param name="outScore">If there is a match, this parameter contains the match score. The higher the match score, the closer the pattern matched a part of the given string.</param>
      <param name="matches">List of indices in the string where the pattern was found.</param>
      <returns>
        <para>Returns true if a match was found.</para>
      </returns>
    </member>
    <member name="?:UnityEditor.Search.IFilterNode">
      <summary>
        <para>Interface representing a filter node.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IFilterNode.filterId">
      <summary>
        <para>The filter identifier.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IFilterNode.filterValue">
      <summary>
        <para>The filter value. This can be null or empty if the value has not been written yet.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IFilterNode.operatorId">
      <summary>
        <para>The operator identifier. This can be null or empty if the operator has not been written yet.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IFilterNode.paramValue">
      <summary>
        <para>The parameter value. This can be null or empty if the filter is not a filter function, or there is no parameter written yet.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.IndexingOptions">
      <summary>
        <para>Use Indexing options to specify the contents of your search index.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.IndexingOptions.All">
      <summary>
        <para>Apply all indexing options.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.IndexingOptions.Dependencies">
      <summary>
        <para>Include Asset dependencies in your index.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.IndexingOptions.Extended">
      <summary>
        <para>Include extended information in your index such as sub objects in Scene and Prefab Assets.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.IndexingOptions.Keep">
      <summary>
        <para>Use this option to save the created index as an Asset file.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.IndexingOptions.None">
      <summary>
        <para>Do not include additional indexing options.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.IndexingOptions.Properties">
      <summary>
        <para>Include Asset serialized properties in your index.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.IndexingOptions.Temporary">
      <summary>
        <para>Save the search index to a temporary folder that is not managed by Unity.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.IndexingOptions.Types">
      <summary>
        <para>Include additional types of information in your Asset index.</para>
      </summary>
    </member>
    <member name="?:UnityEditor.Search.INestedQueryNode">
      <summary>
        <para>Interface representing a nested query node.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.INestedQueryNode.associatedFilter">
      <summary>
        <para>If the nested query is part of a filter operation, this represents the filter identifier. Otherwise, this is null or empty.</para>
      </summary>
    </member>
    <member name="?:UnityEditor.Search.IQueryEngineFilter">
      <summary>
        <para>Interface for the Search.QueryEngine_1|QueryEngine filters.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IQueryEngineFilter.metaInfo">
      <summary>
        <para>Additional information specific to the filter.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IQueryEngineFilter.operators">
      <summary>
        <para>Collection of Search.QueryFilterOperator|QueryFilterOperators specific for the filter.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IQueryEngineFilter.overridesStringComparison">
      <summary>
        <para>Indicates if the filter overrides the global string comparison options.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IQueryEngineFilter.parameterType">
      <summary>
        <para>The type of the constant parameter passed to the filter, if used.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IQueryEngineFilter.regexToken">
      <summary>
        <para>The regular expression that matches the filter. Matches what precedes the operator in a filter (for example. "id" in "id&gt;=2").</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IQueryEngineFilter.stringComparison">
      <summary>
        <para>The string comparison options of the filter.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IQueryEngineFilter.supportedOperators">
      <summary>
        <para>List of supported operators.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IQueryEngineFilter.token">
      <summary>
        <para>The identifier of the filter. Typically what precedes the operator in a filter (for example, "id" in "id&gt;=2").</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IQueryEngineFilter.type">
      <summary>
        <para>The type of the data that is compared by the filter.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IQueryEngineFilter.usesParameter">
      <summary>
        <para>Indicates if the filter uses a parameter.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IQueryEngineFilter.usesRegularExpressionToken">
      <summary>
        <para>Indicates if the filter uses a regular expression token or not.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IQueryEngineFilter.usesResolver">
      <summary>
        <para>Indicates if the filter uses a resolver function.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.IQueryEngineFilter.AddOperator(System.String)">
      <summary>
        <para>Add a custom filter operator specific to the filter.</para>
      </summary>
      <param name="op">The operator identifier.</param>
      <returns>
        <para>The added, or existing, Search.QueryFilterOperator|QueryFilterOperator.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.IQueryEngineFilter.AddOrUpdateMetaInfo(System.String,System.String)">
      <summary>
        <para>Add or update additional information specific to the filter.</para>
      </summary>
      <param name="key">The key of the information.</param>
      <param name="value">The value of the information.</param>
      <returns>
        <para>The current filter.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.IQueryEngineFilter.AddTypeParser(System.Func`2&lt;System.String,UnityEditor.Search.ParseResult`1&lt;TFilterConstant&gt;&gt;)">
      <summary>
        <para>Add a type parser specific to the filter.</para>
      </summary>
      <param name="parser">Callback used to determine if a string can be converted into "TFilterConstant". Takes a string and returns a Search.ParseResult_1|ParseResult object. This contains the success flag, and the actual converted value if it succeeded.</param>
      <returns>
        <para>The current filter.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.IQueryEngineFilter.ClearMetaInfo">
      <summary>
        <para>Removes all additional information specific to the filter.</para>
      </summary>
      <returns>
        <para>The current filter.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.IQueryEngineFilter.RemoveMetaInfo(System.String)">
      <summary>
        <para>Remove information on the filter.</para>
      </summary>
      <param name="key">The key of the information.</param>
      <returns>
        <para>The current filter.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.IQueryEngineFilter.RemoveOperator(System.String)">
      <summary>
        <para>Remove a custom operator specific to the filter.</para>
      </summary>
      <param name="op">The operator identifier.</param>
      <returns>
        <para>The current filter.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.IQueryEngineFilter.SetNestedQueryTransformer(System.Func`2&lt;TNestedQueryData,TRhs&gt;)">
      <summary>
        <para>Sets the filter's nested query transformer function. This function takes the result of a nested query and extracts the necessary data to compare with the filter.</para>
      </summary>
      <param name="transformer">The transformer function.</param>
    </member>
    <member name="?:UnityEditor.Search.IQueryHandler_2">
      <summary>
        <para>Interface for query handlers.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.IQueryHandler_2.Eval(TData)">
      <summary>
        <para>Implement this function to evaluate the query on a single element.</para>
      </summary>
      <param name="element">A single object to be tested.</param>
      <returns>
        <para>True if the object passes the query, false otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.IQueryHandler_2.Eval(TPayload)">
      <summary>
        <para>Implement this function to evaluate the query on a payload.</para>
      </summary>
      <param name="payload">The input data of the query.</param>
      <returns>
        <para>An enumerable of type TData.</para>
      </returns>
    </member>
    <member name="?:UnityEditor.Search.IQueryHandlerFactory_3">
      <summary>
        <para>Interface for query handler factories.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.IQueryHandlerFactory_3.Create(UnityEditor.Search.QueryGraph,System.Collections.Generic.ICollection`1&lt;UnityEditor.Search.QueryError&gt;)">
      <summary>
        <para>Implement this function to create a new query handler for a specific query graph.</para>
      </summary>
      <param name="graph">A graph representing a query.</param>
      <param name="errors">A collection of errors. Use this to report errors when needed.</param>
      <returns>
        <para>An IQueryHandler.</para>
      </returns>
    </member>
    <member name="?:UnityEditor.Search.IQueryNode">
      <summary>
        <para>Interface representing a query node.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IQueryNode.children">
      <summary>
        <para>The node's children. Can be null.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IQueryNode.identifier">
      <summary>
        <para>A string representing this node and its children.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IQueryNode.leaf">
      <summary>
        <para>True if this node is a leaf. A leaf doesn't have any children.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IQueryNode.parent">
      <summary>
        <para>Parent of this node. Null if this node is the root.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IQueryNode.skipped">
      <summary>
        <para>True if this node is skipped during evaluation. A node can be skipped if the QueryEngine was configured to skip unsupported nodes instead of generating errors.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IQueryNode.token">
      <summary>
        <para>The token used to build this node.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.IQueryNode.type">
      <summary>
        <para>The node's type.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.IQueryNode.QueryHashCode">
      <summary>
        <para>Returns a hashcode for this node. Multiple nodes can have the same hashcode if they have the same identifier.</para>
      </summary>
      <returns>
        <para>An integer representing the hashcode.</para>
      </returns>
    </member>
    <member name="?:UnityEditor.Search.ISearchList">
      <summary>
        <para>A search list represents a collection of search results that is filled.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ISearchList.context">
      <summary>
        <para>Any valid search context that is used to track async search requests. It can be null.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ISearchList.pending">
      <summary>
        <para>Indicates if the search request is still running and might return more results asynchronously.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.ISearchList.AddItems(System.Collections.Generic.IEnumerable`1&lt;UnityEditor.Search.SearchItem&gt;)">
      <summary>
        <para>Add new items to the search list.</para>
      </summary>
      <param name="items">List of items to be added.</param>
    </member>
    <member name="M:UnityEditor.Search.ISearchList.Fetch">
      <summary>
        <para>Yields search items until the search query is finished.</para>
      </summary>
      <returns>
        <para>List of search items. Items can be null and must be discarded.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.ISearchList.GetRange(System.Int32,System.Int32)">
      <summary>
        <para>Return a subset of items.</para>
      </summary>
      <param name="skipCount">Number of rows to skip at the start of a query.</param>
      <param name="count">Number of items to get from the beginning of the range.</param>
      <returns>
        <para>Search items in the specified range.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.ISearchList.InsertRange(System.Int32,System.Collections.Generic.IEnumerable`1&lt;UnityEditor.Search.SearchItem&gt;)">
      <summary>
        <para>Insert new search items in the current list.</para>
      </summary>
      <param name="index">Index where the items should be inserted.</param>
      <param name="items">Items to be inserted.</param>
    </member>
    <member name="M:UnityEditor.Search.ISearchList.Select(System.Func`2&lt;UnityEditor.Search.SearchItem,TResult&gt;)">
      <summary>
        <para>Enumerate search items and transform them while they are being fetched.</para>
      </summary>
      <param name="selector">Function used to select what gets returned in the new enumerable list.</param>
      <returns>
        <para>New enumerable list.</para>
      </returns>
    </member>
    <member name="?:UnityEditor.Search.ISearchNode">
      <summary>
        <para>Interface representing a query node.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ISearchNode.exact">
      <summary>
        <para>True if the word or text should match exactly, false if it is a "contains" operation.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ISearchNode.searchValue">
      <summary>
        <para>Word or text used for the search.</para>
      </summary>
    </member>
    <member name="?:UnityEditor.Search.ISearchView">
      <summary>
        <para>Search view interface used by the search context to execute UI operations.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ISearchView.context">
      <summary>
        <para>Returns the current view search context.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ISearchView.displayMode">
      <summary>
        <para>Indicates how the data is displayed in the UI.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ISearchView.filterCallback">
      <summary>
        <para>Callback used to filter items shown in the list.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ISearchView.itemIconSize">
      <summary>
        <para>Defines the size of items in the search view.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ISearchView.multiselect">
      <summary>
        <para>Allows multi-selection of items in the list/grid of items. If false, a user can only select a single item.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ISearchView.position">
      <summary>
        <para>Returns the absolute position of the Search window.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ISearchView.results">
      <summary>
        <para>Returns the list of all search results.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ISearchView.selectCallback">
      <summary>
        <para>Callback used to override a default Search behavior.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ISearchView.selection">
      <summary>
        <para>Returns the selected items in the view.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ISearchView.trackingCallback">
      <summary>
        <para>Callback used to override the tracking behavior.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.ISearchView.AddSelection(System.Int32[])">
      <summary>
        <para>Adds new items to the current selection.</para>
      </summary>
      <param name="selection">Array of item indices to add to selection.</param>
    </member>
    <member name="M:UnityEditor.Search.ISearchView.Close">
      <summary>
        <para>Closes the search view.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.ISearchView.ExecuteAction(UnityEditor.Search.SearchAction,UnityEditor.Search.SearchItem[],System.Boolean)">
      <summary>
        <para>Executes a Search action on a given list of items.</para>
      </summary>
      <param name="action">The search action to execute.</param>
      <param name="items">The items to search.</param>
      <param name="endSearch">If true, executing this action closes the Search window.</param>
    </member>
    <member name="M:UnityEditor.Search.ISearchView.ExecuteSelection">
      <summary>
        <para>Execute the default action of the active selection.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.ISearchView.Focus">
      <summary>
        <para>Make sure the Search window is now selected to receive input from a user.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.ISearchView.FocusSearch">
      <summary>
        <para>Focus the search text field control.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.ISearchView.Refresh(UnityEditor.Search.RefreshFlags)">
      <summary>
        <para>Triggers a refresh of the search view and refetches all the search items from enabled search providers.</para>
      </summary>
      <param name="reason">The refresh flags give some additional context and reasons why the view needs to be updated.</param>
    </member>
    <member name="M:UnityEditor.Search.ISearchView.Repaint">
      <summary>
        <para>Requests the search view to repaint itself.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.ISearchView.SelectSearch">
      <summary>
        <para>Puts focus in the SearchView text field AND selects all the text inside the text field (if any).</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.ISearchView.SetSearchText(System.String,UnityEditor.Search.TextCursorPlacement)">
      <summary>
        <para>Sets the search query text.</para>
      </summary>
      <param name="searchText">Text displayed in the search view.</param>
      <param name="moveCursor">Position of the cursor after setting the search text.</param>
      <param name="cursorInsertPosition"></param>
    </member>
    <member name="M:UnityEditor.Search.ISearchView.SetSearchText(System.String,UnityEditor.Search.TextCursorPlacement,System.Int32)">
      <summary>
        <para>Sets the search query text.</para>
      </summary>
      <param name="searchText">Text displayed in the search view.</param>
      <param name="moveCursor">Position of the cursor after setting the search text.</param>
      <param name="cursorInsertPosition"></param>
    </member>
    <member name="M:UnityEditor.Search.ISearchView.SetSelection(System.Int32[])">
      <summary>
        <para>Updates the search view with a new selection.</para>
      </summary>
      <param name="selection">Array of item indices to select.</param>
    </member>
    <member name="M:UnityEditor.Search.ISearchView.ShowItemContextualMenu(UnityEditor.Search.SearchItem,UnityEngine.Rect)">
      <summary>
        <para>Shows a contextual menu for the specified item.</para>
      </summary>
      <param name="item">Item affected by the contextual menu.</param>
      <param name="contextualActionPosition">The position that a menu should be drawn on screen (generally item position).</param>
    </member>
    <member name="T:UnityEditor.Search.ObjectIndexer">
      <summary>
        <para>A specialized Search.SearchIndexer which provides methods to index a UnityEngine.Object|Unity Object from custom indexers.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.ObjectIndexer.IndexNumber(System.Int32,System.String,System.Double)">
      <summary>
        <para>Adds a key-number value pair to the index. The key won't be added with variations.</para>
      </summary>
      <param name="documentIndex">Document where the indexed value was found.</param>
      <param name="name">Key used to retrieve the value.</param>
      <param name="number">Number value to store in the index.</param>
    </member>
    <member name="M:UnityEditor.Search.ObjectIndexer.IndexProperty(System.Int32,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>
        <para>Adds a property value to the index. A property is specified with a key and a string value. The value will be stored with multiple variations.</para>
      </summary>
      <param name="documentIndex">Document where the indexed word was found.</param>
      <param name="name">Key used to retrieve the value.</param>
      <param name="value">Value to add to the index.</param>
      <param name="saveKeyword">Define if we store this key in the keyword registry of the index.</param>
      <param name="exact">If exact is true, only the exact match of the value will be stored in the index (not the variations).</param>
    </member>
    <member name="M:UnityEditor.Search.ObjectIndexer.IndexPropertyComponents(System.Int32,System.String,System.String)">
      <summary>
        <para>Indexes multiple variations of a property value.</para>
      </summary>
      <param name="documentIndex">Document handle for the indexed property.</param>
      <param name="name">Key used to retrieve the value.</param>
      <param name="value">Value to add to the index.</param>
    </member>
    <member name="M:UnityEditor.Search.ObjectIndexer.IndexWord(System.Int32,System.String&amp;,System.Boolean,System.Int32)">
      <summary>
        <para>Adds a new word coming from a specific document to the index. The word will be added with multiple variations allowing partial search.</para>
      </summary>
      <param name="documentIndex">Document where the indexed word was found.</param>
      <param name="word">Word to add to the index.</param>
      <param name="exact">If true, we will also store an exact match entry for this word.</param>
      <param name="scoreModifier">Modified to apply to the base match score for a specific word.</param>
    </member>
    <member name="M:UnityEditor.Search.ObjectIndexer.IndexWord(System.Int32,System.String&amp;,System.Int32,System.Boolean,System.Int32)">
      <summary>
        <para>The word will be added with a maximum of variation. This can be used to save some space for very large words.</para>
      </summary>
      <param name="documentIndex">Document where the indexed word was found.</param>
      <param name="word">Word to add to the index.</param>
      <param name="maxVariations">Maximum number of variations to compute. Cannot be higher than the length of the word.</param>
      <param name="exact">If true, the indexer will also store an exact match entry for this word.</param>
      <param name="scoreModifier">Modified to apply to the base match score for a specific word.</param>
    </member>
    <member name="M:UnityEditor.Search.ObjectIndexer.IndexWordComponents(System.Int32,System.String&amp;)">
      <summary>
        <para>Splits a word into multiple variations.</para>
      </summary>
      <param name="documentIndex">Document where the indexed word was found.</param>
      <param name="word">Word to add to the index.</param>
    </member>
    <member name="T:UnityEditor.Search.ParseResult`1">
      <summary>
        <para>A ParseResult represents the result of a parsing operation.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.ParseResult_1.none">
      <summary>
        <para>Default value when no ParsetResult is available.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.ParseResult_1.parsedValue">
      <summary>
        <para>The parsing result.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.ParseResult_1.success">
      <summary>
        <para>Flag indicating if the parsing succeeded or not.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.ParseResult_1.#ctor(System.Boolean,T)">
      <summary>
        <para>Create a ParseResult.</para>
      </summary>
      <param name="success">Flag indicating if the parsing succeeded or not.</param>
      <param name="value">The parsing result.</param>
    </member>
    <member name="T:UnityEditor.Search.Providers.SceneQueryEngineFilterAttribute">
      <summary>
        <para>Custom attribute is used to customize the search engine used by the scene search provider.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.Providers.SceneQueryEngineFilterAttribute.#ctor(System.String,System.String[])">
      <summary>
        <para>Create a filter with the corresponding token and supported operators.</para>
      </summary>
      <param name="token">The identifier of the filter. Typically what precedes the operator in a filter (i.e. "id" in "id&gt;=2").</param>
      <param name="supportedOperators">List of supported operator tokens. Null for all operators.</param>
      <param name="options">String comparison options.</param>
      <param name="paramTransformerFunction">Name of the parameter transformer function to use with this filter. Tag the parameter transformer function with the appropriate ParameterTransformer attribute. See Search.Providers.SceneQueryEngineParameterTransformerAttribute|SceneQueryEngineParameterTransformer for more information.</param>
    </member>
    <member name="M:UnityEditor.Search.Providers.SceneQueryEngineFilterAttribute.#ctor(System.String,System.StringComparison,System.String[])">
      <summary>
        <para>Create a filter with the corresponding token and supported operators.</para>
      </summary>
      <param name="token">The identifier of the filter. Typically what precedes the operator in a filter (i.e. "id" in "id&gt;=2").</param>
      <param name="supportedOperators">List of supported operator tokens. Null for all operators.</param>
      <param name="options">String comparison options.</param>
      <param name="paramTransformerFunction">Name of the parameter transformer function to use with this filter. Tag the parameter transformer function with the appropriate ParameterTransformer attribute. See Search.Providers.SceneQueryEngineParameterTransformerAttribute|SceneQueryEngineParameterTransformer for more information.</param>
    </member>
    <member name="M:UnityEditor.Search.Providers.SceneQueryEngineFilterAttribute.#ctor(System.String,System.String,System.String[])">
      <summary>
        <para>Create a filter with the corresponding token and supported operators.</para>
      </summary>
      <param name="token">The identifier of the filter. Typically what precedes the operator in a filter (i.e. "id" in "id&gt;=2").</param>
      <param name="supportedOperators">List of supported operator tokens. Null for all operators.</param>
      <param name="options">String comparison options.</param>
      <param name="paramTransformerFunction">Name of the parameter transformer function to use with this filter. Tag the parameter transformer function with the appropriate ParameterTransformer attribute. See Search.Providers.SceneQueryEngineParameterTransformerAttribute|SceneQueryEngineParameterTransformer for more information.</param>
    </member>
    <member name="M:UnityEditor.Search.Providers.SceneQueryEngineFilterAttribute.#ctor(System.String,System.String,System.StringComparison,System.String[])">
      <summary>
        <para>Create a filter with the corresponding token and supported operators.</para>
      </summary>
      <param name="token">The identifier of the filter. Typically what precedes the operator in a filter (i.e. "id" in "id&gt;=2").</param>
      <param name="supportedOperators">List of supported operator tokens. Null for all operators.</param>
      <param name="options">String comparison options.</param>
      <param name="paramTransformerFunction">Name of the parameter transformer function to use with this filter. Tag the parameter transformer function with the appropriate ParameterTransformer attribute. See Search.Providers.SceneQueryEngineParameterTransformerAttribute|SceneQueryEngineParameterTransformer for more information.</param>
    </member>
    <member name="T:UnityEditor.Search.Providers.SceneQueryEngineParameterTransformerAttribute">
      <summary>
        <para>Attribute class that defines a custom parameter transformer function applied for a query running in a scene provider defined by a scene custom filter using Search.Providers.SceneQueryEngineFilterAttribute.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.Query`1">
      <summary>
        <para>Provides methods to define an operation that can be used to filter a data set.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.Query_1.returnPayloadIfEmpty">
      <summary>
        <para>Boolean. Indicates if the original payload should be returned when the query is empty.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.Query_1.Apply(System.Collections.Generic.IEnumerable`1&lt;T&gt;)">
      <summary>
        <para>Applies the filtering on an IEnumerable data set.</para>
      </summary>
      <param name="data">The data to filter.</param>
      <returns>
        <para>A filtered IEnumerable.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.Query_1.Test(T)">
      <summary>
        <para>Tests the query on a single object. Returns true if the test passes.</para>
      </summary>
      <param name="element">A single test object.</param>
      <returns>
        <para>True if the object passes the query, returns false otherwise.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.Search.Query`2">
      <summary>
        <para>Provides methods to define an operation that can be used to filter a data set.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.Query_2.errors">
      <summary>
        <para>A list of QueryErrors.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.Query_2.text">
      <summary>
        <para>The text that generated the query.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.Query_2.tokens">
      <summary>
        <para>The list of tokens found in the query.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.Query_2.valid">
      <summary>
        <para>Indicates if the query is valid or not.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.Query_2.Apply(TPayload)">
      <summary>
        <para>Applies the filtering on a payload.</para>
      </summary>
      <param name="payload">The data to filter.</param>
      <returns>
        <para>A filtered IEnumerable.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.Query_2.GetNodeAtPosition(System.Int32)">
      <summary>
        <para>Get the query node located at the specified index position in the query.</para>
      </summary>
      <param name="position">The position of the query node in the text.</param>
      <returns>
        <para>An IQueryNode.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.Query_2.Optimize(System.Boolean,System.Boolean)">
      <summary>
        <para>Optimizes the query by optimizing the underlying filtering graph.</para>
      </summary>
      <param name="propagateNotToLeaves">Propagate "Not" operations to leaves, so only leaves can have "Not" operations as parents.</param>
      <param name="swapNotToRightHandSide">Swaps "Not" operations to the right-hand side of combining operations (i.e. "And", "Or"). Useful if a "Not" operation is slow.</param>
      <param name="options">Optimization options.</param>
    </member>
    <member name="M:UnityEditor.Search.Query_2.Optimize(UnityEditor.Search.QueryGraphOptimizationOptions)">
      <summary>
        <para>Optimizes the query by optimizing the underlying filtering graph.</para>
      </summary>
      <param name="propagateNotToLeaves">Propagate "Not" operations to leaves, so only leaves can have "Not" operations as parents.</param>
      <param name="swapNotToRightHandSide">Swaps "Not" operations to the right-hand side of combining operations (i.e. "And", "Or"). Useful if a "Not" operation is slow.</param>
      <param name="options">Optimization options.</param>
    </member>
    <member name="T:UnityEditor.Search.QueryEngine">
      <summary>
        <para>A QueryEngine defines how to build a query from an input string.
It can be customized to support custom filters and operators.
Default query engine of type object.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine.#ctor">
      <summary>
        <para>Construct a new QueryEngine.</para>
      </summary>
      <param name="validateFilters">Indicates if the engine must validate filters when parsing the query.</param>
      <param name="validationOptions">The validation options to use in this engine.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine.#ctor(System.Boolean)">
      <summary>
        <para>Construct a new QueryEngine.</para>
      </summary>
      <param name="validateFilters">Indicates if the engine must validate filters when parsing the query.</param>
      <param name="validationOptions">The validation options to use in this engine.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine.#ctor(UnityEditor.Search.QueryValidationOptions)">
      <summary>
        <para>Construct a new QueryEngine.</para>
      </summary>
      <param name="validateFilters">Indicates if the engine must validate filters when parsing the query.</param>
      <param name="validationOptions">The validation options to use in this engine.</param>
    </member>
    <member name="T:UnityEditor.Search.QueryEngine`1">
      <summary>
        <para>A QueryEngine defines how to build a query from an input string.
It can be customized to support custom filters and operators.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryEngine_1.globalStringComparison">
      <summary>
        <para>Global string comparison options for word matching and filter handling (if not overridden).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryEngine_1.searchDataCallback">
      <summary>
        <para>The callback used to get the data to match to the search words.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryEngine_1.searchDataOverridesStringComparison">
      <summary>
        <para>Indicates if word/phrase matching uses searchDataStringComparison or not.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryEngine_1.searchDataStringComparison">
      <summary>
        <para>String comparison options for word/phrase matching.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryEngine_1.searchWordMatcher">
      <summary>
        <para>The function used to match the search data against the search words.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryEngine_1.skipIncompleteFilters">
      <summary>
        <para>Boolean. Indicates if incomplete filters should be skipped.
If true, filters are skipped. If false and Search.QueryEngine_1.validateFilters|validateFilters is true, incomplete filters will generate errors when parsed.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryEngine_1.skipUnknownFilters">
      <summary>
        <para>Boolean. Indicates if unknown filters should be skipped.
If true, unknown filters are skipped. If false and Search.QueryEngine_1.validateFilters|validateFilters is true, unknown filters will generate errors if no default filter handler is provided.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryEngine_1.validateFilters">
      <summary>
        <para>Get or set if the engine must validate filters when parsing the query. Defaults to true.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddFilter(System.String,System.Func`2&lt;TData,TFilter&gt;,System.String[])">
      <summary>
        <para>Adds a new custom filter.</para>
      </summary>
      <param name="token">The identifier of the filter. Typically what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="getDataFunc">Callback used to get the object that is used in the filter. Takes an object of type TData and returns an object of type TFilter.</param>
      <param name="stringComparison">String comparison option.</param>
      <param name="supportedOperatorType">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddFilter(System.String,System.Func`2&lt;TData,TFilter&gt;,System.StringComparison,System.String[])">
      <summary>
        <para>Adds a new custom filter.</para>
      </summary>
      <param name="token">The identifier of the filter. Typically what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="getDataFunc">Callback used to get the object that is used in the filter. Takes an object of type TData and returns an object of type TFilter.</param>
      <param name="stringComparison">String comparison option.</param>
      <param name="supportedOperatorType">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddFilter(System.String,System.Func`3&lt;TData,TParam,TFilter&gt;,System.String[])">
      <summary>
        <para>Adds a new custom filter with parameters.</para>
      </summary>
      <param name="token">The identifier of the filter. Typically what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="getDataFunc">Callback used to get the object that is used in the filter. Takes an object of type TData and TParam, and returns an object of type TFilter.</param>
      <param name="parameterTransformer">Callback used to convert a string to type TParam. Used when parsing the query to convert what is passed to the function into the correct format.</param>
      <param name="stringComparison">String comparison option.</param>
      <param name="supportedOperatorType">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddFilter(System.String,System.Func`3&lt;TData,TParam,TFilter&gt;,System.StringComparison,System.String[])">
      <summary>
        <para>Adds a new custom filter with parameters.</para>
      </summary>
      <param name="token">The identifier of the filter. Typically what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="getDataFunc">Callback used to get the object that is used in the filter. Takes an object of type TData and TParam, and returns an object of type TFilter.</param>
      <param name="parameterTransformer">Callback used to convert a string to type TParam. Used when parsing the query to convert what is passed to the function into the correct format.</param>
      <param name="stringComparison">String comparison option.</param>
      <param name="supportedOperatorType">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddFilter(System.String,System.Func`3&lt;TData,TParam,TFilter&gt;,System.Func`2&lt;System.String,TParam&gt;,System.String[])">
      <summary>
        <para>Adds a new custom filter with parameters.</para>
      </summary>
      <param name="token">The identifier of the filter. Typically what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="getDataFunc">Callback used to get the object that is used in the filter. Takes an object of type TData and TParam, and returns an object of type TFilter.</param>
      <param name="parameterTransformer">Callback used to convert a string to type TParam. Used when parsing the query to convert what is passed to the function into the correct format.</param>
      <param name="stringComparison">String comparison option.</param>
      <param name="supportedOperatorType">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddFilter(System.String,System.Func`3&lt;TData,TParam,TFilter&gt;,System.Func`2&lt;System.String,TParam&gt;,System.StringComparison,System.String[])">
      <summary>
        <para>Adds a new custom filter with parameters.</para>
      </summary>
      <param name="token">The identifier of the filter. Typically what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="getDataFunc">Callback used to get the object that is used in the filter. Takes an object of type TData and TParam, and returns an object of type TFilter.</param>
      <param name="parameterTransformer">Callback used to convert a string to type TParam. Used when parsing the query to convert what is passed to the function into the correct format.</param>
      <param name="stringComparison">String comparison option.</param>
      <param name="supportedOperatorType">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddFilter(System.String,System.Func`4&lt;TData,System.String,TFilter,System.Boolean&gt;,System.String[])">
      <summary>
        <para>Adds a new custom filter with a complete resolver.</para>
      </summary>
      <param name="token">The identifier of the filter. Typically what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="filterResolver">Callback used to handle any operators for this filter. Takes an object of type TData, the operator token and the filter value, and returns a boolean indicating if the filter passed or not.</param>
      <param name="supportedOperatorType">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddFilter(System.String,System.Func`5&lt;TData,TParam,System.String,TFilter,System.Boolean&gt;,System.String[])">
      <summary>
        <para>Adds a new custom filter with parameters and a complete resolver.</para>
      </summary>
      <param name="token">The identifier of the filter. Typically what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="filterResolver">Callback used to handle any operators for this filter. Takes an object of type TData, an object of type TParam, the operator token and the filter value, and returns a boolean indicating if the filter passed or not.</param>
      <param name="parameterTransformer">Callback used to convert a string to type TParam. Used when parsing the query to convert what is passed to the function into the correct format.</param>
      <param name="supportedOperatorType">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddFilter(System.String,System.Func`5&lt;TData,TParam,System.String,TFilter,System.Boolean&gt;,System.Func`2&lt;System.String,TParam&gt;,System.String[])">
      <summary>
        <para>Adds a new custom filter with parameters and a complete resolver.</para>
      </summary>
      <param name="token">The identifier of the filter. Typically what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="filterResolver">Callback used to handle any operators for this filter. Takes an object of type TData, an object of type TParam, the operator token and the filter value, and returns a boolean indicating if the filter passed or not.</param>
      <param name="parameterTransformer">Callback used to convert a string to type TParam. Used when parsing the query to convert what is passed to the function into the correct format.</param>
      <param name="supportedOperatorType">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddFilter(System.Text.RegularExpressions.Regex,System.Func`3&lt;TData,System.String,TFilter&gt;,System.String[])">
      <summary>
        <para>Adds a new custom filter with a regular expression.</para>
      </summary>
      <param name="token">The regular expression that matches the filter. Matches what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="getDataFunc">Callback used to get the object that is used in the filter. Takes an object of type TData, a string representing the actual filter name that was matched and returns an object of type TFilter.</param>
      <param name="supportedOperatorType">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
      <param name="stringComparison">String comparison option.</param>
      <returns>
        <para>The new filter.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddFilter(System.Text.RegularExpressions.Regex,System.Func`3&lt;TData,System.String,TFilter&gt;,System.StringComparison,System.String[])">
      <summary>
        <para>Adds a new custom filter with a regular expression.</para>
      </summary>
      <param name="token">The regular expression that matches the filter. Matches what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="getDataFunc">Callback used to get the object that is used in the filter. Takes an object of type TData, a string representing the actual filter name that was matched and returns an object of type TFilter.</param>
      <param name="supportedOperatorType">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
      <param name="stringComparison">String comparison option.</param>
      <returns>
        <para>The new filter.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddFilter(System.Text.RegularExpressions.Regex,System.Func`4&lt;TData,System.String,TParam,TFilter&gt;,System.String[])">
      <summary>
        <para>Adds a new custom filter with a regular expression and parameters.</para>
      </summary>
      <param name="token">The regular expression that matches the filter. Matches what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="getDataFunc">Callback used to get the object that is used in the filter. Takes an object of type TData, a string representing the actual filter name that was matched, an object of type TParam, and returns an object of type TFilter.</param>
      <param name="supportedOperatorType">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
      <param name="stringComparison">String comparison option.</param>
      <param name="parameterTransformer">Callback used to convert a string to type TParam. Used when parsing the query to convert what is passed to the function into the correct format.</param>
      <returns>
        <para>The new filter.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddFilter(System.Text.RegularExpressions.Regex,System.Func`4&lt;TData,System.String,TParam,TFilter&gt;,System.StringComparison,System.String[])">
      <summary>
        <para>Adds a new custom filter with a regular expression and parameters.</para>
      </summary>
      <param name="token">The regular expression that matches the filter. Matches what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="getDataFunc">Callback used to get the object that is used in the filter. Takes an object of type TData, a string representing the actual filter name that was matched, an object of type TParam, and returns an object of type TFilter.</param>
      <param name="supportedOperatorType">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
      <param name="stringComparison">String comparison option.</param>
      <param name="parameterTransformer">Callback used to convert a string to type TParam. Used when parsing the query to convert what is passed to the function into the correct format.</param>
      <returns>
        <para>The new filter.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddFilter(System.Text.RegularExpressions.Regex,System.Func`4&lt;TData,System.String,TParam,TFilter&gt;,System.Func`2&lt;System.String,TParam&gt;,System.String[])">
      <summary>
        <para>Adds a new custom filter with a regular expression and parameters.</para>
      </summary>
      <param name="token">The regular expression that matches the filter. Matches what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="getDataFunc">Callback used to get the object that is used in the filter. Takes an object of type TData, a string representing the actual filter name that was matched, an object of type TParam, and returns an object of type TFilter.</param>
      <param name="supportedOperatorType">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
      <param name="stringComparison">String comparison option.</param>
      <param name="parameterTransformer">Callback used to convert a string to type TParam. Used when parsing the query to convert what is passed to the function into the correct format.</param>
      <returns>
        <para>The new filter.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddFilter(System.Text.RegularExpressions.Regex,System.Func`4&lt;TData,System.String,TParam,TFilter&gt;,System.Func`2&lt;System.String,TParam&gt;,System.StringComparison,System.String[])">
      <summary>
        <para>Adds a new custom filter with a regular expression and parameters.</para>
      </summary>
      <param name="token">The regular expression that matches the filter. Matches what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="getDataFunc">Callback used to get the object that is used in the filter. Takes an object of type TData, a string representing the actual filter name that was matched, an object of type TParam, and returns an object of type TFilter.</param>
      <param name="supportedOperatorType">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
      <param name="stringComparison">String comparison option.</param>
      <param name="parameterTransformer">Callback used to convert a string to type TParam. Used when parsing the query to convert what is passed to the function into the correct format.</param>
      <returns>
        <para>The new filter.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddFilter(System.Text.RegularExpressions.Regex,System.Func`5&lt;TData,System.String,System.String,TFilter,System.Boolean&gt;,System.String[])">
      <summary>
        <para>Adds a new custom filter with a regular expression and a complete resolver.</para>
      </summary>
      <param name="token">The regular expression that matches the filter. Matches what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="filterResolver">Callback used to handle any operators for this filter. Takes an object of type TData, a string representing the actual filter name that was matched, the operator token and the filter value, and returns a boolean indicating if the filter passed or not.</param>
      <param name="supportedOperatorType">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
      <returns>
        <para>The new filter.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddFilter(System.Text.RegularExpressions.Regex,System.Func`6&lt;TData,System.String,TParam,System.String,TFilter,System.Boolean&gt;,System.String[])">
      <summary>
        <para>Adds a new custom filter with a regular expression, parameters and a complete resolver.</para>
      </summary>
      <param name="token">The regular expression that matches the filter. Matches what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="filterResolver">Callback used to handle any operators for this filter. Takes an object of type TData, a string representing the actual filter name that was matched, an object of type TParam, the operator token and the filter value, and returns a boolean indicating if the filter passed or not.</param>
      <param name="supportedOperatorType">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
      <param name="parameterTransformer">Callback used to convert a string to type TParam. Used when parsing the query to convert what is passed to the function into the correct format.</param>
      <returns>
        <para>The new filter.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddFilter(System.Text.RegularExpressions.Regex,System.Func`6&lt;TData,System.String,TParam,System.String,TFilter,System.Boolean&gt;,System.Func`2&lt;System.String,TParam&gt;,System.String[])">
      <summary>
        <para>Adds a new custom filter with a regular expression, parameters and a complete resolver.</para>
      </summary>
      <param name="token">The regular expression that matches the filter. Matches what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="filterResolver">Callback used to handle any operators for this filter. Takes an object of type TData, a string representing the actual filter name that was matched, an object of type TParam, the operator token and the filter value, and returns a boolean indicating if the filter passed or not.</param>
      <param name="supportedOperatorType">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
      <param name="parameterTransformer">Callback used to convert a string to type TParam. Used when parsing the query to convert what is passed to the function into the correct format.</param>
      <returns>
        <para>The new filter.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddFiltersFromAttribute">
      <summary>
        <para>Adds all custom filters that are identified with the method attribute TFilterAttribute.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddNestedQueryAggregator(System.String,System.Func`2&lt;System.Collections.Generic.IEnumerable`1&lt;TNestedQueryData&gt;,System.Collections.Generic.IEnumerable`1&lt;TNestedQueryData&gt;&gt;)">
      <summary>
        <para>Adds a new nested query aggregator. An aggregator is an operation that can be applied on a nested query to aggregate the results of the nested query according to certain criteria.</para>
      </summary>
      <param name="token">Name of the aggregator used when typing the query. This name is converted to lowercase when parsing the query to speed up the process.</param>
      <param name="aggregator">Aggregator function. Takes the results of the nested query, and returns an aggregate that contains any number of items.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddOperator(System.String)">
      <summary>
        <para>Adds a custom filter operator.</para>
      </summary>
      <param name="op">The operator identifier.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddOperatorHandler(System.String,System.Func`3&lt;TFilterVariable,TFilterConstant,System.Boolean&gt;)">
      <summary>
        <para>Adds a custom filter operator handler.</para>
      </summary>
      <param name="op">The filter operator.</param>
      <param name="handler">Callback to handle the operation. Takes a TFilterVariable (the value returned by the filter handler, it will vary for each element), a TFilterConstant (right-hand side value of the operator, which is constant), and a StringComparison option and returns a boolean indicating if the filter passes or not.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddOperatorHandler(System.String,System.Func`4&lt;TFilterVariable,TFilterConstant,System.StringComparison,System.Boolean&gt;)">
      <summary>
        <para>Adds a custom filter operator handler.</para>
      </summary>
      <param name="op">The filter operator.</param>
      <param name="handler">Callback to handle the operation. Takes a TFilterVariable (the value returned by the filter handler, it will vary for each element), a TFilterConstant (right-hand side value of the operator, which is constant), and a StringComparison option and returns a boolean indicating if the filter passes or not.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.AddTypeParser(System.Func`2&lt;System.String,UnityEditor.Search.ParseResult`1&lt;TFilterConstant&gt;&gt;)">
      <summary>
        <para>Adds a type parser that parses a string and returns a custom type. Used by custom operator handlers (see Search.QueryEngine_1.AddOperatorHandler|AddOperatorHandler).</para>
      </summary>
      <param name="parser">Callback used to determine if a string can be converted into TFilterConstant. Takes a string and returns a ParseResult object. This contains the success flag, and the converted value if it succeeds.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.ClearFilters">
      <summary>
        <para>Removes all filters that were added on the Search.QueryEngine_1|QueryEngine.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.#ctor">
      <summary>
        <para>Constructs a new QueryEngine.</para>
      </summary>
      <param name="validateFilters">Indicates if the engine must validate filters when parsing the query.</param>
      <param name="validationOptions">The validation options to use in this engine.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.#ctor(System.Boolean)">
      <summary>
        <para>Constructs a new QueryEngine.</para>
      </summary>
      <param name="validateFilters">Indicates if the engine must validate filters when parsing the query.</param>
      <param name="validationOptions">The validation options to use in this engine.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.#ctor(UnityEditor.Search.QueryValidationOptions)">
      <summary>
        <para>Constructs a new QueryEngine.</para>
      </summary>
      <param name="validateFilters">Indicates if the engine must validate filters when parsing the query.</param>
      <param name="validationOptions">The validation options to use in this engine.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.GetAllFilters">
      <summary>
        <para>Get all filters added on this Search.QueryEngine_1|QueryEngine.</para>
      </summary>
      <returns>
        <para>An enumerable of Search.IQueryEngineFilter|IQueryEngineFilter.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.GetOperator(System.String)">
      <summary>
        <para>Get a custom operator added on the Search.QueryEngine_1|QueryEngine.</para>
      </summary>
      <param name="op">The operator identifier.</param>
      <returns>
        <para>The global Search.QueryFilterOperator|QueryFilterOperator.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.Parse(System.String,System.Boolean)">
      <summary>
        <para>Parses a query string into a Query operation. This Query operation can then be used to filter any data set of type TData.</para>
      </summary>
      <param name="text">The query input string.</param>
      <param name="useFastYieldingQueryHandler">Set to true to get a query that yields null results for elements that don't pass the query, instead of only the elements that pass the query.</param>
      <returns>
        <para>Query operation of type TData.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.Parse(System.String)">
      <summary>
        <para>Parses a query string into a Query operation. This Query operation can then be used to filter any data set of type TData.</para>
      </summary>
      <param name="text">The query input string.</param>
      <param name="useFastYieldingQueryHandler">Set to true to get a query that yields null results for elements that don't pass the query, instead of only the elements that pass the query.</param>
      <returns>
        <para>Query operation of type TData.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.Parse(System.String,UnityEditor.Search.IQueryHandlerFactory`3&lt;TData,TQueryHandler,TPayload&gt;)">
      <summary>
        <para>Parses a query string into a Query operation. This Query operation can then be used to filter any data set of type TData.</para>
      </summary>
      <param name="text">The query input string.</param>
      <param name="queryHandlerFactory">A factory object that creates query handlers of type TQueryHandler. See Search.IQueryHandlerFactory_3|IQueryHandlerFactory.</param>
      <returns>
        <para>Query operation of type TData and TPayload.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.RemoveFilter(System.String)">
      <summary>
        <para>Removes a custom filter.</para>
      </summary>
      <param name="token">The identifier of the filter. Typically what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.RemoveFilter(System.Text.RegularExpressions.Regex)">
      <summary>
        <para>Removes a custom filter.</para>
      </summary>
      <param name="token">The identifier of the filter. Typically what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.RemoveFilter(UnityEditor.Search.IQueryEngineFilter)">
      <summary>
        <para>Removes a custom filter.</para>
      </summary>
      <param name="filter">The filter object returned by Search.QueryEngine_1.AddFilter|AddFilter.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.RemoveOperator(System.String)">
      <summary>
        <para>Removes a custom operator that was added on the Search.QueryEngine_1|QueryEngine.</para>
      </summary>
      <param name="op">The operator identifier.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.SetDefaultFilter(System.Func`5&lt;TData,System.String,System.String,System.String,System.Boolean&gt;)">
      <summary>
        <para>Sets the default filter handler for filters that were not registered.</para>
      </summary>
      <param name="handler">Callback used to handle the filter. Takes an object of type TData, the filter identifier, the operator, and the filter value, and returns a boolean indicating if the filter passed or not.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.SetDefaultParamFilter(System.Func`6&lt;TData,System.String,System.String,System.String,System.String,System.Boolean&gt;)">
      <summary>
        <para>Sets the default filter handler for function filters that were not registered.</para>
      </summary>
      <param name="handler">Callback used to handle the function filter. Takes an object of type TData, the filter identifier, the parameter, the operator, and the filter value, and returns a boolean indicating if the filter passed or not.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.SetFilterNestedQueryTransformer(System.String,System.Func`2&lt;TNestedQueryData,TRhs&gt;)">
      <summary>
        <para>Sets a filter's nested query transformer function. This function takes the result of a nested query and extracts the necessary data to compare with the filter.</para>
      </summary>
      <param name="filterToken">The identifier of the filter. Typically what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="transformer">The transformer function.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.SetGlobalStringComparisonOptions(System.StringComparison)">
      <summary>
        <para>Sets global string comparison options. Used for word matching and filter handling (unless overridden by filter).</para>
      </summary>
      <param name="stringComparison">String comparison options.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.SetNestedQueryHandler(System.Func`3&lt;System.String,System.String,System.Collections.Generic.IEnumerable`1&lt;TNestedQueryData&gt;&gt;)">
      <summary>
        <para>Sets the function that will handle nested queries. Only one handler can be set.</para>
      </summary>
      <param name="handler">The function that handles nested queries. It receives the nested query and the filter token on which the query is applied, and returns an IEnumerable.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.SetSearchDataCallback(System.Func`2&lt;TData,System.Collections.Generic.IEnumerable`1&lt;System.String&gt;&gt;)">
      <summary>
        <para>Sets the callback used to fetch the data that is matched against the search words.</para>
      </summary>
      <param name="getSearchDataCallback">Callback used to get the data to be matched against the search words. Takes an object of type TData and returns an IEnumerable of strings.</param>
      <param name="stringComparison">String comparison options.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.SetSearchDataCallback(System.Func`2&lt;TData,System.Collections.Generic.IEnumerable`1&lt;System.String&gt;&gt;,System.StringComparison)">
      <summary>
        <para>Sets the callback used to fetch the data that is matched against the search words.</para>
      </summary>
      <param name="getSearchDataCallback">Callback used to get the data to be matched against the search words. Takes an object of type TData and returns an IEnumerable of strings.</param>
      <param name="stringComparison">String comparison options.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.SetSearchDataCallback(System.Func`2&lt;TData,System.Collections.Generic.IEnumerable`1&lt;System.String&gt;&gt;,System.Func`2&lt;System.String,System.String&gt;,System.StringComparison)">
      <summary>
        <para>Sets the callback used to fetch the data that is matched against the search words.</para>
      </summary>
      <param name="getSearchDataCallback">Callback used to get the data to be matched against the search words. Takes an object of type TData and returns an IEnumerable of strings.</param>
      <param name="searchWordTransformerCallback">Callback used to transform a search word during the query parsing. Useful when doing lowercase or uppercase comparison. Can return null or an empty string to remove the word from the query.</param>
      <param name="stringComparison">String comparison options.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.SetSearchWordMatcher(System.Func`5&lt;System.String,System.Boolean,System.StringComparison,System.String,System.Boolean&gt;)">
      <summary>
        <para>Set the search word matching function to be used instead of the default one. Set to null to use the default.</para>
      </summary>
      <param name="wordMatcher">The search word matching function. The first parameter is the search word. The second parameter is a boolean for exact match or not. The third parameter is the StringComparison options. The fourth parameter is an element of the array returned by the search data callback. The function returns true for a match or false for no match.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.TryGetFilter(System.String,UnityEditor.Search.IQueryEngineFilter&amp;)">
      <summary>
        <para>Get a filter by its token.</para>
      </summary>
      <param name="token">The token used to create the filter.</param>
      <param name="filter">The existing Search.IQueryEngineFilter|IQueryEngineFilter, or null if it does not exist.</param>
      <returns>
        <para>Returns true if the filter is retrieved or false if the filter does not exist.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.QueryEngine_1.TryGetFilter(System.Text.RegularExpressions.Regex,UnityEditor.Search.IQueryEngineFilter&amp;)">
      <summary>
        <para>Get a filter by its token.</para>
      </summary>
      <param name="token">The token used to create the filter.</param>
      <param name="filter">The existing Search.IQueryEngineFilter|IQueryEngineFilter, or null if it does not exist.</param>
      <returns>
        <para>Returns true if the filter is retrieved or false if the filter does not exist.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.Search.QueryEngineFilterAttribute">
      <summary>
        <para>Base attribute class used to define a custom filter on a QueryEngine.
All filter types supported by QueryEngine.AddFilter are supported by this attribute.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryEngineFilterAttribute.comparisonOptions">
      <summary>
        <para>String comparison options.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryEngineFilterAttribute.overridesStringComparison">
      <summary>
        <para>Flag indicating if the filter overrides the global string comparison options.
Set to true when the comparisonOptions are used.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryEngineFilterAttribute.paramTransformerFunction">
      <summary>
        <para>Name of the parameter transformer function to use with this filter.
Tag the parameter transformer function with the appropriate ParameterTransformer attribute.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryEngineFilterAttribute.supportedOperators">
      <summary>
        <para>List of supported operator tokens. Null for all operators.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryEngineFilterAttribute.token">
      <summary>
        <para>The identifier of the filter. Typically what precedes the operator in a filter (i.e. "id" in "id&gt;=2").</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryEngineFilterAttribute.useParamTransformer">
      <summary>
        <para>Flag indicating if this filter uses a parameter transformer function.
Set to true when paramTransformerFunction is used.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryEngineFilterAttribute.useRegularExpressionToken">
      <summary>
        <para>Indicates if the filter uses a regular expression token or not.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.QueryEngineFilterAttribute.#ctor(System.String,System.String[])">
      <summary>
        <para>Create a filter with the corresponding token and supported operators.</para>
      </summary>
      <param name="token">The identifier of the filter. Typically what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="supportedOperators">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
      <param name="options">String comparison options.</param>
      <param name="paramTransformerFunction">Name of the parameter transformer function to use with this filter. Tag the parameter transformer function with the appropriate ParameterTransformer attribute.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngineFilterAttribute.#ctor(System.String,System.StringComparison,System.String[])">
      <summary>
        <para>Create a filter with the corresponding token and supported operators.</para>
      </summary>
      <param name="token">The identifier of the filter. Typically what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="supportedOperators">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
      <param name="options">String comparison options.</param>
      <param name="paramTransformerFunction">Name of the parameter transformer function to use with this filter. Tag the parameter transformer function with the appropriate ParameterTransformer attribute.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngineFilterAttribute.#ctor(System.String,System.String,System.String[])">
      <summary>
        <para>Create a filter with the corresponding token and supported operators.</para>
      </summary>
      <param name="token">The identifier of the filter. Typically what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="supportedOperators">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
      <param name="options">String comparison options.</param>
      <param name="paramTransformerFunction">Name of the parameter transformer function to use with this filter. Tag the parameter transformer function with the appropriate ParameterTransformer attribute.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngineFilterAttribute.#ctor(System.String,System.String,System.StringComparison,System.String[])">
      <summary>
        <para>Create a filter with the corresponding token and supported operators.</para>
      </summary>
      <param name="token">The identifier of the filter. Typically what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="supportedOperators">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
      <param name="options">String comparison options.</param>
      <param name="paramTransformerFunction">Name of the parameter transformer function to use with this filter. Tag the parameter transformer function with the appropriate ParameterTransformer attribute.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngineFilterAttribute.#ctor(System.String,System.Boolean,System.String[])">
      <summary>
        <para>Create a filter with the corresponding token and supported operators.</para>
      </summary>
      <param name="token">The identifier of the filter or regular expression that matches the filters. Typically what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="useRegularExpression">Set this flag to true if the token is a regular expression.</param>
      <param name="supportedOperators">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
      <param name="options">String comparison options.</param>
      <param name="paramTransformerFunction">Name of the parameter transformer function to use with this filter. Tag the parameter transformer function with the appropriate ParameterTransformer attribute.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngineFilterAttribute.#ctor(System.String,System.Boolean,System.StringComparison,System.String[])">
      <summary>
        <para>Create a filter with the corresponding token and supported operators.</para>
      </summary>
      <param name="token">The identifier of the filter or regular expression that matches the filters. Typically what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="useRegularExpression">Set this flag to true if the token is a regular expression.</param>
      <param name="supportedOperators">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
      <param name="options">String comparison options.</param>
      <param name="paramTransformerFunction">Name of the parameter transformer function to use with this filter. Tag the parameter transformer function with the appropriate ParameterTransformer attribute.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngineFilterAttribute.#ctor(System.String,System.Boolean,System.String,System.String[])">
      <summary>
        <para>Create a filter with the corresponding token and supported operators.</para>
      </summary>
      <param name="token">The identifier of the filter or regular expression that matches the filters. Typically what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="useRegularExpression">Set this flag to true if the token is a regular expression.</param>
      <param name="supportedOperators">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
      <param name="options">String comparison options.</param>
      <param name="paramTransformerFunction">Name of the parameter transformer function to use with this filter. Tag the parameter transformer function with the appropriate ParameterTransformer attribute.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryEngineFilterAttribute.#ctor(System.String,System.Boolean,System.String,System.StringComparison,System.String[])">
      <summary>
        <para>Create a filter with the corresponding token and supported operators.</para>
      </summary>
      <param name="token">The identifier of the filter or regular expression that matches the filters. Typically what precedes the operator in a filter (for example, "id" in "id&gt;=2").</param>
      <param name="useRegularExpression">Set this flag to true if the token is a regular expression.</param>
      <param name="supportedOperators">List of supported operator tokens. This list contains the supported operator tokens. Use null or an empty list to indicate that all operators are supported.</param>
      <param name="options">String comparison options.</param>
      <param name="paramTransformerFunction">Name of the parameter transformer function to use with this filter. Tag the parameter transformer function with the appropriate ParameterTransformer attribute.</param>
    </member>
    <member name="T:UnityEditor.Search.QueryEngineParameterTransformerAttribute">
      <summary>
        <para>Base attribute class that defines a custom parameter transformer function.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.QueryError">
      <summary>
        <para>A QueryError holds the definition of a query parsing error.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryError.index">
      <summary>
        <para>Index where the error happened.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryError.length">
      <summary>
        <para>Length of the block that was being parsed.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryError.reason">
      <summary>
        <para>Reason why the parsing failed.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.QueryError.#ctor">
      <summary>
        <para>Construct a new QueryError.</para>
      </summary>
      <param name="index">Index where the error happened.</param>
      <param name="reason">Reason why the parsing failed.</param>
      <param name="length">Length of the block that was being parsed.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryError.#ctor(System.Int32,System.String)">
      <summary>
        <para>Construct a new QueryError.</para>
      </summary>
      <param name="index">Index where the error happened.</param>
      <param name="reason">Reason why the parsing failed.</param>
      <param name="length">Length of the block that was being parsed.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryError.#ctor(System.Int32,System.Int32,System.String)">
      <summary>
        <para>Construct a new QueryError.</para>
      </summary>
      <param name="index">Index where the error happened.</param>
      <param name="reason">Reason why the parsing failed.</param>
      <param name="length">Length of the block that was being parsed.</param>
    </member>
    <member name="T:UnityEditor.Search.QueryFilterOperator">
      <summary>
        <para>A QueryFilterOperator defines a boolean operator between a value returned by a filter and an operand inputted in the search query.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryFilterOperator.token">
      <summary>
        <para>The operator identifier.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryFilterOperator.valid">
      <summary>
        <para>Indicates if this filter operator is valid.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.QueryFilterOperator.AddHandler(System.Func`3&lt;TFilterVariable,TFilterConstant,System.Boolean&gt;)">
      <summary>
        <para>Adds a custom filter operator handler.</para>
      </summary>
      <param name="handler">Callback to handle the operation. Takes a TFilterVariable (the value returned by the filter handler, it will vary for each element), a TFilterConstant (right-hand side value of the operator, which is constant), and a StringComparison option and returns a boolean indicating if the filter passes or not.</param>
      <returns>
        <para>The current Search.QueryFilterOperator|QueryFilterOperator.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.QueryFilterOperator.AddHandler(System.Func`4&lt;TFilterVariable,TFilterConstant,System.StringComparison,System.Boolean&gt;)">
      <summary>
        <para>Adds a custom filter operator handler.</para>
      </summary>
      <param name="handler">Callback to handle the operation. Takes a TFilterVariable (the value returned by the filter handler, it will vary for each element), a TFilterConstant (right-hand side value of the operator, which is constant), and a StringComparison option and returns a boolean indicating if the filter passes or not.</param>
      <returns>
        <para>The current Search.QueryFilterOperator|QueryFilterOperator.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.Search.QueryGraph">
      <summary>
        <para>Class that represents a query graph.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryGraph.empty">
      <summary>
        <para>Returns true if the graph is empty.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryGraph.root">
      <summary>
        <para>Root node of the graph. Can be null.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.QueryGraph.#ctor(UnityEditor.Search.IQueryNode)">
      <summary>
        <para>Constructor. Creates a new query graph.</para>
      </summary>
      <param name="root">Root node of the graph.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryGraph.Optimize(System.Boolean,System.Boolean)">
      <summary>
        <para>Optimize the graph.</para>
      </summary>
      <param name="propagateNotToLeaves">Propagate "Not" operations to leaves, so only leaves can have "Not" operations as parents.</param>
      <param name="swapNotToRightHandSide">Swaps "Not" operations to the right-hand side of combining operations (i.e. "And", "Or"). Useful if a "Not" operation is slow.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryGraph.Optimize(UnityEditor.Search.QueryGraphOptimizationOptions)">
      <summary>
        <para>Optimize the graph.</para>
      </summary>
      <param name="options">Optimization options.</param>
    </member>
    <member name="T:UnityEditor.Search.QueryGraphOptimizationOptions">
      <summary>
        <para>Structure containing the different options used to optimize a query graph.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryGraphOptimizationOptions.propagateNotToLeaves">
      <summary>
        <para>Propagate "Not" operations to leaves, so only leaves can have "Not" operations as parents.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryGraphOptimizationOptions.swapFilterFunctionsToRightHandSide">
      <summary>
        <para>Swaps filter functions to the right-hand side of combining operations (i.e. "And", "Or"). Useful if those filter operations are slow.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryGraphOptimizationOptions.swapNotToRightHandSide">
      <summary>
        <para>Swaps "Not" operations to the right-hand side of combining operations (i.e. "And", "Or"). Useful if a "Not" operation is slow.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.QueryNodeType">
      <summary>
        <para>Options for representing the query node types.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryNodeType.Aggregator">
      <summary>
        <para>Aggregator node.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryNodeType.And">
      <summary>
        <para>And node.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryNodeType.Comment">
      <summary>
        <para>Comment node.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryNodeType.Filter">
      <summary>
        <para>Filter node.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryNodeType.FilterIn">
      <summary>
        <para>Filter with nested query node.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryNodeType.Group">
      <summary>
        <para>Group node.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryNodeType.Intersection">
      <summary>
        <para>Intersection node.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryNodeType.NestedQuery">
      <summary>
        <para>Nested query node.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryNodeType.Not">
      <summary>
        <para>Negation node.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryNodeType.Or">
      <summary>
        <para>Or node.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryNodeType.Search">
      <summary>
        <para>Word search node.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryNodeType.Toggle">
      <summary>
        <para>Toggle node.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryNodeType.Union">
      <summary>
        <para>Union node.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryNodeType.Where">
      <summary>
        <para>Where enumerator node.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.QueryToken">
      <summary>
        <para>Represents a token of a query string.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryToken.length">
      <summary>
        <para>The length of the token. Can be different than the length of the text.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryToken.position">
      <summary>
        <para>The position of the token in the query string.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.QueryToken.text">
      <summary>
        <para>The text representing the token.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.QueryToken.#ctor(System.String,System.Int32)">
      <summary>
        <para>Creates a token from a string and a position.</para>
      </summary>
      <param name="text">The value of the token.</param>
      <param name="position">The position of the token in the entire query string.</param>
      <param name="length">The length of the token.</param>
    </member>
    <member name="M:UnityEditor.Search.QueryToken.#ctor(System.String,System.Int32,System.Int32)">
      <summary>
        <para>Creates a token from a string and a position.</para>
      </summary>
      <param name="text">The value of the token.</param>
      <param name="position">The position of the token in the entire query string.</param>
      <param name="length">The length of the token.</param>
    </member>
    <member name="T:UnityEditor.Search.QueryValidationOptions">
      <summary>
        <para>Struct containing the available query validation options.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryValidationOptions.skipIncompleteFilters">
      <summary>
        <para>Boolean indicating if incomplete filters should be skipped.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryValidationOptions.skipUnknownFilters">
      <summary>
        <para>Boolean indicating if unknown filters should be skipped.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.QueryValidationOptions.validateFilters">
      <summary>
        <para>Boolean indicating if filters should be validated. Default is false.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.RefreshFlags">
      <summary>
        <para>Refresh flags are used to indicate why search view needs to be refreshed or updated.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.RefreshFlags.Default">
      <summary>
        <para>Normal refresh.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.RefreshFlags.DisplayModeChanged">
      <summary>
        <para>The display mode or item size has changed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.RefreshFlags.GroupChanged">
      <summary>
        <para>The current item group has changed. In example, the user selected a new search tab.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.RefreshFlags.ItemsChanged">
      <summary>
        <para>The search item list has been updated.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.RefreshFlags.None">
      <summary>
        <para>No particular refresh reason were specified.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.RefreshFlags.StructureChanged">
      <summary>
        <para>The structure of the current selection data has changed (i.e. the selected scene object got a new component).</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.SearchAction">
      <summary>
        <para>Defines an action that can be applied on a SearchItem of a specific search provider type.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchAction.closeWindowAfterExecution">
      <summary>
        <para>Indicates if the search view should be closed after the action execution.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchAction.displayName">
      <summary>
        <para>Display name for the search action.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchAction.enabled">
      <summary>
        <para>Callback used to check if the action is enabled based on the current context.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchAction.execute">
      <summary>
        <para>Executes an action on a set of items.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchAction.handler">
      <summary>
        <para>This handler is used for actions that do not support multi-selection.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchAction.id">
      <summary>
        <para>Action unique identifier.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchAction.#ctor(System.String,System.String,UnityEngine.GUIContent)">
      <summary>
        <para>Default constructor to build a search action.</para>
      </summary>
      <param name="id">Unique action id used to find it back later.</param>
      <param name="providerId">The search provider ID that supports this action.</param>
      <param name="content">Displays the displayname, an icon, and a tooltip when displaying the action in the Action Menu.</param>
      <param name="handler">Handler that executes the action.</param>
      <param name="name">Label name when displaying the action in the Action Menu.</param>
      <param name="icon">Icon for the action in the Action Menu.</param>
      <param name="tooltip">Tooltip associated with the action when displayed in the Action Menu.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchAction.#ctor(System.String,System.String,UnityEngine.GUIContent,System.Action`1&lt;UnityEditor.Search.SearchItem[]&gt;)">
      <summary>
        <para>Default constructor to build a search action.</para>
      </summary>
      <param name="id">Unique action id used to find it back later.</param>
      <param name="providerId">The search provider ID that supports this action.</param>
      <param name="content">Displays the displayname, an icon, and a tooltip when displaying the action in the Action Menu.</param>
      <param name="handler">Handler that executes the action.</param>
      <param name="name">Label name when displaying the action in the Action Menu.</param>
      <param name="icon">Icon for the action in the Action Menu.</param>
      <param name="tooltip">Tooltip associated with the action when displayed in the Action Menu.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchAction.#ctor(System.String,System.String,UnityEngine.GUIContent,System.Action`1&lt;UnityEditor.Search.SearchItem&gt;)">
      <summary>
        <para>Default constructor to build a search action.</para>
      </summary>
      <param name="id">Unique action id used to find it back later.</param>
      <param name="providerId">The search provider ID that supports this action.</param>
      <param name="content">Displays the displayname, an icon, and a tooltip when displaying the action in the Action Menu.</param>
      <param name="handler">Handler that executes the action.</param>
      <param name="name">Label name when displaying the action in the Action Menu.</param>
      <param name="icon">Icon for the action in the Action Menu.</param>
      <param name="tooltip">Tooltip associated with the action when displayed in the Action Menu.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchAction.#ctor(System.String,System.String,UnityEngine.Texture2D,System.String,System.Action`1&lt;UnityEditor.Search.SearchItem[]&gt;)">
      <summary>
        <para>Default constructor to build a search action.</para>
      </summary>
      <param name="id">Unique action id used to find it back later.</param>
      <param name="providerId">The search provider ID that supports this action.</param>
      <param name="content">Displays the displayname, an icon, and a tooltip when displaying the action in the Action Menu.</param>
      <param name="handler">Handler that executes the action.</param>
      <param name="name">Label name when displaying the action in the Action Menu.</param>
      <param name="icon">Icon for the action in the Action Menu.</param>
      <param name="tooltip">Tooltip associated with the action when displayed in the Action Menu.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchAction.#ctor(System.String,System.String,UnityEngine.Texture2D,System.String,System.Action`1&lt;UnityEditor.Search.SearchItem&gt;)">
      <summary>
        <para>Default constructor to build a search action.</para>
      </summary>
      <param name="id">Unique action id used to find it back later.</param>
      <param name="providerId">The search provider ID that supports this action.</param>
      <param name="content">Displays the displayname, an icon, and a tooltip when displaying the action in the Action Menu.</param>
      <param name="handler">Handler that executes the action.</param>
      <param name="name">Label name when displaying the action in the Action Menu.</param>
      <param name="icon">Icon for the action in the Action Menu.</param>
      <param name="tooltip">Tooltip associated with the action when displayed in the Action Menu.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchAction.#ctor(System.String,System.String,UnityEngine.Texture2D,System.String)">
      <summary>
        <para>Default constructor to build a search action.</para>
      </summary>
      <param name="id">Unique action id used to find it back later.</param>
      <param name="providerId">The search provider ID that supports this action.</param>
      <param name="content">Displays the displayname, an icon, and a tooltip when displaying the action in the Action Menu.</param>
      <param name="handler">Handler that executes the action.</param>
      <param name="name">Label name when displaying the action in the Action Menu.</param>
      <param name="icon">Icon for the action in the Action Menu.</param>
      <param name="tooltip">Tooltip associated with the action when displayed in the Action Menu.</param>
    </member>
    <member name="T:UnityEditor.Search.SearchActionsProviderAttribute">
      <summary>
        <para>Attribute used to declare a static method that defines new actions for specific search providers.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.SearchColumn">
      <summary>
        <para>Search columns are used to display additional information in the Search Table view.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchColumn.comparer">
      <summary>
        <para>If defined, the comparer delegate is used to sort search results based on the value displayed in that column.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumn.content">
      <summary>
        <para>The content is used to display the search column label and image in its header.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchColumn.drawer">
      <summary>
        <para>If defined, the drawer delegate is used to customize how the search column displays its information.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchColumn.getter">
      <summary>
        <para>If defined, the getter delegate is used to customize how the search field data is extracted and transformed for display (see SearchColumn.drawer).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchColumn.name">
      <summary>
        <para>Name of the search column.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumn.options">
      <summary>
        <para>Various options used to define how a search column is presented.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumn.path">
      <summary>
        <para>The path can be used by the column delegates to interpret how the data can be manipulated.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumn.provider">
      <summary>
        <para>The provider is used to indicate which search column provider (see SearchColumn) is used to define the search column format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumn.selector">
      <summary>
        <para>The selector is used by the column delegates to fetch the search field data.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchColumn.setter">
      <summary>
        <para>If defined, the setter delegate writes back the value to the corresponding field of the search result.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumn.width">
      <summary>
        <para>The column width is used to set the Search Table view column width.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.SearchColumnCompareArgs">
      <summary>
        <para>Search column compare arguments are used by SearchColumn.comparer to sort search results.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumnCompareArgs.lhs">
      <summary>
        <para>Left-hand side column to compare.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumnCompareArgs.rhs">
      <summary>
        <para>Right-hand side column to compare.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumnCompareArgs.sortAscending">
      <summary>
        <para>Indicates if the results should be sorted in ascending order or not.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.SearchColumnEventArgs">
      <summary>
        <para>Search column event arguments are used by SearchColumn.getter, SearchColumn.drawer and SearchColumn.setter delegates.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumnEventArgs.column">
      <summary>
        <para>Search column being handled by the current event.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumnEventArgs.context">
      <summary>
        <para>Search context being used for the current event.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumnEventArgs.focused">
      <summary>
        <para>Indicates if the search column cell is currently focused.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumnEventArgs.item">
      <summary>
        <para>Search item currently being used for the event.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumnEventArgs.multiple">
      <summary>
        <para>Indicates if multiple search results are currently selected when processing the current event.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumnEventArgs.rect">
      <summary>
        <para>UnityEngine.Rect used to indicate the drawing boudaries of the SearchColumn.drawer event.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumnEventArgs.selected">
      <summary>
        <para>Indicates if the search result is currently selected.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumnEventArgs.value">
      <summary>
        <para>Value obtained from SearchColumn.getter before calling SearchColumn.drawer.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.SearchColumnFlags">
      <summary>
        <para>Search column flags are used to set multiple states.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumnFlags.CanHide">
      <summary>
        <para>Indicates that the user can manually hide the search column in the Search Table view.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumnFlags.CanSort">
      <summary>
        <para>Indicates that the user can sort the search column in the Search Table view.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumnFlags.Default">
      <summary>
        <para>Defines a default set of options for common usages.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumnFlags.Hidden">
      <summary>
        <para>Indicates that the search column is currently hidden in the Search Table view.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumnFlags.None">
      <summary>
        <para>Indicates that no column options are used.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumnFlags.Sorted">
      <summary>
        <para>Indicates that the search column in the Search Table view is currently sorted.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumnFlags.SortedDescending">
      <summary>
        <para>Indicates that the search column in the Search Table view is sorted in descending order. If not defined, it means the column is sorted in ascending order.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumnFlags.TextAlignmentCenter">
      <summary>
        <para>Indicates that the search column in the Search Table view is aligning text in the middle.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumnFlags.TextAlignmentLeft">
      <summary>
        <para>Indicates that the search column in the Search Table view is aligning text to the left.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchColumnFlags.TextAlignmentRight">
      <summary>
        <para>Indicates that the search column in the Search Table view is aligning text to the right.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.SearchColumnProviderAttribute">
      <summary>
        <para>The search column provider attribute is used to define new formats for a given column.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchColumnProviderAttribute.provider">
      <summary>
        <para>Unique name of the search column provider.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.SearchContext">
      <summary>
        <para>The search context includes all the data necessary to perform a query. It allows the full customization of how a query may be performed.</para>
      </summary>
    </member>
    <member name="?:UnityEditor.Search.SearchContext.asyncItemReceived(System.Action`2&lt;UnityEditor.Search.SearchContext,System.Collections.Generic.IEnumerable`1&lt;UnityEditor.Search.SearchItem&gt;&gt;)">
      <summary>
        <para>This event is used to receive any asynchronous search result.</para>
      </summary>
      <param name="value">Event is used to receive any asynchronous search result.</param>
    </member>
    <member name="P:UnityEditor.Search.SearchContext.filterId">
      <summary>
        <para>Explicit filter ID. Usually it is the first search token like h:, p: to do an explicit search for a given search provider. Can be null.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchContext.focusedWindow">
      <summary>
        <para>Editor window that initiated the search.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchContext.options">
      <summary>
        <para>Search context options.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchContext.progressId">
      <summary>
        <para>Progress handle to display the progress bar for the search currently in progress.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchContext.providers">
      <summary>
        <para>Which search providers are active for this particular context.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchContext.searchInProgress">
      <summary>
        <para>Indicates if an asynchronous search is currently in progress for this context.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchContext.searchPhrase">
      <summary>
        <para>Returns a phrase that contains only words separated by spaces.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchContext.searchQuery">
      <summary>
        <para>Processed search query (no filterId, no textFilters).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchContext.searchQueryOffset">
      <summary>
        <para>Character offset of the processed search query in the raw search text.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchContext.searchText">
      <summary>
        <para>Raw search text (what is in the Search text box).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchContext.searchView">
      <summary>
        <para>The search view presenting the search results.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchContext.searchWords">
      <summary>
        <para>Search query tokenized by words. All text filters are discarded and all words are in lowercase.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchContext.selection">
      <summary>
        <para>Returns the search result selection if any.</para>
      </summary>
    </member>
    <member name="?:UnityEditor.Search.SearchContext.sessionEnded(System.Action`1&lt;UnityEditor.Search.SearchContext&gt;)">
      <summary>
        <para>Invoked when a Search has ended.</para>
      </summary>
      <param name="value">Handler of the event.</param>
    </member>
    <member name="?:UnityEditor.Search.SearchContext.sessionStarted(System.Action`1&lt;UnityEditor.Search.SearchContext&gt;)">
      <summary>
        <para>Invoked when a Search is started.</para>
      </summary>
      <param name="value">Handler of the event.</param>
    </member>
    <member name="P:UnityEditor.Search.SearchContext.textFilters">
      <summary>
        <para>All tokens containing a colon (':').</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchContext.wantsMore">
      <summary>
        <para>Indicates if the search should return all the results instead of only the most relevant.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchContext.AddSearchQueryError(UnityEditor.Search.SearchQueryError)">
      <summary>
        <para>Adds a new query error on this context.</para>
      </summary>
      <param name="error">The new error.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchContext.AddSearchQueryErrors(System.Collections.Generic.IEnumerable`1&lt;UnityEditor.Search.SearchQueryError&gt;)">
      <summary>
        <para>Adds new query errors on this context.</para>
      </summary>
      <param name="errors">The new errors.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchContext.#ctor(System.Collections.Generic.IEnumerable`1&lt;UnityEditor.Search.SearchProvider&gt;,System.String,UnityEditor.Search.SearchFlags)">
      <summary>
        <para>Creates a new search context.</para>
      </summary>
      <param name="providers">The list of search providers used to resolve the specified query.</param>
      <param name="searchText">The search query to perform.</param>
      <param name="options">A set of options that help evaluate the query.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchContext.#ctor(System.Collections.Generic.IEnumerable`1&lt;UnityEditor.Search.SearchProvider&gt;,System.String)">
      <summary>
        <para>Creates a new search context.</para>
      </summary>
      <param name="providers">The list of search providers used to resolve the specified query.</param>
      <param name="searchText">The search query to perform.</param>
      <param name="options">A set of options that help evaluate the query.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchContext.#ctor(System.Collections.Generic.IEnumerable`1&lt;UnityEditor.Search.SearchProvider&gt;)">
      <summary>
        <para>Creates a new search context.</para>
      </summary>
      <param name="providers">The list of search providers used to resolve the specified query.</param>
      <param name="searchText">The search query to perform.</param>
      <param name="options">A set of options that help evaluate the query.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchContext.#ctor(UnityEditor.Search.SearchContext)">
      <summary>
        <para>TODO.</para>
      </summary>
      <param name="context"></param>
    </member>
    <member name="M:UnityEditor.Search.SearchContext.Dispose">
      <summary>
        <para>Dispose of the Search Context.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchContext.IsEnabled(System.String)">
      <summary>
        <para>Checks if a search provider is available to process a query.</para>
      </summary>
      <param name="providerId">ID of the search provider. See SearchProvider.name.id.</param>
      <returns>
        <para>Returns true if the search provider is enabled for this SearchContext.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchContext.ResetFilter(System.Boolean)">
      <summary>
        <para>Resets all search provider filters to the specified value. This allows enabling or disabling all search providers in one call. A disabled search provider won't be asked to provide items to resolve the query.</para>
      </summary>
      <param name="enableAll">If true, enables all search providers. If false, disables all search providers.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchContext.SetFilter(System.String,System.Boolean)">
      <summary>
        <para>Enables or disables a single search provider. A disabled search provider won't be asked to provide items to resolve the query.</para>
      </summary>
      <param name="providerId">ID of the search provider. See SearchProvider.name.id.</param>
      <param name="isEnabled">If true, enables the search provider to perform a query.</param>
    </member>
    <member name="T:UnityEditor.Search.SearchDocument">
      <summary>
        <para>Represents a searchable document that has been indexed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchDocument.id">
      <summary>
        <para>Document unique ID in the search index.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchDocument.index">
      <summary>
        <para>Index of that document in the SearchIndexer.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchDocument.name">
      <summary>
        <para>Readable name of the document.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchDocument.path">
      <summary>
        <para>Document path.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchDocument.score">
      <summary>
        <para>Document base relevance score.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchDocument.source">
      <summary>
        <para>Original source from which the document was indexed. The source is usually the container asset, i.e. prefab, Unity scene or the imported asset itself.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchDocument.valid">
      <summary>
        <para>If true the document is considered valid.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchDocument.CompareTo(UnityEditor.Search.SearchDocument)">
      <summary>
        <para>Compare this document against another document.</para>
      </summary>
      <param name="other">Another document to compare to.</param>
      <returns>
        <para>If 0, both documents are equals.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchDocument.#ctor(UnityEditor.Search.SearchDocument,System.Int32)">
      <summary>
        <para>Create a new SearchDocument.</para>
      </summary>
      <param name="id">Document unique ID in the search index.</param>
      <param name="doc">Source document to copy properties from.</param>
      <param name="score">Document score used for sorting.</param>
      <param name="index">Document position in the search index.</param>
      <param name="path">Document path (i.e. asset path or transform path) if any.</param>
      <param name="name">Document name (for example, asset path or transform path) if any.</param>
      <param name="source">Document contained source path or ID. This is usually defined for nested objects with a prefab or a scene.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchDocument.#ctor(System.Int32,System.String,System.String,System.Int32)">
      <summary>
        <para>Create a new SearchDocument.</para>
      </summary>
      <param name="id">Document unique ID in the search index.</param>
      <param name="doc">Source document to copy properties from.</param>
      <param name="score">Document score used for sorting.</param>
      <param name="index">Document position in the search index.</param>
      <param name="path">Document path (i.e. asset path or transform path) if any.</param>
      <param name="name">Document name (for example, asset path or transform path) if any.</param>
      <param name="source">Document contained source path or ID. This is usually defined for nested objects with a prefab or a scene.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchDocument.#ctor(System.String,System.String,System.String,System.Int32)">
      <summary>
        <para>Create a new SearchDocument.</para>
      </summary>
      <param name="id">Document unique ID in the search index.</param>
      <param name="doc">Source document to copy properties from.</param>
      <param name="score">Document score used for sorting.</param>
      <param name="index">Document position in the search index.</param>
      <param name="path">Document path (i.e. asset path or transform path) if any.</param>
      <param name="name">Document name (for example, asset path or transform path) if any.</param>
      <param name="source">Document contained source path or ID. This is usually defined for nested objects with a prefab or a scene.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchDocument.#ctor(UnityEditor.Search.SearchDocument,System.String)">
      <summary>
        <para>Create a new SearchDocument.</para>
      </summary>
      <param name="id">Document unique ID in the search index.</param>
      <param name="doc">Source document to copy properties from.</param>
      <param name="score">Document score used for sorting.</param>
      <param name="index">Document position in the search index.</param>
      <param name="path">Document path (i.e. asset path or transform path) if any.</param>
      <param name="name">Document name (for example, asset path or transform path) if any.</param>
      <param name="source">Document contained source path or ID. This is usually defined for nested objects with a prefab or a scene.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchDocument.Equals(UnityEditor.Search.SearchDocument)">
      <summary>
        <para>Compare this document against another document.</para>
      </summary>
      <param name="other">Another document to compare to.</param>
      <returns>
        <para>If true both document are equals.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchDocument.Equals(System.Object)">
      <summary>
        <para>Compare this document against another document.</para>
      </summary>
      <param name="other">Another document to compare to.</param>
      <returns>
        <para>If true both document are equals.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchDocument.ToString">
      <summary>
        <para>Returns the document ID string.</para>
      </summary>
      <returns>
        <para>Returns a string representation of the document.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.Search.SearchFlags">
      <summary>
        <para>Search options used to fetch items. Mostly with SearchContext to specify how a search should be handled.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchFlags.Debug">
      <summary>
        <para>Adds debugging information to SearchItem while looking for results.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchFlags.Default">
      <summary>
        <para>Default Search Flag (SearchFlags.Sorted).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchFlags.Dockable">
      <summary>
        <para>Indicates that the search view is dockable. This flag is only usable with internal API.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchFlags.Expression">
      <summary>
        <para>Indicates that the search query will be evaluated as a search expression.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchFlags.FirstBatchAsync">
      <summary>
        <para>Sends the first items asynchronously.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchFlags.FocusContext">
      <summary>
        <para>Indicates that the search view will focus on the first contextual search provider available when it opens. This flag is only usable with internal API.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchFlags.HidePanels">
      <summary>
        <para>Indicates that the search view will hide its side panels when it opens. This flag is only usable with internal API.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchFlags.Multiselect">
      <summary>
        <para>Indicates that the search view will allow multi-selection. This flag is only usable with internal API.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchFlags.NoIndexing">
      <summary>
        <para>Prevents the search from using indexing. Asset Provider will use its builtin Find in Files provider.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchFlags.None">
      <summary>
        <para>No specific search options. Result will be unsorted.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchFlags.OpenContextual">
      <summary>
        <para>Opens a search view with default contextual options. This flag is only usable with internal API.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchFlags.OpenDefault">
      <summary>
        <para>Opens a search view with default options. This flag is only usable with internal API.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchFlags.OpenGlobal">
      <summary>
        <para>Opens a search view for a global search. This flag is only usable with internal API.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchFlags.OpenPicker">
      <summary>
        <para>Opens a search view as an object picker. This flag is only usable with internal API.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchFlags.Packages">
      <summary>
        <para>The Object Picker window will include any results from packages.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchFlags.QueryString">
      <summary>
        <para>Evaluate the search text as a pure query string (do not evaluate the text as a search expression).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchFlags.ReuseExistingWindow">
      <summary>
        <para>Indicates that the search view will find any existing window instances that are already opened before creating a new one. This flag is only usable with internal API.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchFlags.SaveFilters">
      <summary>
        <para>Indicates that the search view will save its settings and search provider filters when it closes. This flag is only usable with internal API.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchFlags.ShowErrorsWithResults">
      <summary>
        <para>Always show query errors even when there are results available. This flag is only usable with internal API.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchFlags.Sorted">
      <summary>
        <para>Fetched items are sorted by the search service.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchFlags.Synchronous">
      <summary>
        <para>Search items are fetched synchronously. This can take a long time for some SearchProvider (like asset). Use at your own risk.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchFlags.WantsMore">
      <summary>
        <para>Sets the search to search for all results. This might take longer than unusual if SearchProvider are using multiple sources of items (files on disk, AssetDatabase...)</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.SearchIndexer">
      <summary>
        <para>Base class for a document Indexer which provides methods for retrieving a document given a specific pattern in roughly log(n). This allows you to search a large index more quickly.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchIndexer.documentCount">
      <summary>
        <para>Returns the number of documents in the index.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchIndexer.keywordCount">
      <summary>
        <para>Returns the number keywords in the index.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchIndexer.minWordIndexationLength">
      <summary>
        <para>Minimal indexed word size. Default is 2.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchIndexer.name">
      <summary>
        <para>Name of the index. Generally this name is set by a user from SearchDatabase.Settings.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchIndexer.resolveDocumentHandler">
      <summary>
        <para>Handler used to resolve a document ID to some other data string.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchIndexer.skipEntryHandler">
      <summary>
        <para>Handler used to skip entries.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.AddDocument(System.String,System.Boolean)">
      <summary>
        <para>Adds a new document to be indexed.</para>
      </summary>
      <param name="document">Unique document ID.</param>
      <param name="checkIfExists">Pass true if this document has some chance of existing already.</param>
      <returns>
        <para>The document index/handle used to add new index entries.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.AddExactWord(System.String,System.Int32,System.Int32)">
      <summary>
        <para>Adds a new word coming from a document to the index. The word is added with multiple variations allowing partial search.</para>
      </summary>
      <param name="word">Word to add to the index.</param>
      <param name="score">Relevance score of the word.</param>
      <param name="documentIndex">Document where the indexed word was found.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.AddNumber(System.String,System.Double,System.Int32,System.Int32)">
      <summary>
        <para>Adds a key-number value pair to the index. The key won't be added with variations.</para>
      </summary>
      <param name="key">Key used to retrieve the value.</param>
      <param name="value">Number value to store in the index.</param>
      <param name="score">Relevance score of the word.</param>
      <param name="documentIndex">Document where the indexed value was found.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.AddProperty(System.String,System.String,System.Int32,System.Boolean,System.Boolean)">
      <summary>
        <para>Adds a property value to the index. A property is specified with a key and a string value. The value will be stored with multiple variations.</para>
      </summary>
      <param name="key">Key used to retrieve the value.</param>
      <param name="value">String value to store in the index.</param>
      <param name="documentIndex">Document where the indexed value was found.</param>
      <param name="saveKeyword">Indicates if we store this key in the keyword registry of the index. See SearchIndexer.GetKeywords.</param>
      <param name="exact">If true, index stores an exact match entry for this word.</param>
      <param name="score">Relevance score of the word.</param>
      <param name="name">Key used to retrieve the value.</param>
      <param name="minVariations">Minimum number of variations to compute for the value. Cannot be higher than the length of the word.</param>
      <param name="maxVariations">Maximum number of variations to compute for the value. Cannot be higher than the length of the word.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.AddProperty(System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
      <summary>
        <para>Adds a property value to the index. A property is specified with a key and a string value. The value will be stored with multiple variations.</para>
      </summary>
      <param name="key">Key used to retrieve the value.</param>
      <param name="value">String value to store in the index.</param>
      <param name="documentIndex">Document where the indexed value was found.</param>
      <param name="saveKeyword">Indicates if we store this key in the keyword registry of the index. See SearchIndexer.GetKeywords.</param>
      <param name="exact">If true, index stores an exact match entry for this word.</param>
      <param name="score">Relevance score of the word.</param>
      <param name="name">Key used to retrieve the value.</param>
      <param name="minVariations">Minimum number of variations to compute for the value. Cannot be higher than the length of the word.</param>
      <param name="maxVariations">Maximum number of variations to compute for the value. Cannot be higher than the length of the word.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.AddProperty(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
      <summary>
        <para>Adds a property value to the index. A property is specified with a key and a string value. The value will be stored with multiple variations.</para>
      </summary>
      <param name="key">Key used to retrieve the value.</param>
      <param name="value">String value to store in the index.</param>
      <param name="documentIndex">Document where the indexed value was found.</param>
      <param name="saveKeyword">Indicates if we store this key in the keyword registry of the index. See SearchIndexer.GetKeywords.</param>
      <param name="exact">If true, index stores an exact match entry for this word.</param>
      <param name="score">Relevance score of the word.</param>
      <param name="name">Key used to retrieve the value.</param>
      <param name="minVariations">Minimum number of variations to compute for the value. Cannot be higher than the length of the word.</param>
      <param name="maxVariations">Maximum number of variations to compute for the value. Cannot be higher than the length of the word.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.AddWord(System.String,System.Int32,System.Int32)">
      <summary>
        <para>Adds a new word coming from a document to the index. The word is added with multiple variations allowing partial search.</para>
      </summary>
      <param name="word">Word to add to the index.</param>
      <param name="score">Relevance score of the word.</param>
      <param name="documentIndex">Document where the indexed word was found.</param>
      <param name="size">Number of variations to compute.</param>
      <param name="minVariations">Minimum number of variations to compute. Cannot be higher than the length of the word.</param>
      <param name="maxVariations">Maximum number of variations to compute. Cannot be higher than the length of the word.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.AddWord(System.String,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Adds a new word coming from a document to the index. The word is added with multiple variations allowing partial search.</para>
      </summary>
      <param name="word">Word to add to the index.</param>
      <param name="score">Relevance score of the word.</param>
      <param name="documentIndex">Document where the indexed word was found.</param>
      <param name="size">Number of variations to compute.</param>
      <param name="minVariations">Minimum number of variations to compute. Cannot be higher than the length of the word.</param>
      <param name="maxVariations">Maximum number of variations to compute. Cannot be higher than the length of the word.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.AddWord(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Adds a new word coming from a document to the index. The word is added with multiple variations allowing partial search.</para>
      </summary>
      <param name="word">Word to add to the index.</param>
      <param name="score">Relevance score of the word.</param>
      <param name="documentIndex">Document where the indexed word was found.</param>
      <param name="size">Number of variations to compute.</param>
      <param name="minVariations">Minimum number of variations to compute. Cannot be higher than the length of the word.</param>
      <param name="maxVariations">Maximum number of variations to compute. Cannot be higher than the length of the word.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.#ctor">
      <summary>
        <para>Creates a new default SearchIndexer.</para>
      </summary>
      <param name="name">Name of the indexer.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.#ctor(System.String)">
      <summary>
        <para>Creates a new default SearchIndexer.</para>
      </summary>
      <param name="name">Name of the indexer.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.Finish">
      <summary>
        <para>Finalizes the current index, sorting and compiling of all the indexes.</para>
      </summary>
      <param name="threadCompletedCallback">Callback invoked when the index is ready to be used.</param>
      <param name="removedDocuments">Documents to be removed from current index (if any).</param>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.Finish(System.Action)">
      <summary>
        <para>Finalizes the current index, sorting and compiling of all the indexes.</para>
      </summary>
      <param name="threadCompletedCallback">Callback invoked when the index is ready to be used.</param>
      <param name="removedDocuments">Documents to be removed from current index (if any).</param>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.Finish(System.Action`1&lt;System.Byte[]&gt;,System.String[])">
      <summary>
        <para>Finalizes the current index, sorting and compiling of all the indexes.</para>
      </summary>
      <param name="threadCompletedCallback">Callback invoked when the index is ready to be used.</param>
      <param name="removedDocuments">Documents to be removed from current index (if any).</param>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.GetDocument(System.Int32)">
      <summary>
        <para>Returns a search document by its index.</para>
      </summary>
      <param name="index">Valid index of the document to access.</param>
      <returns>
        <para>Indexed search document.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.GetMetaInfo(System.String)">
      <summary>
        <para>Get metadata of a specific document.</para>
      </summary>
      <param name="documentId">Document id of the document.</param>
      <returns>
        <para>Metadata of the document.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.IndexDocument(System.String,System.Boolean)">
      <summary>
        <para>Function to override in a concrete SearchIndexer to index the content of a document.</para>
      </summary>
      <param name="document">Path of the document to index.</param>
      <param name="checkIfDocumentExists">Verifies if the document exists.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.IsReady">
      <summary>
        <para>Indicates if the index is fully built, up to date, and ready for search.</para>
      </summary>
      <returns>
        <para>Returns true if the index is ready for search.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.LoadBytes(System.Byte[],System.Action`1&lt;System.Boolean&gt;)">
      <summary>
        <para>Loads the index asynchronously (in another thread) from a binary buffer.</para>
      </summary>
      <param name="bytes">Binary buffer containing the index representation.</param>
      <param name="finished">Callback that triggers when the index is fully loaded. The callback parameters indicates if loading was succesful.</param>
      <returns>
        <para>Returns false if the index is of an unsupported version or if there was a problem initializing the reading thread.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.Read(System.IO.Stream,System.Boolean)">
      <summary>
        <para>Reads a stream and populates the index from it.</para>
      </summary>
      <param name="stream">The stream to read the index from.</param>
      <param name="checkVersionOnly">If true, verifies the version of the index.</param>
      <returns>
        <para>Returns false if the version of the index is not supported.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.SaveBytes">
      <summary>
        <para>Get the bytes representation of this index. See SearchIndexer.Write.</para>
      </summary>
      <returns>
        <para>Bytes representation of the index.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.Search(UnityEditor.Search.SearchContext,UnityEditor.Search.SearchProvider,System.Int32,System.Int32)">
      <summary>
        <para>Runs a search query in the index.</para>
      </summary>
      <param name="query">Search query to look for. If if matches any of the indexed variations, a result is returned.</param>
      <param name="context">The search context on which the query is applied.</param>
      <param name="provider">The search provider that initiated the search.</param>
      <param name="maxScore">Maximum match score of any matched Search Result. See SearchResult.score.</param>
      <param name="patternMatchLimit">Maximum number of matched Search Results that can be returned. See SearchResult.</param>
      <returns>
        <para>Returns a collection of Search Results matching the query.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.Search(System.String,UnityEditor.Search.SearchContext,UnityEditor.Search.SearchProvider,System.Int32,System.Int32)">
      <summary>
        <para>Runs a search query in the index.</para>
      </summary>
      <param name="query">Search query to look for. If if matches any of the indexed variations, a result is returned.</param>
      <param name="context">The search context on which the query is applied.</param>
      <param name="provider">The search provider that initiated the search.</param>
      <param name="maxScore">Maximum match score of any matched Search Result. See SearchResult.score.</param>
      <param name="patternMatchLimit">Maximum number of matched Search Results that can be returned. See SearchResult.</param>
      <returns>
        <para>Returns a collection of Search Results matching the query.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.Search(System.String,System.Int32,System.Int32)">
      <summary>
        <para>Runs a search query in the index.</para>
      </summary>
      <param name="query">Search query to look for. If if matches any of the indexed variations, a result is returned.</param>
      <param name="context">The search context on which the query is applied.</param>
      <param name="provider">The search provider that initiated the search.</param>
      <param name="maxScore">Maximum match score of any matched Search Result. See SearchResult.score.</param>
      <param name="patternMatchLimit">Maximum number of matched Search Results that can be returned. See SearchResult.</param>
      <returns>
        <para>Returns a collection of Search Results matching the query.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.SetMetaInfo(System.String,System.String)">
      <summary>
        <para>Set arbiraty metadata on a specific document.</para>
      </summary>
      <param name="documentId">Id of a document.</param>
      <param name="metadata">Metadata to bind to that document.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.SkipEntry(System.String,System.Boolean)">
      <summary>
        <para>Called when the index is built to see if a specified document needs to be indexed. See SearchIndexer.skipEntryHandler.</para>
      </summary>
      <param name="document">Path of a document.</param>
      <param name="checkRoots">Check Roots.</param>
      <returns>
        <para>Returns true if the document doesn't need to be indexed.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.Start(System.Boolean)">
      <summary>
        <para>Starts indexing entries.</para>
      </summary>
      <param name="clear">True if the the current index should be cleared.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchIndexer.Write(System.IO.Stream)">
      <summary>
        <para>Writes a binary representation of the index on a stream.</para>
      </summary>
      <param name="stream">Stream to write the index.</param>
    </member>
    <member name="T:UnityEditor.Search.SearchItem">
      <summary>
        <para>Search items are returned by the search provider to show to the user after a search is performed. The search item holds all the data that is used to sort and present the search results. Some members of a SearchItem can be specified in an asynchronous callback (see SearchItem.fetchThumbnail, SearchItem.fetchDescription, etc).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchItem.clear">
      <summary>
        <para>A search item representing none, usually used to clear the selection.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchItem.context">
      <summary>
        <para>Context used to create that item.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchItem.data">
      <summary>
        <para>Search provider defined content. It can be used to transport any data to custom search provider handlers (i.e. `fetchDescription`).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchItem.description">
      <summary>
        <para>If no description is provided, SearchProvider.fetchDescription will be called when the item is first displayed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchItem.id">
      <summary>
        <para>Unique ID of the search item for the search provider.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchItem.label">
      <summary>
        <para>Display name of the search item.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchItem.none">
      <summary>
        <para>A search item representing none, usually used to clear the selection.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchItem.options">
      <summary>
        <para>Flags that dictate how the search item is displayed and used.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchItem.preview">
      <summary>
        <para>Large preview of the search item. Usually cached by fetchPreview.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchItem.provider">
      <summary>
        <para>Back pointer to the search provider.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchItem.score">
      <summary>
        <para>The item relevance score will affect how the item gets sorted by the search provider. Lower scored items have more relevance and are prioritzed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchItem.thumbnail">
      <summary>
        <para>If no thumbnail is provided, SearchProvider.fetchThumbnail is called when the item is first displayed.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchItem.CompareTo(System.Object)">
      <summary>
        <para>Check if two SearchItems have the same ID.</para>
      </summary>
      <param name="other">Another SearchItem to compare.</param>
      <returns>
        <para>Returns 0 if SearchItems have the same ID.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchItem.CompareTo(UnityEditor.Search.SearchItem)">
      <summary>
        <para>Check if two SearchItems have the same ID.</para>
      </summary>
      <param name="other">Another SearchItem to compare.</param>
      <returns>
        <para>Returns 0 if SearchItems have the same ID.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchItem.#ctor(System.String)">
      <summary>
        <para>Construct a search item. A search item needs to have at least a unique ID for a given search query.</para>
      </summary>
      <param name="_id">Unique ID of the SearchItem.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchItem.Equals(System.Object)">
      <summary>
        <para>Check if two SearchItems have the same ID.</para>
      </summary>
      <param name="other">AnotherSearchItem to compare.</param>
      <returns>
        <para>Returns true if SearchItems have the same ID.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchItem.Equals(UnityEditor.Search.SearchItem)">
      <summary>
        <para>Check if two SearchItems have the same ID.</para>
      </summary>
      <param name="other">AnotherSearchItem to compare.</param>
      <returns>
        <para>Returns true if SearchItems have the same ID.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchItem.GetDescription(UnityEditor.Search.SearchContext,System.Boolean)">
      <summary>
        <para>Fetch and format description.</para>
      </summary>
      <param name="context">Any search context for the item search provider.</param>
      <param name="stripHTML">True if any HTML tags should be dropped (if the control does not support HTML).</param>
      <returns>
        <para>The search item description.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchItem.GetHashCode">
      <summary>
        <para>Default Hash of a SearchItem.</para>
      </summary>
      <returns>
        <para>A hash code for the current SearchItem.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchItem.GetLabel(UnityEditor.Search.SearchContext,System.Boolean)">
      <summary>
        <para>Fetch and format label.</para>
      </summary>
      <param name="context">Any search context for the item search provider.</param>
      <param name="stripHTML">True if any HTML tags should be dropped.</param>
      <returns>
        <para>The search item label.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchItem.GetPreview(UnityEditor.Search.SearchContext,UnityEngine.Vector2,UnityEditor.Search.FetchPreviewOptions,System.Boolean)">
      <summary>
        <para>Gets the search item preview if available, otherwise the preview is fetched at this time.</para>
      </summary>
      <param name="context">Search context used to fetch the preview.</param>
      <param name="size">Indicates the size of the desired preview.</param>
      <param name="options">Indicates the options used to fetch various preview types.</param>
      <param name="cacheThumbnail">Indicates if the preview thumbnail should be cached for next time.</param>
      <returns>
        <para>Returns the generated preview 2D texture.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchItem.GetThumbnail(UnityEditor.Search.SearchContext,System.Boolean)">
      <summary>
        <para>Gets the search item thumbnail if available, otherwise the thumbnail is fetched at this time. The thumbnail is usually used in list view compared to the grid view.</para>
      </summary>
      <param name="context">Search context used to fetch the search item thumbnail.</param>
      <param name="cacheThumbnail">Indicates if the search item thumbnail should be cached for next time.</param>
      <returns>
        <para>Returns the search item 2D texture.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchItem.ToObject">
      <summary>
        <para>Returns any valid Unity Object held by the search item.</para>
      </summary>
      <param name="type">Used to validate if the object is assignable to Type.</param>
      <returns>
        <para>Returns a Unity Object or null if there is none.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchItem.ToObject(System.Type)">
      <summary>
        <para>Returns any valid Unity Object held by the search item.</para>
      </summary>
      <param name="type">Used to validate if the object is assignable to Type.</param>
      <returns>
        <para>Returns a Unity Object or null if there is none.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchItem.ToObject">
      <summary>
        <para>Returns any valid Unity Object held by the search item.</para>
      </summary>
      <returns>
        <para>Used to validate if the object is assignable to T.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.Search.SearchItemOptions">
      <summary>
        <para>Indicates how the search item description needs to be formatted when presented to the user.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchItemOptions.AlwaysRefresh">
      <summary>
        <para>Indicates that the item will always be refreshed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchItemOptions.Compacted">
      <summary>
        <para>Uses Label instead of description for shorter display.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchItemOptions.Ellipsis">
      <summary>
        <para>If the description is longer than the width of the search view, truncates the description and adds an ellipsis.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchItemOptions.FullDescription">
      <summary>
        <para>The item description that is displayed in full mode. This is usually the case when the description is displayed in the Preview Inspector as opposed to the Result View.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchItemOptions.FuzzyHighlight">
      <summary>
        <para>Highlights parts of the description that match the Fuzzy Search Query.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchItemOptions.Highlight">
      <summary>
        <para>Highlights parts of the description that match the Search Query.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchItemOptions.None">
      <summary>
        <para>Uses default description.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchItemOptions.RightToLeft">
      <summary>
        <para>If the description is longer than the search view, keeps the last characters.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.SearchItemProviderAttribute">
      <summary>
        <para>Attribute used to declare a static method that will create a new search provider at load time.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.SearchProposition">
      <summary>
        <para>Search propositions are used to display choices to the user to add new filters to a search query.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchProposition.#ctor(System.String,System.String,System.String,System.Int32,UnityEditor.Search.TextCursorPlacement,UnityEngine.Texture2D)">
      <summary>
        <para>Create a new search proposition.</para>
      </summary>
      <param name="label">Display text of the proposition.</param>
      <param name="replacement">Text used to auto-complete the query when selected.</param>
      <param name="help">Help text used to display additional information about the search proposition.</param>
      <param name="priority">Value used to sort the propositions among other search propositions when displaying choices to the user.</param>
      <param name="moveCursor">Indicates when the text cursor should be moved when auto-completing the query with the selected proposition.</param>
      <param name="icon">Icon used to display the proposition.</param>
      <param name="color"></param>
    </member>
    <member name="T:UnityEditor.Search.SearchProvider">
      <summary>
        <para>SearchProvider manages search for specific types of items and manages all fields of a SearchItem such as thumbnails, descriptions, subfilters.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchProvider.actions">
      <summary>
        <para>Search provider actions.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchProvider.active">
      <summary>
        <para>Indicates if the search provider is active or not. Inactive search providers are ignored by the search service. The active state can be toggled in the search settings.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchProvider.fetchColumns">
      <summary>
        <para>Handler used to enumerate search columns to be used in the Search Table view.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchProvider.fetchDescription">
      <summary>
        <para>Handler to provide an asynchronous description for an item. Is called when the item is about to be displayed. Allows a plugin provider to only fetch long descriptions when they are needed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchProvider.fetchItems">
      <summary>
        <para>MANDATORY: Handler to get items for a given search context. The return value is an object that can be of type IEnumerable or IEnumerator. The enumeration of those objects should return SearchItems.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchProvider.fetchLabel">
      <summary>
        <para>Handler used to fetch and format the label of a search item.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchProvider.fetchPreview">
      <summary>
        <para>Similar to fetchThumbnail, fetchPreview usually returns a bigger preview. The Search UI will progressively show one preview each frame, preventing the UI from blocking if many previews need to be generated at the same time.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchProvider.fetchPropositions">
      <summary>
        <para>Handler used to enumerate search propositions when the user is using TAB to auto-complete a query.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchProvider.fetchThumbnail">
      <summary>
        <para>Handler to provide an asynchronous thumbnail for an item. Is called when the item is about to be displayed. Compared to preview a thumbnail should be small and returned as fast as possible. Use fetchPreview if you want to generate a preview that is bigger and slower to return. Allows a plugin provider to only fetch/generate previews when they are needed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchProvider.filterId">
      <summary>
        <para>Text token used to "filter" by search provider (ex:  "me:", "p:", "s:").</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchProvider.id">
      <summary>
        <para>Search provider unique ID.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchProvider.isEnabledForContextualSearch">
      <summary>
        <para>Called when search is invoked in "contextual mode". Returns true if the search provider is enabled for this search context.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchProvider.isExplicitProvider">
      <summary>
        <para>This search provider is only active when specified explicitly using the filterId.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchProvider.name">
      <summary>
        <para>Unique ID of the search provider.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchProvider.onDisable">
      <summary>
        <para>Called when the SearchWindow is closed. Allows the search provider to release cached resources.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchProvider.onEnable">
      <summary>
        <para>Called when the SearchWindow is opened. Allows the search provider to perform some caching.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchProvider.priority">
      <summary>
        <para>Hint to sort the search provider. Affects the order of search results and the order in which search providers are shown in the FilterWindow.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchProvider.showDetails">
      <summary>
        <para>Indicates if the search provider can show additional details or not.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchProvider.showDetailsOptions">
      <summary>
        <para>Defines the details options to be shown.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchProvider.startDrag">
      <summary>
        <para>If implemented, the item supports drag. It is up to the SearchProvider to properly set up the DragAndDrop manager.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchProvider.toObject">
      <summary>
        <para>Returns any valid Unity object held by the search item.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchProvider.trackSelection">
      <summary>
        <para>Called when the selection changed and can be tracked.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchProvider.CreateItem(UnityEditor.Search.SearchContext,System.String,System.Int32,System.String,System.String,UnityEngine.Texture2D,System.Object)">
      <summary>
        <para>Helper function to create a new search item for the current search provider.</para>
      </summary>
      <param name="context">Search context from the query that generates this item.</param>
      <param name="id">Unique ID of the search item. This is used to remove duplicates in the user view.</param>
      <param name="score">Relevance score of the search item. The relevance score is used to sort all the results per search provider. Lower relevance scores indicate more relevance and are shown first.</param>
      <param name="label">Relevance score of the search item. The relevance score is used to sort all the results per search provider. Lower relevance scores indicate more relevance and are shown first.</param>
      <param name="description">The search item description is displayed on the second line of the search item UI widget.</param>
      <param name="thumbnail">The search item thumbnail is displayed to the left of the item label and description as a preview.</param>
      <param name="data">The search item thumbnail is displayed to the left of the item label and description as a preview.</param>
      <returns>
        <para>The newly created search item attached to the current search provider.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchProvider.CreateItem(System.String,System.Int32,System.String,System.String,UnityEngine.Texture2D,System.Object)">
      <summary>
        <para>Helper function to create a new search item for the current search provider.</para>
      </summary>
      <param name="context">Search context from the query that generates this item.</param>
      <param name="id">Unique ID of the search item. This is used to remove duplicates in the user view.</param>
      <param name="score">Relevance score of the search item. The relevance score is used to sort all the results per search provider. Lower relevance scores indicate more relevance and are shown first.</param>
      <param name="label">Relevance score of the search item. The relevance score is used to sort all the results per search provider. Lower relevance scores indicate more relevance and are shown first.</param>
      <param name="description">The search item description is displayed on the second line of the search item UI widget.</param>
      <param name="thumbnail">The search item thumbnail is displayed to the left of the item label and description as a preview.</param>
      <param name="data">The search item thumbnail is displayed to the left of the item label and description as a preview.</param>
      <returns>
        <para>The newly created search item attached to the current search provider.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchProvider.CreateItem(UnityEditor.Search.SearchContext,System.String)">
      <summary>
        <para>Helper function to create a new search item for the current search provider.</para>
      </summary>
      <param name="context">Search context from the query that generates this item.</param>
      <param name="id">Unique ID of the search item. This is used to remove duplicates in the user view.</param>
      <param name="score">Relevance score of the search item. The relevance score is used to sort all the results per search provider. Lower relevance scores indicate more relevance and are shown first.</param>
      <param name="label">Relevance score of the search item. The relevance score is used to sort all the results per search provider. Lower relevance scores indicate more relevance and are shown first.</param>
      <param name="description">The search item description is displayed on the second line of the search item UI widget.</param>
      <param name="thumbnail">The search item thumbnail is displayed to the left of the item label and description as a preview.</param>
      <param name="data">The search item thumbnail is displayed to the left of the item label and description as a preview.</param>
      <returns>
        <para>The newly created search item attached to the current search provider.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchProvider.CreateItem(System.String)">
      <summary>
        <para>Helper function to create a new search item for the current search provider.</para>
      </summary>
      <param name="context">Search context from the query that generates this item.</param>
      <param name="id">Unique ID of the search item. This is used to remove duplicates in the user view.</param>
      <param name="score">Relevance score of the search item. The relevance score is used to sort all the results per search provider. Lower relevance scores indicate more relevance and are shown first.</param>
      <param name="label">Relevance score of the search item. The relevance score is used to sort all the results per search provider. Lower relevance scores indicate more relevance and are shown first.</param>
      <param name="description">The search item description is displayed on the second line of the search item UI widget.</param>
      <param name="thumbnail">The search item thumbnail is displayed to the left of the item label and description as a preview.</param>
      <param name="data">The search item thumbnail is displayed to the left of the item label and description as a preview.</param>
      <returns>
        <para>The newly created search item attached to the current search provider.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchProvider.CreateItem(System.String,System.String)">
      <summary>
        <para>Helper function to create a new search item for the current search provider.</para>
      </summary>
      <param name="context">Search context from the query that generates this item.</param>
      <param name="id">Unique ID of the search item. This is used to remove duplicates in the user view.</param>
      <param name="score">Relevance score of the search item. The relevance score is used to sort all the results per search provider. Lower relevance scores indicate more relevance and are shown first.</param>
      <param name="label">Relevance score of the search item. The relevance score is used to sort all the results per search provider. Lower relevance scores indicate more relevance and are shown first.</param>
      <param name="description">The search item description is displayed on the second line of the search item UI widget.</param>
      <param name="thumbnail">The search item thumbnail is displayed to the left of the item label and description as a preview.</param>
      <param name="data">The search item thumbnail is displayed to the left of the item label and description as a preview.</param>
      <returns>
        <para>The newly created search item attached to the current search provider.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchProvider.CreateItem(System.String,System.String,System.String,UnityEngine.Texture2D,System.Object)">
      <summary>
        <para>Helper function to create a new search item for the current search provider.</para>
      </summary>
      <param name="context">Search context from the query that generates this item.</param>
      <param name="id">Unique ID of the search item. This is used to remove duplicates in the user view.</param>
      <param name="score">Relevance score of the search item. The relevance score is used to sort all the results per search provider. Lower relevance scores indicate more relevance and are shown first.</param>
      <param name="label">Relevance score of the search item. The relevance score is used to sort all the results per search provider. Lower relevance scores indicate more relevance and are shown first.</param>
      <param name="description">The search item description is displayed on the second line of the search item UI widget.</param>
      <param name="thumbnail">The search item thumbnail is displayed to the left of the item label and description as a preview.</param>
      <param name="data">The search item thumbnail is displayed to the left of the item label and description as a preview.</param>
      <returns>
        <para>The newly created search item attached to the current search provider.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchProvider.CreateItem(UnityEditor.Search.SearchContext,System.String,System.String,System.String,UnityEngine.Texture2D,System.Object)">
      <summary>
        <para>Helper function to create a new search item for the current search provider.</para>
      </summary>
      <param name="context">Search context from the query that generates this item.</param>
      <param name="id">Unique ID of the search item. This is used to remove duplicates in the user view.</param>
      <param name="score">Relevance score of the search item. The relevance score is used to sort all the results per search provider. Lower relevance scores indicate more relevance and are shown first.</param>
      <param name="label">Relevance score of the search item. The relevance score is used to sort all the results per search provider. Lower relevance scores indicate more relevance and are shown first.</param>
      <param name="description">The search item description is displayed on the second line of the search item UI widget.</param>
      <param name="thumbnail">The search item thumbnail is displayed to the left of the item label and description as a preview.</param>
      <param name="data">The search item thumbnail is displayed to the left of the item label and description as a preview.</param>
      <returns>
        <para>The newly created search item attached to the current search provider.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchProvider.#ctor(System.String)">
      <summary>
        <para>Create a new SearchProvider.</para>
      </summary>
      <param name="id">Search Provider unique ID.</param>
      <param name="displayName">Search Provider pretty name, used to display in UI.</param>
      <param name="fetchItemsHandler">Handler responsible for populating a list of SearchItems according to a query.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchProvider.#ctor(System.String,System.String)">
      <summary>
        <para>Create a new SearchProvider.</para>
      </summary>
      <param name="id">Search Provider unique ID.</param>
      <param name="displayName">Search Provider pretty name, used to display in UI.</param>
      <param name="fetchItemsHandler">Handler responsible for populating a list of SearchItems according to a query.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchProvider.#ctor(System.String,System.Func`4&lt;UnityEditor.Search.SearchContext,System.Collections.Generic.List`1&lt;UnityEditor.Search.SearchItem&gt;,UnityEditor.Search.SearchProvider,System.Object&gt;)">
      <summary>
        <para>Create a new SearchProvider.</para>
      </summary>
      <param name="id">Search Provider unique ID.</param>
      <param name="displayName">Search Provider pretty name, used to display in UI.</param>
      <param name="fetchItemsHandler">Handler responsible for populating a list of SearchItems according to a query.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchProvider.#ctor(System.String,System.Func`3&lt;UnityEditor.Search.SearchContext,UnityEditor.Search.SearchProvider,System.Object&gt;)">
      <summary>
        <para>Create a new SearchProvider.</para>
      </summary>
      <param name="id">Search Provider unique ID.</param>
      <param name="displayName">Search Provider pretty name, used to display in UI.</param>
      <param name="fetchItemsHandler">Handler responsible for populating a list of SearchItems according to a query.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchProvider.#ctor(System.String,System.String,System.Func`3&lt;UnityEditor.Search.SearchContext,UnityEditor.Search.SearchProvider,System.Object&gt;)">
      <summary>
        <para>Create a new SearchProvider.</para>
      </summary>
      <param name="id">Search Provider unique ID.</param>
      <param name="displayName">Search Provider pretty name, used to display in UI.</param>
      <param name="fetchItemsHandler">Handler responsible for populating a list of SearchItems according to a query.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchProvider.#ctor(System.String,System.String,System.Func`4&lt;UnityEditor.Search.SearchContext,System.Collections.Generic.List`1&lt;UnityEditor.Search.SearchItem&gt;,UnityEditor.Search.SearchProvider,System.Object&gt;)">
      <summary>
        <para>Create a new SearchProvider.</para>
      </summary>
      <param name="id">Search Provider unique ID.</param>
      <param name="displayName">Search Provider pretty name, used to display in UI.</param>
      <param name="fetchItemsHandler">Handler responsible for populating a list of SearchItems according to a query.</param>
    </member>
    <member name="T:UnityEditor.Search.SearchQueryError">
      <summary>
        <para>Represents a query parsing error.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchQueryError.context">
      <summary>
        <para>The context in which this error was logged.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchQueryError.index">
      <summary>
        <para>Index where the error occurred.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchQueryError.length">
      <summary>
        <para>Length of the block that was being parsed.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchQueryError.provider">
      <summary>
        <para>Which search provider logged this error.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchQueryError.reason">
      <summary>
        <para>The reason for the error.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchQueryError.type">
      <summary>
        <para>The type of query error.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchQueryError.#ctor(System.Int32,System.Int32,System.String,UnityEditor.Search.SearchContext,UnityEditor.Search.SearchProvider,System.Boolean,UnityEditor.Search.SearchQueryErrorType)">
      <summary>
        <para>Creates a new SearchQueryError.</para>
      </summary>
      <param name="index">Index where the error occurred.</param>
      <param name="length">Length of the block that was being parsed.</param>
      <param name="reason">The reason for the error.</param>
      <param name="context">The context in which this error was logged.</param>
      <param name="provider">Which search provider logged this error.</param>
      <param name="fromSearchQuery">Set to true if this error comes from parsing the searchQuery. This will correctly offset the index with respect to the raw text.</param>
      <param name="type">The type of query error. See Search.SearchQueryErrorType. Defaults to Search.SearchQueryErrorType.Error|SearchQueryErrorType.Error.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchQueryError.#ctor(UnityEditor.Search.QueryError,UnityEditor.Search.SearchContext,UnityEditor.Search.SearchProvider,System.Boolean)">
      <summary>
        <para>Creates a new SearchQueryError from an existing Search.QueryError|QueryError.</para>
      </summary>
      <param name="error">The original Search.QueryError|QueryError.</param>
      <param name="context">The context in which this error was logged.</param>
      <param name="provider">Which search provider logged this error.</param>
      <param name="fromSearchQuery">Set to true if this error comes from parsing the searchQuery. This will correctly offset the index with respect to the raw text.</param>
    </member>
    <member name="T:UnityEditor.Search.SearchQueryErrorType">
      <summary>
        <para>Enum representing the possible types of query errors.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchQueryErrorType.Error">
      <summary>
        <para>Represents an error.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchQueryErrorType.Warning">
      <summary>
        <para>Represents a warning.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.SearchResult">
      <summary>
        <para>Contains a SearchItem that was retrieved from a query.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchResult.id">
      <summary>
        <para>ID of the document containing that result.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchResult.index">
      <summary>
        <para>Index of the document containing that result.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchResult.nil">
      <summary>
        <para>Represents a null search result.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchResult.score">
      <summary>
        <para>Relavance score of the result. A lower score indicates it is a more relevant result.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchResult.valid">
      <summary>
        <para>Checks if a search result is valid.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchResult.CompareTo(UnityEditor.Search.SearchResult)">
      <summary>
        <para>Compares Search Results using their index values.</para>
      </summary>
      <param name="other">Another SearchResult to compare.</param>
      <returns>
        <para>Returns true if both SearchResults have the same index.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchResult.#ctor(System.String,System.Int32,System.Int32)">
      <summary>
        <para>Creates a new SearchResult.</para>
      </summary>
      <param name="id">ID of the document containing the result.</param>
      <param name="index">Index of the document containing the result.</param>
      <param name="score">Relevance core of the result. A lower score indicates it is a more relevant result.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchResult.#ctor(System.Int32)">
      <summary>
        <para>Creates a new SearchResult.</para>
      </summary>
      <param name="id">ID of the document containing the result.</param>
      <param name="index">Index of the document containing the result.</param>
      <param name="score">Relevance core of the result. A lower score indicates it is a more relevant result.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchResult.#ctor(System.Int32,System.Int32)">
      <summary>
        <para>Creates a new SearchResult.</para>
      </summary>
      <param name="id">ID of the document containing the result.</param>
      <param name="index">Index of the document containing the result.</param>
      <param name="score">Relevance core of the result. A lower score indicates it is a more relevant result.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchResult.Equals(UnityEditor.Search.SearchResult)">
      <summary>
        <para>Compare Search Result using their index values.</para>
      </summary>
      <param name="other">Another SearchResult to compare.</param>
      <returns>
        <para>Returns true if both SearchResults have the same index.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchResult.Equals(System.Object)">
      <summary>
        <para>Compare Search Result using their index values.</para>
      </summary>
      <param name="other">Another SearchResult to compare.</param>
      <returns>
        <para>Returns true if both SearchResults have the same index.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchResult.GetHashCode">
      <summary>
        <para>Computes the hash code for this SearchResult from its index property.</para>
      </summary>
      <returns>
        <para>HashCode of the SearchResult.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.Search.SearchSelection">
      <summary>
        <para>Provides methods to give readonly access to the current list of selected items in Search.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchSelection.Contains(UnityEditor.Search.SearchItem)">
      <summary>
        <para>Checks if the search item is contained in the current selection.</para>
      </summary>
      <param name="item">Search item to be compared.</param>
      <returns>
        <para>True if the item is contained in the selection.</para>
      </returns>
    </member>
    <member name="P:UnityEditor.Search.SearchSelection.Count">
      <summary>
        <para>The number of items selected.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchSelection.#ctor(System.Collections.Generic.IList`1&lt;System.Int32&gt;,UnityEditor.Search.ISearchList)">
      <summary>
        <para>Creates a new SearchSelection.</para>
      </summary>
      <param name="selection">Current list of selected SearchItem indices.</param>
      <param name="filteredItems">List of SearchItems displayed in Search.</param>
      <param name="items">Filtered items.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchSelection.#ctor(System.Collections.Generic.IEnumerable`1&lt;UnityEditor.Search.SearchItem&gt;)">
      <summary>
        <para>Creates a new SearchSelection.</para>
      </summary>
      <param name="selection">Current list of selected SearchItem indices.</param>
      <param name="filteredItems">List of SearchItems displayed in Search.</param>
      <param name="items">Filtered items.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchSelection.First">
      <summary>
        <para>Gets the first selected item in the selection.</para>
      </summary>
      <returns>
        <para>First selected item in selection. Returns null if no items are selected.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchSelection.GetEnumerator">
      <summary>
        <para>Gets an enumerator on the currently selected SearchItems.</para>
      </summary>
      <returns>
        <para>Enumerator on the currently selected SearchItems.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchSelection.Last">
      <summary>
        <para>Gets the last selected item in the selection.</para>
      </summary>
      <returns>
        <para>Last selected item in selection. Returns null if no items are selected.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchSelection.MaxIndex">
      <summary>
        <para>Highest selected index of any item in the selection.</para>
      </summary>
      <returns>
        <para>Returns the highest selected index.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchSelection.MinIndex">
      <summary>
        <para>Lowest selected index of any item in the selection.</para>
      </summary>
      <returns>
        <para>Returns the lowest selected index.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.Search.SearchSelectorArgs">
      <summary>
        <para>Search selector arguments used when the search selector callback is invoked.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchSelectorArgs.current">
      <summary>
        <para>Current search item for which a value must be selected.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.SearchSelectorAttribute">
      <summary>
        <para>Search selector attribute used to define how a custom value can be selected from a search item.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.SearchService">
      <summary>
        <para>Principal Search API to initiate searches and fetch results.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchService.CreateContext(System.String)">
      <summary>
        <para>Creates context from a list of search provider IDs.</para>
      </summary>
      <param name="searchText">Search Query.</param>
      <param name="provider">Search provider (This search provider does not need to be active or registered).</param>
      <param name="providerId">Unique search provider ID string (i.e. asset, scene, find, etc.)</param>
      <param name="providerIds">List of search provider IDs.</param>
      <param name="providers">List of search providers.</param>
      <param name="flags">Options defining how the query is performed.</param>
      <returns>
        <para>Returns a new SearchContext.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchService.CreateContext(System.String,UnityEditor.Search.SearchFlags)">
      <summary>
        <para>Creates context from a list of search provider IDs.</para>
      </summary>
      <param name="searchText">Search Query.</param>
      <param name="provider">Search provider (This search provider does not need to be active or registered).</param>
      <param name="providerId">Unique search provider ID string (i.e. asset, scene, find, etc.)</param>
      <param name="providerIds">List of search provider IDs.</param>
      <param name="providers">List of search providers.</param>
      <param name="flags">Options defining how the query is performed.</param>
      <returns>
        <para>Returns a new SearchContext.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchService.CreateContext(UnityEditor.Search.SearchProvider,System.String)">
      <summary>
        <para>Creates context from a list of search provider IDs.</para>
      </summary>
      <param name="searchText">Search Query.</param>
      <param name="provider">Search provider (This search provider does not need to be active or registered).</param>
      <param name="providerId">Unique search provider ID string (i.e. asset, scene, find, etc.)</param>
      <param name="providerIds">List of search provider IDs.</param>
      <param name="providers">List of search providers.</param>
      <param name="flags">Options defining how the query is performed.</param>
      <returns>
        <para>Returns a new SearchContext.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchService.CreateContext(System.String,System.String,UnityEditor.Search.SearchFlags)">
      <summary>
        <para>Creates context from a list of search provider IDs.</para>
      </summary>
      <param name="searchText">Search Query.</param>
      <param name="provider">Search provider (This search provider does not need to be active or registered).</param>
      <param name="providerId">Unique search provider ID string (i.e. asset, scene, find, etc.)</param>
      <param name="providerIds">List of search provider IDs.</param>
      <param name="providers">List of search providers.</param>
      <param name="flags">Options defining how the query is performed.</param>
      <returns>
        <para>Returns a new SearchContext.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchService.CreateContext(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.String,UnityEditor.Search.SearchFlags)">
      <summary>
        <para>Creates context from a list of search provider IDs.</para>
      </summary>
      <param name="searchText">Search Query.</param>
      <param name="provider">Search provider (This search provider does not need to be active or registered).</param>
      <param name="providerId">Unique search provider ID string (i.e. asset, scene, find, etc.)</param>
      <param name="providerIds">List of search provider IDs.</param>
      <param name="providers">List of search providers.</param>
      <param name="flags">Options defining how the query is performed.</param>
      <returns>
        <para>Returns a new SearchContext.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchService.CreateContext(System.Collections.Generic.IEnumerable`1&lt;UnityEditor.Search.SearchProvider&gt;,System.String,UnityEditor.Search.SearchFlags)">
      <summary>
        <para>Creates context from a list of search provider IDs.</para>
      </summary>
      <param name="searchText">Search Query.</param>
      <param name="provider">Search provider (This search provider does not need to be active or registered).</param>
      <param name="providerId">Unique search provider ID string (i.e. asset, scene, find, etc.)</param>
      <param name="providerIds">List of search provider IDs.</param>
      <param name="providers">List of search providers.</param>
      <param name="flags">Options defining how the query is performed.</param>
      <returns>
        <para>Returns a new SearchContext.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchService.CreateIndex(System.String&amp;,UnityEditor.Search.IndexingOptions&amp;,System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.Action`3&lt;System.String,System.String,System.Action&gt;)">
      <summary>
        <para>Create a new search index.</para>
      </summary>
      <param name="name">Unique name of the search index.</param>
      <param name="options">Indexing option set.</param>
      <param name="roots">Search index roots, for example "Assets" to index all Assets under Assets.</param>
      <param name="includes">Exclusive list of assets to be indexed. If this list is empty, everything will be indexed.</param>
      <param name="excludes">Patterns to exclude assets to be indexed under roots.</param>
      <param name="onIndexReady">Callback that gets invoked when the index is created and ready to be used.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchService.GetAction(UnityEditor.Search.SearchProvider,System.String)">
      <summary>
        <para>Returns the search action for a given search provider and search action ID.</para>
      </summary>
      <param name="provider">Search provider to look up.</param>
      <param name="actionId">Unique action ID within the search provider.</param>
      <returns>
        <para>The matching action.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchService.GetItems(UnityEditor.Search.SearchContext,UnityEditor.Search.SearchFlags)">
      <summary>
        <para>Initiates a search and returns all search items matching the search context. Other items can be found later using asynchronous searches.</para>
      </summary>
      <param name="context">The current search context.</param>
      <param name="options">Options defining how the query is performed.</param>
      <returns>
        <para>A list of search items matching the search query.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchService.GetProvider(System.String)">
      <summary>
        <para>Returns the data of a search provider given its ID.</para>
      </summary>
      <param name="providerId">Unique ID of the search provider.</param>
      <returns>
        <para>The matching search provider.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchService.IsIndexReady(System.String)">
      <summary>
        <para>Indicates if a search index is ready to be used.</para>
      </summary>
      <param name="name">Unique name of the index. This name usually matches the one displayed in the Search Index Manager or the one used to invoke SearchService.CreateIndex.</param>
      <returns>
        <para>Returns true if the search index is ready to be used.</para>
      </returns>
    </member>
    <member name="P:UnityEditor.Search.SearchService.OrderedProviders">
      <summary>
        <para>Returns the list of search providers sorted by priority.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchService.Providers">
      <summary>
        <para>Returns the list of all search providers (active or not).</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchService.Refresh">
      <summary>
        <para>Clears everything and reloads all search providers. Use with care. Useful for unit tests.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchService.RefreshWindows">
      <summary>
        <para>Refresh all currently opened Search windows.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchService.Request(System.String,UnityEditor.Search.SearchFlags)">
      <summary>
        <para>Executes a search request that will fetch search results asynchronously.</para>
      </summary>
      <param name="searchText">Search query to be executed.</param>
      <param name="context">Search context used to track asynchronous requests. You need to dispose of the context yourself.</param>
      <param name="options">Options defining how the query is performed.</param>
      <returns>
        <para>Asynchronous list of search items.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchService.Request(UnityEditor.Search.SearchContext,UnityEditor.Search.SearchFlags)">
      <summary>
        <para>Executes a search request that will fetch search results asynchronously.</para>
      </summary>
      <param name="searchText">Search query to be executed.</param>
      <param name="context">Search context used to track asynchronous requests. You need to dispose of the context yourself.</param>
      <param name="options">Options defining how the query is performed.</param>
      <returns>
        <para>Asynchronous list of search items.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchService.Request(System.String,System.Action`2&lt;UnityEditor.Search.SearchContext,System.Collections.Generic.IList`1&lt;UnityEditor.Search.SearchItem&gt;&gt;,UnityEditor.Search.SearchFlags)">
      <summary>
        <para>Executes a search request and calls back the specified function when all results are available.</para>
      </summary>
      <param name="onSearchCompleted">Callback invoked when the search request is completed and all results are available.</param>
      <param name="searchText"></param>
      <param name="options"></param>
      <param name="context"></param>
    </member>
    <member name="M:UnityEditor.Search.SearchService.Request(UnityEditor.Search.SearchContext,System.Action`2&lt;UnityEditor.Search.SearchContext,System.Collections.Generic.IList`1&lt;UnityEditor.Search.SearchItem&gt;&gt;,UnityEditor.Search.SearchFlags)">
      <summary>
        <para>Executes a search request and calls back the specified function when all results are available.</para>
      </summary>
      <param name="onSearchCompleted">Callback invoked when the search request is completed and all results are available.</param>
      <param name="searchText"></param>
      <param name="options"></param>
      <param name="context"></param>
    </member>
    <member name="M:UnityEditor.Search.SearchService.Request(System.String,System.Action`2&lt;UnityEditor.Search.SearchContext,System.Collections.Generic.IEnumerable`1&lt;UnityEditor.Search.SearchItem&gt;&gt;,System.Action`1&lt;UnityEditor.Search.SearchContext&gt;,UnityEditor.Search.SearchFlags)">
      <summary>
        <para>Executes a search request and callbacks for every batch of incoming results. It is possible to get duplicate items, so filter the final list if needed.</para>
      </summary>
      <param name="onIncomingItems">Callback invoked everytime a batch of results are found and available.</param>
      <param name="onSearchCompleted">Callback invoked when the search request is completed.</param>
      <param name="searchText"></param>
      <param name="options"></param>
      <param name="context"></param>
    </member>
    <member name="M:UnityEditor.Search.SearchService.Request(UnityEditor.Search.SearchContext,System.Action`2&lt;UnityEditor.Search.SearchContext,System.Collections.Generic.IEnumerable`1&lt;UnityEditor.Search.SearchItem&gt;&gt;,System.Action`1&lt;UnityEditor.Search.SearchContext&gt;,UnityEditor.Search.SearchFlags)">
      <summary>
        <para>Executes a search request and callbacks for every batch of incoming results. It is possible to get duplicate items, so filter the final list if needed.</para>
      </summary>
      <param name="onIncomingItems">Callback invoked everytime a batch of results are found and available.</param>
      <param name="onSearchCompleted">Callback invoked when the search request is completed.</param>
      <param name="searchText"></param>
      <param name="options"></param>
      <param name="context"></param>
    </member>
    <member name="M:UnityEditor.Search.SearchService.SetActive(System.String,System.Boolean)">
      <summary>
        <para>Activates or deactivates a search provider. Call Refresh after this to take effect on the next search.</para>
      </summary>
      <param name="providerId">Search provider ID to activate or deactivate.</param>
      <param name="active">Activation state.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchService.ShowContextual(System.String[])">
      <summary>
        <para>Open the search window using a specific context (activating specific filters).</para>
      </summary>
      <param name="providerIds">Unique IDs of search providers to enable when opening the search view.</param>
      <returns>
        <para>Returns the search view window instance.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchService.ShowPicker(UnityEditor.Search.SearchContext,System.Action`2&lt;UnityEditor.Search.SearchItem,System.Boolean&gt;,System.Action`1&lt;UnityEditor.Search.SearchItem&gt;,System.Func`2&lt;UnityEditor.Search.SearchItem,System.Boolean&gt;,System.Collections.Generic.IEnumerable`1&lt;UnityEditor.Search.SearchItem&gt;,System.String,System.Single,System.Single,System.Single,UnityEditor.Search.SearchFlags)">
      <summary>
        <para>Open a search item picker window.</para>
      </summary>
      <param name="context">Search context to start with.</param>
      <param name="selectHandler">Callback invoked when an item is selected.</param>
      <param name="trackingHandler">Callback invoked when an item is clicked without it being the final selection.</param>
      <param name="filterHandler">Callback invoked to filter search item results to display.</param>
      <param name="title">Topic to search.</param>
      <param name="itemSize">Initial result view item size.</param>
      <param name="defaultWidth">Initial width of the window.</param>
      <param name="defaultHeight">Initial height of the window.</param>
      <param name="subset">Initial set of items to be searched.</param>
      <param name="flags">Options defining how the query is performed.</param>
      <returns>
        <para>Creates a new search window.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchService.ShowPicker(UnityEditor.Search.SearchViewState)">
      <summary>
        <para>Open a Search Picker window.</para>
      </summary>
      <param name="viewState">Search view state used to open the Search Picker window.</param>
      <returns>
        <para>Creates a new search window.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchService.ShowWindow(UnityEditor.Search.SearchContext,System.String,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        <para>Creates a new search window.</para>
      </summary>
      <param name="context">Search context to start with.</param>
      <param name="topic">Topic to search.</param>
      <param name="saveFilters">True if user search provider filters should be saved for next search session.</param>
      <param name="reuseExisting">True if the active providers should be saved for the next session.</param>
      <param name="multiselect">True if the search supports multi-selection.</param>
      <param name="defaultWidth">Initial width of the window.</param>
      <param name="defaultHeight">Initial height of the window.</param>
      <param name="dockable">If true, creates a dockable search window (that is closed when an item is activated). If false, it creates a dropdown (borderless, undockable and unmovable) version of the search window.</param>
      <returns>
        <para>Returns the search view window instance.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchService.ShowWindow(UnityEditor.Search.SearchViewState)">
      <summary>
        <para>Creates a new search window.</para>
      </summary>
      <param name="viewState">Search view state used to open the Search window.</param>
      <returns>
        <para>Returns the search view window instance.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.Search.SearchUtils">
      <summary>
        <para>Provides various utility functions that are used by SearchProvider.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchUtils.entrySeparators">
      <summary>
        <para>Separators used to split an entry into indexable tokens.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.FetchGameObjects(UnityEngine.SceneManagement.Scene)">
      <summary>
        <para>Utility function to fetch all the game objects in a particular scene.</para>
      </summary>
      <param name="scene">Scene to get objects from.</param>
      <returns>
        <para>The array of game objects in the scene.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.FetchGameObjects">
      <summary>
        <para>Utility function to fetch all the game objects in a particular scene.</para>
      </summary>
      <param name="scene">Scene to get objects from.</param>
      <returns>
        <para>The array of game objects in the scene.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.FindShiftLeftVariations(System.String)">
      <summary>
        <para>Extract all variations on a word. As an example: the word hello would have the following variations: h, he, hel, hell, hello.</para>
      </summary>
      <param name="word">Word to extract variations from.</param>
      <returns>
        <para>List of variations for a word.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.GetAssetPath(UnityEditor.Search.SearchItem&amp;)">
      <summary>
        <para>Returns the asset path of a search item if any.</para>
      </summary>
      <param name="item">Search item.</param>
      <returns>
        <para>Asset path of the item or null if none can be found.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.GetHierarchyAssetPath(UnityEngine.GameObject,System.Boolean)">
      <summary>
        <para>Get the path of the scene (or prefab) containing a GameObject.</para>
      </summary>
      <param name="gameObject">GameObject to find the scene path.</param>
      <param name="prefabOnly">If true, will return a path only if the GameObject is a prefab.</param>
      <returns>
        <para>Returns the path of a scene or prefab.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.GetHierarchyPath(UnityEngine.GameObject,System.Boolean)">
      <summary>
        <para>Get the hierarchy path of a GameObject including the scene name if includeScene is set to true.</para>
      </summary>
      <param name="gameObject">GameObject to extract a path from.</param>
      <param name="includeScene">If true, will append the scene name to the path.</param>
      <returns>
        <para>Returns the path of a GameObject.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.GetObjectPath(UnityEngine.Object)">
      <summary>
        <para>Get the path of a Unity Object. If it is a GameObject or a Component it is the &lt;see cref="SearchUtils.GetTransformPath(Transform)"/&gt;. Else it is the asset name.</para>
      </summary>
      <param name="obj">Object to obtain a path from.</param>
      <returns>
        <para>Returns the path of an object.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.GetTransformPath(UnityEngine.Transform)">
      <summary>
        <para>Format the pretty name of a Transform component by appending all the parent hierarchy names.</para>
      </summary>
      <param name="tform">Transform to extract name from.</param>
      <returns>
        <para>Returns a transform name using "/" as hierarchy separator.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.MatchSearchGroups(UnityEditor.Search.SearchContext,System.String,System.Boolean)">
      <summary>
        <para>Helper function to match a string against the SearchContext. This will try to match the search query against each token of content (similar to the AddComponent menu workflow).</para>
      </summary>
      <param name="context">Search context containing the searchQuery that search tries to match.</param>
      <param name="content">String content that is tokenized and used to match the search query.</param>
      <param name="ignoreCase">Perform matching while ignoring letter casing.</param>
      <returns>
        <para>If a match has occurred.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.SelectMultipleItems(System.Collections.Generic.IEnumerable`1&lt;UnityEditor.Search.SearchItem&gt;,System.Boolean)">
      <summary>
        <para>Select and ping multiple objects in the Project Browser.</para>
      </summary>
      <param name="items">Search Items to select and ping.</param>
      <param name="focusProjectBrowser">If true, will focus the project browser before pinging the objects.</param>
      <param name="pingSelection">If true, will ping the selected objects.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.SelectMultipleItems(System.Collections.Generic.IEnumerable`1&lt;UnityEditor.Search.SearchItem&gt;,System.Boolean,System.Boolean)">
      <summary>
        <para>Select and ping multiple objects in the Project Browser.</para>
      </summary>
      <param name="items">Search Items to select and ping.</param>
      <param name="focusProjectBrowser">If true, will focus the project browser before pinging the objects.</param>
      <param name="pingSelection">If true, will ping the selected objects.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.SplitCamelCase(System.String)">
      <summary>
        <para>Tokenize a string each capital letter.</para>
      </summary>
      <param name="source">Word to split according to camelCase.</param>
      <returns>
        <para>Camel case tokens.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.SplitEntryComponents(System.String,System.Char[])">
      <summary>
        <para>Split an entry according to a specified list of separators.</para>
      </summary>
      <param name="entry">Entry to split.</param>
      <param name="entrySeparators">List of separators that indicate split points.</param>
      <returns>
        <para>Returns list of tokens in lowercase.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Search.SearchUtils.SplitFileEntryComponents(System.String,System.Char[]&amp;)">
      <summary>
        <para>Split a file entry according to a list of separators and find all the variations on the entry name.</para>
      </summary>
      <param name="path">Path to tokenize.</param>
      <param name="entrySeparators">Entry separators used to tokenize the path.</param>
      <returns>
        <para>Returns list of tokens and variations in lowercase.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.Search.SearchValue">
      <summary>
        <para>Search value is used to extend a query engine with custom type parsers and filters to search results by value.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchValue.boolean">
      <summary>
        <para>Boolean value.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchValue.invalid">
      <summary>
        <para>Represent an invalid search value.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchValue.number">
      <summary>
        <para>Number value.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchValue.text">
      <summary>
        <para>Text representation of the value.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchValue.type">
      <summary>
        <para>Indicates the concrete type of the search value.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Search.SearchValue.valid">
      <summary>
        <para>Indicates if the search value is valid.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchValue.SetupEngine(UnityEditor.Search.QueryEngine`1&lt;T&gt;)">
      <summary>
        <para>Extended a query engine to work with dynamic search values.</para>
      </summary>
      <param name="queryEngine">Query engine to add extended search value filters and parsers.</param>
    </member>
    <member name="T:UnityEditor.Search.SearchValue.ValueType">
      <summary>
        <para>Search value supported types.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchValue.ValueType.Bool">
      <summary>
        <para>Indicates that the search value is a Boolean value.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchValue.ValueType.Color">
      <summary>
        <para>Indicates that the search value is a UnityEngine.Color value.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchValue.ValueType.Enum">
      <summary>
        <para>Indicates that the search value is an enum value holding the text and integer representation of the Enum.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchValue.ValueType.Nil">
      <summary>
        <para>Indicates that the search value is null.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchValue.ValueType.Number">
      <summary>
        <para>Indicates that the search value is a numeric value.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchValue.ValueType.Object">
      <summary>
        <para>Indicates that the search value is an UnityEngine.Object.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchValue.ValueType.Text">
      <summary>
        <para>Indicates that the search value is a text value.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchValue.ValueType.Vector2">
      <summary>
        <para>Indicates that the search value hold a UnityEngine.Vector2 value.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchValue.ValueType.Vector3">
      <summary>
        <para>Indicates that the search value hold a UnityEngine.Vector3 value.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchValue.ValueType.Vector4">
      <summary>
        <para>Indicates that the search value hold a UnityEngine.Vector4 value.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.SearchViewState">
      <summary>
        <para>Search view state is used to create new Search windows. See SearchService.ShowWindow.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchViewState.flags">
      <summary>
        <para>Various search view options.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchViewState.group">
      <summary>
        <para>Indicates the group or tab to be selected when the Search window opens.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchViewState.itemSize">
      <summary>
        <para>Indicates the item size to be used when the Search window opens.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchViewState.position">
      <summary>
        <para>If defined, indicates the location of the new Search window when it opens.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.SearchViewState.title">
      <summary>
        <para>Indicates the search topic title.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Search.SearchViewState.#ctor(UnityEditor.Search.SearchContext)">
      <summary>
        <para>Create search view flags used to create a new Search window.</para>
      </summary>
      <param name="context">Initial search context.</param>
      <param name="flags">Initial search view flags.</param>
    </member>
    <member name="M:UnityEditor.Search.SearchViewState.#ctor(UnityEditor.Search.SearchContext,UnityEngine.Search.SearchViewFlags)">
      <summary>
        <para>Create search view flags used to create a new Search window.</para>
      </summary>
      <param name="context">Initial search context.</param>
      <param name="flags">Initial search view flags.</param>
    </member>
    <member name="T:UnityEditor.Search.ShowDetailsOptions">
      <summary>
        <para>Defines what details are shown in the preview inspector panel for the search view.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.ShowDetailsOptions.Actions">
      <summary>
        <para>Shows selected item possible actions.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.ShowDetailsOptions.Default">
      <summary>
        <para>Default set of options used when SearchProvider.showDetails is set to true.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.ShowDetailsOptions.DefaultGroup">
      <summary>
        <para>Indicates that the provider will always be displayed as a group (tab) even if the result set is empty.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.ShowDetailsOptions.Description">
      <summary>
        <para>Show an extended item description.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.ShowDetailsOptions.Inspector">
      <summary>
        <para>Show an embedded inspector for the selected object.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.ShowDetailsOptions.ListView">
      <summary>
        <para>Indicates that this search provider wants to display its items in a list view if possible.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.ShowDetailsOptions.None">
      <summary>
        <para>No options are defined.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.ShowDetailsOptions.Preview">
      <summary>
        <para>Show a large preview.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Search.TextCursorPlacement">
      <summary>
        <para>Where to place the cursor in the text. (see ISearchView.SetSearchText).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.TextCursorPlacement.Default">
      <summary>
        <para>Do not move the cursor.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.TextCursorPlacement.MoveAutoComplete">
      <summary>
        <para>Default cursor position (end of the line of text).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.TextCursorPlacement.MoveLineEnd">
      <summary>
        <para>Move the cursor to the end of the line of text.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.TextCursorPlacement.MoveLineStart">
      <summary>
        <para>Move the cursor to the beginning of the line of text.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.TextCursorPlacement.MoveToEndOfPreviousWord">
      <summary>
        <para>Move the cursor to the end of the previous word.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.TextCursorPlacement.MoveToStartOfNextWord">
      <summary>
        <para>Move the cursor to the start of the previous word.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.TextCursorPlacement.MoveWordLeft">
      <summary>
        <para>Move the cursor one word to the left.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.TextCursorPlacement.MoveWordRight">
      <summary>
        <para>Move the cursor one word to the right.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Search.TextCursorPlacement.None">
      <summary>
        <para>Do not move the cursor.</para>
      </summary>
    </member>
  </members>
</doc>
