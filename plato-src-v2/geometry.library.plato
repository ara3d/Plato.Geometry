library Geometry
{
    //==
	// 2D Lines
	
	Length(x: Line2D): Number => (x.B - x.A).Length;
	Direction(x: Line2D): Vector2D => (x.B - x.A);
	Ray2D(x: Line2D): Ray2D => (x.A, x.Direction);
    Reverse(x: Line2D): Line2D => (x.B, x.A);
    Start(x: Line2D): Vector2D => x.A;
    End(x: Line2D): Vector2D => x.B;

	//== 
	// 3D Lines
	 
	Length(x: Line3D): Number => (x.B - x.A).Length;
	Direction(x: Line3D): Vector3D => (x.B - x.A);
	Ray3D(x: Line3D): Ray3D => (x.A, x.Direction.Normalize);
    Reverse(x: Line3D): Line3D => (x.B, x.A);
    Bounds3D(x: Line3D): Bounds3D => (x.A.Min(x.B), x.A.Max(x.B));
    Start(x: Line3D): Vector3D => x.A;
    End(x: Line3D): Vector3D => x.B;

	//==
	// 3D Rays

	Angle(a: Ray3D, b: Ray3D): Angle => a.Direction.Angle(b.Direction);
    Line3D(r: Ray3D): Line3D => (r.Origin, r.Origin + r.Direction);
    Reverse(r: Ray3D): Ray3D => (r.Origin, -r.Direction);

	//==
	// Triangle 2D functions 

	Area(t: Triangle2D): Number => (t.A.X * (t.C.Y - t.B.Y) + t.B.X * (t.A.Y - t.C.Y) + t.C.X * (t.B.Y - t.A.Y)).Half;
	Flip(t: Triangle2D): Triangle2D => (t.C, t.B, t.A);
    Center(t: Triangle2D): Vector2D => (t.A + t.B + t.C) / 3.0;
	Barycentric(t: Triangle2D, uv: Vector2D): Vector2D => t.A.Barycentric(t.B, t.C, uv);
    
	//==
    // Triangle3D functions

    Flip(t: Triangle3D): Triangle3D => (t.C, t.B, t.A);        
    Normal(t: Triangle3D): Vector3D => (t.B - t.A).Cross(t.C - t.A).Normalize;
    Center(t: Triangle3D): Vector3D => (t.A + t.B + t.C) / 3.0;
    Plane(t: Triangle3D): Plane => (t.Normal, t.Normal.Dot(t.A));
	Barycentric(t: Triangle3D, uv: Vector2D): Vector3D => t.A.Barycentric(t.B, t.C, uv);    
    LineA(t: Triangle3D): Line3D => (t.A, t.B);        
    LineB(t: Triangle3D): Line3D => (t.B, t.C);        
    LineC(t: Triangle3D): Line3D => (t.C, t.A);        
    Barycentric(t: Triangle3D, uv: Vector2D): Vector3D => t.A.Barycentric(t.B, t.C, uv);
    
    //==
    // Rect2D functions 

    Width(x: Rect2D): Number => x.Size.X;
    Height(x: Rect2D): Number => x.Size.Y;
    Left(x: Rect2D): Number => x.Center.X - x.Width.Half;
    Right(x: Rect2D): Number => x.Left + x.Width;
    Bottom(x: Rect2D): Number => x.Center.Y - x.Height.Half;
    Top(x: Rect2D): Number => x.Bottom + x.Height;
    BottomLeft(x: Rect2D): Vector2D => (x.Left, x.Bottom);
    BottomRight(x: Rect2D): Vector2D => (x.Right, x.Bottom);
    TopRight(x: Rect2D): Vector2D => (x.Right, x.Top);
    TopLeft(x: Rect2D): Vector2D => (x.Left, x.Top);
    Quad2D(x: Rect2D): Quad2D => (x.BottomLeft, x.BottomRight, x.TopRight, x.TopLeft);
    Points(x: Rect2D): IArray<Vector2D> => x.Quad2D;

    //==
    // Quad2D functions

    Flip(q: Quad2D): Quad2D => (q.D, q.C, q.B, q.A);        
    Center(q: Quad2D): Vector2D => (q.A + q.B + q.C + q.D) / 4.0;
    LineA(q: Quad2D): Line2D => (q.A, q.B);        
    LineB(q: Quad2D): Line2D => (q.B, q.C);        
    LineC(q: Quad2D): Line2D => (q.C, q.D);        
    LineD(q: Quad2D): Line2D => (q.D, q.A);            
    TriangleA(q: Quad2D): Triangle2D => (q.A, q.B, q.C);        
    TriangleB(q: Quad2D): Triangle2D => (q.C, q.D, q.A);        

    //==
    // Quad3D functions

    Flip(q: Quad3D): Quad3D => (q.D, q.C, q.B, q.A);        
    Center(q: Quad3D): Vector3D => (q.A + q.B + q.C + q.D) / 4.0;
    LineA(q: Quad3D): Line3D => (q.A, q.B);        
    LineB(q: Quad3D): Line3D => (q.B, q.C);        
    LineC(q: Quad3D): Line3D => (q.C, q.D);        
    LineD(q: Quad3D): Line3D => (q.D, q.A);            
    TriangleA(q: Quad3D): Triangle3D => (q.A, q.B, q.C);        
    TriangleB(q: Quad3D): Triangle3D => (q.C, q.D, q.A);        

    //==
    // Vector functions
    
    Vector3D(v: Vector2D): Vector3D => (v.X, v.Y, 0);
    MidPoint(a: Vector2D, b: Vector2D): Vector2D => (a + b) / 2.0;
    Line(a: Vector2D, b: Vector2D): Line2D => (a, b);
    Ray(a: Vector2D, b: Vector2D): Ray2D => (a, b);
    RayTo(a: Vector2D, b: Vector2D): Ray2D => (a, b - a);
    Cross(a: Vector2D, b: Vector2D): Number => a.X * b.Y - a.Y * b.X;

    Vector4D(v: Vector3D): Vector4D => v.ToVector4D(0);
    ToVector4D(v: Vector3D, w: Number): Vector4D => (v.X, v.Y, v.Z, w);
    XZY(v: Vector3D): Vector3D => (v.X, v.Z, v.Y);
    YXZ(v: Vector3D): Vector3D => (v.Y, v.X, v.Z);
    YZX(v: Vector3D): Vector3D => (v.Y, v.Z, v.X);
    ZXY(v: Vector3D): Vector3D => (v.Z, v.X, v.Y);
    ZYX(v: Vector3D): Vector3D => (v.Z, v.Y, v.X);
    XY(v: Vector3D): Vector2D => (v.X, v.Y);
    YX(v: Vector3D): Vector2D => (v.Y, v.X);
    XZ(v: Vector3D): Vector2D => (v.X, v.Z);
    ZX(v: Vector3D): Vector2D => (v.Z, v.X);
    YZ(v: Vector3D): Vector2D => (v.Y, v.Z);
    ZY(v: Vector3D): Vector2D => (v.Z, v.Y);
    MidPoint(a: Vector3D, b: Vector3D): Vector3D => (a + b) / 2.0;
    Line(a: Vector3D, b: Vector3D): Line3D => (a, b);
    Ray(a: Vector3D, b: Vector3D): Ray3D => (a, b);
    RayTo(a: Vector3D, b: Vector3D): Ray3D => (a, b - a);
    Project(v: Vector3D, p: Plane): Vector3D => v - p.Normal * p.Normal.Dot(v);
    To2D(v: Vector3D): Vector2D => (v.X, v.Y);
    Cross(a: Vector3D, b: Vector3D): Vector3D => (a.Y * b.Z - a.Z * b.Y, a.Z * b.X - a.X * b.Z, a.X * b.Y - a.Y * b.X);
    MixedProduct(a: Vector3D, b: Vector3D, c: Vector3D): Number => a.Cross(b).Dot(c);

    Count(c: Complex): Integer => 2;   
    Count(v: Vector2D): Integer => 2;
    Count(v: Vector3D): Integer => 3;
    Count(v: Vector4D): Integer => 4;   
    At(c: Complex, n: Integer): Number => n == 0 ? c.IReal : c.Imaginary;
    At(v: Vector2D, n: Integer): Number => n == 0 ? v.X : v.Y;
    At(v: Vector3D, n: Integer): Number => n == 0 ? v.X : n == 1 ? v.Y : v.Z;
    At(v: Vector4D, n: Integer): Number => n == 0 ? v.X : n == 1 ? v.Y : n == 2 ? v.Z : v.W;

    ToVector3D(v: Vector4D): Vector3D => (v.X, v.Y, v.Z);

    Length(a: IVector): Number => a.Magnitude;
    LengthSquared(a: IVector): Number => a.MagnitudeSquared;
    Sum(v: IVector): Number  => v.Reduce(0.0, (a, b) => a + b);
    SumSquares(v: IVector): Number => v.Square.Sum;   
    MagnitudeSquared(v: IVector): Number => v.SumSquares;    
    Magnitude(v: IVector): Number => v.MagnitudeSquared.SquareRoot;    
    Dot(v1: IVector, v2: IVector): Number => (v1 * v2).Sum;
    Average(v: IVector): Number => v.Sum / v.Count;        
    Normalize(x: IVector): IVector => x.MagnitudeSquared > 0 ? x / x.Magnitude : x.Zero;
    Reflect(v: IVector, normal: IVector): IVector => v - normal * v.Dot(normal) * 2.0;
    Project(v: IVector, other: IVector): IVector => other * v.Dot(other);
    Distance(a: IVector, b: IVector): Number => (b - a).Magnitude;
    DistanceSquared(a: IVector, b: IVector): Number => (b - a).Magnitude;
    Angle(a: IVector, b: IVector): Angle => (a.Dot(b) / (a.Magnitude * b.Magnitude)).Acos;     
    IsParallel(a: Vector3D, b: Vector3D): Boolean => a.Dot(b).Abs > (1.0 - 1e-6);
	
    //==
    // Bounds3D functions

    Center(x: Bounds3D): Vector3D => (x.Min + x.Max).Half;
    Corners(x: Bounds3D): IArray<Vector3D> => [
        (x.Min.X, x.Min.Y, x.Min.Z), 
        (x.Max.X, x.Min.Y, x.Min.Z), 
        (x.Min.X, x.Max.Y, x.Min.Z), 
        (x.Max.X, x.Max.Y, x.Min.Z), 
        (x.Min.X, x.Min.Y, x.Max.Z), 
        (x.Max.X, x.Min.Y, x.Max.Z),
        (x.Min.X, x.Max.Y, x.Max.Z), 
        (x.Max.X, x.Max.Y, x.Max.Z)];
    Empty(_: Bounds3D): Bounds3D => (Vector3D.MaxValue, Vector3D.MinValue);
    Bounds(xs: IArray<Vector3D>): Bounds3D => xs.Reduce(Bounds3D.Empty, (a, b) => a.Include(b));

	//==
	// Closed functions 

    Closed(x: IClosedShape): Boolean => true;
	Closed(x: IOpenShape): Boolean => false;
	
	//== 
	// Misc functions 

    CirclePoints(n: Integer): IArray<Vector2D> => n.Fractions.Map(x => x.Turns.UnitCircle);
	Points(x: RegularPolygon): IArray<Vector2D> => x.NumPoints.CirclePoints;
    At(x: RegularPolygon, n: Integer): Vector2D => (n.Number / x.NumPoints).Turns.UnitCircle;
    Count(x: RegularPolygon): Integer => x.NumPoints;
    
    Eval(x: Line2D, t: Number): Vector2D => x.A.Lerp(x.B, t);
    Eval(x: Line3D, t: Number): Vector3D => x.A.Lerp(x.B, t);  

    //==
    // 2D to 3D
    
    To3D(x: Vector2D): Vector3D => x;
    To3D(x: Line2D): Line3D => (x.A.To3D, x.B.To3D);
    To3D(x: Triangle2D): Triangle3D => (x.A.To3D, x.B.To3D, x.C.To3D);
    To3D(x: Quad2D): Quad3D => (x.A.To3D, x.B.To3D, x.C.To3D, x.D.To3D);
    To3D(x: Bounds2D): Bounds3D => (x.Min.To3D, x.Max.To3D);
    To3D(x: Ray2D): Ray3D => (x.Origin.To3D, x.Direction.To3D);
    To3D(x: PolyLine2D): PolyLine3D => (x.Points.Map(p => p.To3D), x.Closed);

    Line3D(x: Line2D): Line3D => x.To3D;
    Triangle3D(x: Triangle2D): Triangle3D => x.To3D;
    Quad3D(x: Quad2D): Quad3D => x.To3D;
    Bounds3D(x: Bounds2D): Bounds3D => x.To3D;
    Ray3D(x: Ray2D): Ray3D => x.To3D;
    PolyLine3D(x: PolyLine2D): PolyLine3D => x.To3D;

    //==
    // Some constants 

    Unit(_: Triangle2D): Triangle2D => 
        ((-0.5, -3.0.Sqrt.Half), 
        (-0.5, 3.0.Sqrt.Half), 
        (0, 1));

    Unit(_: Quad2D): Quad2D =>  ((0, 0), (1, 0), (1, 1), (0, 1));

    UnitX(_: Vector2D): Vector2D => (1, 0);
    UnitY(_: Vector2D): Vector2D => (0, 1);
    
    UnitX(_: Vector3D): Vector3D => (1, 0, 0);
    UnitY(_: Vector3D): Vector3D => (0, 1, 0);
    UnitZ(_: Vector3D): Vector3D => (0, 0, 1);

    MinValue(_: Vector3D): Vector3D => (MinNumber, MinNumber, MinNumber);
    MaxValue(_: Vector3D): Vector3D => (MaxNumber, MaxNumber, MaxNumber);

    UnitX(_: Vector4D): Vector4D => (1, 0, 0, 0);
    UnitY(_: Vector4D): Vector4D => (0, 1, 0, 0);
    UnitZ(_: Vector4D): Vector4D => (0, 0, 1, 0);
    UnitW(_: Vector4D): Vector4D => (0, 0, 0, 1);

    Identity(_: Matrix3x3): Matrix3x3 => ((1, 0, 0), (0, 1, 0), (0, 0, 1));
    Identity(_: Matrix4x4): Matrix4x4 => ((1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1));
    Identity(_: Quaternion): Quaternion => (0, 0, 0, 1);
}