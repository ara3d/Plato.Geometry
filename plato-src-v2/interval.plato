library IInterval
{
    Size(x: IInterval<$T>): $T
        => x.End - x.Start;
 
    Lerp(x: IInterval<$T>, amount: Number): $T
        => x.Start.Lerp(x.End, amount);
    
    Reverse(x: IInterval<$T>): IInterval<$T>  
        => (x.End, x.Start);
        
    Center(x: IInterval<$T>): $T
        => x.Lerp(0.5);    
    
    Contains(x: IInterval<$T>, value: $T): Boolean 
        => value.Between(x.Start, x.End);
    
    Contains(x: IInterval<$T>, y: IInterval<$T>): Boolean 
        => x.Contains(y.Start) && x.Contains(y.End);
    
    Overlaps(x: IInterval<$T>, y: IInterval<$T>): Boolean 
        => x.Contains(y.Start) || x.Contains(y.End) || y.Contains(x.Start) || y.Contains(x.End);
    
    SplitAt(x: IInterval<$T>, t: Number): Tuple2<IInterval<$T>, IInterval<$T>> 
        => (x.Left(t), x.Right(t));
    
    Split(x: IInterval<$T>): Tuple2<IInterval<$T>, IInterval<$T>>
        => x.SplitAt(0.5);

    Left(x: IInterval<$T>, t: Number): IInterval<$T>
        => (x.Start, x.Lerp(t));
    
    Right(x: IInterval<$T>, t: Number): IInterval<$T>
        => (x.Lerp(t), x.End);

    MoveTo(x: IInterval<$T>, v: $T): IInterval<$T>
        => (v, v + x.Size);
    
    LeftHalf(x: IInterval<$T>): IInterval<$T> 
        => x.Left(0.5);
    
    RightHalf(x: IInterval<$T>): IInterval<$T> 
        => x.Right(0.5);
    
    Recenter(x: IInterval<$T>, c: $T): IInterval<$T> 
        => (c - x.Size.Half, c + x.Size.Half);
    
    Clamp(x: IInterval<$T>, y: IInterval<$T>): IInterval<$T>
        => (x.Clamp(y.Start), x.Clamp(y.End));
    
    Clamp(x: IInterval<$T>, value: $T): $T
        => value.Clamp(x.Start, x.End);
        
    LinearSpace(count: Integer): IArray<Number>
        => count.Fractions;

    LinearSpaceExclusive(count: Integer): IArray<Number>
        => count.FractionsExclusive;

    LinearSpace(interval: IInterval<$T>, count: Integer): IArray<$T>
        => count.LinearSpace.Map(x => interval.Lerp(x));

    LinearSpaceExclusive(interval: IInterval<$T>, count: Integer): IArray<$T>
        => count.LinearSpaceExclusive.Map(x => interval.Lerp(x));

    GeometricSpace(count: Integer): IArray<Number>
        => count.LinearSpace.Map(x => 1.0.Pow(x));

    GeometricSpaceExclusive(count: Integer): IArray<Number>
        => count.LinearSpaceExclusive.Map(x => 1.0.Pow(x));

    GeometricSpace(interval: IInterval<$T>, count: Integer): IArray<$T>
        => count.GeometricSpace.Map(x => interval.Lerp(x));

    GeometricSpaceExclusive(interval: IInterval<$T>, count: Integer): IArray<$T>
        => count.GeometricSpaceExclusive.Map(x => interval.Lerp(x));

    Intervals(count: Integer): IArray<NumberInterval>
        => (count + 1).LinearSpace.WithNext((a, b) => new NumberInterval(a, b));

    Subdivide(interval: IInterval<$T>, start: Number, end: Number): IInterval<$T>
		=> (interval.Lerp(start), interval.Lerp(end));

    Subdivide(interval: IInterval<$T>, subInterval: NumberInterval): IInterval<$T>
		=> interval.Subdivide(subInterval.Start, subInterval.End);

    Subdivide(interval: IInterval<$T>, count: Integer): IArray<IInterval<$T>>
		=> count.Intervals.Map(i => interval.Subdivide(i));
}
