
// Used for types that represent transformations in 3D space
interface ITransform3D
{
    // Transforms a point using the transformation
	Transform(x: Self, v: Vector3): Vector3;

    // Transforms a normal vector using the transformation (ignores scale and translation)
	TransformNormal(x: Self, v: Vector3): Vector3;

    // Returns a 4x4 matrix representation of the transformation. 
    Matrix(x: Self): Matrix4x4;

    // Returns an inverted version of itself
    Inverse: ITransform3D;
}

//==
// 3D Transforms
//==

type IdentityTransform3D
	implements IValue, ITransform3D
{
}

type Translation3D
    implements IValue, ITransform3D
{
    Translation: Vector3;
}

type Rotation3D
    implements IValue, ITransform3D
{
    Quaternion: Quaternion;
}

type Scale3D 
    implements IValue, ITransform3D
{
    Scale: Vector3;
}

type Transform3D
    implements IValue, ITransform3D
{
    Translation: Translation3D;
    Rotation: Rotation3D;
    Scale: Scale3D;
}

public MatrixTransform3D
    implements IValue, ITransform3D
{
    Matrix: Matrix4x4;
}

type RigidTransform3D
    implements IValue, ITransform3D
{
    Translation: Translation3D;
    Rotation: Rotation3D;
}

type Frame3D
    implements IValue, ITransform3D
{
    Forward: Vector3;
    Up: Vector3;
    Position: Vector3;
}

type AxisAngle
    implements IValue, ITransform3D
{
    Axis: Vector3;
    Angle: Angle;
}

type EulerAngles
    implements IValue, ITransform3D
{
    Yaw: Angle;
    Pitch: Angle;
    Roll: Angle;
}

library Transforms
{
    //==
    // Vector functions

    Matrix(v: Vector3): Matrix4x4
		=> Matrix4x4.CreateTranslation(v);

    //==
    // Translation3D functions

    Matrix(t: Translation3D): Matrix4x4
        => t.Translation.Matrix;

    Transform(t: Translation3D, v: Vector3): Vector3
        => v + t.Translation;
    
    TransformNormal(t: Translation3D, v: Vector3): Vector3
        => v;
            
    //==
    // IdentityTransform3D

	Transform(t: IdentityTransform3D, v: Vector3): Vector3
		=> v;

	TransformNormal(t: IdentityTransform3D, v: Vector3): Vector3
		=> v;

    Matrix(t: IdentityTransform3D): Matrix4x4
		=> Matrix4x4.Identity;

    //==
    // Transform3D

	Transform(t: Transform3D, v: Vector3): Vector3
		=> (t.Rotation.Transform(v) + t.Translation) * t.Scale;

	TransformNormal(t: Transform3D, v: Vector3): Vector3
		=> t.Rotation.TransformNormal(v);

    Matrix(t: Transform3D): Matrix4x4
		=> t.Scale.Matrix * t.Rotation.Matrix * t.Translation.Matrix;

    //==
    // RigidTransform3D

	Transform(p: RigidTransform3D, v: Vector3): Vector3
		=> p.Rotation.Transform(v) + p.Position;

	TransformNormal(p: RigidTransform3D, v: Vector3): Vector3
		=> p.Rotation.TransformNormal(v);

    Matrix(p: RigidTransform3D): Matrix4x4
        => p.Rotation.Matrix * p.Position.Matrix;

    //==
    // AxisAngle
    
    Transform(aa: AxisAngle, v: Vector3): Vector3
		=> aa.Quaternion.Transform(v);

    TransformNormal(aa: AxisAngle, v: Vector3): Vector3
        => aa.Transform( v);

    Quaternion(aa: AxisAngle): Quaternion
	{
        var axis = aa.Axis.Normalize;
        var sinHalfAngle = aa.Angle.Half.Sin;
        var cosHalfAngle = aa.Angle.Half.Cos;
        return (
            axis.X * sinHalfAngle,
            axis.Y * sinHalfAngle,
            axis.Z * sinHalfAngle,
            cosHalfAngle);
    }

    Matrix(aa: AxisAngle): Matrix4x4
		=> aa.Quaternion.Matrix;

    //==
    // EulerAngles

    
    Transform(e: EulerAngles, v: Vector3): Vector3
        => e.Quaternion.Transform(v);

    TransformNormal(e: EulerAngles, v: Vector3): Vector3
        => e.Quaternion.TransformNormal(v);

    Matrix(e: EulerAngles): Matrix4x4
		=> e.Quaternion.Matrix;

    //==
	// Frame3D

	RigidTransform3D(f: Frame3D): RigidTransform3D
        => (f.Position, f.Forward.LookRotation(f.Up));

    Transform(f: Frame3D, v: Vector3): Vector3
		=> f.RigidTransform3D.Transform(v);

	TransformNormal(f: Frame3D, v: Vector3): Vector3
		=> f.RigidTransform3D.TransformNormal(v);

    Matrix(f: Frame3D): Matrix4x4
		=> f.RigidTransform3D.Matrix;

    //==
    // Rotation

    Transform(r: Rotation3D, v: Vector3): Vector3
    	=> r.Quaternion.Transform(v);

    TransformNormal(r: Rotation3D, v: Vector3): Vector3
    	=> r.Quaternion.TransformNormal(v);

    Matrix(r: Rotation3D): Matrix4x4
        => r.Quaternion.Matrix;

    //==
    // Quaternion

    Quaternion(v: Vector4D): Quaternion
        => (v.X, v.Y, v.Z, v.W);

    Vector4D(q: Quaternion): Vector4D
		=> (q.X, q.Y, q.Z, q.W);

    Magnitude(q: Quaternion): Number
        => q.Vector4D.Magnitude;

    MagnitudeSquared(q: Quaternion): Number
        => q.Vector4D.MagnitudeSquared;
 
    AxisAngle(v: Vector3, a: Angle): AxisAngle
        => (v, a);

}