Found 13 function groups

Group ArrayLibrary_0:Library

3. Count
  Type: ((IArray2D, $615:)) => Integer
  Sig: ArrayLibrary_0:Library.Count(xs: (IArray2D, $615:)): Integer
  Body: Multiply(NumRows(xs), NumColumns(xs))
  # functions: 10 AMBIGUOUS
    - INumerical_4:Library.Multiply(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Multiply(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Multiply(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9005:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Multiply(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9165:Concept:IAny, ParameterDef=b$9167:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Tuple3(Add(Multiply(X(v), M11(m)), Add(Multiply(Y(v), M21(m)), Add(Multiply(Z(v), M31(m)), M41(m)))), Add(Multiply(X(v), M12(m)), Add(Multiply(Y(v), M22(m)), Add(Multiply(Z(v), M32(m)), M42(m)))), Add(Multiply(X(v), M13(m)), Add(Multiply(Y(v), M23(m)), Add(Multiply(Z(v), M33(m)), M43(m)))))
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Multiply(Column1(m), s), Multiply(Column2(m), s), Multiply(Column3(m), s), Multiply(Column4(m), s))
    - Transforms_26:Library.Multiply(a: ConcreteType:Matrix4x4,b: ConcreteType:Matrix4x4): ConcreteType:Matrix4x4 [Library]; => CreateFromRows(Matrix4x4, Tuple4(Add(Multiply(M11(a), M11(b)), Add(Multiply(M12(a), M21(b)), Add(Multiply(M13(a), M31(b)), Multiply(M14(a), M41(b))))), Add(Multiply(M11(a), M12(b)), Add(Multiply(M12(a), M22(b)), Add(Multiply(M13(a), M32(b)), Multiply(M14(a), M42(b))))), Add(Multiply(M11(a), M13(b)), Add(Multiply(M12(a), M23(b)), Add(Multiply(M13(a), M33(b)), Multiply(M14(a), M43(b))))), Add(Multiply(M11(a), M14(b)), Add(Multiply(M12(a), M24(b)), Add(Multiply(M13(a), M34(b)), Multiply(M14(a), M44(b)))))), Tuple4(Add(Multiply(M21(a), M11(b)), Add(Multiply(M22(a), M21(b)), Add(Multiply(M23(a), M31(b)), Multiply(M24(a), M41(b))))), Add(Multiply(M21(a), M12(b)), Add(Multiply(M22(a), M22(b)), Add(Multiply(M23(a), M32(b)), Multiply(M24(a), M42(b))))), Add(Multiply(M21(a), M13(b)), Add(Multiply(M22(a), M23(b)), Add(Multiply(M23(a), M33(b)), Multiply(M24(a), M43(b))))), Add(Multiply(M21(a), M14(b)), Add(Multiply(M22(a), M24(b)), Add(Multiply(M23(a), M34(b)), Multiply(M24(a), M44(b)))))), Tuple4(Add(Multiply(M31(a), M11(b)), Add(Multiply(M32(a), M21(b)), Add(Multiply(M33(a), M31(b)), Multiply(M34(a), M41(b))))), Add(Multiply(M31(a), M12(b)), Add(Multiply(M32(a), M22(b)), Add(Multiply(M33(a), M32(b)), Multiply(M34(a), M42(b))))), Add(Multiply(M31(a), M13(b)), Add(Multiply(M32(a), M23(b)), Add(Multiply(M33(a), M33(b)), Multiply(M34(a), M43(b))))), Add(Multiply(M31(a), M14(b)), Add(Multiply(M32(a), M24(b)), Add(Multiply(M33(a), M34(b)), Multiply(M34(a), M44(b)))))), Tuple4(Add(Multiply(M41(a), M11(b)), Add(Multiply(M42(a), M21(b)), Add(Multiply(M43(a), M31(b)), Multiply(M44(a), M41(b))))), Add(Multiply(M41(a), M12(b)), Add(Multiply(M42(a), M22(b)), Add(Multiply(M43(a), M32(b)), Multiply(M44(a), M42(b))))), Add(Multiply(M41(a), M13(b)), Add(Multiply(M42(a), M23(b)), Add(Multiply(M43(a), M33(b)), Multiply(M44(a), M43(b))))), Add(Multiply(M41(a), M14(b)), Add(Multiply(M42(a), M24(b)), Add(Multiply(M43(a), M34(b)), Multiply(M44(a), M44(b)))))))
    - Transforms_26:Library.Multiply(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Multiply(Vector4D(q), scalar)
    - Transforms_26:Library.Multiply(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Plato.Compiler.Symbols.BlockStatement
    _ARG_ 0: NumRows(xs) => Integer
    _ARG_ 1: NumColumns(xs) => Integer

4. Count
  Type: ((IArray3D, $616:)) => Integer
  Sig: ArrayLibrary_0:Library.Count(xs: (IArray3D, $616:)): Integer
  Body: Multiply(NumRows(xs), Multiply(NumColumns(xs), NumLayers(xs)))
  # functions: 10 AMBIGUOUS
    - INumerical_4:Library.Multiply(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Multiply(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Multiply(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9005:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Multiply(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9165:Concept:IAny, ParameterDef=b$9167:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Tuple3(Add(Multiply(X(v), M11(m)), Add(Multiply(Y(v), M21(m)), Add(Multiply(Z(v), M31(m)), M41(m)))), Add(Multiply(X(v), M12(m)), Add(Multiply(Y(v), M22(m)), Add(Multiply(Z(v), M32(m)), M42(m)))), Add(Multiply(X(v), M13(m)), Add(Multiply(Y(v), M23(m)), Add(Multiply(Z(v), M33(m)), M43(m)))))
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Multiply(Column1(m), s), Multiply(Column2(m), s), Multiply(Column3(m), s), Multiply(Column4(m), s))
    - Transforms_26:Library.Multiply(a: ConcreteType:Matrix4x4,b: ConcreteType:Matrix4x4): ConcreteType:Matrix4x4 [Library]; => CreateFromRows(Matrix4x4, Tuple4(Add(Multiply(M11(a), M11(b)), Add(Multiply(M12(a), M21(b)), Add(Multiply(M13(a), M31(b)), Multiply(M14(a), M41(b))))), Add(Multiply(M11(a), M12(b)), Add(Multiply(M12(a), M22(b)), Add(Multiply(M13(a), M32(b)), Multiply(M14(a), M42(b))))), Add(Multiply(M11(a), M13(b)), Add(Multiply(M12(a), M23(b)), Add(Multiply(M13(a), M33(b)), Multiply(M14(a), M43(b))))), Add(Multiply(M11(a), M14(b)), Add(Multiply(M12(a), M24(b)), Add(Multiply(M13(a), M34(b)), Multiply(M14(a), M44(b)))))), Tuple4(Add(Multiply(M21(a), M11(b)), Add(Multiply(M22(a), M21(b)), Add(Multiply(M23(a), M31(b)), Multiply(M24(a), M41(b))))), Add(Multiply(M21(a), M12(b)), Add(Multiply(M22(a), M22(b)), Add(Multiply(M23(a), M32(b)), Multiply(M24(a), M42(b))))), Add(Multiply(M21(a), M13(b)), Add(Multiply(M22(a), M23(b)), Add(Multiply(M23(a), M33(b)), Multiply(M24(a), M43(b))))), Add(Multiply(M21(a), M14(b)), Add(Multiply(M22(a), M24(b)), Add(Multiply(M23(a), M34(b)), Multiply(M24(a), M44(b)))))), Tuple4(Add(Multiply(M31(a), M11(b)), Add(Multiply(M32(a), M21(b)), Add(Multiply(M33(a), M31(b)), Multiply(M34(a), M41(b))))), Add(Multiply(M31(a), M12(b)), Add(Multiply(M32(a), M22(b)), Add(Multiply(M33(a), M32(b)), Multiply(M34(a), M42(b))))), Add(Multiply(M31(a), M13(b)), Add(Multiply(M32(a), M23(b)), Add(Multiply(M33(a), M33(b)), Multiply(M34(a), M43(b))))), Add(Multiply(M31(a), M14(b)), Add(Multiply(M32(a), M24(b)), Add(Multiply(M33(a), M34(b)), Multiply(M34(a), M44(b)))))), Tuple4(Add(Multiply(M41(a), M11(b)), Add(Multiply(M42(a), M21(b)), Add(Multiply(M43(a), M31(b)), Multiply(M44(a), M41(b))))), Add(Multiply(M41(a), M12(b)), Add(Multiply(M42(a), M22(b)), Add(Multiply(M43(a), M32(b)), Multiply(M44(a), M42(b))))), Add(Multiply(M41(a), M13(b)), Add(Multiply(M42(a), M23(b)), Add(Multiply(M43(a), M33(b)), Multiply(M44(a), M43(b))))), Add(Multiply(M41(a), M14(b)), Add(Multiply(M42(a), M24(b)), Add(Multiply(M43(a), M34(b)), Multiply(M44(a), M44(b)))))))
    - Transforms_26:Library.Multiply(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Multiply(Vector4D(q), scalar)
    - Transforms_26:Library.Multiply(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Plato.Compiler.Symbols.BlockStatement
    _ARG_ 0: NumRows(xs) => Integer
    _ARG_ 1: Multiply(NumColumns(xs), NumLayers(xs)) => $787:constraint=INumberLike

7. IsEmpty
  Type: ((IArray, $621:)) => Boolean
  Sig: ArrayLibrary_0:Library.IsEmpty(xs: (IArray, $621:)): Boolean
  Body: Equals(Count(xs), 0)
  # functions: 6 AMBIGUOUS
    - INumerical_4:Library.Equals(a: Concept:IEquatable,b: Concept:IEquatable): ConcreteType:Boolean [Library]; => All(Zip(FieldValues(a), FieldValues(b), (\(ParameterDef=a0$8765:Concept:IAny, ParameterDef=b0$8767:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>), (\(ParameterDef=x$8788:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - Intrinsics_22:Library.Equals(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Boolean [Intrinsic]; => 
    - Intrinsics_22:Library.Equals(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Boolean [Intrinsic]; => 
    - Intrinsics_22:Library.Equals(x: ConcreteType:Character,y: ConcreteType:Character): ConcreteType:Boolean [Intrinsic]; => 
    - Intrinsics_22:Library.Equals(x: ConcreteType:String,y: ConcreteType:String): ConcreteType:Boolean [Intrinsic]; => 
    - Intrinsics_22:Library.Equals(x: ConcreteType:Boolean,y: ConcreteType:Boolean): ConcreteType:Boolean [Intrinsic]; => 
    _ARG_ 0: Count(xs) => Integer
    _ARG_ 1: 0 => Integer

8. First
  Type: ((IArray, $622:)) => $623:
  Sig: ArrayLibrary_0:Library.First(xs: (IArray, $622:)): $623:
  Body: At(xs, 0)
  # functions: 9 AMBIGUOUS
    - ArrayLibrary_0:Library.At(xs: Concept:IArray2D<TypeVariable:$T>,i: ConcreteType:Integer): TypeVariable:$T [Library]; => At(xs, Modulo(i, NumColumns(xs)), Divide(i, NumColumns(xs)))
    - ArrayLibrary_0:Library.At(xs: Concept:IArray3D<TypeVariable:$T>,i: ConcreteType:Integer): TypeVariable:$T [Library]; => At(xs, Modulo(i, NumColumns(xs)), Divide(i, NumColumns(xs)), Divide(i, NumLayers(xs)))
    - IGeometry_18:Library.At(c: ConcreteType:Complex,n: ConcreteType:Integer): ConcreteType:Number [Library]; => (Equals(n, 0)?IReal(c):Imaginary(c))
    - IGeometry_18:Library.At(v: ConcreteType:Vector2D,n: ConcreteType:Integer): ConcreteType:Number [Library]; => (Equals(n, 0)?X(v):Y(v))
    - IGeometry_18:Library.At(v: ConcreteType:Vector3D,n: ConcreteType:Integer): ConcreteType:Number [Library]; => (Equals(n, 0)?X(v):(Equals(n, 1)?Y(v):Z(v)))
    - IGeometry_18:Library.At(v: ConcreteType:Vector4D,n: ConcreteType:Integer): ConcreteType:Number [Library]; => (Equals(n, 0)?X(v):(Equals(n, 1)?Y(v):(Equals(n, 2)?Z(v):W(v))))
    - IGeometry_18:Library.At(x: ConcreteType:RegularPolygon,n: ConcreteType:Integer): ConcreteType:Vector2D [Library]; => UnitCircle(Turns(Divide(Number(n), NumPoints(x))))
    - Intrinsics_22:Library.At(x: ConcreteType:String,y: ConcreteType:Integer): ConcreteType:Character [Intrinsic]; => 
    - Intrinsics_22:Library.At(xs: ConcreteType:Array<TypeVariable:$T>,n: ConcreteType:Integer): TypeVariable:$T [Intrinsic]; => 
    _ARG_ 0: xs => (IArray, $622:)
    _ARG_ 1: 0 => Integer

9. Last
  Type: ((IArray, $624:)) => $625:
  Sig: ArrayLibrary_0:Library.Last(xs: (IArray, $624:)): $625:
  Body: At(xs, Subtract(Count(xs), 1))
  # functions: 9 AMBIGUOUS
    - ArrayLibrary_0:Library.At(xs: Concept:IArray2D<TypeVariable:$T>,i: ConcreteType:Integer): TypeVariable:$T [Library]; => At(xs, Modulo(i, NumColumns(xs)), Divide(i, NumColumns(xs)))
    - ArrayLibrary_0:Library.At(xs: Concept:IArray3D<TypeVariable:$T>,i: ConcreteType:Integer): TypeVariable:$T [Library]; => At(xs, Modulo(i, NumColumns(xs)), Divide(i, NumColumns(xs)), Divide(i, NumLayers(xs)))
    - IGeometry_18:Library.At(c: ConcreteType:Complex,n: ConcreteType:Integer): ConcreteType:Number [Library]; => (Equals(n, 0)?IReal(c):Imaginary(c))
    - IGeometry_18:Library.At(v: ConcreteType:Vector2D,n: ConcreteType:Integer): ConcreteType:Number [Library]; => (Equals(n, 0)?X(v):Y(v))
    - IGeometry_18:Library.At(v: ConcreteType:Vector3D,n: ConcreteType:Integer): ConcreteType:Number [Library]; => (Equals(n, 0)?X(v):(Equals(n, 1)?Y(v):Z(v)))
    - IGeometry_18:Library.At(v: ConcreteType:Vector4D,n: ConcreteType:Integer): ConcreteType:Number [Library]; => (Equals(n, 0)?X(v):(Equals(n, 1)?Y(v):(Equals(n, 2)?Z(v):W(v))))
    - IGeometry_18:Library.At(x: ConcreteType:RegularPolygon,n: ConcreteType:Integer): ConcreteType:Vector2D [Library]; => UnitCircle(Turns(Divide(Number(n), NumPoints(x))))
    - Intrinsics_22:Library.At(x: ConcreteType:String,y: ConcreteType:Integer): ConcreteType:Character [Intrinsic]; => 
    - Intrinsics_22:Library.At(xs: ConcreteType:Array<TypeVariable:$T>,n: ConcreteType:Integer): TypeVariable:$T [Intrinsic]; => 
    _ARG_ 0: xs => (IArray, $624:)
    _ARG_ 1: Subtract(Count(xs), 1) => $828:constraint=INumerical

10. Middle
  Type: ((IArray, $626:), Integer) => $627:
  Sig: ArrayLibrary_0:Library.Middle(xs: (IArray, $626:), n: Integer): $627:
  Body: At(xs, Divide(Count(xs), 2))
  # functions: 9 AMBIGUOUS
    - ArrayLibrary_0:Library.At(xs: Concept:IArray2D<TypeVariable:$T>,i: ConcreteType:Integer): TypeVariable:$T [Library]; => At(xs, Modulo(i, NumColumns(xs)), Divide(i, NumColumns(xs)))
    - ArrayLibrary_0:Library.At(xs: Concept:IArray3D<TypeVariable:$T>,i: ConcreteType:Integer): TypeVariable:$T [Library]; => At(xs, Modulo(i, NumColumns(xs)), Divide(i, NumColumns(xs)), Divide(i, NumLayers(xs)))
    - IGeometry_18:Library.At(c: ConcreteType:Complex,n: ConcreteType:Integer): ConcreteType:Number [Library]; => (Equals(n, 0)?IReal(c):Imaginary(c))
    - IGeometry_18:Library.At(v: ConcreteType:Vector2D,n: ConcreteType:Integer): ConcreteType:Number [Library]; => (Equals(n, 0)?X(v):Y(v))
    - IGeometry_18:Library.At(v: ConcreteType:Vector3D,n: ConcreteType:Integer): ConcreteType:Number [Library]; => (Equals(n, 0)?X(v):(Equals(n, 1)?Y(v):Z(v)))
    - IGeometry_18:Library.At(v: ConcreteType:Vector4D,n: ConcreteType:Integer): ConcreteType:Number [Library]; => (Equals(n, 0)?X(v):(Equals(n, 1)?Y(v):(Equals(n, 2)?Z(v):W(v))))
    - IGeometry_18:Library.At(x: ConcreteType:RegularPolygon,n: ConcreteType:Integer): ConcreteType:Vector2D [Library]; => UnitCircle(Turns(Divide(Number(n), NumPoints(x))))
    - Intrinsics_22:Library.At(x: ConcreteType:String,y: ConcreteType:Integer): ConcreteType:Character [Intrinsic]; => 
    - Intrinsics_22:Library.At(xs: ConcreteType:Array<TypeVariable:$T>,n: ConcreteType:Integer): TypeVariable:$T [Intrinsic]; => 
    _ARG_ 0: xs => (IArray, $626:)
    _ARG_ 1: Divide(Count(xs), 2) => $788:constraint=INumberLike

27. ModuloAt
  Type: ((IArray, $689:), Integer) => $690:
  Sig: ArrayLibrary_0:Library.ModuloAt(xs: (IArray, $689:), n: Integer): $690:
  Body: At(xs, Modulo(n, Count(xs)))
  # functions: 9 AMBIGUOUS
    - ArrayLibrary_0:Library.At(xs: Concept:IArray2D<TypeVariable:$T>,i: ConcreteType:Integer): TypeVariable:$T [Library]; => At(xs, Modulo(i, NumColumns(xs)), Divide(i, NumColumns(xs)))
    - ArrayLibrary_0:Library.At(xs: Concept:IArray3D<TypeVariable:$T>,i: ConcreteType:Integer): TypeVariable:$T [Library]; => At(xs, Modulo(i, NumColumns(xs)), Divide(i, NumColumns(xs)), Divide(i, NumLayers(xs)))
    - IGeometry_18:Library.At(c: ConcreteType:Complex,n: ConcreteType:Integer): ConcreteType:Number [Library]; => (Equals(n, 0)?IReal(c):Imaginary(c))
    - IGeometry_18:Library.At(v: ConcreteType:Vector2D,n: ConcreteType:Integer): ConcreteType:Number [Library]; => (Equals(n, 0)?X(v):Y(v))
    - IGeometry_18:Library.At(v: ConcreteType:Vector3D,n: ConcreteType:Integer): ConcreteType:Number [Library]; => (Equals(n, 0)?X(v):(Equals(n, 1)?Y(v):Z(v)))
    - IGeometry_18:Library.At(v: ConcreteType:Vector4D,n: ConcreteType:Integer): ConcreteType:Number [Library]; => (Equals(n, 0)?X(v):(Equals(n, 1)?Y(v):(Equals(n, 2)?Z(v):W(v))))
    - IGeometry_18:Library.At(x: ConcreteType:RegularPolygon,n: ConcreteType:Integer): ConcreteType:Vector2D [Library]; => UnitCircle(Turns(Divide(Number(n), NumPoints(x))))
    - Intrinsics_22:Library.At(x: ConcreteType:String,y: ConcreteType:Integer): ConcreteType:Character [Intrinsic]; => 
    - Intrinsics_22:Library.At(xs: ConcreteType:Array<TypeVariable:$T>,n: ConcreteType:Integer): TypeVariable:$T [Intrinsic]; => 
    _ARG_ 0: xs => (IArray, $689:)
    _ARG_ 1: Modulo(n, Count(xs)) => $789:constraint=INumberLike

32. EveryNth
  Type: ((IArray, $712:), Integer) => $714:constraint=(IArray, $713:)
  Sig: ArrayLibrary_0:Library.EveryNth(self: (IArray, $712:), n: Integer): $714:constraint=(IArray, $713:)
  Body: Map(Indices(self), (\(ParameterDef=i$6529:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
  # functions: 2 AMBIGUOUS
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray<TypeVariable:$T2> [Library]; => MapRange(Count(xs), (\(ParameterDef=i$6222:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray2D<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray2D<TypeVariable:$T2> [Library]; => MakeArray2D(NumColumns(xs), NumRows(xs), (\(ParameterDef=a$6857:Concept:IAny, ParameterDef=b$6859:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    _ARG_ 0: Indices(self) => $614:constraint=(IArray, Integer)
    _ARG_ 1: (\(ParameterDef=i$6529:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1> => (Function1, $1290:, $1291:)

34. Reverse
  Type: ((IArray, $722:)) => $724:constraint=(IArray, $723:)
  Sig: ArrayLibrary_0:Library.Reverse(self: (IArray, $722:)): $724:constraint=(IArray, $723:)
  Body: Map(Indices(self), (\(ParameterDef=i$6621:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
  # functions: 2 AMBIGUOUS
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray<TypeVariable:$T2> [Library]; => MapRange(Count(xs), (\(ParameterDef=i$6222:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray2D<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray2D<TypeVariable:$T2> [Library]; => MakeArray2D(NumColumns(xs), NumRows(xs), (\(ParameterDef=a$6857:Concept:IAny, ParameterDef=b$6859:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    _ARG_ 0: Indices(self) => $614:constraint=(IArray, Integer)
    _ARG_ 1: (\(ParameterDef=i$6621:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1> => (Function1, $1295:, $1296:)


Group IBounds_2:Library

40. Size
  Type: ((IBounds, $747:)) => $748:
  Sig: IBounds_2:Library.Size(x: (IBounds, $747:)): $748:
  Body: Subtract(Max(x), Min(x))
  # functions: 4 AMBIGUOUS
    - INumerical_4:Library.Subtract(x: Concept:INumerical,y: Concept:INumerical): Concept:INumerical [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9113:Concept:IAny, ParameterDef=b$9115:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Subtract(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Subtract(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Subtract(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Subtract(Vector4D(q1), Vector4D(q2))
    _ARG_ 0: Max(x) => Number
    _ARG_ 1: Min(x) => Number

42. Center
  Type: ((IBounds, $751:)) => $752:
  Sig: IBounds_2:Library.Center(x: (IBounds, $751:)): $752:
  Body: Lerp(x, 0.5)
  # functions: 2 AMBIGUOUS
    - IBounds_2:Library.Lerp(x: Concept:IBounds<TypeVariable:$T>,amount: ConcreteType:Number): TypeVariable:$T [Library]; => Lerp(Min(x), Max(x), amount)
    - IInterval_20:Library.Lerp(x: Concept:IInterval<TypeVariable:$T>,amount: ConcreteType:Number): TypeVariable:$T [Library]; => Lerp(Start(x), End(x), amount)
    _ARG_ 0: x => (IBounds, $751:)
    _ARG_ 1: 0.5 => Number

43. Contains
  Type: ((IBounds, $753:), $754:) => Boolean
  Sig: IBounds_2:Library.Contains(x: (IBounds, $753:), value: $754:): Boolean
  Body: Between(value, Min(x), Max(x))
  # functions: 2 AMBIGUOUS
    - INumerical_4:Library.Between(self: Concept:IReal,min: Concept:IReal,max: Concept:IReal): ConcreteType:Boolean [Library]; => And(GreaterThanOrEquals(self, min), LessThanOrEquals(self, max))
    - INumerical_4:Library.Between(x: Concept:INumerical,a: Concept:INumerical,b: Concept:INumerical): ConcreteType:Boolean [Library]; => All(Zip(Components(x), Components(a), Components(b), (\(ParameterDef=x0$8487:Concept:IAny, ParameterDef=a0$8489:Concept:IAny, ParameterDef=b0$8491:Concept:IAny) -> ConcreteType:Function3<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2,TypeVariable:$T3>), (\(ParameterDef=x0$8516:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    _ARG_ 0: value => $754:
    _ARG_ 1: Min(x) => Number
    _ARG_ 2: Max(x) => Number

50. Include
  Type: ((IBounds, $774:), (IBounds, $775:)) => $777:constraint=(IBounds, $776:)
  Sig: IBounds_2:Library.Include(x: (IBounds, $774:), y: (IBounds, $775:)): $777:constraint=(IBounds, $776:)
  Body: Include(Include(x, Min(y)), Max(y))
  # functions: 2 AMBIGUOUS
    - IBounds_2:Library.Include(x: Concept:IBounds<TypeVariable:$T>,value: TypeVariable:$T): Concept:IBounds<TypeVariable:$T> [Library]; => Tuple2(Min(Min(x), value), Max(Max(x), value))
    - IBounds_2:Library.Include(x: Concept:IBounds<TypeVariable:$T>,y: Concept:IBounds<TypeVariable:$T>): Concept:IBounds<TypeVariable:$T> [Library]; => Include(Include(x, Min(y)), Max(y))
    _ARG_ 0: Include(x, Min(y)) => $773:constraint=(IBounds, $772:)
    _ARG_ 1: Max(y) => Number


Group INumerical_4:Library

73. RadiansPerDegree
  Type: () => Number
  Sig: INumerical_4:Library.RadiansPerDegree(): Number
  Body: Divide(Pi, 180)
  # functions: 7 AMBIGUOUS
    - INumerical_4:Library.Divide(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Divide(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Divide(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9030:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Divide(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9196:Concept:IAny, ParameterDef=b$9198:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Divide(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Divide(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Divide(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Divide(Column1(m), s), Divide(Column2(m), s), Divide(Column3(m), s), Divide(Column4(m), s))
    - Transforms_26:Library.Divide(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Divide(Vector4D(q), scalar)
    _ARG_ 0: Pi => IAny
    _ARG_ 1: 180 => Number

74. DegreesPerRadian
  Type: () => Number
  Sig: INumerical_4:Library.DegreesPerRadian(): Number
  Body: Divide(180, Pi)
  # functions: 7 AMBIGUOUS
    - INumerical_4:Library.Divide(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Divide(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Divide(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9030:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Divide(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9196:Concept:IAny, ParameterDef=b$9198:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Divide(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Divide(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Divide(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Divide(Column1(m), s), Divide(Column2(m), s), Divide(Column3(m), s), Divide(Column4(m), s))
    - Transforms_26:Library.Divide(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Divide(Vector4D(q), scalar)
    _ARG_ 0: 180 => Number
    _ARG_ 1: Pi => IAny

75. OunceToGram
  Type: (Number) => Number
  Sig: INumerical_4:Library.OunceToGram(x: Number): Number
  Body: Multiply(x, 28.349523125)
  # functions: 10 AMBIGUOUS
    - INumerical_4:Library.Multiply(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Multiply(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Multiply(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9005:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Multiply(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9165:Concept:IAny, ParameterDef=b$9167:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Tuple3(Add(Multiply(X(v), M11(m)), Add(Multiply(Y(v), M21(m)), Add(Multiply(Z(v), M31(m)), M41(m)))), Add(Multiply(X(v), M12(m)), Add(Multiply(Y(v), M22(m)), Add(Multiply(Z(v), M32(m)), M42(m)))), Add(Multiply(X(v), M13(m)), Add(Multiply(Y(v), M23(m)), Add(Multiply(Z(v), M33(m)), M43(m)))))
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Multiply(Column1(m), s), Multiply(Column2(m), s), Multiply(Column3(m), s), Multiply(Column4(m), s))
    - Transforms_26:Library.Multiply(a: ConcreteType:Matrix4x4,b: ConcreteType:Matrix4x4): ConcreteType:Matrix4x4 [Library]; => CreateFromRows(Matrix4x4, Tuple4(Add(Multiply(M11(a), M11(b)), Add(Multiply(M12(a), M21(b)), Add(Multiply(M13(a), M31(b)), Multiply(M14(a), M41(b))))), Add(Multiply(M11(a), M12(b)), Add(Multiply(M12(a), M22(b)), Add(Multiply(M13(a), M32(b)), Multiply(M14(a), M42(b))))), Add(Multiply(M11(a), M13(b)), Add(Multiply(M12(a), M23(b)), Add(Multiply(M13(a), M33(b)), Multiply(M14(a), M43(b))))), Add(Multiply(M11(a), M14(b)), Add(Multiply(M12(a), M24(b)), Add(Multiply(M13(a), M34(b)), Multiply(M14(a), M44(b)))))), Tuple4(Add(Multiply(M21(a), M11(b)), Add(Multiply(M22(a), M21(b)), Add(Multiply(M23(a), M31(b)), Multiply(M24(a), M41(b))))), Add(Multiply(M21(a), M12(b)), Add(Multiply(M22(a), M22(b)), Add(Multiply(M23(a), M32(b)), Multiply(M24(a), M42(b))))), Add(Multiply(M21(a), M13(b)), Add(Multiply(M22(a), M23(b)), Add(Multiply(M23(a), M33(b)), Multiply(M24(a), M43(b))))), Add(Multiply(M21(a), M14(b)), Add(Multiply(M22(a), M24(b)), Add(Multiply(M23(a), M34(b)), Multiply(M24(a), M44(b)))))), Tuple4(Add(Multiply(M31(a), M11(b)), Add(Multiply(M32(a), M21(b)), Add(Multiply(M33(a), M31(b)), Multiply(M34(a), M41(b))))), Add(Multiply(M31(a), M12(b)), Add(Multiply(M32(a), M22(b)), Add(Multiply(M33(a), M32(b)), Multiply(M34(a), M42(b))))), Add(Multiply(M31(a), M13(b)), Add(Multiply(M32(a), M23(b)), Add(Multiply(M33(a), M33(b)), Multiply(M34(a), M43(b))))), Add(Multiply(M31(a), M14(b)), Add(Multiply(M32(a), M24(b)), Add(Multiply(M33(a), M34(b)), Multiply(M34(a), M44(b)))))), Tuple4(Add(Multiply(M41(a), M11(b)), Add(Multiply(M42(a), M21(b)), Add(Multiply(M43(a), M31(b)), Multiply(M44(a), M41(b))))), Add(Multiply(M41(a), M12(b)), Add(Multiply(M42(a), M22(b)), Add(Multiply(M43(a), M32(b)), Multiply(M44(a), M42(b))))), Add(Multiply(M41(a), M13(b)), Add(Multiply(M42(a), M23(b)), Add(Multiply(M43(a), M33(b)), Multiply(M44(a), M43(b))))), Add(Multiply(M41(a), M14(b)), Add(Multiply(M42(a), M24(b)), Add(Multiply(M43(a), M34(b)), Multiply(M44(a), M44(b)))))))
    - Transforms_26:Library.Multiply(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Multiply(Vector4D(q), scalar)
    - Transforms_26:Library.Multiply(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Plato.Compiler.Symbols.BlockStatement
    _ARG_ 0: x => Number
    _ARG_ 1: 28.349523125 => Number

76. TroyOunceToGram
  Type: (Number) => Number
  Sig: INumerical_4:Library.TroyOunceToGram(x: Number): Number
  Body: Multiply(x, 31.1034768)
  # functions: 10 AMBIGUOUS
    - INumerical_4:Library.Multiply(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Multiply(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Multiply(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9005:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Multiply(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9165:Concept:IAny, ParameterDef=b$9167:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Tuple3(Add(Multiply(X(v), M11(m)), Add(Multiply(Y(v), M21(m)), Add(Multiply(Z(v), M31(m)), M41(m)))), Add(Multiply(X(v), M12(m)), Add(Multiply(Y(v), M22(m)), Add(Multiply(Z(v), M32(m)), M42(m)))), Add(Multiply(X(v), M13(m)), Add(Multiply(Y(v), M23(m)), Add(Multiply(Z(v), M33(m)), M43(m)))))
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Multiply(Column1(m), s), Multiply(Column2(m), s), Multiply(Column3(m), s), Multiply(Column4(m), s))
    - Transforms_26:Library.Multiply(a: ConcreteType:Matrix4x4,b: ConcreteType:Matrix4x4): ConcreteType:Matrix4x4 [Library]; => CreateFromRows(Matrix4x4, Tuple4(Add(Multiply(M11(a), M11(b)), Add(Multiply(M12(a), M21(b)), Add(Multiply(M13(a), M31(b)), Multiply(M14(a), M41(b))))), Add(Multiply(M11(a), M12(b)), Add(Multiply(M12(a), M22(b)), Add(Multiply(M13(a), M32(b)), Multiply(M14(a), M42(b))))), Add(Multiply(M11(a), M13(b)), Add(Multiply(M12(a), M23(b)), Add(Multiply(M13(a), M33(b)), Multiply(M14(a), M43(b))))), Add(Multiply(M11(a), M14(b)), Add(Multiply(M12(a), M24(b)), Add(Multiply(M13(a), M34(b)), Multiply(M14(a), M44(b)))))), Tuple4(Add(Multiply(M21(a), M11(b)), Add(Multiply(M22(a), M21(b)), Add(Multiply(M23(a), M31(b)), Multiply(M24(a), M41(b))))), Add(Multiply(M21(a), M12(b)), Add(Multiply(M22(a), M22(b)), Add(Multiply(M23(a), M32(b)), Multiply(M24(a), M42(b))))), Add(Multiply(M21(a), M13(b)), Add(Multiply(M22(a), M23(b)), Add(Multiply(M23(a), M33(b)), Multiply(M24(a), M43(b))))), Add(Multiply(M21(a), M14(b)), Add(Multiply(M22(a), M24(b)), Add(Multiply(M23(a), M34(b)), Multiply(M24(a), M44(b)))))), Tuple4(Add(Multiply(M31(a), M11(b)), Add(Multiply(M32(a), M21(b)), Add(Multiply(M33(a), M31(b)), Multiply(M34(a), M41(b))))), Add(Multiply(M31(a), M12(b)), Add(Multiply(M32(a), M22(b)), Add(Multiply(M33(a), M32(b)), Multiply(M34(a), M42(b))))), Add(Multiply(M31(a), M13(b)), Add(Multiply(M32(a), M23(b)), Add(Multiply(M33(a), M33(b)), Multiply(M34(a), M43(b))))), Add(Multiply(M31(a), M14(b)), Add(Multiply(M32(a), M24(b)), Add(Multiply(M33(a), M34(b)), Multiply(M34(a), M44(b)))))), Tuple4(Add(Multiply(M41(a), M11(b)), Add(Multiply(M42(a), M21(b)), Add(Multiply(M43(a), M31(b)), Multiply(M44(a), M41(b))))), Add(Multiply(M41(a), M12(b)), Add(Multiply(M42(a), M22(b)), Add(Multiply(M43(a), M32(b)), Multiply(M44(a), M42(b))))), Add(Multiply(M41(a), M13(b)), Add(Multiply(M42(a), M23(b)), Add(Multiply(M43(a), M33(b)), Multiply(M44(a), M43(b))))), Add(Multiply(M41(a), M14(b)), Add(Multiply(M42(a), M24(b)), Add(Multiply(M43(a), M34(b)), Multiply(M44(a), M44(b)))))))
    - Transforms_26:Library.Multiply(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Multiply(Vector4D(q), scalar)
    - Transforms_26:Library.Multiply(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Plato.Compiler.Symbols.BlockStatement
    _ARG_ 0: x => Number
    _ARG_ 1: 31.1034768 => Number

77. GrainToMilligram
  Type: (Number) => Number
  Sig: INumerical_4:Library.GrainToMilligram(x: Number): Number
  Body: Multiply(x, 64.79891)
  # functions: 10 AMBIGUOUS
    - INumerical_4:Library.Multiply(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Multiply(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Multiply(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9005:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Multiply(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9165:Concept:IAny, ParameterDef=b$9167:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Tuple3(Add(Multiply(X(v), M11(m)), Add(Multiply(Y(v), M21(m)), Add(Multiply(Z(v), M31(m)), M41(m)))), Add(Multiply(X(v), M12(m)), Add(Multiply(Y(v), M22(m)), Add(Multiply(Z(v), M32(m)), M42(m)))), Add(Multiply(X(v), M13(m)), Add(Multiply(Y(v), M23(m)), Add(Multiply(Z(v), M33(m)), M43(m)))))
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Multiply(Column1(m), s), Multiply(Column2(m), s), Multiply(Column3(m), s), Multiply(Column4(m), s))
    - Transforms_26:Library.Multiply(a: ConcreteType:Matrix4x4,b: ConcreteType:Matrix4x4): ConcreteType:Matrix4x4 [Library]; => CreateFromRows(Matrix4x4, Tuple4(Add(Multiply(M11(a), M11(b)), Add(Multiply(M12(a), M21(b)), Add(Multiply(M13(a), M31(b)), Multiply(M14(a), M41(b))))), Add(Multiply(M11(a), M12(b)), Add(Multiply(M12(a), M22(b)), Add(Multiply(M13(a), M32(b)), Multiply(M14(a), M42(b))))), Add(Multiply(M11(a), M13(b)), Add(Multiply(M12(a), M23(b)), Add(Multiply(M13(a), M33(b)), Multiply(M14(a), M43(b))))), Add(Multiply(M11(a), M14(b)), Add(Multiply(M12(a), M24(b)), Add(Multiply(M13(a), M34(b)), Multiply(M14(a), M44(b)))))), Tuple4(Add(Multiply(M21(a), M11(b)), Add(Multiply(M22(a), M21(b)), Add(Multiply(M23(a), M31(b)), Multiply(M24(a), M41(b))))), Add(Multiply(M21(a), M12(b)), Add(Multiply(M22(a), M22(b)), Add(Multiply(M23(a), M32(b)), Multiply(M24(a), M42(b))))), Add(Multiply(M21(a), M13(b)), Add(Multiply(M22(a), M23(b)), Add(Multiply(M23(a), M33(b)), Multiply(M24(a), M43(b))))), Add(Multiply(M21(a), M14(b)), Add(Multiply(M22(a), M24(b)), Add(Multiply(M23(a), M34(b)), Multiply(M24(a), M44(b)))))), Tuple4(Add(Multiply(M31(a), M11(b)), Add(Multiply(M32(a), M21(b)), Add(Multiply(M33(a), M31(b)), Multiply(M34(a), M41(b))))), Add(Multiply(M31(a), M12(b)), Add(Multiply(M32(a), M22(b)), Add(Multiply(M33(a), M32(b)), Multiply(M34(a), M42(b))))), Add(Multiply(M31(a), M13(b)), Add(Multiply(M32(a), M23(b)), Add(Multiply(M33(a), M33(b)), Multiply(M34(a), M43(b))))), Add(Multiply(M31(a), M14(b)), Add(Multiply(M32(a), M24(b)), Add(Multiply(M33(a), M34(b)), Multiply(M34(a), M44(b)))))), Tuple4(Add(Multiply(M41(a), M11(b)), Add(Multiply(M42(a), M21(b)), Add(Multiply(M43(a), M31(b)), Multiply(M44(a), M41(b))))), Add(Multiply(M41(a), M12(b)), Add(Multiply(M42(a), M22(b)), Add(Multiply(M43(a), M32(b)), Multiply(M44(a), M42(b))))), Add(Multiply(M41(a), M13(b)), Add(Multiply(M42(a), M23(b)), Add(Multiply(M43(a), M33(b)), Multiply(M44(a), M43(b))))), Add(Multiply(M41(a), M14(b)), Add(Multiply(M42(a), M24(b)), Add(Multiply(M43(a), M34(b)), Multiply(M44(a), M44(b)))))))
    - Transforms_26:Library.Multiply(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Multiply(Vector4D(q), scalar)
    - Transforms_26:Library.Multiply(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Plato.Compiler.Symbols.BlockStatement
    _ARG_ 0: x => Number
    _ARG_ 1: 64.79891 => Number

78. Mole
  Type: (Number) => Number
  Sig: INumerical_4:Library.Mole(x: Number): Number
  Body: Multiply(x, 6.02214076E+23)
  # functions: 10 AMBIGUOUS
    - INumerical_4:Library.Multiply(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Multiply(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Multiply(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9005:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Multiply(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9165:Concept:IAny, ParameterDef=b$9167:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Tuple3(Add(Multiply(X(v), M11(m)), Add(Multiply(Y(v), M21(m)), Add(Multiply(Z(v), M31(m)), M41(m)))), Add(Multiply(X(v), M12(m)), Add(Multiply(Y(v), M22(m)), Add(Multiply(Z(v), M32(m)), M42(m)))), Add(Multiply(X(v), M13(m)), Add(Multiply(Y(v), M23(m)), Add(Multiply(Z(v), M33(m)), M43(m)))))
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Multiply(Column1(m), s), Multiply(Column2(m), s), Multiply(Column3(m), s), Multiply(Column4(m), s))
    - Transforms_26:Library.Multiply(a: ConcreteType:Matrix4x4,b: ConcreteType:Matrix4x4): ConcreteType:Matrix4x4 [Library]; => CreateFromRows(Matrix4x4, Tuple4(Add(Multiply(M11(a), M11(b)), Add(Multiply(M12(a), M21(b)), Add(Multiply(M13(a), M31(b)), Multiply(M14(a), M41(b))))), Add(Multiply(M11(a), M12(b)), Add(Multiply(M12(a), M22(b)), Add(Multiply(M13(a), M32(b)), Multiply(M14(a), M42(b))))), Add(Multiply(M11(a), M13(b)), Add(Multiply(M12(a), M23(b)), Add(Multiply(M13(a), M33(b)), Multiply(M14(a), M43(b))))), Add(Multiply(M11(a), M14(b)), Add(Multiply(M12(a), M24(b)), Add(Multiply(M13(a), M34(b)), Multiply(M14(a), M44(b)))))), Tuple4(Add(Multiply(M21(a), M11(b)), Add(Multiply(M22(a), M21(b)), Add(Multiply(M23(a), M31(b)), Multiply(M24(a), M41(b))))), Add(Multiply(M21(a), M12(b)), Add(Multiply(M22(a), M22(b)), Add(Multiply(M23(a), M32(b)), Multiply(M24(a), M42(b))))), Add(Multiply(M21(a), M13(b)), Add(Multiply(M22(a), M23(b)), Add(Multiply(M23(a), M33(b)), Multiply(M24(a), M43(b))))), Add(Multiply(M21(a), M14(b)), Add(Multiply(M22(a), M24(b)), Add(Multiply(M23(a), M34(b)), Multiply(M24(a), M44(b)))))), Tuple4(Add(Multiply(M31(a), M11(b)), Add(Multiply(M32(a), M21(b)), Add(Multiply(M33(a), M31(b)), Multiply(M34(a), M41(b))))), Add(Multiply(M31(a), M12(b)), Add(Multiply(M32(a), M22(b)), Add(Multiply(M33(a), M32(b)), Multiply(M34(a), M42(b))))), Add(Multiply(M31(a), M13(b)), Add(Multiply(M32(a), M23(b)), Add(Multiply(M33(a), M33(b)), Multiply(M34(a), M43(b))))), Add(Multiply(M31(a), M14(b)), Add(Multiply(M32(a), M24(b)), Add(Multiply(M33(a), M34(b)), Multiply(M34(a), M44(b)))))), Tuple4(Add(Multiply(M41(a), M11(b)), Add(Multiply(M42(a), M21(b)), Add(Multiply(M43(a), M31(b)), Multiply(M44(a), M41(b))))), Add(Multiply(M41(a), M12(b)), Add(Multiply(M42(a), M22(b)), Add(Multiply(M43(a), M32(b)), Multiply(M44(a), M42(b))))), Add(Multiply(M41(a), M13(b)), Add(Multiply(M42(a), M23(b)), Add(Multiply(M43(a), M33(b)), Multiply(M44(a), M43(b))))), Add(Multiply(M41(a), M14(b)), Add(Multiply(M42(a), M24(b)), Add(Multiply(M43(a), M34(b)), Multiply(M44(a), M44(b)))))))
    - Transforms_26:Library.Multiply(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Multiply(Vector4D(q), scalar)
    - Transforms_26:Library.Multiply(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Plato.Compiler.Symbols.BlockStatement
    _ARG_ 0: x => Number
    _ARG_ 1: 6.02214076E+23 => Number

81. Inverse
  Type: (Number) => Number
  Sig: INumerical_4:Library.Inverse(x: Number): Number
  Body: Divide(1, x)
  # functions: 7 AMBIGUOUS
    - INumerical_4:Library.Divide(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Divide(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Divide(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9030:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Divide(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9196:Concept:IAny, ParameterDef=b$9198:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Divide(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Divide(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Divide(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Divide(Column1(m), s), Divide(Column2(m), s), Divide(Column3(m), s), Divide(Column4(m), s))
    - Transforms_26:Library.Divide(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Divide(Vector4D(q), scalar)
    _ARG_ 0: 1 => Number
    _ARG_ 1: x => Number

82. Reciprocal
  Type: (Number) => Number
  Sig: INumerical_4:Library.Reciprocal(x: Number): Number
  Body: Inverse(x)
  # functions: 3 AMBIGUOUS
    - INumerical_4:Library.Inverse(x: ConcreteType:Number): ConcreteType:Number [Library]; => Divide(1, x)
    - INumerical_4:Library.Inverse(x: Concept:IReal): Concept:IReal [Library]; => Divide(One(x), x)
    - Transforms_26:Library.Inverse(q: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Multiply(Conjugate(q), Inverse(MagnitudeSquared(q)))
    _ARG_ 0: x => Number

87. SmoothStep
  Type: (Number) => Number
  Sig: INumerical_4:Library.SmoothStep(x: Number): Number
  Body: Multiply(Square(x), Subtract(3, Twice(x)))
  # functions: 10 AMBIGUOUS
    - INumerical_4:Library.Multiply(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Multiply(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Multiply(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9005:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Multiply(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9165:Concept:IAny, ParameterDef=b$9167:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Tuple3(Add(Multiply(X(v), M11(m)), Add(Multiply(Y(v), M21(m)), Add(Multiply(Z(v), M31(m)), M41(m)))), Add(Multiply(X(v), M12(m)), Add(Multiply(Y(v), M22(m)), Add(Multiply(Z(v), M32(m)), M42(m)))), Add(Multiply(X(v), M13(m)), Add(Multiply(Y(v), M23(m)), Add(Multiply(Z(v), M33(m)), M43(m)))))
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Multiply(Column1(m), s), Multiply(Column2(m), s), Multiply(Column3(m), s), Multiply(Column4(m), s))
    - Transforms_26:Library.Multiply(a: ConcreteType:Matrix4x4,b: ConcreteType:Matrix4x4): ConcreteType:Matrix4x4 [Library]; => CreateFromRows(Matrix4x4, Tuple4(Add(Multiply(M11(a), M11(b)), Add(Multiply(M12(a), M21(b)), Add(Multiply(M13(a), M31(b)), Multiply(M14(a), M41(b))))), Add(Multiply(M11(a), M12(b)), Add(Multiply(M12(a), M22(b)), Add(Multiply(M13(a), M32(b)), Multiply(M14(a), M42(b))))), Add(Multiply(M11(a), M13(b)), Add(Multiply(M12(a), M23(b)), Add(Multiply(M13(a), M33(b)), Multiply(M14(a), M43(b))))), Add(Multiply(M11(a), M14(b)), Add(Multiply(M12(a), M24(b)), Add(Multiply(M13(a), M34(b)), Multiply(M14(a), M44(b)))))), Tuple4(Add(Multiply(M21(a), M11(b)), Add(Multiply(M22(a), M21(b)), Add(Multiply(M23(a), M31(b)), Multiply(M24(a), M41(b))))), Add(Multiply(M21(a), M12(b)), Add(Multiply(M22(a), M22(b)), Add(Multiply(M23(a), M32(b)), Multiply(M24(a), M42(b))))), Add(Multiply(M21(a), M13(b)), Add(Multiply(M22(a), M23(b)), Add(Multiply(M23(a), M33(b)), Multiply(M24(a), M43(b))))), Add(Multiply(M21(a), M14(b)), Add(Multiply(M22(a), M24(b)), Add(Multiply(M23(a), M34(b)), Multiply(M24(a), M44(b)))))), Tuple4(Add(Multiply(M31(a), M11(b)), Add(Multiply(M32(a), M21(b)), Add(Multiply(M33(a), M31(b)), Multiply(M34(a), M41(b))))), Add(Multiply(M31(a), M12(b)), Add(Multiply(M32(a), M22(b)), Add(Multiply(M33(a), M32(b)), Multiply(M34(a), M42(b))))), Add(Multiply(M31(a), M13(b)), Add(Multiply(M32(a), M23(b)), Add(Multiply(M33(a), M33(b)), Multiply(M34(a), M43(b))))), Add(Multiply(M31(a), M14(b)), Add(Multiply(M32(a), M24(b)), Add(Multiply(M33(a), M34(b)), Multiply(M34(a), M44(b)))))), Tuple4(Add(Multiply(M41(a), M11(b)), Add(Multiply(M42(a), M21(b)), Add(Multiply(M43(a), M31(b)), Multiply(M44(a), M41(b))))), Add(Multiply(M41(a), M12(b)), Add(Multiply(M42(a), M22(b)), Add(Multiply(M43(a), M32(b)), Multiply(M44(a), M42(b))))), Add(Multiply(M41(a), M13(b)), Add(Multiply(M42(a), M23(b)), Add(Multiply(M43(a), M33(b)), Multiply(M44(a), M43(b))))), Add(Multiply(M41(a), M14(b)), Add(Multiply(M42(a), M24(b)), Add(Multiply(M43(a), M34(b)), Multiply(M44(a), M44(b)))))))
    - Transforms_26:Library.Multiply(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Multiply(Vector4D(q), scalar)
    - Transforms_26:Library.Multiply(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Plato.Compiler.Symbols.BlockStatement
    _ARG_ 0: Square(x) => $782:constraint=IArithmetic
    _ARG_ 1: Subtract(3, Twice(x)) => $828:constraint=INumerical

88. MultiplyEpsilon
  Type: (Number, Number) => Number
  Sig: INumerical_4:Library.MultiplyEpsilon(x: Number, y: Number): Number
  Body: Multiply(Greater(Abs(x), Abs(y)), Epsilon)
  # functions: 10 AMBIGUOUS
    - INumerical_4:Library.Multiply(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Multiply(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Multiply(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9005:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Multiply(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9165:Concept:IAny, ParameterDef=b$9167:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Tuple3(Add(Multiply(X(v), M11(m)), Add(Multiply(Y(v), M21(m)), Add(Multiply(Z(v), M31(m)), M41(m)))), Add(Multiply(X(v), M12(m)), Add(Multiply(Y(v), M22(m)), Add(Multiply(Z(v), M32(m)), M42(m)))), Add(Multiply(X(v), M13(m)), Add(Multiply(Y(v), M23(m)), Add(Multiply(Z(v), M33(m)), M43(m)))))
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Multiply(Column1(m), s), Multiply(Column2(m), s), Multiply(Column3(m), s), Multiply(Column4(m), s))
    - Transforms_26:Library.Multiply(a: ConcreteType:Matrix4x4,b: ConcreteType:Matrix4x4): ConcreteType:Matrix4x4 [Library]; => CreateFromRows(Matrix4x4, Tuple4(Add(Multiply(M11(a), M11(b)), Add(Multiply(M12(a), M21(b)), Add(Multiply(M13(a), M31(b)), Multiply(M14(a), M41(b))))), Add(Multiply(M11(a), M12(b)), Add(Multiply(M12(a), M22(b)), Add(Multiply(M13(a), M32(b)), Multiply(M14(a), M42(b))))), Add(Multiply(M11(a), M13(b)), Add(Multiply(M12(a), M23(b)), Add(Multiply(M13(a), M33(b)), Multiply(M14(a), M43(b))))), Add(Multiply(M11(a), M14(b)), Add(Multiply(M12(a), M24(b)), Add(Multiply(M13(a), M34(b)), Multiply(M14(a), M44(b)))))), Tuple4(Add(Multiply(M21(a), M11(b)), Add(Multiply(M22(a), M21(b)), Add(Multiply(M23(a), M31(b)), Multiply(M24(a), M41(b))))), Add(Multiply(M21(a), M12(b)), Add(Multiply(M22(a), M22(b)), Add(Multiply(M23(a), M32(b)), Multiply(M24(a), M42(b))))), Add(Multiply(M21(a), M13(b)), Add(Multiply(M22(a), M23(b)), Add(Multiply(M23(a), M33(b)), Multiply(M24(a), M43(b))))), Add(Multiply(M21(a), M14(b)), Add(Multiply(M22(a), M24(b)), Add(Multiply(M23(a), M34(b)), Multiply(M24(a), M44(b)))))), Tuple4(Add(Multiply(M31(a), M11(b)), Add(Multiply(M32(a), M21(b)), Add(Multiply(M33(a), M31(b)), Multiply(M34(a), M41(b))))), Add(Multiply(M31(a), M12(b)), Add(Multiply(M32(a), M22(b)), Add(Multiply(M33(a), M32(b)), Multiply(M34(a), M42(b))))), Add(Multiply(M31(a), M13(b)), Add(Multiply(M32(a), M23(b)), Add(Multiply(M33(a), M33(b)), Multiply(M34(a), M43(b))))), Add(Multiply(M31(a), M14(b)), Add(Multiply(M32(a), M24(b)), Add(Multiply(M33(a), M34(b)), Multiply(M34(a), M44(b)))))), Tuple4(Add(Multiply(M41(a), M11(b)), Add(Multiply(M42(a), M21(b)), Add(Multiply(M43(a), M31(b)), Multiply(M44(a), M41(b))))), Add(Multiply(M41(a), M12(b)), Add(Multiply(M42(a), M22(b)), Add(Multiply(M43(a), M32(b)), Multiply(M44(a), M42(b))))), Add(Multiply(M41(a), M13(b)), Add(Multiply(M42(a), M23(b)), Add(Multiply(M43(a), M33(b)), Multiply(M44(a), M43(b))))), Add(Multiply(M41(a), M14(b)), Add(Multiply(M42(a), M24(b)), Add(Multiply(M43(a), M34(b)), Multiply(M44(a), M44(b)))))))
    - Transforms_26:Library.Multiply(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Multiply(Vector4D(q), scalar)
    - Transforms_26:Library.Multiply(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Plato.Compiler.Symbols.BlockStatement
    _ARG_ 0: Greater(Abs(x), Abs(y)) => $820:constraint=IOrderable
    _ARG_ 1: Epsilon => IAny

89. AlmostEqual
  Type: (Number, Number) => Boolean
  Sig: INumerical_4:Library.AlmostEqual(x: Number, y: Number): Boolean
  Body: LessThanOrEquals(Abs(Subtract(x, y)), MultiplyEpsilon(x, y))
  # functions: 5 AMBIGUOUS
    - Intrinsics_22:Library.LessThanOrEquals(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Boolean [Intrinsic]; => 
    - Intrinsics_22:Library.LessThanOrEquals(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Boolean [Intrinsic]; => 
    - Intrinsics_22:Library.LessThanOrEquals(x: ConcreteType:Character,y: ConcreteType:Character): ConcreteType:Boolean [Intrinsic]; => 
    - Intrinsics_22:Library.LessThanOrEquals(x: ConcreteType:String,y: ConcreteType:String): ConcreteType:Boolean [Intrinsic]; => 
    - Intrinsics_22:Library.LessThanOrEquals(x: ConcreteType:Boolean,y: ConcreteType:Boolean): ConcreteType:Boolean [Intrinsic]; => 
    _ARG_ 0: Abs(Subtract(x, y)) => $790:constraint=IReal
    _ARG_ 1: MultiplyEpsilon(x, y) => Number

92. Fract
  Type: (Number) => Number
  Sig: INumerical_4:Library.Fract(x: Number): Number
  Body: Subtract(x, Floor(x))
  # functions: 4 AMBIGUOUS
    - INumerical_4:Library.Subtract(x: Concept:INumerical,y: Concept:INumerical): Concept:INumerical [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9113:Concept:IAny, ParameterDef=b$9115:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Subtract(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Subtract(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Subtract(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Subtract(Vector4D(q1), Vector4D(q2))
    _ARG_ 0: x => Number
    _ARG_ 1: Floor(x) => $817:constraint=INumerical

93. Pow2
  Type: (IArithmetic) => $778:constraint=IArithmetic
  Sig: INumerical_4:Library.Pow2(x: IArithmetic): $778:constraint=IArithmetic
  Body: Multiply(x, x)
  # functions: 10 AMBIGUOUS
    - INumerical_4:Library.Multiply(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Multiply(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Multiply(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9005:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Multiply(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9165:Concept:IAny, ParameterDef=b$9167:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Tuple3(Add(Multiply(X(v), M11(m)), Add(Multiply(Y(v), M21(m)), Add(Multiply(Z(v), M31(m)), M41(m)))), Add(Multiply(X(v), M12(m)), Add(Multiply(Y(v), M22(m)), Add(Multiply(Z(v), M32(m)), M42(m)))), Add(Multiply(X(v), M13(m)), Add(Multiply(Y(v), M23(m)), Add(Multiply(Z(v), M33(m)), M43(m)))))
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Multiply(Column1(m), s), Multiply(Column2(m), s), Multiply(Column3(m), s), Multiply(Column4(m), s))
    - Transforms_26:Library.Multiply(a: ConcreteType:Matrix4x4,b: ConcreteType:Matrix4x4): ConcreteType:Matrix4x4 [Library]; => CreateFromRows(Matrix4x4, Tuple4(Add(Multiply(M11(a), M11(b)), Add(Multiply(M12(a), M21(b)), Add(Multiply(M13(a), M31(b)), Multiply(M14(a), M41(b))))), Add(Multiply(M11(a), M12(b)), Add(Multiply(M12(a), M22(b)), Add(Multiply(M13(a), M32(b)), Multiply(M14(a), M42(b))))), Add(Multiply(M11(a), M13(b)), Add(Multiply(M12(a), M23(b)), Add(Multiply(M13(a), M33(b)), Multiply(M14(a), M43(b))))), Add(Multiply(M11(a), M14(b)), Add(Multiply(M12(a), M24(b)), Add(Multiply(M13(a), M34(b)), Multiply(M14(a), M44(b)))))), Tuple4(Add(Multiply(M21(a), M11(b)), Add(Multiply(M22(a), M21(b)), Add(Multiply(M23(a), M31(b)), Multiply(M24(a), M41(b))))), Add(Multiply(M21(a), M12(b)), Add(Multiply(M22(a), M22(b)), Add(Multiply(M23(a), M32(b)), Multiply(M24(a), M42(b))))), Add(Multiply(M21(a), M13(b)), Add(Multiply(M22(a), M23(b)), Add(Multiply(M23(a), M33(b)), Multiply(M24(a), M43(b))))), Add(Multiply(M21(a), M14(b)), Add(Multiply(M22(a), M24(b)), Add(Multiply(M23(a), M34(b)), Multiply(M24(a), M44(b)))))), Tuple4(Add(Multiply(M31(a), M11(b)), Add(Multiply(M32(a), M21(b)), Add(Multiply(M33(a), M31(b)), Multiply(M34(a), M41(b))))), Add(Multiply(M31(a), M12(b)), Add(Multiply(M32(a), M22(b)), Add(Multiply(M33(a), M32(b)), Multiply(M34(a), M42(b))))), Add(Multiply(M31(a), M13(b)), Add(Multiply(M32(a), M23(b)), Add(Multiply(M33(a), M33(b)), Multiply(M34(a), M43(b))))), Add(Multiply(M31(a), M14(b)), Add(Multiply(M32(a), M24(b)), Add(Multiply(M33(a), M34(b)), Multiply(M34(a), M44(b)))))), Tuple4(Add(Multiply(M41(a), M11(b)), Add(Multiply(M42(a), M21(b)), Add(Multiply(M43(a), M31(b)), Multiply(M44(a), M41(b))))), Add(Multiply(M41(a), M12(b)), Add(Multiply(M42(a), M22(b)), Add(Multiply(M43(a), M32(b)), Multiply(M44(a), M42(b))))), Add(Multiply(M41(a), M13(b)), Add(Multiply(M42(a), M23(b)), Add(Multiply(M43(a), M33(b)), Multiply(M44(a), M43(b))))), Add(Multiply(M41(a), M14(b)), Add(Multiply(M42(a), M24(b)), Add(Multiply(M43(a), M34(b)), Multiply(M44(a), M44(b)))))))
    - Transforms_26:Library.Multiply(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Multiply(Vector4D(q), scalar)
    - Transforms_26:Library.Multiply(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Plato.Compiler.Symbols.BlockStatement
    _ARG_ 0: x => IArithmetic
    _ARG_ 1: x => IArithmetic

94. Pow3
  Type: (IArithmetic) => $779:constraint=IArithmetic
  Sig: INumerical_4:Library.Pow3(x: IArithmetic): $779:constraint=IArithmetic
  Body: Multiply(Pow2(x), x)
  # functions: 10 AMBIGUOUS
    - INumerical_4:Library.Multiply(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Multiply(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Multiply(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9005:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Multiply(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9165:Concept:IAny, ParameterDef=b$9167:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Tuple3(Add(Multiply(X(v), M11(m)), Add(Multiply(Y(v), M21(m)), Add(Multiply(Z(v), M31(m)), M41(m)))), Add(Multiply(X(v), M12(m)), Add(Multiply(Y(v), M22(m)), Add(Multiply(Z(v), M32(m)), M42(m)))), Add(Multiply(X(v), M13(m)), Add(Multiply(Y(v), M23(m)), Add(Multiply(Z(v), M33(m)), M43(m)))))
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Multiply(Column1(m), s), Multiply(Column2(m), s), Multiply(Column3(m), s), Multiply(Column4(m), s))
    - Transforms_26:Library.Multiply(a: ConcreteType:Matrix4x4,b: ConcreteType:Matrix4x4): ConcreteType:Matrix4x4 [Library]; => CreateFromRows(Matrix4x4, Tuple4(Add(Multiply(M11(a), M11(b)), Add(Multiply(M12(a), M21(b)), Add(Multiply(M13(a), M31(b)), Multiply(M14(a), M41(b))))), Add(Multiply(M11(a), M12(b)), Add(Multiply(M12(a), M22(b)), Add(Multiply(M13(a), M32(b)), Multiply(M14(a), M42(b))))), Add(Multiply(M11(a), M13(b)), Add(Multiply(M12(a), M23(b)), Add(Multiply(M13(a), M33(b)), Multiply(M14(a), M43(b))))), Add(Multiply(M11(a), M14(b)), Add(Multiply(M12(a), M24(b)), Add(Multiply(M13(a), M34(b)), Multiply(M14(a), M44(b)))))), Tuple4(Add(Multiply(M21(a), M11(b)), Add(Multiply(M22(a), M21(b)), Add(Multiply(M23(a), M31(b)), Multiply(M24(a), M41(b))))), Add(Multiply(M21(a), M12(b)), Add(Multiply(M22(a), M22(b)), Add(Multiply(M23(a), M32(b)), Multiply(M24(a), M42(b))))), Add(Multiply(M21(a), M13(b)), Add(Multiply(M22(a), M23(b)), Add(Multiply(M23(a), M33(b)), Multiply(M24(a), M43(b))))), Add(Multiply(M21(a), M14(b)), Add(Multiply(M22(a), M24(b)), Add(Multiply(M23(a), M34(b)), Multiply(M24(a), M44(b)))))), Tuple4(Add(Multiply(M31(a), M11(b)), Add(Multiply(M32(a), M21(b)), Add(Multiply(M33(a), M31(b)), Multiply(M34(a), M41(b))))), Add(Multiply(M31(a), M12(b)), Add(Multiply(M32(a), M22(b)), Add(Multiply(M33(a), M32(b)), Multiply(M34(a), M42(b))))), Add(Multiply(M31(a), M13(b)), Add(Multiply(M32(a), M23(b)), Add(Multiply(M33(a), M33(b)), Multiply(M34(a), M43(b))))), Add(Multiply(M31(a), M14(b)), Add(Multiply(M32(a), M24(b)), Add(Multiply(M33(a), M34(b)), Multiply(M34(a), M44(b)))))), Tuple4(Add(Multiply(M41(a), M11(b)), Add(Multiply(M42(a), M21(b)), Add(Multiply(M43(a), M31(b)), Multiply(M44(a), M41(b))))), Add(Multiply(M41(a), M12(b)), Add(Multiply(M42(a), M22(b)), Add(Multiply(M43(a), M32(b)), Multiply(M44(a), M42(b))))), Add(Multiply(M41(a), M13(b)), Add(Multiply(M42(a), M23(b)), Add(Multiply(M43(a), M33(b)), Multiply(M44(a), M43(b))))), Add(Multiply(M41(a), M14(b)), Add(Multiply(M42(a), M24(b)), Add(Multiply(M43(a), M34(b)), Multiply(M44(a), M44(b)))))))
    - Transforms_26:Library.Multiply(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Multiply(Vector4D(q), scalar)
    - Transforms_26:Library.Multiply(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Plato.Compiler.Symbols.BlockStatement
    _ARG_ 0: Pow2(x) => $778:constraint=IArithmetic
    _ARG_ 1: x => IArithmetic

95. Pow4
  Type: (IArithmetic) => $780:constraint=IArithmetic
  Sig: INumerical_4:Library.Pow4(x: IArithmetic): $780:constraint=IArithmetic
  Body: Multiply(Pow3(x), x)
  # functions: 10 AMBIGUOUS
    - INumerical_4:Library.Multiply(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Multiply(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Multiply(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9005:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Multiply(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9165:Concept:IAny, ParameterDef=b$9167:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Tuple3(Add(Multiply(X(v), M11(m)), Add(Multiply(Y(v), M21(m)), Add(Multiply(Z(v), M31(m)), M41(m)))), Add(Multiply(X(v), M12(m)), Add(Multiply(Y(v), M22(m)), Add(Multiply(Z(v), M32(m)), M42(m)))), Add(Multiply(X(v), M13(m)), Add(Multiply(Y(v), M23(m)), Add(Multiply(Z(v), M33(m)), M43(m)))))
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Multiply(Column1(m), s), Multiply(Column2(m), s), Multiply(Column3(m), s), Multiply(Column4(m), s))
    - Transforms_26:Library.Multiply(a: ConcreteType:Matrix4x4,b: ConcreteType:Matrix4x4): ConcreteType:Matrix4x4 [Library]; => CreateFromRows(Matrix4x4, Tuple4(Add(Multiply(M11(a), M11(b)), Add(Multiply(M12(a), M21(b)), Add(Multiply(M13(a), M31(b)), Multiply(M14(a), M41(b))))), Add(Multiply(M11(a), M12(b)), Add(Multiply(M12(a), M22(b)), Add(Multiply(M13(a), M32(b)), Multiply(M14(a), M42(b))))), Add(Multiply(M11(a), M13(b)), Add(Multiply(M12(a), M23(b)), Add(Multiply(M13(a), M33(b)), Multiply(M14(a), M43(b))))), Add(Multiply(M11(a), M14(b)), Add(Multiply(M12(a), M24(b)), Add(Multiply(M13(a), M34(b)), Multiply(M14(a), M44(b)))))), Tuple4(Add(Multiply(M21(a), M11(b)), Add(Multiply(M22(a), M21(b)), Add(Multiply(M23(a), M31(b)), Multiply(M24(a), M41(b))))), Add(Multiply(M21(a), M12(b)), Add(Multiply(M22(a), M22(b)), Add(Multiply(M23(a), M32(b)), Multiply(M24(a), M42(b))))), Add(Multiply(M21(a), M13(b)), Add(Multiply(M22(a), M23(b)), Add(Multiply(M23(a), M33(b)), Multiply(M24(a), M43(b))))), Add(Multiply(M21(a), M14(b)), Add(Multiply(M22(a), M24(b)), Add(Multiply(M23(a), M34(b)), Multiply(M24(a), M44(b)))))), Tuple4(Add(Multiply(M31(a), M11(b)), Add(Multiply(M32(a), M21(b)), Add(Multiply(M33(a), M31(b)), Multiply(M34(a), M41(b))))), Add(Multiply(M31(a), M12(b)), Add(Multiply(M32(a), M22(b)), Add(Multiply(M33(a), M32(b)), Multiply(M34(a), M42(b))))), Add(Multiply(M31(a), M13(b)), Add(Multiply(M32(a), M23(b)), Add(Multiply(M33(a), M33(b)), Multiply(M34(a), M43(b))))), Add(Multiply(M31(a), M14(b)), Add(Multiply(M32(a), M24(b)), Add(Multiply(M33(a), M34(b)), Multiply(M34(a), M44(b)))))), Tuple4(Add(Multiply(M41(a), M11(b)), Add(Multiply(M42(a), M21(b)), Add(Multiply(M43(a), M31(b)), Multiply(M44(a), M41(b))))), Add(Multiply(M41(a), M12(b)), Add(Multiply(M42(a), M22(b)), Add(Multiply(M43(a), M32(b)), Multiply(M44(a), M42(b))))), Add(Multiply(M41(a), M13(b)), Add(Multiply(M42(a), M23(b)), Add(Multiply(M43(a), M33(b)), Multiply(M44(a), M43(b))))), Add(Multiply(M41(a), M14(b)), Add(Multiply(M42(a), M24(b)), Add(Multiply(M43(a), M34(b)), Multiply(M44(a), M44(b)))))))
    - Transforms_26:Library.Multiply(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Multiply(Vector4D(q), scalar)
    - Transforms_26:Library.Multiply(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Plato.Compiler.Symbols.BlockStatement
    _ARG_ 0: Pow3(x) => $779:constraint=IArithmetic
    _ARG_ 1: x => IArithmetic

96. Pow5
  Type: (IArithmetic) => $781:constraint=IArithmetic
  Sig: INumerical_4:Library.Pow5(x: IArithmetic): $781:constraint=IArithmetic
  Body: Multiply(Pow4(x), x)
  # functions: 10 AMBIGUOUS
    - INumerical_4:Library.Multiply(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Multiply(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Multiply(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9005:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Multiply(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9165:Concept:IAny, ParameterDef=b$9167:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Tuple3(Add(Multiply(X(v), M11(m)), Add(Multiply(Y(v), M21(m)), Add(Multiply(Z(v), M31(m)), M41(m)))), Add(Multiply(X(v), M12(m)), Add(Multiply(Y(v), M22(m)), Add(Multiply(Z(v), M32(m)), M42(m)))), Add(Multiply(X(v), M13(m)), Add(Multiply(Y(v), M23(m)), Add(Multiply(Z(v), M33(m)), M43(m)))))
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Multiply(Column1(m), s), Multiply(Column2(m), s), Multiply(Column3(m), s), Multiply(Column4(m), s))
    - Transforms_26:Library.Multiply(a: ConcreteType:Matrix4x4,b: ConcreteType:Matrix4x4): ConcreteType:Matrix4x4 [Library]; => CreateFromRows(Matrix4x4, Tuple4(Add(Multiply(M11(a), M11(b)), Add(Multiply(M12(a), M21(b)), Add(Multiply(M13(a), M31(b)), Multiply(M14(a), M41(b))))), Add(Multiply(M11(a), M12(b)), Add(Multiply(M12(a), M22(b)), Add(Multiply(M13(a), M32(b)), Multiply(M14(a), M42(b))))), Add(Multiply(M11(a), M13(b)), Add(Multiply(M12(a), M23(b)), Add(Multiply(M13(a), M33(b)), Multiply(M14(a), M43(b))))), Add(Multiply(M11(a), M14(b)), Add(Multiply(M12(a), M24(b)), Add(Multiply(M13(a), M34(b)), Multiply(M14(a), M44(b)))))), Tuple4(Add(Multiply(M21(a), M11(b)), Add(Multiply(M22(a), M21(b)), Add(Multiply(M23(a), M31(b)), Multiply(M24(a), M41(b))))), Add(Multiply(M21(a), M12(b)), Add(Multiply(M22(a), M22(b)), Add(Multiply(M23(a), M32(b)), Multiply(M24(a), M42(b))))), Add(Multiply(M21(a), M13(b)), Add(Multiply(M22(a), M23(b)), Add(Multiply(M23(a), M33(b)), Multiply(M24(a), M43(b))))), Add(Multiply(M21(a), M14(b)), Add(Multiply(M22(a), M24(b)), Add(Multiply(M23(a), M34(b)), Multiply(M24(a), M44(b)))))), Tuple4(Add(Multiply(M31(a), M11(b)), Add(Multiply(M32(a), M21(b)), Add(Multiply(M33(a), M31(b)), Multiply(M34(a), M41(b))))), Add(Multiply(M31(a), M12(b)), Add(Multiply(M32(a), M22(b)), Add(Multiply(M33(a), M32(b)), Multiply(M34(a), M42(b))))), Add(Multiply(M31(a), M13(b)), Add(Multiply(M32(a), M23(b)), Add(Multiply(M33(a), M33(b)), Multiply(M34(a), M43(b))))), Add(Multiply(M31(a), M14(b)), Add(Multiply(M32(a), M24(b)), Add(Multiply(M33(a), M34(b)), Multiply(M34(a), M44(b)))))), Tuple4(Add(Multiply(M41(a), M11(b)), Add(Multiply(M42(a), M21(b)), Add(Multiply(M43(a), M31(b)), Multiply(M44(a), M41(b))))), Add(Multiply(M41(a), M12(b)), Add(Multiply(M42(a), M22(b)), Add(Multiply(M43(a), M32(b)), Multiply(M44(a), M42(b))))), Add(Multiply(M41(a), M13(b)), Add(Multiply(M42(a), M23(b)), Add(Multiply(M43(a), M33(b)), Multiply(M44(a), M43(b))))), Add(Multiply(M41(a), M14(b)), Add(Multiply(M42(a), M24(b)), Add(Multiply(M43(a), M34(b)), Multiply(M44(a), M44(b)))))))
    - Transforms_26:Library.Multiply(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Multiply(Vector4D(q), scalar)
    - Transforms_26:Library.Multiply(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Plato.Compiler.Symbols.BlockStatement
    _ARG_ 0: Pow4(x) => $780:constraint=IArithmetic
    _ARG_ 1: x => IArithmetic

100. ToNumber
  Type: (Integer) => Number
  Sig: INumerical_4:Library.ToNumber(x: Integer): Number
  Body: Number(x)
  # functions: 17 AMBIGUOUS
    - INumerical_4:Library.Number(x: Concept:INumberLike): ConcreteType:Number [Library]; => ToNumber(x)
    - Intrinsics_22:Library.Number(x: ConcreteType:Integer): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Number(x: ConcreteType:Character): ConcreteType:Number [Intrinsic]; => 
    - Unit_82:ConcreteType.Number(arg: ConcreteType:Unit): ConcreteType:Number [Field]; => 
    - Probability_84:ConcreteType.Number(arg: ConcreteType:Probability): ConcreteType:Number [Field]; => 
    - Angle_126:ConcreteType.Number(arg: ConcreteType:Angle): ConcreteType:Number [Field]; => 
    - Length_128:ConcreteType.Number(arg: ConcreteType:Length): ConcreteType:Number [Field]; => 
    - Mass_130:ConcreteType.Number(arg: ConcreteType:Mass): ConcreteType:Number [Field]; => 
    - Temperature_132:ConcreteType.Number(arg: ConcreteType:Temperature): ConcreteType:Number [Field]; => 
    - Time_134:ConcreteType.Number(arg: ConcreteType:Time): ConcreteType:Number [Field]; => 
    - DateTime_136:ConcreteType.Number(arg: ConcreteType:DateTime): ConcreteType:Number [Field]; => 
    - LemniscateOfBernoulli_192:ConcreteType.Number(arg: ConcreteType:LemniscateOfBernoulli): ConcreteType:Number [Field]; => 
    - TrisectrixOfMaclaurin_194:ConcreteType.Number(arg: ConcreteType:TrisectrixOfMaclaurin): ConcreteType:Number [Field]; => 
    - ConchoidOfDeSluze_196:ConcreteType.Number(arg: ConcreteType:ConchoidOfDeSluze): ConcreteType:Number [Field]; => 
    - TschirnhausenCubic_198:ConcreteType.Number(arg: ConcreteType:TschirnhausenCubic): ConcreteType:Number [Field]; => 
    - FermatsSpiral_202:ConcreteType.Number(arg: ConcreteType:FermatsSpiral): ConcreteType:Number [Field]; => 
    - Sphere_502:ConcreteType.Number(arg: ConcreteType:Sphere): ConcreteType:Number [Field]; => 
    _ARG_ 0: x => Integer

101. PlusOne
  Type: (Integer) => Integer
  Sig: INumerical_4:Library.PlusOne(x: Integer): Integer
  Body: Add(x, 1)
  # functions: 5 AMBIGUOUS
    - INumerical_4:Library.Add(x: Concept:INumberLike,y: ConcreteType:Number): Concept:INumberLike [Library]; => FromNumber(x, Add(ToNumber(x), y))
    - INumerical_4:Library.Add(x: Concept:INumerical,y: Concept:INumerical): Concept:INumerical [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9082:Concept:IAny, ParameterDef=b$9084:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Add(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Add(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Add(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Add(Vector4D(q1), Vector4D(q2))
    _ARG_ 0: x => Integer
    _ARG_ 1: 1 => Integer

102. MinusOne
  Type: (Integer) => Integer
  Sig: INumerical_4:Library.MinusOne(x: Integer): Integer
  Body: Subtract(x, 1)
  # functions: 4 AMBIGUOUS
    - INumerical_4:Library.Subtract(x: Concept:INumerical,y: Concept:INumerical): Concept:INumerical [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9113:Concept:IAny, ParameterDef=b$9115:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Subtract(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Subtract(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Subtract(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Subtract(Vector4D(q1), Vector4D(q2))
    _ARG_ 0: x => Integer
    _ARG_ 1: 1 => Integer

103. FromOne
  Type: (Integer) => Integer
  Sig: INumerical_4:Library.FromOne(x: Integer): Integer
  Body: Subtract(1, x)
  # functions: 4 AMBIGUOUS
    - INumerical_4:Library.Subtract(x: Concept:INumerical,y: Concept:INumerical): Concept:INumerical [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9113:Concept:IAny, ParameterDef=b$9115:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Subtract(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Subtract(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Subtract(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Subtract(Vector4D(q1), Vector4D(q2))
    _ARG_ 0: 1 => Integer
    _ARG_ 1: x => Integer

104. FloatDivision
  Type: (Integer, Integer) => Number
  Sig: INumerical_4:Library.FloatDivision(x: Integer, y: Integer): Number
  Body: Divide(ToNumber(x), ToNumber(y))
  # functions: 7 AMBIGUOUS
    - INumerical_4:Library.Divide(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Divide(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Divide(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9030:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Divide(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9196:Concept:IAny, ParameterDef=b$9198:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Divide(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Divide(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Divide(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Divide(Column1(m), s), Divide(Column2(m), s), Divide(Column3(m), s), Divide(Column4(m), s))
    - Transforms_26:Library.Divide(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Divide(Vector4D(q), scalar)
    _ARG_ 0: ToNumber(x) => Number
    _ARG_ 1: ToNumber(y) => Number

105. Fractions
  Type: (Integer) => $785:constraint=(IArray, Number)
  Sig: INumerical_4:Library.Fractions(x: Integer): $785:constraint=(IArray, Number)
  Body: Map(Range(x), (\(ParameterDef=i$7651:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
  # functions: 2 AMBIGUOUS
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray<TypeVariable:$T2> [Library]; => MapRange(Count(xs), (\(ParameterDef=i$6222:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray2D<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray2D<TypeVariable:$T2> [Library]; => MakeArray2D(NumColumns(xs), NumRows(xs), (\(ParameterDef=a$6857:Concept:IAny, ParameterDef=b$6859:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    _ARG_ 0: Range(x) => $612:constraint=(IArray, Integer)
    _ARG_ 1: (\(ParameterDef=i$7651:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1> => (Function1, $1202:, $1203:)

106. FractionsExclusive
  Type: (Integer) => $786:constraint=(IArray, Number)
  Sig: INumerical_4:Library.FractionsExclusive(x: Integer): $786:constraint=(IArray, Number)
  Body: Map(Range(x), (\(ParameterDef=i$7682:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
  # functions: 2 AMBIGUOUS
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray<TypeVariable:$T2> [Library]; => MapRange(Count(xs), (\(ParameterDef=i$6222:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray2D<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray2D<TypeVariable:$T2> [Library]; => MakeArray2D(NumColumns(xs), NumRows(xs), (\(ParameterDef=a$6857:Concept:IAny, ParameterDef=b$6859:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    _ARG_ 0: Range(x) => $612:constraint=(IArray, Integer)
    _ARG_ 1: (\(ParameterDef=i$7682:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1> => (Function1, $1353:, $1354:)

110. Magnitude
  Type: (IReal) => Number
  Sig: INumerical_4:Library.Magnitude(x: IReal): Number
  Body: Value(x)
  # functions: 3 AMBIGUOUS
    - Unit_82:ConcreteType.Value(self: ConcreteType:Unit): ConcreteType:Number [Field]; => 
    - Probability_84:ConcreteType.Value(self: ConcreteType:Probability): ConcreteType:Number [Field]; => 
    - DateTime_136:ConcreteType.Value(self: ConcreteType:DateTime): ConcreteType:Number [Field]; => 
    _ARG_ 0: x => IReal

114. LtEqZ
  Type: (IReal) => Boolean
  Sig: INumerical_4:Library.LtEqZ(x: IReal): Boolean
  Body: LessThanOrEquals(x, Zero(x))
  # functions: 5 AMBIGUOUS
    - Intrinsics_22:Library.LessThanOrEquals(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Boolean [Intrinsic]; => 
    - Intrinsics_22:Library.LessThanOrEquals(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Boolean [Intrinsic]; => 
    - Intrinsics_22:Library.LessThanOrEquals(x: ConcreteType:Character,y: ConcreteType:Character): ConcreteType:Boolean [Intrinsic]; => 
    - Intrinsics_22:Library.LessThanOrEquals(x: ConcreteType:String,y: ConcreteType:String): ConcreteType:Boolean [Intrinsic]; => 
    - Intrinsics_22:Library.LessThanOrEquals(x: ConcreteType:Boolean,y: ConcreteType:Boolean): ConcreteType:Boolean [Intrinsic]; => 
    _ARG_ 0: x => IReal
    _ARG_ 1: Zero(x) => $807:constraint=INumerical

119. Inverse
  Type: (IReal) => $791:constraint=IReal
  Sig: INumerical_4:Library.Inverse(x: IReal): $791:constraint=IReal
  Body: Divide(One(x), x)
  # functions: 7 AMBIGUOUS
    - INumerical_4:Library.Divide(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Divide(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Divide(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9030:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Divide(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9196:Concept:IAny, ParameterDef=b$9198:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Divide(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Divide(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Divide(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Divide(Column1(m), s), Divide(Column2(m), s), Divide(Column3(m), s), Divide(Column4(m), s))
    - Transforms_26:Library.Divide(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Divide(Vector4D(q), scalar)
    _ARG_ 0: One(x) => $808:constraint=INumerical
    _ARG_ 1: x => IReal

121. Half
  Type: (IScalarArithmetic) => $792:constraint=IScalarArithmetic
  Sig: INumerical_4:Library.Half(x: IScalarArithmetic): $792:constraint=IScalarArithmetic
  Body: Divide(x, 2)
  # functions: 7 AMBIGUOUS
    - INumerical_4:Library.Divide(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Divide(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Divide(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9030:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Divide(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9196:Concept:IAny, ParameterDef=b$9198:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Divide(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Divide(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Divide(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Divide(Column1(m), s), Divide(Column2(m), s), Divide(Column3(m), s), Divide(Column4(m), s))
    - Transforms_26:Library.Divide(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Divide(Vector4D(q), scalar)
    _ARG_ 0: x => IScalarArithmetic
    _ARG_ 1: 2 => Number

122. Quarter
  Type: (IScalarArithmetic) => $793:constraint=IScalarArithmetic
  Sig: INumerical_4:Library.Quarter(x: IScalarArithmetic): $793:constraint=IScalarArithmetic
  Body: Divide(x, 4)
  # functions: 7 AMBIGUOUS
    - INumerical_4:Library.Divide(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Divide(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Divide(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9030:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Divide(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9196:Concept:IAny, ParameterDef=b$9198:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Divide(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Divide(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Divide(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Divide(Column1(m), s), Divide(Column2(m), s), Divide(Column3(m), s), Divide(Column4(m), s))
    - Transforms_26:Library.Divide(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Divide(Vector4D(q), scalar)
    _ARG_ 0: x => IScalarArithmetic
    _ARG_ 1: 4 => Number

123. Eight
  Type: (IScalarArithmetic) => $794:constraint=IScalarArithmetic
  Sig: INumerical_4:Library.Eight(x: IScalarArithmetic): $794:constraint=IScalarArithmetic
  Body: Divide(x, 8)
  # functions: 7 AMBIGUOUS
    - INumerical_4:Library.Divide(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Divide(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Divide(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9030:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Divide(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9196:Concept:IAny, ParameterDef=b$9198:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Divide(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Divide(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Divide(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Divide(Column1(m), s), Divide(Column2(m), s), Divide(Column3(m), s), Divide(Column4(m), s))
    - Transforms_26:Library.Divide(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Divide(Vector4D(q), scalar)
    _ARG_ 0: x => IScalarArithmetic
    _ARG_ 1: 8 => Number

124. Sixteenth
  Type: (IScalarArithmetic) => $795:constraint=IScalarArithmetic
  Sig: INumerical_4:Library.Sixteenth(x: IScalarArithmetic): $795:constraint=IScalarArithmetic
  Body: Divide(x, 16)
  # functions: 7 AMBIGUOUS
    - INumerical_4:Library.Divide(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Divide(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Divide(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9030:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Divide(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9196:Concept:IAny, ParameterDef=b$9198:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Divide(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Divide(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Divide(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Divide(Column1(m), s), Divide(Column2(m), s), Divide(Column3(m), s), Divide(Column4(m), s))
    - Transforms_26:Library.Divide(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Divide(Vector4D(q), scalar)
    _ARG_ 0: x => IScalarArithmetic
    _ARG_ 1: 16 => Number

125. Tenth
  Type: (IScalarArithmetic) => $796:constraint=IScalarArithmetic
  Sig: INumerical_4:Library.Tenth(x: IScalarArithmetic): $796:constraint=IScalarArithmetic
  Body: Divide(x, 10)
  # functions: 7 AMBIGUOUS
    - INumerical_4:Library.Divide(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Divide(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Divide(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9030:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Divide(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9196:Concept:IAny, ParameterDef=b$9198:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Divide(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Divide(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Divide(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Divide(Column1(m), s), Divide(Column2(m), s), Divide(Column3(m), s), Divide(Column4(m), s))
    - Transforms_26:Library.Divide(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Divide(Vector4D(q), scalar)
    _ARG_ 0: x => IScalarArithmetic
    _ARG_ 1: 10 => Number

126. Twice
  Type: (IScalarArithmetic) => $797:constraint=IScalarArithmetic
  Sig: INumerical_4:Library.Twice(x: IScalarArithmetic): $797:constraint=IScalarArithmetic
  Body: Multiply(x, 2)
  # functions: 10 AMBIGUOUS
    - INumerical_4:Library.Multiply(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Multiply(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Multiply(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9005:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Multiply(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9165:Concept:IAny, ParameterDef=b$9167:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Tuple3(Add(Multiply(X(v), M11(m)), Add(Multiply(Y(v), M21(m)), Add(Multiply(Z(v), M31(m)), M41(m)))), Add(Multiply(X(v), M12(m)), Add(Multiply(Y(v), M22(m)), Add(Multiply(Z(v), M32(m)), M42(m)))), Add(Multiply(X(v), M13(m)), Add(Multiply(Y(v), M23(m)), Add(Multiply(Z(v), M33(m)), M43(m)))))
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Multiply(Column1(m), s), Multiply(Column2(m), s), Multiply(Column3(m), s), Multiply(Column4(m), s))
    - Transforms_26:Library.Multiply(a: ConcreteType:Matrix4x4,b: ConcreteType:Matrix4x4): ConcreteType:Matrix4x4 [Library]; => CreateFromRows(Matrix4x4, Tuple4(Add(Multiply(M11(a), M11(b)), Add(Multiply(M12(a), M21(b)), Add(Multiply(M13(a), M31(b)), Multiply(M14(a), M41(b))))), Add(Multiply(M11(a), M12(b)), Add(Multiply(M12(a), M22(b)), Add(Multiply(M13(a), M32(b)), Multiply(M14(a), M42(b))))), Add(Multiply(M11(a), M13(b)), Add(Multiply(M12(a), M23(b)), Add(Multiply(M13(a), M33(b)), Multiply(M14(a), M43(b))))), Add(Multiply(M11(a), M14(b)), Add(Multiply(M12(a), M24(b)), Add(Multiply(M13(a), M34(b)), Multiply(M14(a), M44(b)))))), Tuple4(Add(Multiply(M21(a), M11(b)), Add(Multiply(M22(a), M21(b)), Add(Multiply(M23(a), M31(b)), Multiply(M24(a), M41(b))))), Add(Multiply(M21(a), M12(b)), Add(Multiply(M22(a), M22(b)), Add(Multiply(M23(a), M32(b)), Multiply(M24(a), M42(b))))), Add(Multiply(M21(a), M13(b)), Add(Multiply(M22(a), M23(b)), Add(Multiply(M23(a), M33(b)), Multiply(M24(a), M43(b))))), Add(Multiply(M21(a), M14(b)), Add(Multiply(M22(a), M24(b)), Add(Multiply(M23(a), M34(b)), Multiply(M24(a), M44(b)))))), Tuple4(Add(Multiply(M31(a), M11(b)), Add(Multiply(M32(a), M21(b)), Add(Multiply(M33(a), M31(b)), Multiply(M34(a), M41(b))))), Add(Multiply(M31(a), M12(b)), Add(Multiply(M32(a), M22(b)), Add(Multiply(M33(a), M32(b)), Multiply(M34(a), M42(b))))), Add(Multiply(M31(a), M13(b)), Add(Multiply(M32(a), M23(b)), Add(Multiply(M33(a), M33(b)), Multiply(M34(a), M43(b))))), Add(Multiply(M31(a), M14(b)), Add(Multiply(M32(a), M24(b)), Add(Multiply(M33(a), M34(b)), Multiply(M34(a), M44(b)))))), Tuple4(Add(Multiply(M41(a), M11(b)), Add(Multiply(M42(a), M21(b)), Add(Multiply(M43(a), M31(b)), Multiply(M44(a), M41(b))))), Add(Multiply(M41(a), M12(b)), Add(Multiply(M42(a), M22(b)), Add(Multiply(M43(a), M32(b)), Multiply(M44(a), M42(b))))), Add(Multiply(M41(a), M13(b)), Add(Multiply(M42(a), M23(b)), Add(Multiply(M43(a), M33(b)), Multiply(M44(a), M43(b))))), Add(Multiply(M41(a), M14(b)), Add(Multiply(M42(a), M24(b)), Add(Multiply(M43(a), M34(b)), Multiply(M44(a), M44(b)))))))
    - Transforms_26:Library.Multiply(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Multiply(Vector4D(q), scalar)
    - Transforms_26:Library.Multiply(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Plato.Compiler.Symbols.BlockStatement
    _ARG_ 0: x => IScalarArithmetic
    _ARG_ 1: 2 => Number

127. Hundred
  Type: (IScalarArithmetic) => $798:constraint=IScalarArithmetic
  Sig: INumerical_4:Library.Hundred(x: IScalarArithmetic): $798:constraint=IScalarArithmetic
  Body: Multiply(x, 100)
  # functions: 10 AMBIGUOUS
    - INumerical_4:Library.Multiply(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Multiply(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Multiply(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9005:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Multiply(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9165:Concept:IAny, ParameterDef=b$9167:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Tuple3(Add(Multiply(X(v), M11(m)), Add(Multiply(Y(v), M21(m)), Add(Multiply(Z(v), M31(m)), M41(m)))), Add(Multiply(X(v), M12(m)), Add(Multiply(Y(v), M22(m)), Add(Multiply(Z(v), M32(m)), M42(m)))), Add(Multiply(X(v), M13(m)), Add(Multiply(Y(v), M23(m)), Add(Multiply(Z(v), M33(m)), M43(m)))))
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Multiply(Column1(m), s), Multiply(Column2(m), s), Multiply(Column3(m), s), Multiply(Column4(m), s))
    - Transforms_26:Library.Multiply(a: ConcreteType:Matrix4x4,b: ConcreteType:Matrix4x4): ConcreteType:Matrix4x4 [Library]; => CreateFromRows(Matrix4x4, Tuple4(Add(Multiply(M11(a), M11(b)), Add(Multiply(M12(a), M21(b)), Add(Multiply(M13(a), M31(b)), Multiply(M14(a), M41(b))))), Add(Multiply(M11(a), M12(b)), Add(Multiply(M12(a), M22(b)), Add(Multiply(M13(a), M32(b)), Multiply(M14(a), M42(b))))), Add(Multiply(M11(a), M13(b)), Add(Multiply(M12(a), M23(b)), Add(Multiply(M13(a), M33(b)), Multiply(M14(a), M43(b))))), Add(Multiply(M11(a), M14(b)), Add(Multiply(M12(a), M24(b)), Add(Multiply(M13(a), M34(b)), Multiply(M14(a), M44(b)))))), Tuple4(Add(Multiply(M21(a), M11(b)), Add(Multiply(M22(a), M21(b)), Add(Multiply(M23(a), M31(b)), Multiply(M24(a), M41(b))))), Add(Multiply(M21(a), M12(b)), Add(Multiply(M22(a), M22(b)), Add(Multiply(M23(a), M32(b)), Multiply(M24(a), M42(b))))), Add(Multiply(M21(a), M13(b)), Add(Multiply(M22(a), M23(b)), Add(Multiply(M23(a), M33(b)), Multiply(M24(a), M43(b))))), Add(Multiply(M21(a), M14(b)), Add(Multiply(M22(a), M24(b)), Add(Multiply(M23(a), M34(b)), Multiply(M24(a), M44(b)))))), Tuple4(Add(Multiply(M31(a), M11(b)), Add(Multiply(M32(a), M21(b)), Add(Multiply(M33(a), M31(b)), Multiply(M34(a), M41(b))))), Add(Multiply(M31(a), M12(b)), Add(Multiply(M32(a), M22(b)), Add(Multiply(M33(a), M32(b)), Multiply(M34(a), M42(b))))), Add(Multiply(M31(a), M13(b)), Add(Multiply(M32(a), M23(b)), Add(Multiply(M33(a), M33(b)), Multiply(M34(a), M43(b))))), Add(Multiply(M31(a), M14(b)), Add(Multiply(M32(a), M24(b)), Add(Multiply(M33(a), M34(b)), Multiply(M34(a), M44(b)))))), Tuple4(Add(Multiply(M41(a), M11(b)), Add(Multiply(M42(a), M21(b)), Add(Multiply(M43(a), M31(b)), Multiply(M44(a), M41(b))))), Add(Multiply(M41(a), M12(b)), Add(Multiply(M42(a), M22(b)), Add(Multiply(M43(a), M32(b)), Multiply(M44(a), M42(b))))), Add(Multiply(M41(a), M13(b)), Add(Multiply(M42(a), M23(b)), Add(Multiply(M43(a), M33(b)), Multiply(M44(a), M43(b))))), Add(Multiply(M41(a), M14(b)), Add(Multiply(M42(a), M24(b)), Add(Multiply(M43(a), M34(b)), Multiply(M44(a), M44(b)))))))
    - Transforms_26:Library.Multiply(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Multiply(Vector4D(q), scalar)
    - Transforms_26:Library.Multiply(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Plato.Compiler.Symbols.BlockStatement
    _ARG_ 0: x => IScalarArithmetic
    _ARG_ 1: 100 => Number

128. Thousand
  Type: (IScalarArithmetic) => $799:constraint=IScalarArithmetic
  Sig: INumerical_4:Library.Thousand(x: IScalarArithmetic): $799:constraint=IScalarArithmetic
  Body: Multiply(x, 1000)
  # functions: 10 AMBIGUOUS
    - INumerical_4:Library.Multiply(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Multiply(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Multiply(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9005:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Multiply(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9165:Concept:IAny, ParameterDef=b$9167:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Tuple3(Add(Multiply(X(v), M11(m)), Add(Multiply(Y(v), M21(m)), Add(Multiply(Z(v), M31(m)), M41(m)))), Add(Multiply(X(v), M12(m)), Add(Multiply(Y(v), M22(m)), Add(Multiply(Z(v), M32(m)), M42(m)))), Add(Multiply(X(v), M13(m)), Add(Multiply(Y(v), M23(m)), Add(Multiply(Z(v), M33(m)), M43(m)))))
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Multiply(Column1(m), s), Multiply(Column2(m), s), Multiply(Column3(m), s), Multiply(Column4(m), s))
    - Transforms_26:Library.Multiply(a: ConcreteType:Matrix4x4,b: ConcreteType:Matrix4x4): ConcreteType:Matrix4x4 [Library]; => CreateFromRows(Matrix4x4, Tuple4(Add(Multiply(M11(a), M11(b)), Add(Multiply(M12(a), M21(b)), Add(Multiply(M13(a), M31(b)), Multiply(M14(a), M41(b))))), Add(Multiply(M11(a), M12(b)), Add(Multiply(M12(a), M22(b)), Add(Multiply(M13(a), M32(b)), Multiply(M14(a), M42(b))))), Add(Multiply(M11(a), M13(b)), Add(Multiply(M12(a), M23(b)), Add(Multiply(M13(a), M33(b)), Multiply(M14(a), M43(b))))), Add(Multiply(M11(a), M14(b)), Add(Multiply(M12(a), M24(b)), Add(Multiply(M13(a), M34(b)), Multiply(M14(a), M44(b)))))), Tuple4(Add(Multiply(M21(a), M11(b)), Add(Multiply(M22(a), M21(b)), Add(Multiply(M23(a), M31(b)), Multiply(M24(a), M41(b))))), Add(Multiply(M21(a), M12(b)), Add(Multiply(M22(a), M22(b)), Add(Multiply(M23(a), M32(b)), Multiply(M24(a), M42(b))))), Add(Multiply(M21(a), M13(b)), Add(Multiply(M22(a), M23(b)), Add(Multiply(M23(a), M33(b)), Multiply(M24(a), M43(b))))), Add(Multiply(M21(a), M14(b)), Add(Multiply(M22(a), M24(b)), Add(Multiply(M23(a), M34(b)), Multiply(M24(a), M44(b)))))), Tuple4(Add(Multiply(M31(a), M11(b)), Add(Multiply(M32(a), M21(b)), Add(Multiply(M33(a), M31(b)), Multiply(M34(a), M41(b))))), Add(Multiply(M31(a), M12(b)), Add(Multiply(M32(a), M22(b)), Add(Multiply(M33(a), M32(b)), Multiply(M34(a), M42(b))))), Add(Multiply(M31(a), M13(b)), Add(Multiply(M32(a), M23(b)), Add(Multiply(M33(a), M33(b)), Multiply(M34(a), M43(b))))), Add(Multiply(M31(a), M14(b)), Add(Multiply(M32(a), M24(b)), Add(Multiply(M33(a), M34(b)), Multiply(M34(a), M44(b)))))), Tuple4(Add(Multiply(M41(a), M11(b)), Add(Multiply(M42(a), M21(b)), Add(Multiply(M43(a), M31(b)), Multiply(M44(a), M41(b))))), Add(Multiply(M41(a), M12(b)), Add(Multiply(M42(a), M22(b)), Add(Multiply(M43(a), M32(b)), Multiply(M44(a), M42(b))))), Add(Multiply(M41(a), M13(b)), Add(Multiply(M42(a), M23(b)), Add(Multiply(M43(a), M33(b)), Multiply(M44(a), M43(b))))), Add(Multiply(M41(a), M14(b)), Add(Multiply(M42(a), M24(b)), Add(Multiply(M43(a), M34(b)), Multiply(M44(a), M44(b)))))))
    - Transforms_26:Library.Multiply(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Multiply(Vector4D(q), scalar)
    - Transforms_26:Library.Multiply(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Plato.Compiler.Symbols.BlockStatement
    _ARG_ 0: x => IScalarArithmetic
    _ARG_ 1: 1000 => Number

131. Turns
  Type: (Number) => Angle
  Sig: INumerical_4:Library.Turns(x: Number): Angle
  Body: Radians(Multiply(x, TwoPi))
  # functions: 2 AMBIGUOUS
    - INumerical_4:Library.Radians(x: ConcreteType:Number): ConcreteType:Angle [Library]; => x
    - Angle_126:ConcreteType.Radians(self: ConcreteType:Angle): ConcreteType:Number [Field]; => 
    _ARG_ 0: Multiply(x, TwoPi) => $787:constraint=INumberLike

132. Degrees
  Type: (Number) => Angle
  Sig: INumerical_4:Library.Degrees(x: Number): Angle
  Body: Turns(Divide(x, 360))
  # functions: 2 AMBIGUOUS
    - INumerical_4:Library.Turns(x: ConcreteType:Number): ConcreteType:Angle [Library]; => Radians(Multiply(x, TwoPi))
    - INumerical_4:Library.Turns(x: ConcreteType:Angle): ConcreteType:Number [Library]; => Divide(Radians(x), TwoPi)
    _ARG_ 0: Divide(x, 360) => $788:constraint=INumberLike

133. Gradians
  Type: (Number) => Angle
  Sig: INumerical_4:Library.Gradians(x: Number): Angle
  Body: Turns(Divide(x, 400))
  # functions: 2 AMBIGUOUS
    - INumerical_4:Library.Turns(x: ConcreteType:Number): ConcreteType:Angle [Library]; => Radians(Multiply(x, TwoPi))
    - INumerical_4:Library.Turns(x: ConcreteType:Angle): ConcreteType:Number [Library]; => Divide(Radians(x), TwoPi)
    _ARG_ 0: Divide(x, 400) => $788:constraint=INumberLike

135. Turns
  Type: (Angle) => Number
  Sig: INumerical_4:Library.Turns(x: Angle): Number
  Body: Divide(Radians(x), TwoPi)
  # functions: 7 AMBIGUOUS
    - INumerical_4:Library.Divide(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Divide(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Divide(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9030:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Divide(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9196:Concept:IAny, ParameterDef=b$9198:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Divide(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Divide(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Divide(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Divide(Column1(m), s), Divide(Column2(m), s), Divide(Column3(m), s), Divide(Column4(m), s))
    - Transforms_26:Library.Divide(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Divide(Vector4D(q), scalar)
    _ARG_ 0: Radians(x) => Angle
    _ARG_ 1: TwoPi => IAny

136. Degrees
  Type: (Angle) => Number
  Sig: INumerical_4:Library.Degrees(x: Angle): Number
  Body: Multiply(Turns(x), 360)
  # functions: 10 AMBIGUOUS
    - INumerical_4:Library.Multiply(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Multiply(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Multiply(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9005:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Multiply(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9165:Concept:IAny, ParameterDef=b$9167:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Tuple3(Add(Multiply(X(v), M11(m)), Add(Multiply(Y(v), M21(m)), Add(Multiply(Z(v), M31(m)), M41(m)))), Add(Multiply(X(v), M12(m)), Add(Multiply(Y(v), M22(m)), Add(Multiply(Z(v), M32(m)), M42(m)))), Add(Multiply(X(v), M13(m)), Add(Multiply(Y(v), M23(m)), Add(Multiply(Z(v), M33(m)), M43(m)))))
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Multiply(Column1(m), s), Multiply(Column2(m), s), Multiply(Column3(m), s), Multiply(Column4(m), s))
    - Transforms_26:Library.Multiply(a: ConcreteType:Matrix4x4,b: ConcreteType:Matrix4x4): ConcreteType:Matrix4x4 [Library]; => CreateFromRows(Matrix4x4, Tuple4(Add(Multiply(M11(a), M11(b)), Add(Multiply(M12(a), M21(b)), Add(Multiply(M13(a), M31(b)), Multiply(M14(a), M41(b))))), Add(Multiply(M11(a), M12(b)), Add(Multiply(M12(a), M22(b)), Add(Multiply(M13(a), M32(b)), Multiply(M14(a), M42(b))))), Add(Multiply(M11(a), M13(b)), Add(Multiply(M12(a), M23(b)), Add(Multiply(M13(a), M33(b)), Multiply(M14(a), M43(b))))), Add(Multiply(M11(a), M14(b)), Add(Multiply(M12(a), M24(b)), Add(Multiply(M13(a), M34(b)), Multiply(M14(a), M44(b)))))), Tuple4(Add(Multiply(M21(a), M11(b)), Add(Multiply(M22(a), M21(b)), Add(Multiply(M23(a), M31(b)), Multiply(M24(a), M41(b))))), Add(Multiply(M21(a), M12(b)), Add(Multiply(M22(a), M22(b)), Add(Multiply(M23(a), M32(b)), Multiply(M24(a), M42(b))))), Add(Multiply(M21(a), M13(b)), Add(Multiply(M22(a), M23(b)), Add(Multiply(M23(a), M33(b)), Multiply(M24(a), M43(b))))), Add(Multiply(M21(a), M14(b)), Add(Multiply(M22(a), M24(b)), Add(Multiply(M23(a), M34(b)), Multiply(M24(a), M44(b)))))), Tuple4(Add(Multiply(M31(a), M11(b)), Add(Multiply(M32(a), M21(b)), Add(Multiply(M33(a), M31(b)), Multiply(M34(a), M41(b))))), Add(Multiply(M31(a), M12(b)), Add(Multiply(M32(a), M22(b)), Add(Multiply(M33(a), M32(b)), Multiply(M34(a), M42(b))))), Add(Multiply(M31(a), M13(b)), Add(Multiply(M32(a), M23(b)), Add(Multiply(M33(a), M33(b)), Multiply(M34(a), M43(b))))), Add(Multiply(M31(a), M14(b)), Add(Multiply(M32(a), M24(b)), Add(Multiply(M33(a), M34(b)), Multiply(M34(a), M44(b)))))), Tuple4(Add(Multiply(M41(a), M11(b)), Add(Multiply(M42(a), M21(b)), Add(Multiply(M43(a), M31(b)), Multiply(M44(a), M41(b))))), Add(Multiply(M41(a), M12(b)), Add(Multiply(M42(a), M22(b)), Add(Multiply(M43(a), M32(b)), Multiply(M44(a), M42(b))))), Add(Multiply(M41(a), M13(b)), Add(Multiply(M42(a), M23(b)), Add(Multiply(M43(a), M33(b)), Multiply(M44(a), M43(b))))), Add(Multiply(M41(a), M14(b)), Add(Multiply(M42(a), M24(b)), Add(Multiply(M43(a), M34(b)), Multiply(M44(a), M44(b)))))))
    - Transforms_26:Library.Multiply(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Multiply(Vector4D(q), scalar)
    - Transforms_26:Library.Multiply(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Plato.Compiler.Symbols.BlockStatement
    _ARG_ 0: Turns(x) => Angle
    _ARG_ 1: 360 => Number

137. Gradians
  Type: (Angle) => Number
  Sig: INumerical_4:Library.Gradians(x: Angle): Number
  Body: Multiply(Turns(x), 400)
  # functions: 10 AMBIGUOUS
    - INumerical_4:Library.Multiply(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Multiply(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Multiply(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9005:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Multiply(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9165:Concept:IAny, ParameterDef=b$9167:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Tuple3(Add(Multiply(X(v), M11(m)), Add(Multiply(Y(v), M21(m)), Add(Multiply(Z(v), M31(m)), M41(m)))), Add(Multiply(X(v), M12(m)), Add(Multiply(Y(v), M22(m)), Add(Multiply(Z(v), M32(m)), M42(m)))), Add(Multiply(X(v), M13(m)), Add(Multiply(Y(v), M23(m)), Add(Multiply(Z(v), M33(m)), M43(m)))))
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Multiply(Column1(m), s), Multiply(Column2(m), s), Multiply(Column3(m), s), Multiply(Column4(m), s))
    - Transforms_26:Library.Multiply(a: ConcreteType:Matrix4x4,b: ConcreteType:Matrix4x4): ConcreteType:Matrix4x4 [Library]; => CreateFromRows(Matrix4x4, Tuple4(Add(Multiply(M11(a), M11(b)), Add(Multiply(M12(a), M21(b)), Add(Multiply(M13(a), M31(b)), Multiply(M14(a), M41(b))))), Add(Multiply(M11(a), M12(b)), Add(Multiply(M12(a), M22(b)), Add(Multiply(M13(a), M32(b)), Multiply(M14(a), M42(b))))), Add(Multiply(M11(a), M13(b)), Add(Multiply(M12(a), M23(b)), Add(Multiply(M13(a), M33(b)), Multiply(M14(a), M43(b))))), Add(Multiply(M11(a), M14(b)), Add(Multiply(M12(a), M24(b)), Add(Multiply(M13(a), M34(b)), Multiply(M14(a), M44(b)))))), Tuple4(Add(Multiply(M21(a), M11(b)), Add(Multiply(M22(a), M21(b)), Add(Multiply(M23(a), M31(b)), Multiply(M24(a), M41(b))))), Add(Multiply(M21(a), M12(b)), Add(Multiply(M22(a), M22(b)), Add(Multiply(M23(a), M32(b)), Multiply(M24(a), M42(b))))), Add(Multiply(M21(a), M13(b)), Add(Multiply(M22(a), M23(b)), Add(Multiply(M23(a), M33(b)), Multiply(M24(a), M43(b))))), Add(Multiply(M21(a), M14(b)), Add(Multiply(M22(a), M24(b)), Add(Multiply(M23(a), M34(b)), Multiply(M24(a), M44(b)))))), Tuple4(Add(Multiply(M31(a), M11(b)), Add(Multiply(M32(a), M21(b)), Add(Multiply(M33(a), M31(b)), Multiply(M34(a), M41(b))))), Add(Multiply(M31(a), M12(b)), Add(Multiply(M32(a), M22(b)), Add(Multiply(M33(a), M32(b)), Multiply(M34(a), M42(b))))), Add(Multiply(M31(a), M13(b)), Add(Multiply(M32(a), M23(b)), Add(Multiply(M33(a), M33(b)), Multiply(M34(a), M43(b))))), Add(Multiply(M31(a), M14(b)), Add(Multiply(M32(a), M24(b)), Add(Multiply(M33(a), M34(b)), Multiply(M34(a), M44(b)))))), Tuple4(Add(Multiply(M41(a), M11(b)), Add(Multiply(M42(a), M21(b)), Add(Multiply(M43(a), M31(b)), Multiply(M44(a), M41(b))))), Add(Multiply(M41(a), M12(b)), Add(Multiply(M42(a), M22(b)), Add(Multiply(M43(a), M32(b)), Multiply(M44(a), M42(b))))), Add(Multiply(M41(a), M13(b)), Add(Multiply(M42(a), M23(b)), Add(Multiply(M43(a), M33(b)), Multiply(M44(a), M43(b))))), Add(Multiply(M41(a), M14(b)), Add(Multiply(M42(a), M24(b)), Add(Multiply(M43(a), M34(b)), Multiply(M44(a), M44(b)))))))
    - Transforms_26:Library.Multiply(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Multiply(Vector4D(q), scalar)
    - Transforms_26:Library.Multiply(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Plato.Compiler.Symbols.BlockStatement
    _ARG_ 0: Turns(x) => Angle
    _ARG_ 1: 400 => Number

138. Sin
  Type: (Number) => Number
  Sig: INumerical_4:Library.Sin(x: Number): Number
  Body: Sin(Turns(x))
  # functions: 2 AMBIGUOUS
    - INumerical_4:Library.Sin(x: ConcreteType:Number): ConcreteType:Number [Library]; => Sin(Turns(x))
    - Intrinsics_22:Library.Sin(x: ConcreteType:Angle): ConcreteType:Number [Intrinsic]; => 
    _ARG_ 0: Turns(x) => Angle

139. Cos
  Type: (Number) => Number
  Sig: INumerical_4:Library.Cos(x: Number): Number
  Body: Cos(Turns(x))
  # functions: 2 AMBIGUOUS
    - INumerical_4:Library.Cos(x: ConcreteType:Number): ConcreteType:Number [Library]; => Cos(Turns(x))
    - Intrinsics_22:Library.Cos(x: ConcreteType:Angle): ConcreteType:Number [Intrinsic]; => 
    _ARG_ 0: Turns(x) => Angle

140. Tan
  Type: (Number) => Number
  Sig: INumerical_4:Library.Tan(x: Number): Number
  Body: Tan(Turns(x))
  # functions: 2 AMBIGUOUS
    - INumerical_4:Library.Tan(x: ConcreteType:Number): ConcreteType:Number [Library]; => Tan(Turns(x))
    - Intrinsics_22:Library.Tan(x: ConcreteType:Angle): ConcreteType:Number [Intrinsic]; => 
    _ARG_ 0: Turns(x) => Angle

144. PlusOne
  Type: (INumerical) => $802:constraint=INumerical
  Sig: INumerical_4:Library.PlusOne(x: INumerical): $802:constraint=INumerical
  Body: Add(x, One)
  # functions: 5 AMBIGUOUS
    - INumerical_4:Library.Add(x: Concept:INumberLike,y: ConcreteType:Number): Concept:INumberLike [Library]; => FromNumber(x, Add(ToNumber(x), y))
    - INumerical_4:Library.Add(x: Concept:INumerical,y: Concept:INumerical): Concept:INumerical [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9082:Concept:IAny, ParameterDef=b$9084:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Add(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Add(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Add(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Add(Vector4D(q1), Vector4D(q2))
    _ARG_ 0: x => INumerical
    _ARG_ 1: One => IAny

145. MinusOne
  Type: (INumerical) => $803:constraint=INumerical
  Sig: INumerical_4:Library.MinusOne(x: INumerical): $803:constraint=INumerical
  Body: Subtract(x, One)
  # functions: 4 AMBIGUOUS
    - INumerical_4:Library.Subtract(x: Concept:INumerical,y: Concept:INumerical): Concept:INumerical [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9113:Concept:IAny, ParameterDef=b$9115:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Subtract(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Subtract(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Subtract(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Subtract(Vector4D(q1), Vector4D(q2))
    _ARG_ 0: x => INumerical
    _ARG_ 1: One => IAny

146. FromOne
  Type: (INumerical) => $804:constraint=INumerical
  Sig: INumerical_4:Library.FromOne(x: INumerical): $804:constraint=INumerical
  Body: Subtract(One, x)
  # functions: 4 AMBIGUOUS
    - INumerical_4:Library.Subtract(x: Concept:INumerical,y: Concept:INumerical): Concept:INumerical [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9113:Concept:IAny, ParameterDef=b$9115:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Subtract(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Subtract(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Subtract(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Subtract(Vector4D(q1), Vector4D(q2))
    _ARG_ 0: One => IAny
    _ARG_ 1: x => INumerical

147. Component
  Type: (INumerical, Integer) => Number
  Sig: INumerical_4:Library.Component(x: INumerical, n: Integer): Number
  Body: At(Components(x), n)
  # functions: 9 AMBIGUOUS
    - ArrayLibrary_0:Library.At(xs: Concept:IArray2D<TypeVariable:$T>,i: ConcreteType:Integer): TypeVariable:$T [Library]; => At(xs, Modulo(i, NumColumns(xs)), Divide(i, NumColumns(xs)))
    - ArrayLibrary_0:Library.At(xs: Concept:IArray3D<TypeVariable:$T>,i: ConcreteType:Integer): TypeVariable:$T [Library]; => At(xs, Modulo(i, NumColumns(xs)), Divide(i, NumColumns(xs)), Divide(i, NumLayers(xs)))
    - IGeometry_18:Library.At(c: ConcreteType:Complex,n: ConcreteType:Integer): ConcreteType:Number [Library]; => (Equals(n, 0)?IReal(c):Imaginary(c))
    - IGeometry_18:Library.At(v: ConcreteType:Vector2D,n: ConcreteType:Integer): ConcreteType:Number [Library]; => (Equals(n, 0)?X(v):Y(v))
    - IGeometry_18:Library.At(v: ConcreteType:Vector3D,n: ConcreteType:Integer): ConcreteType:Number [Library]; => (Equals(n, 0)?X(v):(Equals(n, 1)?Y(v):Z(v)))
    - IGeometry_18:Library.At(v: ConcreteType:Vector4D,n: ConcreteType:Integer): ConcreteType:Number [Library]; => (Equals(n, 0)?X(v):(Equals(n, 1)?Y(v):(Equals(n, 2)?Z(v):W(v))))
    - IGeometry_18:Library.At(x: ConcreteType:RegularPolygon,n: ConcreteType:Integer): ConcreteType:Vector2D [Library]; => UnitCircle(Turns(Divide(Number(n), NumPoints(x))))
    - Intrinsics_22:Library.At(x: ConcreteType:String,y: ConcreteType:Integer): ConcreteType:Character [Intrinsic]; => 
    - Intrinsics_22:Library.At(xs: ConcreteType:Array<TypeVariable:$T>,n: ConcreteType:Integer): TypeVariable:$T [Intrinsic]; => 
    _ARG_ 0: Components(x) => $24:constraint=(IArray, Number)
    _ARG_ 1: n => Integer

148. NumComponents
  Type: (INumerical) => Integer
  Sig: INumerical_4:Library.NumComponents(x: INumerical): Integer
  Body: Count(Components(x))
  # functions: 9 AMBIGUOUS
    - ArrayLibrary_0:Library.Count(xs: Concept:IArray2D<TypeVariable:$T>): ConcreteType:Integer [Library]; => Multiply(NumRows(xs), NumColumns(xs))
    - ArrayLibrary_0:Library.Count(xs: Concept:IArray3D<TypeVariable:$T>): ConcreteType:Integer [Library]; => Multiply(NumRows(xs), Multiply(NumColumns(xs), NumLayers(xs)))
    - IGeometry_18:Library.Count(c: ConcreteType:Complex): ConcreteType:Integer [Library]; => 2
    - IGeometry_18:Library.Count(v: ConcreteType:Vector2D): ConcreteType:Integer [Library]; => 2
    - IGeometry_18:Library.Count(v: ConcreteType:Vector3D): ConcreteType:Integer [Library]; => 3
    - IGeometry_18:Library.Count(v: ConcreteType:Vector4D): ConcreteType:Integer [Library]; => 4
    - IGeometry_18:Library.Count(x: ConcreteType:RegularPolygon): ConcreteType:Integer [Library]; => NumPoints(x)
    - Intrinsics_22:Library.Count(x: ConcreteType:String): ConcreteType:Integer [Intrinsic]; => 
    - Intrinsics_22:Library.Count(xs: ConcreteType:Array<TypeVariable:$T>): ConcreteType:Integer [Intrinsic]; => 
    _ARG_ 0: Components(x) => $24:constraint=(IArray, Number)

160. BetweenZeroOne
  Type: (INumerical) => Boolean
  Sig: INumerical_4:Library.BetweenZeroOne(x: INumerical): Boolean
  Body: Between(x, Zero(x), One(x))
  # functions: 2 AMBIGUOUS
    - INumerical_4:Library.Between(self: Concept:IReal,min: Concept:IReal,max: Concept:IReal): ConcreteType:Boolean [Library]; => And(GreaterThanOrEquals(self, min), LessThanOrEquals(self, max))
    - INumerical_4:Library.Between(x: Concept:INumerical,a: Concept:INumerical,b: Concept:INumerical): ConcreteType:Boolean [Library]; => All(Zip(Components(x), Components(a), Components(b), (\(ParameterDef=x0$8487:Concept:IAny, ParameterDef=a0$8489:Concept:IAny, ParameterDef=b0$8491:Concept:IAny) -> ConcreteType:Function3<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2,TypeVariable:$T3>), (\(ParameterDef=x0$8516:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    _ARG_ 0: x => INumerical
    _ARG_ 1: Zero(x) => $807:constraint=INumerical
    _ARG_ 2: One(x) => $808:constraint=INumerical

173. GreaterThanOrEquals
  Type: (IOrderable, IOrderable) => Boolean
  Sig: INumerical_4:Library.GreaterThanOrEquals(a: IOrderable, b: IOrderable): Boolean
  Body: LessThanOrEquals(b, a)
  # functions: 5 AMBIGUOUS
    - Intrinsics_22:Library.LessThanOrEquals(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Boolean [Intrinsic]; => 
    - Intrinsics_22:Library.LessThanOrEquals(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Boolean [Intrinsic]; => 
    - Intrinsics_22:Library.LessThanOrEquals(x: ConcreteType:Character,y: ConcreteType:Character): ConcreteType:Boolean [Intrinsic]; => 
    - Intrinsics_22:Library.LessThanOrEquals(x: ConcreteType:String,y: ConcreteType:String): ConcreteType:Boolean [Intrinsic]; => 
    - Intrinsics_22:Library.LessThanOrEquals(x: ConcreteType:Boolean,y: ConcreteType:Boolean): ConcreteType:Boolean [Intrinsic]; => 
    _ARG_ 0: b => IOrderable
    _ARG_ 1: a => IOrderable

178. Number
  Type: (INumberLike) => Number
  Sig: INumerical_4:Library.Number(x: INumberLike): Number
  Body: ToNumber(x)
  # functions: 3 AMBIGUOUS
    - INumerical_4:Library.ToNumber(x: ConcreteType:Integer): ConcreteType:Number [Library]; => Number(x)
    - INumerical_4:Library.ToNumber(x: ConcreteType:Number): ConcreteType:Number [Library]; => x
    - INumerical_4:Library.ToNumber(x: Concept:INumberLike): ConcreteType:Number [Library]; => Component(x, 0)
    _ARG_ 0: x => INumberLike

193. Lerp
  Type: (IInterpolatable, IInterpolatable, Number) => $833:constraint=IInterpolatable
  Sig: INumerical_4:Library.Lerp(a: IInterpolatable, b: IInterpolatable, t: Number): $833:constraint=IInterpolatable
  Body: Add(Multiply(a, FromOne(t)), Multiply(b, t))
  # functions: 5 AMBIGUOUS
    - INumerical_4:Library.Add(x: Concept:INumberLike,y: ConcreteType:Number): Concept:INumberLike [Library]; => FromNumber(x, Add(ToNumber(x), y))
    - INumerical_4:Library.Add(x: Concept:INumerical,y: Concept:INumerical): Concept:INumerical [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9082:Concept:IAny, ParameterDef=b$9084:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Add(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Add(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Add(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Add(Vector4D(q1), Vector4D(q2))
    _ARG_ 0: Multiply(a, FromOne(t)) => $787:constraint=INumberLike
    _ARG_ 1: Multiply(b, t) => $787:constraint=INumberLike

194. Barycentric
  Type: (IInterpolatable, IInterpolatable, IInterpolatable, Vector2D) => $834:constraint=IInterpolatable
  Sig: INumerical_4:Library.Barycentric(v1: IInterpolatable, v2: IInterpolatable, v3: IInterpolatable, uv: Vector2D): $834:constraint=IInterpolatable
  Body: Add(Multiply(Add(v1, Subtract(v2, v1)), X(uv)), Multiply(Subtract(v3, v1), Y(uv)))
  # functions: 5 AMBIGUOUS
    - INumerical_4:Library.Add(x: Concept:INumberLike,y: ConcreteType:Number): Concept:INumberLike [Library]; => FromNumber(x, Add(ToNumber(x), y))
    - INumerical_4:Library.Add(x: Concept:INumerical,y: Concept:INumerical): Concept:INumerical [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9082:Concept:IAny, ParameterDef=b$9084:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Add(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Add(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Add(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Add(Vector4D(q1), Vector4D(q2))
    _ARG_ 0: Multiply(Add(v1, Subtract(v2, v1)), X(uv)) => $787:constraint=INumberLike
    _ARG_ 1: Multiply(Subtract(v3, v1), Y(uv)) => $787:constraint=INumberLike


Group Curves_6:Library

197. Sample
  Type: (ICurve2D, Integer) => $835:constraint=(IArray, Vector2D)
  Sig: Curves_6:Library.Sample(curve: ICurve2D, numPoints: Integer): $835:constraint=(IArray, Vector2D)
  Body: Map(LinearSpace(numPoints), (\(ParameterDef=x$9339:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
  # functions: 2 AMBIGUOUS
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray<TypeVariable:$T2> [Library]; => MapRange(Count(xs), (\(ParameterDef=i$6222:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray2D<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray2D<TypeVariable:$T2> [Library]; => MakeArray2D(NumColumns(xs), NumRows(xs), (\(ParameterDef=a$6857:Concept:IAny, ParameterDef=b$6859:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    _ARG_ 0: LinearSpace(numPoints) => $990:constraint=(IArray, Number)
    _ARG_ 1: (\(ParameterDef=x$9339:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1> => (Function1, $1363:, $1364:)

198. Sample
  Type: (ICurve3D, Integer) => $836:constraint=(IArray, Vector3D)
  Sig: Curves_6:Library.Sample(curve: ICurve3D, numPoints: Integer): $836:constraint=(IArray, Vector3D)
  Body: Map(LinearSpace(numPoints), (\(ParameterDef=x$9367:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
  # functions: 2 AMBIGUOUS
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray<TypeVariable:$T2> [Library]; => MapRange(Count(xs), (\(ParameterDef=i$6222:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray2D<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray2D<TypeVariable:$T2> [Library]; => MakeArray2D(NumColumns(xs), NumRows(xs), (\(ParameterDef=a$6857:Concept:IAny, ParameterDef=b$6859:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    _ARG_ 0: LinearSpace(numPoints) => $990:constraint=(IArray, Number)
    _ARG_ 1: (\(ParameterDef=x$9367:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1> => (Function1, $1365:, $1366:)

201. Linear
  Type: (Number, Number, Number) => Number
  Sig: Curves_6:Library.Linear(x: Number, m: Number, b: Number): Number
  Body: Add(Multiply(m, x), b)
  # functions: 5 AMBIGUOUS
    - INumerical_4:Library.Add(x: Concept:INumberLike,y: ConcreteType:Number): Concept:INumberLike [Library]; => FromNumber(x, Add(ToNumber(x), y))
    - INumerical_4:Library.Add(x: Concept:INumerical,y: Concept:INumerical): Concept:INumerical [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9082:Concept:IAny, ParameterDef=b$9084:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Add(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Add(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Add(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Add(Vector4D(q1), Vector4D(q2))
    _ARG_ 0: Multiply(m, x) => $787:constraint=INumberLike
    _ARG_ 1: b => Number

203. Quadratic
  Type: (Number, Number, Number, Number) => Number
  Sig: Curves_6:Library.Quadratic(x: Number, a: Number, b: Number, c: Number): Number
  Body: Add(Multiply(a, Sqr(x)), Add(Multiply(b, x), c))
  # functions: 5 AMBIGUOUS
    - INumerical_4:Library.Add(x: Concept:INumberLike,y: ConcreteType:Number): Concept:INumberLike [Library]; => FromNumber(x, Add(ToNumber(x), y))
    - INumerical_4:Library.Add(x: Concept:INumerical,y: Concept:INumerical): Concept:INumerical [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9082:Concept:IAny, ParameterDef=b$9084:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Add(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Add(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Add(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Add(Vector4D(q1), Vector4D(q2))
    _ARG_ 0: Multiply(a, Sqr(x)) => $787:constraint=INumberLike
    _ARG_ 1: Add(Multiply(b, x), c) => $822:constraint=INumberLike

205. Cubic
  Type: (Number, Number, Number, Number, Number) => Number
  Sig: Curves_6:Library.Cubic(x: Number, a: Number, b: Number, c: Number, d: Number): Number
  Body: Add(Multiply(a, Cube(x)), Add(Multiply(b, Sqr(x)), Add(Multiply(c, x), d)))
  # functions: 5 AMBIGUOUS
    - INumerical_4:Library.Add(x: Concept:INumberLike,y: ConcreteType:Number): Concept:INumberLike [Library]; => FromNumber(x, Add(ToNumber(x), y))
    - INumerical_4:Library.Add(x: Concept:INumerical,y: Concept:INumerical): Concept:INumerical [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9082:Concept:IAny, ParameterDef=b$9084:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Add(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Add(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Add(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Add(Vector4D(q1), Vector4D(q2))
    _ARG_ 0: Multiply(a, Cube(x)) => $787:constraint=INumberLike
    _ARG_ 1: Add(Multiply(b, Sqr(x)), Add(Multiply(c, x), d)) => $822:constraint=INumberLike

207. SineWave
  Type: (Number, Number, Number, Number) => Number
  Sig: Curves_6:Library.SineWave(x: Number, amplitude: Number, frequency: Number, phase: Number): Number
  Body: Multiply(amplitude, Add(Multiply(frequency, Sin(Turns(x))), phase))
  # functions: 10 AMBIGUOUS
    - INumerical_4:Library.Multiply(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Multiply(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Multiply(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9005:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Multiply(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9165:Concept:IAny, ParameterDef=b$9167:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Tuple3(Add(Multiply(X(v), M11(m)), Add(Multiply(Y(v), M21(m)), Add(Multiply(Z(v), M31(m)), M41(m)))), Add(Multiply(X(v), M12(m)), Add(Multiply(Y(v), M22(m)), Add(Multiply(Z(v), M32(m)), M42(m)))), Add(Multiply(X(v), M13(m)), Add(Multiply(Y(v), M23(m)), Add(Multiply(Z(v), M33(m)), M43(m)))))
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Multiply(Column1(m), s), Multiply(Column2(m), s), Multiply(Column3(m), s), Multiply(Column4(m), s))
    - Transforms_26:Library.Multiply(a: ConcreteType:Matrix4x4,b: ConcreteType:Matrix4x4): ConcreteType:Matrix4x4 [Library]; => CreateFromRows(Matrix4x4, Tuple4(Add(Multiply(M11(a), M11(b)), Add(Multiply(M12(a), M21(b)), Add(Multiply(M13(a), M31(b)), Multiply(M14(a), M41(b))))), Add(Multiply(M11(a), M12(b)), Add(Multiply(M12(a), M22(b)), Add(Multiply(M13(a), M32(b)), Multiply(M14(a), M42(b))))), Add(Multiply(M11(a), M13(b)), Add(Multiply(M12(a), M23(b)), Add(Multiply(M13(a), M33(b)), Multiply(M14(a), M43(b))))), Add(Multiply(M11(a), M14(b)), Add(Multiply(M12(a), M24(b)), Add(Multiply(M13(a), M34(b)), Multiply(M14(a), M44(b)))))), Tuple4(Add(Multiply(M21(a), M11(b)), Add(Multiply(M22(a), M21(b)), Add(Multiply(M23(a), M31(b)), Multiply(M24(a), M41(b))))), Add(Multiply(M21(a), M12(b)), Add(Multiply(M22(a), M22(b)), Add(Multiply(M23(a), M32(b)), Multiply(M24(a), M42(b))))), Add(Multiply(M21(a), M13(b)), Add(Multiply(M22(a), M23(b)), Add(Multiply(M23(a), M33(b)), Multiply(M24(a), M43(b))))), Add(Multiply(M21(a), M14(b)), Add(Multiply(M22(a), M24(b)), Add(Multiply(M23(a), M34(b)), Multiply(M24(a), M44(b)))))), Tuple4(Add(Multiply(M31(a), M11(b)), Add(Multiply(M32(a), M21(b)), Add(Multiply(M33(a), M31(b)), Multiply(M34(a), M41(b))))), Add(Multiply(M31(a), M12(b)), Add(Multiply(M32(a), M22(b)), Add(Multiply(M33(a), M32(b)), Multiply(M34(a), M42(b))))), Add(Multiply(M31(a), M13(b)), Add(Multiply(M32(a), M23(b)), Add(Multiply(M33(a), M33(b)), Multiply(M34(a), M43(b))))), Add(Multiply(M31(a), M14(b)), Add(Multiply(M32(a), M24(b)), Add(Multiply(M33(a), M34(b)), Multiply(M34(a), M44(b)))))), Tuple4(Add(Multiply(M41(a), M11(b)), Add(Multiply(M42(a), M21(b)), Add(Multiply(M43(a), M31(b)), Multiply(M44(a), M41(b))))), Add(Multiply(M41(a), M12(b)), Add(Multiply(M42(a), M22(b)), Add(Multiply(M43(a), M32(b)), Multiply(M44(a), M42(b))))), Add(Multiply(M41(a), M13(b)), Add(Multiply(M42(a), M23(b)), Add(Multiply(M43(a), M33(b)), Multiply(M44(a), M43(b))))), Add(Multiply(M41(a), M14(b)), Add(Multiply(M42(a), M24(b)), Add(Multiply(M43(a), M34(b)), Multiply(M44(a), M44(b)))))))
    - Transforms_26:Library.Multiply(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Multiply(Vector4D(q), scalar)
    - Transforms_26:Library.Multiply(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Plato.Compiler.Symbols.BlockStatement
    _ARG_ 0: amplitude => Number
    _ARG_ 1: Add(Multiply(frequency, Sin(Turns(x))), phase) => $822:constraint=INumberLike

211. StaircaseFloor
  Type: (Number, Integer) => Number
  Sig: Curves_6:Library.StaircaseFloor(x: Number, steps: Integer): Number
  Body: Divide(Floor(Multiply(x, steps)), steps)
  # functions: 7 AMBIGUOUS
    - INumerical_4:Library.Divide(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Divide(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Divide(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9030:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Divide(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9196:Concept:IAny, ParameterDef=b$9198:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Divide(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Divide(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Divide(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Divide(Column1(m), s), Divide(Column2(m), s), Divide(Column3(m), s), Divide(Column4(m), s))
    - Transforms_26:Library.Divide(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Divide(Vector4D(q), scalar)
    _ARG_ 0: Floor(Multiply(x, steps)) => $817:constraint=INumerical
    _ARG_ 1: steps => Integer

212. StaircaseCeiling
  Type: (Number, Integer) => Number
  Sig: Curves_6:Library.StaircaseCeiling(x: Number, steps: Integer): Number
  Body: Divide(Ceiling(Multiply(x, steps)), steps)
  # functions: 7 AMBIGUOUS
    - INumerical_4:Library.Divide(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Divide(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Divide(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9030:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Divide(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9196:Concept:IAny, ParameterDef=b$9198:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Divide(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Divide(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Divide(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Divide(Column1(m), s), Divide(Column2(m), s), Divide(Column3(m), s), Divide(Column4(m), s))
    - Transforms_26:Library.Divide(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Divide(Vector4D(q), scalar)
    _ARG_ 0: Ceiling(Multiply(x, steps)) => Number
    _ARG_ 1: steps => Integer

213. StaircaseRound
  Type: (Number, Integer) => Number
  Sig: Curves_6:Library.StaircaseRound(x: Number, steps: Integer): Number
  Body: Divide(Round(Multiply(x, steps)), steps)
  # functions: 7 AMBIGUOUS
    - INumerical_4:Library.Divide(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Divide(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Divide(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9030:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Divide(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9196:Concept:IAny, ParameterDef=b$9198:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Divide(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Divide(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Divide(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Divide(Column1(m), s), Divide(Column2(m), s), Divide(Column3(m), s), Divide(Column4(m), s))
    - Transforms_26:Library.Divide(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Divide(Vector4D(q), scalar)
    _ARG_ 0: Round(Multiply(x, steps)) => Number
    _ARG_ 1: steps => Integer

214. CubicBezier
  Type: (IAlgebraic, IAlgebraic, IAlgebraic, IAlgebraic, Number) => $838:constraint=IAlgebraic
  Sig: Curves_6:Library.CubicBezier(a: IAlgebraic, b: IAlgebraic, c: IAlgebraic, d: IAlgebraic, t: Number): $838:constraint=IAlgebraic
  Body: Add(Multiply(a, Cube(Subtract(1, t))), Add(Multiply(b, Multiply(3, Multiply(Sqr(Subtract(1, t)), t))), Add(Multiply(c, Multiply(3, Multiply(Subtract(1, t), Sqr(t)))), Multiply(d, Cube(t)))))
  # functions: 5 AMBIGUOUS
    - INumerical_4:Library.Add(x: Concept:INumberLike,y: ConcreteType:Number): Concept:INumberLike [Library]; => FromNumber(x, Add(ToNumber(x), y))
    - INumerical_4:Library.Add(x: Concept:INumerical,y: Concept:INumerical): Concept:INumerical [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9082:Concept:IAny, ParameterDef=b$9084:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Add(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Add(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Add(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Add(Vector4D(q1), Vector4D(q2))
    _ARG_ 0: Multiply(a, Cube(Subtract(1, t))) => $787:constraint=INumberLike
    _ARG_ 1: Add(Multiply(b, Multiply(3, Multiply(Sqr(Subtract(1, t)), t))), Add(Multiply(c, Multiply(3, Multiply(Subtract(1, t), Sqr(t)))), Multiply(d, Cube(t)))) => $822:constraint=INumberLike

215. CubicBezierDerivative
  Type: (IAlgebraic, IAlgebraic, IAlgebraic, IAlgebraic, Number) => $839:constraint=IAlgebraic
  Sig: Curves_6:Library.CubicBezierDerivative(a: IAlgebraic, b: IAlgebraic, c: IAlgebraic, d: IAlgebraic, t: Number): $839:constraint=IAlgebraic
  Body: Add(Multiply(Subtract(b, a), Multiply(3, Sqr(Subtract(1, t)))), Add(Multiply(Subtract(c, b), Multiply(6, Multiply(Subtract(1, t), t))), Multiply(Subtract(d, c), Multiply(3, Sqr(t)))))
  # functions: 5 AMBIGUOUS
    - INumerical_4:Library.Add(x: Concept:INumberLike,y: ConcreteType:Number): Concept:INumberLike [Library]; => FromNumber(x, Add(ToNumber(x), y))
    - INumerical_4:Library.Add(x: Concept:INumerical,y: Concept:INumerical): Concept:INumerical [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9082:Concept:IAny, ParameterDef=b$9084:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Add(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Add(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Add(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Add(Vector4D(q1), Vector4D(q2))
    _ARG_ 0: Multiply(Subtract(b, a), Multiply(3, Sqr(Subtract(1, t)))) => $787:constraint=INumberLike
    _ARG_ 1: Add(Multiply(Subtract(c, b), Multiply(6, Multiply(Subtract(1, t), t))), Multiply(Subtract(d, c), Multiply(3, Sqr(t)))) => $822:constraint=INumberLike

216. CubicBezierSecondDerivative
  Type: (IAlgebraic, IAlgebraic, IAlgebraic, IAlgebraic, Number) => $840:constraint=IAlgebraic
  Sig: Curves_6:Library.CubicBezierSecondDerivative(a: IAlgebraic, b: IAlgebraic, c: IAlgebraic, d: IAlgebraic, t: Number): $840:constraint=IAlgebraic
  Body: Add(Multiply(Subtract(c, Add(Multiply(b, 2), a)), Multiply(6, Subtract(1, t))), Multiply(Subtract(d, Add(Multiply(c, 2), a)), Multiply(6, t)))
  # functions: 5 AMBIGUOUS
    - INumerical_4:Library.Add(x: Concept:INumberLike,y: ConcreteType:Number): Concept:INumberLike [Library]; => FromNumber(x, Add(ToNumber(x), y))
    - INumerical_4:Library.Add(x: Concept:INumerical,y: Concept:INumerical): Concept:INumerical [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9082:Concept:IAny, ParameterDef=b$9084:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Add(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Add(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Add(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Add(Vector4D(q1), Vector4D(q2))
    _ARG_ 0: Multiply(Subtract(c, Add(Multiply(b, 2), a)), Multiply(6, Subtract(1, t))) => $787:constraint=INumberLike
    _ARG_ 1: Multiply(Subtract(d, Add(Multiply(c, 2), a)), Multiply(6, t)) => $787:constraint=INumberLike

217. QuadraticBezier
  Type: (IAlgebraic, IAlgebraic, IAlgebraic, Number) => $841:constraint=IAlgebraic
  Sig: Curves_6:Library.QuadraticBezier(a: IAlgebraic, b: IAlgebraic, c: IAlgebraic, t: Number): $841:constraint=IAlgebraic
  Body: Add(Multiply(a, Sqr(Subtract(1, t))), Add(Multiply(b, Multiply(2, Multiply(Subtract(1, t), t))), Multiply(c, Sqr(t))))
  # functions: 5 AMBIGUOUS
    - INumerical_4:Library.Add(x: Concept:INumberLike,y: ConcreteType:Number): Concept:INumberLike [Library]; => FromNumber(x, Add(ToNumber(x), y))
    - INumerical_4:Library.Add(x: Concept:INumerical,y: Concept:INumerical): Concept:INumerical [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9082:Concept:IAny, ParameterDef=b$9084:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Add(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Add(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Add(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Add(Vector4D(q1), Vector4D(q2))
    _ARG_ 0: Multiply(a, Sqr(Subtract(1, t))) => $787:constraint=INumberLike
    _ARG_ 1: Add(Multiply(b, Multiply(2, Multiply(Subtract(1, t), t))), Multiply(c, Sqr(t))) => $822:constraint=INumberLike

218. QuadraticBezierDerivative
  Type: (IAlgebraic, IAlgebraic, IAlgebraic, Number) => $842:constraint=IAlgebraic
  Sig: Curves_6:Library.QuadraticBezierDerivative(a: IAlgebraic, b: IAlgebraic, c: IAlgebraic, t: Number): $842:constraint=IAlgebraic
  Body: Add(Multiply(Subtract(b, b), Multiply(2, Subtract(1, t))), Multiply(Subtract(c, b), Multiply(2, t)))
  # functions: 5 AMBIGUOUS
    - INumerical_4:Library.Add(x: Concept:INumberLike,y: ConcreteType:Number): Concept:INumberLike [Library]; => FromNumber(x, Add(ToNumber(x), y))
    - INumerical_4:Library.Add(x: Concept:INumerical,y: Concept:INumerical): Concept:INumerical [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9082:Concept:IAny, ParameterDef=b$9084:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Add(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Add(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Add(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Add(Vector4D(q1), Vector4D(q2))
    _ARG_ 0: Multiply(Subtract(b, b), Multiply(2, Subtract(1, t))) => $787:constraint=INumberLike
    _ARG_ 1: Multiply(Subtract(c, b), Multiply(2, t)) => $787:constraint=INumberLike

219. QuadraticBezierSecondDerivative
  Type: (IAlgebraic, IAlgebraic, IAlgebraic, Number) => $843:constraint=IAlgebraic
  Sig: Curves_6:Library.QuadraticBezierSecondDerivative(a: IAlgebraic, b: IAlgebraic, c: IAlgebraic, t: Number): $843:constraint=IAlgebraic
  Body: Subtract(c, Add(Multiply(b, 2), a))
  # functions: 4 AMBIGUOUS
    - INumerical_4:Library.Subtract(x: Concept:INumerical,y: Concept:INumerical): Concept:INumerical [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9113:Concept:IAny, ParameterDef=b$9115:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Subtract(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Subtract(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Subtract(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Subtract(Vector4D(q1), Vector4D(q2))
    _ARG_ 0: c => IAlgebraic
    _ARG_ 1: Add(Multiply(b, 2), a) => $822:constraint=INumberLike


Group Curves2D_8:Library

220. Spiral
  Type: (Number, Number, Number, Number) => Vector2D
  Sig: Curves2D_8:Library.Spiral(t: Number, R: Number, r: Number, numTurns: Number): Vector2D
  Body: Multiply(New(Vector2D, Cos(Multiply(Turns(t), numTurns)), Sin(Multiply(Turns(t), numTurns))), Lerp(r, R, t))
  # functions: 10 AMBIGUOUS
    - INumerical_4:Library.Multiply(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Multiply(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Multiply(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9005:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Multiply(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9165:Concept:IAny, ParameterDef=b$9167:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Tuple3(Add(Multiply(X(v), M11(m)), Add(Multiply(Y(v), M21(m)), Add(Multiply(Z(v), M31(m)), M41(m)))), Add(Multiply(X(v), M12(m)), Add(Multiply(Y(v), M22(m)), Add(Multiply(Z(v), M32(m)), M42(m)))), Add(Multiply(X(v), M13(m)), Add(Multiply(Y(v), M23(m)), Add(Multiply(Z(v), M33(m)), M43(m)))))
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Multiply(Column1(m), s), Multiply(Column2(m), s), Multiply(Column3(m), s), Multiply(Column4(m), s))
    - Transforms_26:Library.Multiply(a: ConcreteType:Matrix4x4,b: ConcreteType:Matrix4x4): ConcreteType:Matrix4x4 [Library]; => CreateFromRows(Matrix4x4, Tuple4(Add(Multiply(M11(a), M11(b)), Add(Multiply(M12(a), M21(b)), Add(Multiply(M13(a), M31(b)), Multiply(M14(a), M41(b))))), Add(Multiply(M11(a), M12(b)), Add(Multiply(M12(a), M22(b)), Add(Multiply(M13(a), M32(b)), Multiply(M14(a), M42(b))))), Add(Multiply(M11(a), M13(b)), Add(Multiply(M12(a), M23(b)), Add(Multiply(M13(a), M33(b)), Multiply(M14(a), M43(b))))), Add(Multiply(M11(a), M14(b)), Add(Multiply(M12(a), M24(b)), Add(Multiply(M13(a), M34(b)), Multiply(M14(a), M44(b)))))), Tuple4(Add(Multiply(M21(a), M11(b)), Add(Multiply(M22(a), M21(b)), Add(Multiply(M23(a), M31(b)), Multiply(M24(a), M41(b))))), Add(Multiply(M21(a), M12(b)), Add(Multiply(M22(a), M22(b)), Add(Multiply(M23(a), M32(b)), Multiply(M24(a), M42(b))))), Add(Multiply(M21(a), M13(b)), Add(Multiply(M22(a), M23(b)), Add(Multiply(M23(a), M33(b)), Multiply(M24(a), M43(b))))), Add(Multiply(M21(a), M14(b)), Add(Multiply(M22(a), M24(b)), Add(Multiply(M23(a), M34(b)), Multiply(M24(a), M44(b)))))), Tuple4(Add(Multiply(M31(a), M11(b)), Add(Multiply(M32(a), M21(b)), Add(Multiply(M33(a), M31(b)), Multiply(M34(a), M41(b))))), Add(Multiply(M31(a), M12(b)), Add(Multiply(M32(a), M22(b)), Add(Multiply(M33(a), M32(b)), Multiply(M34(a), M42(b))))), Add(Multiply(M31(a), M13(b)), Add(Multiply(M32(a), M23(b)), Add(Multiply(M33(a), M33(b)), Multiply(M34(a), M43(b))))), Add(Multiply(M31(a), M14(b)), Add(Multiply(M32(a), M24(b)), Add(Multiply(M33(a), M34(b)), Multiply(M34(a), M44(b)))))), Tuple4(Add(Multiply(M41(a), M11(b)), Add(Multiply(M42(a), M21(b)), Add(Multiply(M43(a), M31(b)), Multiply(M44(a), M41(b))))), Add(Multiply(M41(a), M12(b)), Add(Multiply(M42(a), M22(b)), Add(Multiply(M43(a), M32(b)), Multiply(M44(a), M42(b))))), Add(Multiply(M41(a), M13(b)), Add(Multiply(M42(a), M23(b)), Add(Multiply(M43(a), M33(b)), Multiply(M44(a), M43(b))))), Add(Multiply(M41(a), M14(b)), Add(Multiply(M42(a), M24(b)), Add(Multiply(M43(a), M34(b)), Multiply(M44(a), M44(b)))))))
    - Transforms_26:Library.Multiply(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Multiply(Vector4D(q), scalar)
    - Transforms_26:Library.Multiply(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Plato.Compiler.Symbols.BlockStatement
    _ARG_ 0: New(Vector2D, Cos(Multiply(Turns(t), numTurns)), Sin(Multiply(Turns(t), numTurns))) => Dynamic
    _ARG_ 1: Lerp(r, R, t) => $750:


Group AngularCurves2D_10:Library

224. Eval
  Type: (IAngularCurve2D, Number) => Vector2D
  Sig: AngularCurves2D_10:Library.Eval(curve: IAngularCurve2D, t: Number): Vector2D
  Body: GetPoint(curve, Turns(t))
  # functions: 13 AMBIGUOUS
    - AngularCurves2D_10:Library.GetPoint(curve: ConcreteType:Circle,t: ConcreteType:Angle): ConcreteType:Vector2D [Library]; => Circle(t, Center(curve), Radius(curve))
    - AngularCurves2D_10:Library.GetPoint(curve: ConcreteType:Ellipse,t: ConcreteType:Angle): ConcreteType:Vector2D [Library]; => Add(Multiply(UnitCircle(t), Size(curve)), Center(curve))
    - AngularCurves2D_10:Library.GetPoint(curve: ConcreteType:Epicycloid,t: ConcreteType:Angle): ConcreteType:Vector2D [Library]; => Epicycloid(t, Radius1(curve), Radius2(curve))
    - AngularCurves2D_10:Library.GetPoint(curve: ConcreteType:Hypocycloid,t: ConcreteType:Angle): ConcreteType:Vector2D [Library]; => Hypocycloid(t, Radius1(curve), Radius2(curve))
    - AngularCurves2D_10:Library.GetPoint(curve: ConcreteType:Epitrochoid,t: ConcreteType:Angle): ConcreteType:Vector2D [Library]; => Epitrochoid(t, Radius1(curve), Radius2(curve), Dist(curve))
    - AngularCurves2D_10:Library.GetPoint(curve: ConcreteType:Hypotrochoid,t: ConcreteType:Angle): ConcreteType:Vector2D [Library]; => Hypotrochoid(t, Radius1(curve), Radius2(curve), Dist(curve))
    - AngularCurves2D_10:Library.GetPoint(curve: ConcreteType:ButterflyCurve,t: ConcreteType:Angle): ConcreteType:Vector2D [Library]; => ButterflyCurve(t)
    - AngularCurves2D_10:Library.GetPoint(curve: ConcreteType:Lissajous,t: ConcreteType:Angle): ConcreteType:Vector2D [Library]; => Lissajous(t, A(curve), B(curve), Delta(curve))
    - PolarCurves_12:Library.GetPoint(curve: Concept:IPolarCurve,t: ConcreteType:Angle): ConcreteType:Vector2D [Library]; => EvalPolar(curve, t)
    - AngularCurves3D_16:Library.GetPoint(curve: ConcreteType:TorusKnot,t: ConcreteType:Angle): ConcreteType:Vector3D [Library]; => Multiply(TorusKnot(t, P(curve), Q(curve)), Radius(curve))
    - AngularCurves3D_16:Library.GetPoint(curve: ConcreteType:TrefoilKnot,t: ConcreteType:Angle): ConcreteType:Vector3D [Library]; => TrefoilKnot(t)
    - AngularCurves3D_16:Library.GetPoint(curve: ConcreteType:FigureEightKnot,t: ConcreteType:Angle): ConcreteType:Vector3D [Library]; => FigureEightKnot(t)
    - AngularCurves3D_16:Library.GetPoint(curve: ConcreteType:Helix,t: ConcreteType:Angle): ConcreteType:Vector3D [Library]; => Multiply(Helix(t, NumTurns(curve)), Tuple3(Radius(curve), Radius(curve), Height(curve)))
    _ARG_ 0: curve => IAngularCurve2D
    _ARG_ 1: Turns(t) => Angle

226. Circle
  Type: (Angle, Vector2D, Number) => Vector2D
  Sig: AngularCurves2D_10:Library.Circle(t: Angle, center: Vector2D, radius: Number): Vector2D
  Body: Add(Multiply(UnitCircle(t), radius), center)
  # functions: 5 AMBIGUOUS
    - INumerical_4:Library.Add(x: Concept:INumberLike,y: ConcreteType:Number): Concept:INumberLike [Library]; => FromNumber(x, Add(ToNumber(x), y))
    - INumerical_4:Library.Add(x: Concept:INumerical,y: Concept:INumerical): Concept:INumerical [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9082:Concept:IAny, ParameterDef=b$9084:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Add(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Add(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Add(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Add(Vector4D(q1), Vector4D(q2))
    _ARG_ 0: Multiply(UnitCircle(t), radius) => $787:constraint=INumberLike
    _ARG_ 1: center => Vector2D

228. Ellipse
  Type: (Angle, Vector2D, Vector2D) => Vector2D
  Sig: AngularCurves2D_10:Library.Ellipse(t: Angle, center: Vector2D, size: Vector2D): Vector2D
  Body: Add(Multiply(UnitCircle(t), size), center)
  # functions: 5 AMBIGUOUS
    - INumerical_4:Library.Add(x: Concept:INumberLike,y: ConcreteType:Number): Concept:INumberLike [Library]; => FromNumber(x, Add(ToNumber(x), y))
    - INumerical_4:Library.Add(x: Concept:INumerical,y: Concept:INumerical): Concept:INumerical [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9082:Concept:IAny, ParameterDef=b$9084:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Add(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Add(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Add(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Add(Vector4D(q1), Vector4D(q2))
    _ARG_ 0: Multiply(UnitCircle(t), size) => $787:constraint=INumberLike
    _ARG_ 1: center => Vector2D

229. GetPoint
  Type: (Ellipse, Angle) => Vector2D
  Sig: AngularCurves2D_10:Library.GetPoint(curve: Ellipse, t: Angle): Vector2D
  Body: Add(Multiply(UnitCircle(t), Size(curve)), Center(curve))
  # functions: 5 AMBIGUOUS
    - INumerical_4:Library.Add(x: Concept:INumberLike,y: ConcreteType:Number): Concept:INumberLike [Library]; => FromNumber(x, Add(ToNumber(x), y))
    - INumerical_4:Library.Add(x: Concept:INumerical,y: Concept:INumerical): Concept:INumerical [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9082:Concept:IAny, ParameterDef=b$9084:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Add(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Add(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Add(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Add(Vector4D(q1), Vector4D(q2))
    _ARG_ 0: Multiply(UnitCircle(t), Size(curve)) => $787:constraint=INumberLike
    _ARG_ 1: Center(curve) => $752:


Group PolarCurves_12:Library

244. Vector2D
  Type: (PolarCoordinate) => Vector2D
  Sig: PolarCurves_12:Library.Vector2D(coord: PolarCoordinate): Vector2D
  Body: Multiply(New(Vector2D, Cos(Angle(coord)), Sin(Angle(coord))), Radius(coord))
  # functions: 10 AMBIGUOUS
    - INumerical_4:Library.Multiply(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Multiply(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Multiply(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9005:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Multiply(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9165:Concept:IAny, ParameterDef=b$9167:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Tuple3(Add(Multiply(X(v), M11(m)), Add(Multiply(Y(v), M21(m)), Add(Multiply(Z(v), M31(m)), M41(m)))), Add(Multiply(X(v), M12(m)), Add(Multiply(Y(v), M22(m)), Add(Multiply(Z(v), M32(m)), M42(m)))), Add(Multiply(X(v), M13(m)), Add(Multiply(Y(v), M23(m)), Add(Multiply(Z(v), M33(m)), M43(m)))))
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Multiply(Column1(m), s), Multiply(Column2(m), s), Multiply(Column3(m), s), Multiply(Column4(m), s))
    - Transforms_26:Library.Multiply(a: ConcreteType:Matrix4x4,b: ConcreteType:Matrix4x4): ConcreteType:Matrix4x4 [Library]; => CreateFromRows(Matrix4x4, Tuple4(Add(Multiply(M11(a), M11(b)), Add(Multiply(M12(a), M21(b)), Add(Multiply(M13(a), M31(b)), Multiply(M14(a), M41(b))))), Add(Multiply(M11(a), M12(b)), Add(Multiply(M12(a), M22(b)), Add(Multiply(M13(a), M32(b)), Multiply(M14(a), M42(b))))), Add(Multiply(M11(a), M13(b)), Add(Multiply(M12(a), M23(b)), Add(Multiply(M13(a), M33(b)), Multiply(M14(a), M43(b))))), Add(Multiply(M11(a), M14(b)), Add(Multiply(M12(a), M24(b)), Add(Multiply(M13(a), M34(b)), Multiply(M14(a), M44(b)))))), Tuple4(Add(Multiply(M21(a), M11(b)), Add(Multiply(M22(a), M21(b)), Add(Multiply(M23(a), M31(b)), Multiply(M24(a), M41(b))))), Add(Multiply(M21(a), M12(b)), Add(Multiply(M22(a), M22(b)), Add(Multiply(M23(a), M32(b)), Multiply(M24(a), M42(b))))), Add(Multiply(M21(a), M13(b)), Add(Multiply(M22(a), M23(b)), Add(Multiply(M23(a), M33(b)), Multiply(M24(a), M43(b))))), Add(Multiply(M21(a), M14(b)), Add(Multiply(M22(a), M24(b)), Add(Multiply(M23(a), M34(b)), Multiply(M24(a), M44(b)))))), Tuple4(Add(Multiply(M31(a), M11(b)), Add(Multiply(M32(a), M21(b)), Add(Multiply(M33(a), M31(b)), Multiply(M34(a), M41(b))))), Add(Multiply(M31(a), M12(b)), Add(Multiply(M32(a), M22(b)), Add(Multiply(M33(a), M32(b)), Multiply(M34(a), M42(b))))), Add(Multiply(M31(a), M13(b)), Add(Multiply(M32(a), M23(b)), Add(Multiply(M33(a), M33(b)), Multiply(M34(a), M43(b))))), Add(Multiply(M31(a), M14(b)), Add(Multiply(M32(a), M24(b)), Add(Multiply(M33(a), M34(b)), Multiply(M34(a), M44(b)))))), Tuple4(Add(Multiply(M41(a), M11(b)), Add(Multiply(M42(a), M21(b)), Add(Multiply(M43(a), M31(b)), Multiply(M44(a), M41(b))))), Add(Multiply(M41(a), M12(b)), Add(Multiply(M42(a), M22(b)), Add(Multiply(M43(a), M32(b)), Multiply(M44(a), M42(b))))), Add(Multiply(M41(a), M13(b)), Add(Multiply(M42(a), M23(b)), Add(Multiply(M43(a), M33(b)), Multiply(M44(a), M43(b))))), Add(Multiply(M41(a), M14(b)), Add(Multiply(M42(a), M24(b)), Add(Multiply(M43(a), M34(b)), Multiply(M44(a), M44(b)))))))
    - Transforms_26:Library.Multiply(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Multiply(Vector4D(q), scalar)
    - Transforms_26:Library.Multiply(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Plato.Compiler.Symbols.BlockStatement
    _ARG_ 0: New(Vector2D, Cos(Angle(coord)), Sin(Angle(coord))) => Dynamic
    _ARG_ 1: Radius(coord) => Number

246. CycloidOfCeva
  Type: (Angle) => Number
  Sig: PolarCurves_12:Library.CycloidOfCeva(t: Angle): Number
  Body: Add(1, Multiply(Cos(Multiply(t, 2)), 2))
  # functions: 5 AMBIGUOUS
    - INumerical_4:Library.Add(x: Concept:INumberLike,y: ConcreteType:Number): Concept:INumberLike [Library]; => FromNumber(x, Add(ToNumber(x), y))
    - INumerical_4:Library.Add(x: Concept:INumerical,y: Concept:INumerical): Concept:INumerical [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9082:Concept:IAny, ParameterDef=b$9084:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Add(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Add(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Add(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Add(Vector4D(q1), Vector4D(q2))
    _ARG_ 0: 1 => Number
    _ARG_ 1: Multiply(Cos(Multiply(t, 2)), 2) => $787:constraint=INumberLike

248. Limacon
  Type: (Angle, Number, Number) => Number
  Sig: PolarCurves_12:Library.Limacon(t: Angle, a: Number, b: Number): Number
  Body: Add(Multiply(a, Cos(t)), b)
  # functions: 5 AMBIGUOUS
    - INumerical_4:Library.Add(x: Concept:INumberLike,y: ConcreteType:Number): Concept:INumberLike [Library]; => FromNumber(x, Add(ToNumber(x), y))
    - INumerical_4:Library.Add(x: Concept:INumerical,y: Concept:INumerical): Concept:INumerical [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9082:Concept:IAny, ParameterDef=b$9084:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Add(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Add(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Add(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Add(Vector4D(q1), Vector4D(q2))
    _ARG_ 0: Multiply(a, Cos(t)) => $787:constraint=INumberLike
    _ARG_ 1: b => Number

250. Cardoid
  Type: (Angle) => Number
  Sig: PolarCurves_12:Library.Cardoid(t: Angle): Number
  Body: Add(1, Cos(t))
  # functions: 5 AMBIGUOUS
    - INumerical_4:Library.Add(x: Concept:INumberLike,y: ConcreteType:Number): Concept:INumberLike [Library]; => FromNumber(x, Add(ToNumber(x), y))
    - INumerical_4:Library.Add(x: Concept:INumerical,y: Concept:INumerical): Concept:INumerical [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9082:Concept:IAny, ParameterDef=b$9084:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Add(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Add(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Add(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Add(Vector4D(q1), Vector4D(q2))
    _ARG_ 0: 1 => Number
    _ARG_ 1: Cos(t) => Number

252. TschirnhausenCubic
  Type: (Angle, Number) => Number
  Sig: PolarCurves_12:Library.TschirnhausenCubic(t: Angle, a: Number): Number
  Body: Multiply(a, Cube(Sec(Divide(t, 3))))
  # functions: 10 AMBIGUOUS
    - INumerical_4:Library.Multiply(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Multiply(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Multiply(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9005:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Multiply(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9165:Concept:IAny, ParameterDef=b$9167:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Tuple3(Add(Multiply(X(v), M11(m)), Add(Multiply(Y(v), M21(m)), Add(Multiply(Z(v), M31(m)), M41(m)))), Add(Multiply(X(v), M12(m)), Add(Multiply(Y(v), M22(m)), Add(Multiply(Z(v), M32(m)), M42(m)))), Add(Multiply(X(v), M13(m)), Add(Multiply(Y(v), M23(m)), Add(Multiply(Z(v), M33(m)), M43(m)))))
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Multiply(Column1(m), s), Multiply(Column2(m), s), Multiply(Column3(m), s), Multiply(Column4(m), s))
    - Transforms_26:Library.Multiply(a: ConcreteType:Matrix4x4,b: ConcreteType:Matrix4x4): ConcreteType:Matrix4x4 [Library]; => CreateFromRows(Matrix4x4, Tuple4(Add(Multiply(M11(a), M11(b)), Add(Multiply(M12(a), M21(b)), Add(Multiply(M13(a), M31(b)), Multiply(M14(a), M41(b))))), Add(Multiply(M11(a), M12(b)), Add(Multiply(M12(a), M22(b)), Add(Multiply(M13(a), M32(b)), Multiply(M14(a), M42(b))))), Add(Multiply(M11(a), M13(b)), Add(Multiply(M12(a), M23(b)), Add(Multiply(M13(a), M33(b)), Multiply(M14(a), M43(b))))), Add(Multiply(M11(a), M14(b)), Add(Multiply(M12(a), M24(b)), Add(Multiply(M13(a), M34(b)), Multiply(M14(a), M44(b)))))), Tuple4(Add(Multiply(M21(a), M11(b)), Add(Multiply(M22(a), M21(b)), Add(Multiply(M23(a), M31(b)), Multiply(M24(a), M41(b))))), Add(Multiply(M21(a), M12(b)), Add(Multiply(M22(a), M22(b)), Add(Multiply(M23(a), M32(b)), Multiply(M24(a), M42(b))))), Add(Multiply(M21(a), M13(b)), Add(Multiply(M22(a), M23(b)), Add(Multiply(M23(a), M33(b)), Multiply(M24(a), M43(b))))), Add(Multiply(M21(a), M14(b)), Add(Multiply(M22(a), M24(b)), Add(Multiply(M23(a), M34(b)), Multiply(M24(a), M44(b)))))), Tuple4(Add(Multiply(M31(a), M11(b)), Add(Multiply(M32(a), M21(b)), Add(Multiply(M33(a), M31(b)), Multiply(M34(a), M41(b))))), Add(Multiply(M31(a), M12(b)), Add(Multiply(M32(a), M22(b)), Add(Multiply(M33(a), M32(b)), Multiply(M34(a), M42(b))))), Add(Multiply(M31(a), M13(b)), Add(Multiply(M32(a), M23(b)), Add(Multiply(M33(a), M33(b)), Multiply(M34(a), M43(b))))), Add(Multiply(M31(a), M14(b)), Add(Multiply(M32(a), M24(b)), Add(Multiply(M33(a), M34(b)), Multiply(M34(a), M44(b)))))), Tuple4(Add(Multiply(M41(a), M11(b)), Add(Multiply(M42(a), M21(b)), Add(Multiply(M43(a), M31(b)), Multiply(M44(a), M41(b))))), Add(Multiply(M41(a), M12(b)), Add(Multiply(M42(a), M22(b)), Add(Multiply(M43(a), M32(b)), Multiply(M44(a), M42(b))))), Add(Multiply(M41(a), M13(b)), Add(Multiply(M42(a), M23(b)), Add(Multiply(M43(a), M33(b)), Multiply(M44(a), M43(b))))), Add(Multiply(M41(a), M14(b)), Add(Multiply(M42(a), M24(b)), Add(Multiply(M43(a), M34(b)), Multiply(M44(a), M44(b)))))))
    - Transforms_26:Library.Multiply(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Multiply(Vector4D(q), scalar)
    - Transforms_26:Library.Multiply(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Plato.Compiler.Symbols.BlockStatement
    _ARG_ 0: a => Number
    _ARG_ 1: Cube(Sec(Divide(t, 3))) => $784:constraint=IArithmetic

254. Rose
  Type: (Angle, Number) => Number
  Sig: PolarCurves_12:Library.Rose(t: Angle, k: Number): Number
  Body: Multiply(k, Cos(t))
  # functions: 10 AMBIGUOUS
    - INumerical_4:Library.Multiply(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Multiply(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Multiply(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9005:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Multiply(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9165:Concept:IAny, ParameterDef=b$9167:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Tuple3(Add(Multiply(X(v), M11(m)), Add(Multiply(Y(v), M21(m)), Add(Multiply(Z(v), M31(m)), M41(m)))), Add(Multiply(X(v), M12(m)), Add(Multiply(Y(v), M22(m)), Add(Multiply(Z(v), M32(m)), M42(m)))), Add(Multiply(X(v), M13(m)), Add(Multiply(Y(v), M23(m)), Add(Multiply(Z(v), M33(m)), M43(m)))))
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Multiply(Column1(m), s), Multiply(Column2(m), s), Multiply(Column3(m), s), Multiply(Column4(m), s))
    - Transforms_26:Library.Multiply(a: ConcreteType:Matrix4x4,b: ConcreteType:Matrix4x4): ConcreteType:Matrix4x4 [Library]; => CreateFromRows(Matrix4x4, Tuple4(Add(Multiply(M11(a), M11(b)), Add(Multiply(M12(a), M21(b)), Add(Multiply(M13(a), M31(b)), Multiply(M14(a), M41(b))))), Add(Multiply(M11(a), M12(b)), Add(Multiply(M12(a), M22(b)), Add(Multiply(M13(a), M32(b)), Multiply(M14(a), M42(b))))), Add(Multiply(M11(a), M13(b)), Add(Multiply(M12(a), M23(b)), Add(Multiply(M13(a), M33(b)), Multiply(M14(a), M43(b))))), Add(Multiply(M11(a), M14(b)), Add(Multiply(M12(a), M24(b)), Add(Multiply(M13(a), M34(b)), Multiply(M14(a), M44(b)))))), Tuple4(Add(Multiply(M21(a), M11(b)), Add(Multiply(M22(a), M21(b)), Add(Multiply(M23(a), M31(b)), Multiply(M24(a), M41(b))))), Add(Multiply(M21(a), M12(b)), Add(Multiply(M22(a), M22(b)), Add(Multiply(M23(a), M32(b)), Multiply(M24(a), M42(b))))), Add(Multiply(M21(a), M13(b)), Add(Multiply(M22(a), M23(b)), Add(Multiply(M23(a), M33(b)), Multiply(M24(a), M43(b))))), Add(Multiply(M21(a), M14(b)), Add(Multiply(M22(a), M24(b)), Add(Multiply(M23(a), M34(b)), Multiply(M24(a), M44(b)))))), Tuple4(Add(Multiply(M31(a), M11(b)), Add(Multiply(M32(a), M21(b)), Add(Multiply(M33(a), M31(b)), Multiply(M34(a), M41(b))))), Add(Multiply(M31(a), M12(b)), Add(Multiply(M32(a), M22(b)), Add(Multiply(M33(a), M32(b)), Multiply(M34(a), M42(b))))), Add(Multiply(M31(a), M13(b)), Add(Multiply(M32(a), M23(b)), Add(Multiply(M33(a), M33(b)), Multiply(M34(a), M43(b))))), Add(Multiply(M31(a), M14(b)), Add(Multiply(M32(a), M24(b)), Add(Multiply(M33(a), M34(b)), Multiply(M34(a), M44(b)))))), Tuple4(Add(Multiply(M41(a), M11(b)), Add(Multiply(M42(a), M21(b)), Add(Multiply(M43(a), M31(b)), Multiply(M44(a), M41(b))))), Add(Multiply(M41(a), M12(b)), Add(Multiply(M42(a), M22(b)), Add(Multiply(M43(a), M32(b)), Multiply(M44(a), M42(b))))), Add(Multiply(M41(a), M13(b)), Add(Multiply(M42(a), M23(b)), Add(Multiply(M43(a), M33(b)), Multiply(M44(a), M43(b))))), Add(Multiply(M41(a), M14(b)), Add(Multiply(M42(a), M24(b)), Add(Multiply(M43(a), M34(b)), Multiply(M44(a), M44(b)))))))
    - Transforms_26:Library.Multiply(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Multiply(Vector4D(q), scalar)
    - Transforms_26:Library.Multiply(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Plato.Compiler.Symbols.BlockStatement
    _ARG_ 0: k => Number
    _ARG_ 1: Cos(t) => Number

256. ArchimedeanSpiral
  Type: (Angle, Number, Number) => Number
  Sig: PolarCurves_12:Library.ArchimedeanSpiral(t: Angle, a: Number, b: Number): Number
  Body: Add(a, Multiply(b, Turns(t)))
  # functions: 5 AMBIGUOUS
    - INumerical_4:Library.Add(x: Concept:INumberLike,y: ConcreteType:Number): Concept:INumberLike [Library]; => FromNumber(x, Add(ToNumber(x), y))
    - INumerical_4:Library.Add(x: Concept:INumerical,y: Concept:INumerical): Concept:INumerical [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9082:Concept:IAny, ParameterDef=b$9084:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Add(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Add(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Add(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Add(Vector4D(q1), Vector4D(q2))
    _ARG_ 0: a => Number
    _ARG_ 1: Multiply(b, Turns(t)) => $787:constraint=INumberLike

258. ConicSection
  Type: (Angle, Number, Number) => Number
  Sig: PolarCurves_12:Library.ConicSection(t: Angle, semiLatusRectum: Number, eccentricity: Number): Number
  Body: Divide(semiLatusRectum, Subtract(1, Multiply(eccentricity, Cos(t))))
  # functions: 7 AMBIGUOUS
    - INumerical_4:Library.Divide(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Divide(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Divide(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9030:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Divide(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9196:Concept:IAny, ParameterDef=b$9198:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Divide(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Divide(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Divide(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Divide(Column1(m), s), Divide(Column2(m), s), Divide(Column3(m), s), Divide(Column4(m), s))
    - Transforms_26:Library.Divide(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Divide(Vector4D(q), scalar)
    _ARG_ 0: semiLatusRectum => Number
    _ARG_ 1: Subtract(1, Multiply(eccentricity, Cos(t))) => $828:constraint=INumerical

262. TrisectrixOfMaclaurin
  Type: (Angle, Number) => Number
  Sig: PolarCurves_12:Library.TrisectrixOfMaclaurin(t: Angle, a: Number): Number
  Body: Divide(Multiply(2, a), Cos(Divide(t, 3)))
  # functions: 7 AMBIGUOUS
    - INumerical_4:Library.Divide(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Divide(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Divide(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9030:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Divide(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9196:Concept:IAny, ParameterDef=b$9198:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Divide(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Divide(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Divide(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Divide(Column1(m), s), Divide(Column2(m), s), Divide(Column3(m), s), Divide(Column4(m), s))
    - Transforms_26:Library.Divide(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Divide(Vector4D(q), scalar)
    _ARG_ 0: Multiply(2, a) => $787:constraint=INumberLike
    _ARG_ 1: Cos(Divide(t, 3)) => Number

264. ConchoidOfDeSluze
  Type: (Angle, Number) => Number
  Sig: PolarCurves_12:Library.ConchoidOfDeSluze(t: Angle, a: Number): Number
  Body: Add(Sec(t), Multiply(a, Cos(t)))
  # functions: 5 AMBIGUOUS
    - INumerical_4:Library.Add(x: Concept:INumberLike,y: ConcreteType:Number): Concept:INumberLike [Library]; => FromNumber(x, Add(ToNumber(x), y))
    - INumerical_4:Library.Add(x: Concept:INumerical,y: Concept:INumerical): Concept:INumerical [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9082:Concept:IAny, ParameterDef=b$9084:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Add(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Add(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Add(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Add(Vector4D(q1), Vector4D(q2))
    _ARG_ 0: Sec(t) => Number
    _ARG_ 1: Multiply(a, Cos(t)) => $787:constraint=INumberLike

270. LogarithmicSpiral
  Type: (Angle, Number, Number) => Number
  Sig: PolarCurves_12:Library.LogarithmicSpiral(t: Angle, a: Number, k: Number): Number
  Body: Multiply(a, Exp(Multiply(Radians(t), k)))
  # functions: 10 AMBIGUOUS
    - INumerical_4:Library.Multiply(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Multiply(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Multiply(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9005:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Multiply(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9165:Concept:IAny, ParameterDef=b$9167:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Tuple3(Add(Multiply(X(v), M11(m)), Add(Multiply(Y(v), M21(m)), Add(Multiply(Z(v), M31(m)), M41(m)))), Add(Multiply(X(v), M12(m)), Add(Multiply(Y(v), M22(m)), Add(Multiply(Z(v), M32(m)), M42(m)))), Add(Multiply(X(v), M13(m)), Add(Multiply(Y(v), M23(m)), Add(Multiply(Z(v), M33(m)), M43(m)))))
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Multiply(Column1(m), s), Multiply(Column2(m), s), Multiply(Column3(m), s), Multiply(Column4(m), s))
    - Transforms_26:Library.Multiply(a: ConcreteType:Matrix4x4,b: ConcreteType:Matrix4x4): ConcreteType:Matrix4x4 [Library]; => CreateFromRows(Matrix4x4, Tuple4(Add(Multiply(M11(a), M11(b)), Add(Multiply(M12(a), M21(b)), Add(Multiply(M13(a), M31(b)), Multiply(M14(a), M41(b))))), Add(Multiply(M11(a), M12(b)), Add(Multiply(M12(a), M22(b)), Add(Multiply(M13(a), M32(b)), Multiply(M14(a), M42(b))))), Add(Multiply(M11(a), M13(b)), Add(Multiply(M12(a), M23(b)), Add(Multiply(M13(a), M33(b)), Multiply(M14(a), M43(b))))), Add(Multiply(M11(a), M14(b)), Add(Multiply(M12(a), M24(b)), Add(Multiply(M13(a), M34(b)), Multiply(M14(a), M44(b)))))), Tuple4(Add(Multiply(M21(a), M11(b)), Add(Multiply(M22(a), M21(b)), Add(Multiply(M23(a), M31(b)), Multiply(M24(a), M41(b))))), Add(Multiply(M21(a), M12(b)), Add(Multiply(M22(a), M22(b)), Add(Multiply(M23(a), M32(b)), Multiply(M24(a), M42(b))))), Add(Multiply(M21(a), M13(b)), Add(Multiply(M22(a), M23(b)), Add(Multiply(M23(a), M33(b)), Multiply(M24(a), M43(b))))), Add(Multiply(M21(a), M14(b)), Add(Multiply(M22(a), M24(b)), Add(Multiply(M23(a), M34(b)), Multiply(M24(a), M44(b)))))), Tuple4(Add(Multiply(M31(a), M11(b)), Add(Multiply(M32(a), M21(b)), Add(Multiply(M33(a), M31(b)), Multiply(M34(a), M41(b))))), Add(Multiply(M31(a), M12(b)), Add(Multiply(M32(a), M22(b)), Add(Multiply(M33(a), M32(b)), Multiply(M34(a), M42(b))))), Add(Multiply(M31(a), M13(b)), Add(Multiply(M32(a), M23(b)), Add(Multiply(M33(a), M33(b)), Multiply(M34(a), M43(b))))), Add(Multiply(M31(a), M14(b)), Add(Multiply(M32(a), M24(b)), Add(Multiply(M33(a), M34(b)), Multiply(M34(a), M44(b)))))), Tuple4(Add(Multiply(M41(a), M11(b)), Add(Multiply(M42(a), M21(b)), Add(Multiply(M43(a), M31(b)), Multiply(M44(a), M41(b))))), Add(Multiply(M41(a), M12(b)), Add(Multiply(M42(a), M22(b)), Add(Multiply(M43(a), M32(b)), Multiply(M44(a), M42(b))))), Add(Multiply(M41(a), M13(b)), Add(Multiply(M42(a), M23(b)), Add(Multiply(M43(a), M33(b)), Multiply(M44(a), M43(b))))), Add(Multiply(M41(a), M14(b)), Add(Multiply(M42(a), M24(b)), Add(Multiply(M43(a), M34(b)), Multiply(M44(a), M44(b)))))))
    - Transforms_26:Library.Multiply(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Multiply(Vector4D(q), scalar)
    - Transforms_26:Library.Multiply(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Plato.Compiler.Symbols.BlockStatement
    _ARG_ 0: a => Number
    _ARG_ 1: Exp(Multiply(Radians(t), k)) => Number


Group Curves3D_14:Library


Group AngularCurves3D_16:Library

274. Eval
  Type: (IAngularCurve3D, Number) => Vector3D
  Sig: AngularCurves3D_16:Library.Eval(curve: IAngularCurve3D, t: Number): Vector3D
  Body: GetPoint(curve, Turns(t))
  # functions: 13 AMBIGUOUS
    - AngularCurves2D_10:Library.GetPoint(curve: ConcreteType:Circle,t: ConcreteType:Angle): ConcreteType:Vector2D [Library]; => Circle(t, Center(curve), Radius(curve))
    - AngularCurves2D_10:Library.GetPoint(curve: ConcreteType:Ellipse,t: ConcreteType:Angle): ConcreteType:Vector2D [Library]; => Add(Multiply(UnitCircle(t), Size(curve)), Center(curve))
    - AngularCurves2D_10:Library.GetPoint(curve: ConcreteType:Epicycloid,t: ConcreteType:Angle): ConcreteType:Vector2D [Library]; => Epicycloid(t, Radius1(curve), Radius2(curve))
    - AngularCurves2D_10:Library.GetPoint(curve: ConcreteType:Hypocycloid,t: ConcreteType:Angle): ConcreteType:Vector2D [Library]; => Hypocycloid(t, Radius1(curve), Radius2(curve))
    - AngularCurves2D_10:Library.GetPoint(curve: ConcreteType:Epitrochoid,t: ConcreteType:Angle): ConcreteType:Vector2D [Library]; => Epitrochoid(t, Radius1(curve), Radius2(curve), Dist(curve))
    - AngularCurves2D_10:Library.GetPoint(curve: ConcreteType:Hypotrochoid,t: ConcreteType:Angle): ConcreteType:Vector2D [Library]; => Hypotrochoid(t, Radius1(curve), Radius2(curve), Dist(curve))
    - AngularCurves2D_10:Library.GetPoint(curve: ConcreteType:ButterflyCurve,t: ConcreteType:Angle): ConcreteType:Vector2D [Library]; => ButterflyCurve(t)
    - AngularCurves2D_10:Library.GetPoint(curve: ConcreteType:Lissajous,t: ConcreteType:Angle): ConcreteType:Vector2D [Library]; => Lissajous(t, A(curve), B(curve), Delta(curve))
    - PolarCurves_12:Library.GetPoint(curve: Concept:IPolarCurve,t: ConcreteType:Angle): ConcreteType:Vector2D [Library]; => EvalPolar(curve, t)
    - AngularCurves3D_16:Library.GetPoint(curve: ConcreteType:TorusKnot,t: ConcreteType:Angle): ConcreteType:Vector3D [Library]; => Multiply(TorusKnot(t, P(curve), Q(curve)), Radius(curve))
    - AngularCurves3D_16:Library.GetPoint(curve: ConcreteType:TrefoilKnot,t: ConcreteType:Angle): ConcreteType:Vector3D [Library]; => TrefoilKnot(t)
    - AngularCurves3D_16:Library.GetPoint(curve: ConcreteType:FigureEightKnot,t: ConcreteType:Angle): ConcreteType:Vector3D [Library]; => FigureEightKnot(t)
    - AngularCurves3D_16:Library.GetPoint(curve: ConcreteType:Helix,t: ConcreteType:Angle): ConcreteType:Vector3D [Library]; => Multiply(Helix(t, NumTurns(curve)), Tuple3(Radius(curve), Radius(curve), Height(curve)))
    _ARG_ 0: curve => IAngularCurve3D
    _ARG_ 1: Turns(t) => Angle

276. GetPoint
  Type: (TorusKnot, Angle) => Vector3D
  Sig: AngularCurves3D_16:Library.GetPoint(curve: TorusKnot, t: Angle): Vector3D
  Body: Multiply(TorusKnot(t, P(curve), Q(curve)), Radius(curve))
  # functions: 10 AMBIGUOUS
    - INumerical_4:Library.Multiply(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Multiply(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Multiply(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9005:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Multiply(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9165:Concept:IAny, ParameterDef=b$9167:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Tuple3(Add(Multiply(X(v), M11(m)), Add(Multiply(Y(v), M21(m)), Add(Multiply(Z(v), M31(m)), M41(m)))), Add(Multiply(X(v), M12(m)), Add(Multiply(Y(v), M22(m)), Add(Multiply(Z(v), M32(m)), M42(m)))), Add(Multiply(X(v), M13(m)), Add(Multiply(Y(v), M23(m)), Add(Multiply(Z(v), M33(m)), M43(m)))))
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Multiply(Column1(m), s), Multiply(Column2(m), s), Multiply(Column3(m), s), Multiply(Column4(m), s))
    - Transforms_26:Library.Multiply(a: ConcreteType:Matrix4x4,b: ConcreteType:Matrix4x4): ConcreteType:Matrix4x4 [Library]; => CreateFromRows(Matrix4x4, Tuple4(Add(Multiply(M11(a), M11(b)), Add(Multiply(M12(a), M21(b)), Add(Multiply(M13(a), M31(b)), Multiply(M14(a), M41(b))))), Add(Multiply(M11(a), M12(b)), Add(Multiply(M12(a), M22(b)), Add(Multiply(M13(a), M32(b)), Multiply(M14(a), M42(b))))), Add(Multiply(M11(a), M13(b)), Add(Multiply(M12(a), M23(b)), Add(Multiply(M13(a), M33(b)), Multiply(M14(a), M43(b))))), Add(Multiply(M11(a), M14(b)), Add(Multiply(M12(a), M24(b)), Add(Multiply(M13(a), M34(b)), Multiply(M14(a), M44(b)))))), Tuple4(Add(Multiply(M21(a), M11(b)), Add(Multiply(M22(a), M21(b)), Add(Multiply(M23(a), M31(b)), Multiply(M24(a), M41(b))))), Add(Multiply(M21(a), M12(b)), Add(Multiply(M22(a), M22(b)), Add(Multiply(M23(a), M32(b)), Multiply(M24(a), M42(b))))), Add(Multiply(M21(a), M13(b)), Add(Multiply(M22(a), M23(b)), Add(Multiply(M23(a), M33(b)), Multiply(M24(a), M43(b))))), Add(Multiply(M21(a), M14(b)), Add(Multiply(M22(a), M24(b)), Add(Multiply(M23(a), M34(b)), Multiply(M24(a), M44(b)))))), Tuple4(Add(Multiply(M31(a), M11(b)), Add(Multiply(M32(a), M21(b)), Add(Multiply(M33(a), M31(b)), Multiply(M34(a), M41(b))))), Add(Multiply(M31(a), M12(b)), Add(Multiply(M32(a), M22(b)), Add(Multiply(M33(a), M32(b)), Multiply(M34(a), M42(b))))), Add(Multiply(M31(a), M13(b)), Add(Multiply(M32(a), M23(b)), Add(Multiply(M33(a), M33(b)), Multiply(M34(a), M43(b))))), Add(Multiply(M31(a), M14(b)), Add(Multiply(M32(a), M24(b)), Add(Multiply(M33(a), M34(b)), Multiply(M34(a), M44(b)))))), Tuple4(Add(Multiply(M41(a), M11(b)), Add(Multiply(M42(a), M21(b)), Add(Multiply(M43(a), M31(b)), Multiply(M44(a), M41(b))))), Add(Multiply(M41(a), M12(b)), Add(Multiply(M42(a), M22(b)), Add(Multiply(M43(a), M32(b)), Multiply(M44(a), M42(b))))), Add(Multiply(M41(a), M13(b)), Add(Multiply(M42(a), M23(b)), Add(Multiply(M43(a), M33(b)), Multiply(M44(a), M43(b))))), Add(Multiply(M41(a), M14(b)), Add(Multiply(M42(a), M24(b)), Add(Multiply(M43(a), M34(b)), Multiply(M44(a), M44(b)))))))
    - Transforms_26:Library.Multiply(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Multiply(Vector4D(q), scalar)
    - Transforms_26:Library.Multiply(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Plato.Compiler.Symbols.BlockStatement
    _ARG_ 0: TorusKnot(t, P(curve), Q(curve)) => Vector3D
    _ARG_ 1: Radius(curve) => Number

282. GetPoint
  Type: (Helix, Angle) => Vector3D
  Sig: AngularCurves3D_16:Library.GetPoint(curve: Helix, t: Angle): Vector3D
  Body: Multiply(Helix(t, NumTurns(curve)), Tuple3(Radius(curve), Radius(curve), Height(curve)))
  # functions: 10 AMBIGUOUS
    - INumerical_4:Library.Multiply(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Multiply(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Multiply(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9005:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Multiply(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9165:Concept:IAny, ParameterDef=b$9167:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Tuple3(Add(Multiply(X(v), M11(m)), Add(Multiply(Y(v), M21(m)), Add(Multiply(Z(v), M31(m)), M41(m)))), Add(Multiply(X(v), M12(m)), Add(Multiply(Y(v), M22(m)), Add(Multiply(Z(v), M32(m)), M42(m)))), Add(Multiply(X(v), M13(m)), Add(Multiply(Y(v), M23(m)), Add(Multiply(Z(v), M33(m)), M43(m)))))
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Multiply(Column1(m), s), Multiply(Column2(m), s), Multiply(Column3(m), s), Multiply(Column4(m), s))
    - Transforms_26:Library.Multiply(a: ConcreteType:Matrix4x4,b: ConcreteType:Matrix4x4): ConcreteType:Matrix4x4 [Library]; => CreateFromRows(Matrix4x4, Tuple4(Add(Multiply(M11(a), M11(b)), Add(Multiply(M12(a), M21(b)), Add(Multiply(M13(a), M31(b)), Multiply(M14(a), M41(b))))), Add(Multiply(M11(a), M12(b)), Add(Multiply(M12(a), M22(b)), Add(Multiply(M13(a), M32(b)), Multiply(M14(a), M42(b))))), Add(Multiply(M11(a), M13(b)), Add(Multiply(M12(a), M23(b)), Add(Multiply(M13(a), M33(b)), Multiply(M14(a), M43(b))))), Add(Multiply(M11(a), M14(b)), Add(Multiply(M12(a), M24(b)), Add(Multiply(M13(a), M34(b)), Multiply(M14(a), M44(b)))))), Tuple4(Add(Multiply(M21(a), M11(b)), Add(Multiply(M22(a), M21(b)), Add(Multiply(M23(a), M31(b)), Multiply(M24(a), M41(b))))), Add(Multiply(M21(a), M12(b)), Add(Multiply(M22(a), M22(b)), Add(Multiply(M23(a), M32(b)), Multiply(M24(a), M42(b))))), Add(Multiply(M21(a), M13(b)), Add(Multiply(M22(a), M23(b)), Add(Multiply(M23(a), M33(b)), Multiply(M24(a), M43(b))))), Add(Multiply(M21(a), M14(b)), Add(Multiply(M22(a), M24(b)), Add(Multiply(M23(a), M34(b)), Multiply(M24(a), M44(b)))))), Tuple4(Add(Multiply(M31(a), M11(b)), Add(Multiply(M32(a), M21(b)), Add(Multiply(M33(a), M31(b)), Multiply(M34(a), M41(b))))), Add(Multiply(M31(a), M12(b)), Add(Multiply(M32(a), M22(b)), Add(Multiply(M33(a), M32(b)), Multiply(M34(a), M42(b))))), Add(Multiply(M31(a), M13(b)), Add(Multiply(M32(a), M23(b)), Add(Multiply(M33(a), M33(b)), Multiply(M34(a), M43(b))))), Add(Multiply(M31(a), M14(b)), Add(Multiply(M32(a), M24(b)), Add(Multiply(M33(a), M34(b)), Multiply(M34(a), M44(b)))))), Tuple4(Add(Multiply(M41(a), M11(b)), Add(Multiply(M42(a), M21(b)), Add(Multiply(M43(a), M31(b)), Multiply(M44(a), M41(b))))), Add(Multiply(M41(a), M12(b)), Add(Multiply(M42(a), M22(b)), Add(Multiply(M43(a), M32(b)), Multiply(M44(a), M42(b))))), Add(Multiply(M41(a), M13(b)), Add(Multiply(M42(a), M23(b)), Add(Multiply(M43(a), M33(b)), Multiply(M44(a), M43(b))))), Add(Multiply(M41(a), M14(b)), Add(Multiply(M42(a), M24(b)), Add(Multiply(M43(a), M34(b)), Multiply(M44(a), M44(b)))))))
    - Transforms_26:Library.Multiply(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Multiply(Vector4D(q), scalar)
    - Transforms_26:Library.Multiply(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Plato.Compiler.Symbols.BlockStatement
    _ARG_ 0: Helix(t, NumTurns(curve)) => Vector3D
    _ARG_ 1: Tuple3(Radius(curve), Radius(curve), Height(curve)) => (Tuple3, $1394:, $1395:, $1396:)


Group IGeometry_18:Library

283. Length
  Type: (Line2D) => Number
  Sig: IGeometry_18:Library.Length(x: Line2D): Number
  Body: Length(Subtract(B(x), A(x)))
  # functions: 4 AMBIGUOUS
    - IGeometry_18:Library.Length(x: ConcreteType:Line2D): ConcreteType:Number [Library]; => Length(Subtract(B(x), A(x)))
    - IGeometry_18:Library.Length(x: ConcreteType:Line3D): ConcreteType:Number [Library]; => Length(Subtract(B(x), A(x)))
    - IGeometry_18:Library.Length(a: Concept:IVector): ConcreteType:Number [Library]; => Magnitude(a)
    - Length_128:ConcreteType.Length(Meters: ConcreteType:Number): ConcreteType:Length [Constructor]; => 
    _ARG_ 0: Subtract(B(x), A(x)) => $828:constraint=INumerical

284. Direction
  Type: (Line2D) => Vector2D
  Sig: IGeometry_18:Library.Direction(x: Line2D): Vector2D
  Body: Subtract(B(x), A(x))
  # functions: 4 AMBIGUOUS
    - INumerical_4:Library.Subtract(x: Concept:INumerical,y: Concept:INumerical): Concept:INumerical [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9113:Concept:IAny, ParameterDef=b$9115:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Subtract(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Subtract(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Subtract(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Subtract(Vector4D(q1), Vector4D(q2))
    _ARG_ 0: B(x) => Integer
    _ARG_ 1: A(x) => Integer

287. Start
  Type: (Line2D) => Vector2D
  Sig: IGeometry_18:Library.Start(x: Line2D): Vector2D
  Body: A(x)
  # functions: 28 AMBIGUOUS
    - Integer2_88:ConcreteType.A(self: ConcreteType:Integer2): ConcreteType:Integer [Field]; => 
    - Integer3_90:ConcreteType.A(self: ConcreteType:Integer3): ConcreteType:Integer [Field]; => 
    - Integer4_92:ConcreteType.A(self: ConcreteType:Integer4): ConcreteType:Integer [Field]; => 
    - Color_94:ConcreteType.A(self: ConcreteType:Color): ConcreteType:Unit [Field]; => 
    - ColorLAB_98:ConcreteType.A(self: ConcreteType:ColorLAB): ConcreteType:Number [Field]; => 
    - Quadratic_146:ConcreteType.A(self: ConcreteType:Quadratic): ConcreteType:Number [Field]; => 
    - Cubic_148:ConcreteType.A(self: ConcreteType:Cubic): ConcreteType:Number [Field]; => 
    - QuadraticBezier2D_156:ConcreteType.A(self: ConcreteType:QuadraticBezier2D): ConcreteType:Vector2D [Field]; => 
    - CubicBezier2D_158:ConcreteType.A(self: ConcreteType:CubicBezier2D): ConcreteType:Vector2D [Field]; => 
    - Lissajous_176:ConcreteType.A(self: ConcreteType:Lissajous): ConcreteType:Number [Field]; => 
    - Limacon_182:ConcreteType.A(self: ConcreteType:Limacon): ConcreteType:Number [Field]; => 
    - ArchimedeanSpiral_188:ConcreteType.A(self: ConcreteType:ArchimedeanSpiral): ConcreteType:Number [Field]; => 
    - LemniscateOfBernoulli_192:ConcreteType.A(self: ConcreteType:LemniscateOfBernoulli): ConcreteType:Number [Field]; => 
    - TrisectrixOfMaclaurin_194:ConcreteType.A(self: ConcreteType:TrisectrixOfMaclaurin): ConcreteType:Number [Field]; => 
    - ConchoidOfDeSluze_196:ConcreteType.A(self: ConcreteType:ConchoidOfDeSluze): ConcreteType:Number [Field]; => 
    - TschirnhausenCubic_198:ConcreteType.A(self: ConcreteType:TschirnhausenCubic): ConcreteType:Number [Field]; => 
    - SinusoidalSpiral_200:ConcreteType.A(self: ConcreteType:SinusoidalSpiral): ConcreteType:Number [Field]; => 
    - FermatsSpiral_202:ConcreteType.A(self: ConcreteType:FermatsSpiral): ConcreteType:Number [Field]; => 
    - LogarithmicSpiral_204:ConcreteType.A(self: ConcreteType:LogarithmicSpiral): ConcreteType:Number [Field]; => 
    - CubicBezier3D_206:ConcreteType.A(self: ConcreteType:CubicBezier3D): ConcreteType:Vector3D [Field]; => 
    - QuadraticBezier3D_208:ConcreteType.A(self: ConcreteType:QuadraticBezier3D): ConcreteType:Vector3D [Field]; => 
    - Triangle2D_376:ConcreteType.A(self: ConcreteType:Triangle2D): ConcreteType:Vector2D [Field]; => 
    - Quad2D_378:ConcreteType.A(self: ConcreteType:Quad2D): ConcreteType:Vector2D [Field]; => 
    - Line2D_380:ConcreteType.A(self: ConcreteType:Line2D): ConcreteType:Vector2D [Field]; => 
    - Lens_382:ConcreteType.A(self: ConcreteType:Lens): ConcreteType:Circle [Field]; => 
    - Line3D_404:ConcreteType.A(self: ConcreteType:Line3D): ConcreteType:Vector3D [Field]; => 
    - Triangle3D_408:ConcreteType.A(self: ConcreteType:Triangle3D): ConcreteType:Vector3D [Field]; => 
    - Quad3D_410:ConcreteType.A(self: ConcreteType:Quad3D): ConcreteType:Vector3D [Field]; => 
    _ARG_ 0: x => Line2D

288. End
  Type: (Line2D) => Vector2D
  Sig: IGeometry_18:Library.End(x: Line2D): Vector2D
  Body: B(x)
  # functions: 21 AMBIGUOUS
    - Integer2_88:ConcreteType.B(self: ConcreteType:Integer2): ConcreteType:Integer [Field]; => 
    - Integer3_90:ConcreteType.B(self: ConcreteType:Integer3): ConcreteType:Integer [Field]; => 
    - Integer4_92:ConcreteType.B(self: ConcreteType:Integer4): ConcreteType:Integer [Field]; => 
    - Color_94:ConcreteType.B(self: ConcreteType:Color): ConcreteType:Unit [Field]; => 
    - ColorLAB_98:ConcreteType.B(self: ConcreteType:ColorLAB): ConcreteType:Number [Field]; => 
    - Quadratic_146:ConcreteType.B(self: ConcreteType:Quadratic): ConcreteType:Number [Field]; => 
    - Cubic_148:ConcreteType.B(self: ConcreteType:Cubic): ConcreteType:Number [Field]; => 
    - QuadraticBezier2D_156:ConcreteType.B(self: ConcreteType:QuadraticBezier2D): ConcreteType:Vector2D [Field]; => 
    - CubicBezier2D_158:ConcreteType.B(self: ConcreteType:CubicBezier2D): ConcreteType:Vector2D [Field]; => 
    - Lissajous_176:ConcreteType.B(self: ConcreteType:Lissajous): ConcreteType:Number [Field]; => 
    - Limacon_182:ConcreteType.B(self: ConcreteType:Limacon): ConcreteType:Number [Field]; => 
    - ArchimedeanSpiral_188:ConcreteType.B(self: ConcreteType:ArchimedeanSpiral): ConcreteType:Number [Field]; => 
    - CubicBezier3D_206:ConcreteType.B(self: ConcreteType:CubicBezier3D): ConcreteType:Vector3D [Field]; => 
    - QuadraticBezier3D_208:ConcreteType.B(self: ConcreteType:QuadraticBezier3D): ConcreteType:Vector3D [Field]; => 
    - Triangle2D_376:ConcreteType.B(self: ConcreteType:Triangle2D): ConcreteType:Vector2D [Field]; => 
    - Quad2D_378:ConcreteType.B(self: ConcreteType:Quad2D): ConcreteType:Vector2D [Field]; => 
    - Line2D_380:ConcreteType.B(self: ConcreteType:Line2D): ConcreteType:Vector2D [Field]; => 
    - Lens_382:ConcreteType.B(self: ConcreteType:Lens): ConcreteType:Circle [Field]; => 
    - Line3D_404:ConcreteType.B(self: ConcreteType:Line3D): ConcreteType:Vector3D [Field]; => 
    - Triangle3D_408:ConcreteType.B(self: ConcreteType:Triangle3D): ConcreteType:Vector3D [Field]; => 
    - Quad3D_410:ConcreteType.B(self: ConcreteType:Quad3D): ConcreteType:Vector3D [Field]; => 
    _ARG_ 0: x => Line2D

289. Length
  Type: (Line3D) => Number
  Sig: IGeometry_18:Library.Length(x: Line3D): Number
  Body: Length(Subtract(B(x), A(x)))
  # functions: 4 AMBIGUOUS
    - IGeometry_18:Library.Length(x: ConcreteType:Line2D): ConcreteType:Number [Library]; => Length(Subtract(B(x), A(x)))
    - IGeometry_18:Library.Length(x: ConcreteType:Line3D): ConcreteType:Number [Library]; => Length(Subtract(B(x), A(x)))
    - IGeometry_18:Library.Length(a: Concept:IVector): ConcreteType:Number [Library]; => Magnitude(a)
    - Length_128:ConcreteType.Length(Meters: ConcreteType:Number): ConcreteType:Length [Constructor]; => 
    _ARG_ 0: Subtract(B(x), A(x)) => $828:constraint=INumerical

290. Direction
  Type: (Line3D) => Vector3D
  Sig: IGeometry_18:Library.Direction(x: Line3D): Vector3D
  Body: Subtract(B(x), A(x))
  # functions: 4 AMBIGUOUS
    - INumerical_4:Library.Subtract(x: Concept:INumerical,y: Concept:INumerical): Concept:INumerical [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9113:Concept:IAny, ParameterDef=b$9115:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Subtract(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Subtract(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Subtract(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Subtract(Vector4D(q1), Vector4D(q2))
    _ARG_ 0: B(x) => Integer
    _ARG_ 1: A(x) => Integer

295. Start
  Type: (Line3D) => Vector3D
  Sig: IGeometry_18:Library.Start(x: Line3D): Vector3D
  Body: A(x)
  # functions: 28 AMBIGUOUS
    - Integer2_88:ConcreteType.A(self: ConcreteType:Integer2): ConcreteType:Integer [Field]; => 
    - Integer3_90:ConcreteType.A(self: ConcreteType:Integer3): ConcreteType:Integer [Field]; => 
    - Integer4_92:ConcreteType.A(self: ConcreteType:Integer4): ConcreteType:Integer [Field]; => 
    - Color_94:ConcreteType.A(self: ConcreteType:Color): ConcreteType:Unit [Field]; => 
    - ColorLAB_98:ConcreteType.A(self: ConcreteType:ColorLAB): ConcreteType:Number [Field]; => 
    - Quadratic_146:ConcreteType.A(self: ConcreteType:Quadratic): ConcreteType:Number [Field]; => 
    - Cubic_148:ConcreteType.A(self: ConcreteType:Cubic): ConcreteType:Number [Field]; => 
    - QuadraticBezier2D_156:ConcreteType.A(self: ConcreteType:QuadraticBezier2D): ConcreteType:Vector2D [Field]; => 
    - CubicBezier2D_158:ConcreteType.A(self: ConcreteType:CubicBezier2D): ConcreteType:Vector2D [Field]; => 
    - Lissajous_176:ConcreteType.A(self: ConcreteType:Lissajous): ConcreteType:Number [Field]; => 
    - Limacon_182:ConcreteType.A(self: ConcreteType:Limacon): ConcreteType:Number [Field]; => 
    - ArchimedeanSpiral_188:ConcreteType.A(self: ConcreteType:ArchimedeanSpiral): ConcreteType:Number [Field]; => 
    - LemniscateOfBernoulli_192:ConcreteType.A(self: ConcreteType:LemniscateOfBernoulli): ConcreteType:Number [Field]; => 
    - TrisectrixOfMaclaurin_194:ConcreteType.A(self: ConcreteType:TrisectrixOfMaclaurin): ConcreteType:Number [Field]; => 
    - ConchoidOfDeSluze_196:ConcreteType.A(self: ConcreteType:ConchoidOfDeSluze): ConcreteType:Number [Field]; => 
    - TschirnhausenCubic_198:ConcreteType.A(self: ConcreteType:TschirnhausenCubic): ConcreteType:Number [Field]; => 
    - SinusoidalSpiral_200:ConcreteType.A(self: ConcreteType:SinusoidalSpiral): ConcreteType:Number [Field]; => 
    - FermatsSpiral_202:ConcreteType.A(self: ConcreteType:FermatsSpiral): ConcreteType:Number [Field]; => 
    - LogarithmicSpiral_204:ConcreteType.A(self: ConcreteType:LogarithmicSpiral): ConcreteType:Number [Field]; => 
    - CubicBezier3D_206:ConcreteType.A(self: ConcreteType:CubicBezier3D): ConcreteType:Vector3D [Field]; => 
    - QuadraticBezier3D_208:ConcreteType.A(self: ConcreteType:QuadraticBezier3D): ConcreteType:Vector3D [Field]; => 
    - Triangle2D_376:ConcreteType.A(self: ConcreteType:Triangle2D): ConcreteType:Vector2D [Field]; => 
    - Quad2D_378:ConcreteType.A(self: ConcreteType:Quad2D): ConcreteType:Vector2D [Field]; => 
    - Line2D_380:ConcreteType.A(self: ConcreteType:Line2D): ConcreteType:Vector2D [Field]; => 
    - Lens_382:ConcreteType.A(self: ConcreteType:Lens): ConcreteType:Circle [Field]; => 
    - Line3D_404:ConcreteType.A(self: ConcreteType:Line3D): ConcreteType:Vector3D [Field]; => 
    - Triangle3D_408:ConcreteType.A(self: ConcreteType:Triangle3D): ConcreteType:Vector3D [Field]; => 
    - Quad3D_410:ConcreteType.A(self: ConcreteType:Quad3D): ConcreteType:Vector3D [Field]; => 
    _ARG_ 0: x => Line3D

296. End
  Type: (Line3D) => Vector3D
  Sig: IGeometry_18:Library.End(x: Line3D): Vector3D
  Body: B(x)
  # functions: 21 AMBIGUOUS
    - Integer2_88:ConcreteType.B(self: ConcreteType:Integer2): ConcreteType:Integer [Field]; => 
    - Integer3_90:ConcreteType.B(self: ConcreteType:Integer3): ConcreteType:Integer [Field]; => 
    - Integer4_92:ConcreteType.B(self: ConcreteType:Integer4): ConcreteType:Integer [Field]; => 
    - Color_94:ConcreteType.B(self: ConcreteType:Color): ConcreteType:Unit [Field]; => 
    - ColorLAB_98:ConcreteType.B(self: ConcreteType:ColorLAB): ConcreteType:Number [Field]; => 
    - Quadratic_146:ConcreteType.B(self: ConcreteType:Quadratic): ConcreteType:Number [Field]; => 
    - Cubic_148:ConcreteType.B(self: ConcreteType:Cubic): ConcreteType:Number [Field]; => 
    - QuadraticBezier2D_156:ConcreteType.B(self: ConcreteType:QuadraticBezier2D): ConcreteType:Vector2D [Field]; => 
    - CubicBezier2D_158:ConcreteType.B(self: ConcreteType:CubicBezier2D): ConcreteType:Vector2D [Field]; => 
    - Lissajous_176:ConcreteType.B(self: ConcreteType:Lissajous): ConcreteType:Number [Field]; => 
    - Limacon_182:ConcreteType.B(self: ConcreteType:Limacon): ConcreteType:Number [Field]; => 
    - ArchimedeanSpiral_188:ConcreteType.B(self: ConcreteType:ArchimedeanSpiral): ConcreteType:Number [Field]; => 
    - CubicBezier3D_206:ConcreteType.B(self: ConcreteType:CubicBezier3D): ConcreteType:Vector3D [Field]; => 
    - QuadraticBezier3D_208:ConcreteType.B(self: ConcreteType:QuadraticBezier3D): ConcreteType:Vector3D [Field]; => 
    - Triangle2D_376:ConcreteType.B(self: ConcreteType:Triangle2D): ConcreteType:Vector2D [Field]; => 
    - Quad2D_378:ConcreteType.B(self: ConcreteType:Quad2D): ConcreteType:Vector2D [Field]; => 
    - Line2D_380:ConcreteType.B(self: ConcreteType:Line2D): ConcreteType:Vector2D [Field]; => 
    - Lens_382:ConcreteType.B(self: ConcreteType:Lens): ConcreteType:Circle [Field]; => 
    - Line3D_404:ConcreteType.B(self: ConcreteType:Line3D): ConcreteType:Vector3D [Field]; => 
    - Triangle3D_408:ConcreteType.B(self: ConcreteType:Triangle3D): ConcreteType:Vector3D [Field]; => 
    - Quad3D_410:ConcreteType.B(self: ConcreteType:Quad3D): ConcreteType:Vector3D [Field]; => 
    _ARG_ 0: x => Line3D

297. Angle
  Type: (Ray3D, Ray3D) => Angle
  Sig: IGeometry_18:Library.Angle(a: Ray3D, b: Ray3D): Angle
  Body: Angle(Direction(a), Direction(b))
  # functions: 2 AMBIGUOUS
    - IGeometry_18:Library.Angle(a: ConcreteType:Ray3D,b: ConcreteType:Ray3D): ConcreteType:Angle [Library]; => Angle(Direction(a), Direction(b))
    - IGeometry_18:Library.Angle(a: Concept:IVector,b: Concept:IVector): ConcreteType:Angle [Library]; => Acos(Divide(Dot(a, b), Multiply(Magnitude(a), Magnitude(b))))
    _ARG_ 0: Direction(a) => Vector2D
    _ARG_ 1: Direction(b) => Vector2D

303. Center
  Type: (Triangle2D) => Vector2D
  Sig: IGeometry_18:Library.Center(t: Triangle2D): Vector2D
  Body: Divide(Add(A(t), Add(B(t), C(t))), 3)
  # functions: 7 AMBIGUOUS
    - INumerical_4:Library.Divide(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Divide(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Divide(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9030:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Divide(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9196:Concept:IAny, ParameterDef=b$9198:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Divide(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Divide(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Divide(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Divide(Column1(m), s), Divide(Column2(m), s), Divide(Column3(m), s), Divide(Column4(m), s))
    - Transforms_26:Library.Divide(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Divide(Vector4D(q), scalar)
    _ARG_ 0: Add(A(t), Add(B(t), C(t))) => $822:constraint=INumberLike
    _ARG_ 1: 3 => Number

306. Normal
  Type: (Triangle3D) => Vector3D
  Sig: IGeometry_18:Library.Normal(t: Triangle3D): Vector3D
  Body: Normalize(Cross(Subtract(B(t), A(t)), Subtract(C(t), A(t))))
  # functions: 2 AMBIGUOUS
    - IGeometry_18:Library.Normalize(x: Concept:IVector): Concept:IVector [Library]; => (GreaterThan(MagnitudeSquared(x), 0)?Divide(x, Magnitude(x)):Zero(x))
    - Transforms_26:Library.Normalize(q: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Normalize(Vector4D(q))
    _ARG_ 0: Cross(Subtract(B(t), A(t)), Subtract(C(t), A(t))) => Number

307. Center
  Type: (Triangle3D) => Vector3D
  Sig: IGeometry_18:Library.Center(t: Triangle3D): Vector3D
  Body: Divide(Add(A(t), Add(B(t), C(t))), 3)
  # functions: 7 AMBIGUOUS
    - INumerical_4:Library.Divide(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Divide(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Divide(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9030:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Divide(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9196:Concept:IAny, ParameterDef=b$9198:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Divide(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Divide(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Divide(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Divide(Column1(m), s), Divide(Column2(m), s), Divide(Column3(m), s), Divide(Column4(m), s))
    - Transforms_26:Library.Divide(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Divide(Vector4D(q), scalar)
    _ARG_ 0: Add(A(t), Add(B(t), C(t))) => $822:constraint=INumberLike
    _ARG_ 1: 3 => Number

315. Width
  Type: (Rect2D) => Number
  Sig: IGeometry_18:Library.Width(x: Rect2D): Number
  Body: X(Size(x))
  # functions: 4 AMBIGUOUS
    - Vector2D_528:ConcreteType.X(self: ConcreteType:Vector2D): ConcreteType:Number [Field]; => 
    - Vector3D_530:ConcreteType.X(self: ConcreteType:Vector3D): ConcreteType:Number [Field]; => 
    - Vector4D_532:ConcreteType.X(self: ConcreteType:Vector4D): ConcreteType:Number [Field]; => 
    - Quaternion_548:ConcreteType.X(self: ConcreteType:Quaternion): ConcreteType:Number [Field]; => 
    _ARG_ 0: Size(x) => $748:

316. Height
  Type: (Rect2D) => Number
  Sig: IGeometry_18:Library.Height(x: Rect2D): Number
  Body: Y(Size(x))
  # functions: 5 AMBIGUOUS
    - ColorYCbCr_106:ConcreteType.Y(self: ConcreteType:ColorYCbCr): ConcreteType:Unit [Field]; => 
    - Vector2D_528:ConcreteType.Y(self: ConcreteType:Vector2D): ConcreteType:Number [Field]; => 
    - Vector3D_530:ConcreteType.Y(self: ConcreteType:Vector3D): ConcreteType:Number [Field]; => 
    - Vector4D_532:ConcreteType.Y(self: ConcreteType:Vector4D): ConcreteType:Number [Field]; => 
    - Quaternion_548:ConcreteType.Y(self: ConcreteType:Quaternion): ConcreteType:Number [Field]; => 
    _ARG_ 0: Size(x) => $748:

317. Left
  Type: (Rect2D) => Number
  Sig: IGeometry_18:Library.Left(x: Rect2D): Number
  Body: Subtract(X(Center(x)), Half(Width(x)))
  # functions: 4 AMBIGUOUS
    - INumerical_4:Library.Subtract(x: Concept:INumerical,y: Concept:INumerical): Concept:INumerical [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9113:Concept:IAny, ParameterDef=b$9115:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Subtract(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Subtract(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Subtract(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Subtract(Vector4D(q1), Vector4D(q2))
    _ARG_ 0: X(Center(x)) => Number
    _ARG_ 1: Half(Width(x)) => $792:constraint=IScalarArithmetic

318. Right
  Type: (Rect2D) => Number
  Sig: IGeometry_18:Library.Right(x: Rect2D): Number
  Body: Add(Left(x), Width(x))
  # functions: 5 AMBIGUOUS
    - INumerical_4:Library.Add(x: Concept:INumberLike,y: ConcreteType:Number): Concept:INumberLike [Library]; => FromNumber(x, Add(ToNumber(x), y))
    - INumerical_4:Library.Add(x: Concept:INumerical,y: Concept:INumerical): Concept:INumerical [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9082:Concept:IAny, ParameterDef=b$9084:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Add(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Add(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Add(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Add(Vector4D(q1), Vector4D(q2))
    _ARG_ 0: Left(x) => Number
    _ARG_ 1: Width(x) => Number

319. Bottom
  Type: (Rect2D) => Number
  Sig: IGeometry_18:Library.Bottom(x: Rect2D): Number
  Body: Subtract(Y(Center(x)), Half(Height(x)))
  # functions: 4 AMBIGUOUS
    - INumerical_4:Library.Subtract(x: Concept:INumerical,y: Concept:INumerical): Concept:INumerical [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9113:Concept:IAny, ParameterDef=b$9115:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Subtract(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Subtract(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Subtract(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Subtract(Vector4D(q1), Vector4D(q2))
    _ARG_ 0: Y(Center(x)) => Unit
    _ARG_ 1: Half(Height(x)) => $792:constraint=IScalarArithmetic

320. Top
  Type: (Rect2D) => Number
  Sig: IGeometry_18:Library.Top(x: Rect2D): Number
  Body: Add(Bottom(x), Height(x))
  # functions: 5 AMBIGUOUS
    - INumerical_4:Library.Add(x: Concept:INumberLike,y: ConcreteType:Number): Concept:INumberLike [Library]; => FromNumber(x, Add(ToNumber(x), y))
    - INumerical_4:Library.Add(x: Concept:INumerical,y: Concept:INumerical): Concept:INumerical [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9082:Concept:IAny, ParameterDef=b$9084:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Add(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Add(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Add(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Add(Vector4D(q1), Vector4D(q2))
    _ARG_ 0: Bottom(x) => Number
    _ARG_ 1: Height(x) => Number

326. Points
  Type: (Rect2D) => $844:constraint=(IArray, Vector2D)
  Sig: IGeometry_18:Library.Points(x: Rect2D): $844:constraint=(IArray, Vector2D)
  Body: Quad2D(x)
  # functions: 2 AMBIGUOUS
    - IGeometry_18:Library.Quad2D(x: ConcreteType:Rect2D): ConcreteType:Quad2D [Library]; => Tuple4(BottomLeft(x), BottomRight(x), TopRight(x), TopLeft(x))
    - Quad2D_378:ConcreteType.Quad2D(arg: ConcreteType:Tuple4<ConcreteType:Vector2D,ConcreteType:Vector2D,ConcreteType:Vector2D,ConcreteType:Vector2D>): ConcreteType:Quad2D [Constructor]; => 
    _ARG_ 0: x => Rect2D

328. Center
  Type: (Quad2D) => Vector2D
  Sig: IGeometry_18:Library.Center(q: Quad2D): Vector2D
  Body: Divide(Add(A(q), Add(B(q), Add(C(q), D(q)))), 4)
  # functions: 7 AMBIGUOUS
    - INumerical_4:Library.Divide(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Divide(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Divide(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9030:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Divide(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9196:Concept:IAny, ParameterDef=b$9198:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Divide(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Divide(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Divide(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Divide(Column1(m), s), Divide(Column2(m), s), Divide(Column3(m), s), Divide(Column4(m), s))
    - Transforms_26:Library.Divide(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Divide(Vector4D(q), scalar)
    _ARG_ 0: Add(A(q), Add(B(q), Add(C(q), D(q)))) => $822:constraint=INumberLike
    _ARG_ 1: 4 => Number

336. Center
  Type: (Quad3D) => Vector3D
  Sig: IGeometry_18:Library.Center(q: Quad3D): Vector3D
  Body: Divide(Add(A(q), Add(B(q), Add(C(q), D(q)))), 4)
  # functions: 7 AMBIGUOUS
    - INumerical_4:Library.Divide(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Divide(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Divide(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9030:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Divide(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9196:Concept:IAny, ParameterDef=b$9198:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Divide(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Divide(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Divide(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Divide(Column1(m), s), Divide(Column2(m), s), Divide(Column3(m), s), Divide(Column4(m), s))
    - Transforms_26:Library.Divide(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Divide(Vector4D(q), scalar)
    _ARG_ 0: Add(A(q), Add(B(q), Add(C(q), D(q)))) => $822:constraint=INumberLike
    _ARG_ 1: 4 => Number

345. MidPoint
  Type: (Vector2D, Vector2D) => Vector2D
  Sig: IGeometry_18:Library.MidPoint(a: Vector2D, b: Vector2D): Vector2D
  Body: Divide(Add(a, b), 2)
  # functions: 7 AMBIGUOUS
    - INumerical_4:Library.Divide(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Divide(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Divide(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9030:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Divide(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9196:Concept:IAny, ParameterDef=b$9198:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Divide(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Divide(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Divide(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Divide(Column1(m), s), Divide(Column2(m), s), Divide(Column3(m), s), Divide(Column4(m), s))
    - Transforms_26:Library.Divide(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Divide(Vector4D(q), scalar)
    _ARG_ 0: Add(a, b) => $822:constraint=INumberLike
    _ARG_ 1: 2 => Number

349. Cross
  Type: (Vector2D, Vector2D) => Number
  Sig: IGeometry_18:Library.Cross(a: Vector2D, b: Vector2D): Number
  Body: Subtract(Multiply(X(a), Y(b)), Multiply(Y(a), X(b)))
  # functions: 4 AMBIGUOUS
    - INumerical_4:Library.Subtract(x: Concept:INumerical,y: Concept:INumerical): Concept:INumerical [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9113:Concept:IAny, ParameterDef=b$9115:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Subtract(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Subtract(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Subtract(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Subtract(Vector4D(q1), Vector4D(q2))
    _ARG_ 0: Multiply(X(a), Y(b)) => $787:constraint=INumberLike
    _ARG_ 1: Multiply(Y(a), X(b)) => $787:constraint=INumberLike

363. MidPoint
  Type: (Vector3D, Vector3D) => Vector3D
  Sig: IGeometry_18:Library.MidPoint(a: Vector3D, b: Vector3D): Vector3D
  Body: Divide(Add(a, b), 2)
  # functions: 7 AMBIGUOUS
    - INumerical_4:Library.Divide(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Divide(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Divide(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9030:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Divide(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9196:Concept:IAny, ParameterDef=b$9198:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Divide(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Divide(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Divide(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Divide(Column1(m), s), Divide(Column2(m), s), Divide(Column3(m), s), Divide(Column4(m), s))
    - Transforms_26:Library.Divide(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Divide(Vector4D(q), scalar)
    _ARG_ 0: Add(a, b) => $822:constraint=INumberLike
    _ARG_ 1: 2 => Number

367. Project
  Type: (Vector3D, Plane) => Vector3D
  Sig: IGeometry_18:Library.Project(v: Vector3D, p: Plane): Vector3D
  Body: Subtract(v, Multiply(Normal(p), Dot(Normal(p), v)))
  # functions: 4 AMBIGUOUS
    - INumerical_4:Library.Subtract(x: Concept:INumerical,y: Concept:INumerical): Concept:INumerical [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9113:Concept:IAny, ParameterDef=b$9115:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Subtract(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Subtract(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Subtract(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Subtract(Vector4D(q1), Vector4D(q2))
    _ARG_ 0: v => Vector3D
    _ARG_ 1: Multiply(Normal(p), Dot(Normal(p), v)) => $787:constraint=INumberLike

371. MixedProduct
  Type: (Vector3D, Vector3D, Vector3D) => Number
  Sig: IGeometry_18:Library.MixedProduct(a: Vector3D, b: Vector3D, c: Vector3D): Number
  Body: Dot(Cross(a, b), c)
  # functions: 2 AMBIGUOUS
    - IGeometry_18:Library.Dot(v1: Concept:IVector,v2: Concept:IVector): ConcreteType:Number [Library]; => Sum(Multiply(v1, v2))
    - Transforms_26:Library.Dot(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Number [Library]; => Dot(Vector4D(q1), Vector4D(q2))
    _ARG_ 0: Cross(a, b) => Number
    _ARG_ 1: c => Vector3D

381. Length
  Type: (IVector) => Number
  Sig: IGeometry_18:Library.Length(a: IVector): Number
  Body: Magnitude(a)
  # functions: 3 AMBIGUOUS
    - INumerical_4:Library.Magnitude(x: Concept:IReal): ConcreteType:Number [Library]; => Value(x)
    - IGeometry_18:Library.Magnitude(v: Concept:IVector): ConcreteType:Number [Library]; => SquareRoot(MagnitudeSquared(v))
    - Transforms_26:Library.Magnitude(q: ConcreteType:Quaternion): ConcreteType:Number [Library]; => Magnitude(Vector4D(q))
    _ARG_ 0: a => IVector

382. LengthSquared
  Type: (IVector) => Number
  Sig: IGeometry_18:Library.LengthSquared(a: IVector): Number
  Body: MagnitudeSquared(a)
  # functions: 2 AMBIGUOUS
    - IGeometry_18:Library.MagnitudeSquared(v: Concept:IVector): ConcreteType:Number [Library]; => SumSquares(v)
    - Transforms_26:Library.MagnitudeSquared(q: ConcreteType:Quaternion): ConcreteType:Number [Library]; => MagnitudeSquared(Vector4D(q))
    _ARG_ 0: a => IVector

388. Average
  Type: (IVector) => Number
  Sig: IGeometry_18:Library.Average(v: IVector): Number
  Body: Divide(Sum(v), Count(v))
  # functions: 7 AMBIGUOUS
    - INumerical_4:Library.Divide(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Divide(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Divide(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9030:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Divide(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9196:Concept:IAny, ParameterDef=b$9198:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Divide(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Divide(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Divide(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Divide(Column1(m), s), Divide(Column2(m), s), Divide(Column3(m), s), Divide(Column4(m), s))
    - Transforms_26:Library.Divide(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Divide(Vector4D(q), scalar)
    _ARG_ 0: Sum(v) => Number
    _ARG_ 1: Count(v) => Integer

390. Reflect
  Type: (IVector, IVector) => $846:constraint=IVector
  Sig: IGeometry_18:Library.Reflect(v: IVector, normal: IVector): $846:constraint=IVector
  Body: Subtract(v, Multiply(normal, Multiply(Dot(v, normal), 2)))
  # functions: 4 AMBIGUOUS
    - INumerical_4:Library.Subtract(x: Concept:INumerical,y: Concept:INumerical): Concept:INumerical [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9113:Concept:IAny, ParameterDef=b$9115:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Subtract(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Subtract(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Subtract(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Subtract(Vector4D(q1), Vector4D(q2))
    _ARG_ 0: v => IVector
    _ARG_ 1: Multiply(normal, Multiply(Dot(v, normal), 2)) => $787:constraint=INumberLike

391. Project
  Type: (IVector, IVector) => $847:constraint=IVector
  Sig: IGeometry_18:Library.Project(v: IVector, other: IVector): $847:constraint=IVector
  Body: Multiply(other, Dot(v, other))
  # functions: 10 AMBIGUOUS
    - INumerical_4:Library.Multiply(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Multiply(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Multiply(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9005:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Multiply(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9165:Concept:IAny, ParameterDef=b$9167:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Tuple3(Add(Multiply(X(v), M11(m)), Add(Multiply(Y(v), M21(m)), Add(Multiply(Z(v), M31(m)), M41(m)))), Add(Multiply(X(v), M12(m)), Add(Multiply(Y(v), M22(m)), Add(Multiply(Z(v), M32(m)), M42(m)))), Add(Multiply(X(v), M13(m)), Add(Multiply(Y(v), M23(m)), Add(Multiply(Z(v), M33(m)), M43(m)))))
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Multiply(Column1(m), s), Multiply(Column2(m), s), Multiply(Column3(m), s), Multiply(Column4(m), s))
    - Transforms_26:Library.Multiply(a: ConcreteType:Matrix4x4,b: ConcreteType:Matrix4x4): ConcreteType:Matrix4x4 [Library]; => CreateFromRows(Matrix4x4, Tuple4(Add(Multiply(M11(a), M11(b)), Add(Multiply(M12(a), M21(b)), Add(Multiply(M13(a), M31(b)), Multiply(M14(a), M41(b))))), Add(Multiply(M11(a), M12(b)), Add(Multiply(M12(a), M22(b)), Add(Multiply(M13(a), M32(b)), Multiply(M14(a), M42(b))))), Add(Multiply(M11(a), M13(b)), Add(Multiply(M12(a), M23(b)), Add(Multiply(M13(a), M33(b)), Multiply(M14(a), M43(b))))), Add(Multiply(M11(a), M14(b)), Add(Multiply(M12(a), M24(b)), Add(Multiply(M13(a), M34(b)), Multiply(M14(a), M44(b)))))), Tuple4(Add(Multiply(M21(a), M11(b)), Add(Multiply(M22(a), M21(b)), Add(Multiply(M23(a), M31(b)), Multiply(M24(a), M41(b))))), Add(Multiply(M21(a), M12(b)), Add(Multiply(M22(a), M22(b)), Add(Multiply(M23(a), M32(b)), Multiply(M24(a), M42(b))))), Add(Multiply(M21(a), M13(b)), Add(Multiply(M22(a), M23(b)), Add(Multiply(M23(a), M33(b)), Multiply(M24(a), M43(b))))), Add(Multiply(M21(a), M14(b)), Add(Multiply(M22(a), M24(b)), Add(Multiply(M23(a), M34(b)), Multiply(M24(a), M44(b)))))), Tuple4(Add(Multiply(M31(a), M11(b)), Add(Multiply(M32(a), M21(b)), Add(Multiply(M33(a), M31(b)), Multiply(M34(a), M41(b))))), Add(Multiply(M31(a), M12(b)), Add(Multiply(M32(a), M22(b)), Add(Multiply(M33(a), M32(b)), Multiply(M34(a), M42(b))))), Add(Multiply(M31(a), M13(b)), Add(Multiply(M32(a), M23(b)), Add(Multiply(M33(a), M33(b)), Multiply(M34(a), M43(b))))), Add(Multiply(M31(a), M14(b)), Add(Multiply(M32(a), M24(b)), Add(Multiply(M33(a), M34(b)), Multiply(M34(a), M44(b)))))), Tuple4(Add(Multiply(M41(a), M11(b)), Add(Multiply(M42(a), M21(b)), Add(Multiply(M43(a), M31(b)), Multiply(M44(a), M41(b))))), Add(Multiply(M41(a), M12(b)), Add(Multiply(M42(a), M22(b)), Add(Multiply(M43(a), M32(b)), Multiply(M44(a), M42(b))))), Add(Multiply(M41(a), M13(b)), Add(Multiply(M42(a), M23(b)), Add(Multiply(M43(a), M33(b)), Multiply(M44(a), M43(b))))), Add(Multiply(M41(a), M14(b)), Add(Multiply(M42(a), M24(b)), Add(Multiply(M43(a), M34(b)), Multiply(M44(a), M44(b)))))))
    - Transforms_26:Library.Multiply(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Multiply(Vector4D(q), scalar)
    - Transforms_26:Library.Multiply(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Plato.Compiler.Symbols.BlockStatement
    _ARG_ 0: other => IVector
    _ARG_ 1: Dot(v, other) => Number

392. Distance
  Type: (IVector, IVector) => Number
  Sig: IGeometry_18:Library.Distance(a: IVector, b: IVector): Number
  Body: Magnitude(Subtract(b, a))
  # functions: 3 AMBIGUOUS
    - INumerical_4:Library.Magnitude(x: Concept:IReal): ConcreteType:Number [Library]; => Value(x)
    - IGeometry_18:Library.Magnitude(v: Concept:IVector): ConcreteType:Number [Library]; => SquareRoot(MagnitudeSquared(v))
    - Transforms_26:Library.Magnitude(q: ConcreteType:Quaternion): ConcreteType:Number [Library]; => Magnitude(Vector4D(q))
    _ARG_ 0: Subtract(b, a) => $828:constraint=INumerical

393. DistanceSquared
  Type: (IVector, IVector) => Number
  Sig: IGeometry_18:Library.DistanceSquared(a: IVector, b: IVector): Number
  Body: Magnitude(Subtract(b, a))
  # functions: 3 AMBIGUOUS
    - INumerical_4:Library.Magnitude(x: Concept:IReal): ConcreteType:Number [Library]; => Value(x)
    - IGeometry_18:Library.Magnitude(v: Concept:IVector): ConcreteType:Number [Library]; => SquareRoot(MagnitudeSquared(v))
    - Transforms_26:Library.Magnitude(q: ConcreteType:Quaternion): ConcreteType:Number [Library]; => Magnitude(Vector4D(q))
    _ARG_ 0: Subtract(b, a) => $828:constraint=INumerical

402. CirclePoints
  Type: (Integer) => $849:constraint=(IArray, Vector2D)
  Sig: IGeometry_18:Library.CirclePoints(n: Integer): $849:constraint=(IArray, Vector2D)
  Body: Map(Fractions(n), (\(ParameterDef=x$14425:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
  # functions: 2 AMBIGUOUS
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray<TypeVariable:$T2> [Library]; => MapRange(Count(xs), (\(ParameterDef=i$6222:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray2D<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray2D<TypeVariable:$T2> [Library]; => MakeArray2D(NumColumns(xs), NumRows(xs), (\(ParameterDef=a$6857:Concept:IAny, ParameterDef=b$6859:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    _ARG_ 0: Fractions(n) => $785:constraint=(IArray, Number)
    _ARG_ 1: (\(ParameterDef=x$14425:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1> => (Function1, $1204:, $1205:)

408. Faces
  Type: (ITriangleMesh2D) => $851:constraint=(IArray, Triangle2D)
  Sig: IGeometry_18:Library.Faces(g: ITriangleMesh2D): $851:constraint=(IArray, Triangle2D)
  Body: Triangles(g)
  # functions: 12 AMBIGUOUS
    - IGeometry_18:Library.Triangles(x: Concept:ITriangleMesh2D): Concept:IArray<ConcreteType:Triangle2D> [Library]; => Map(AllFaceVertices(x), (\(ParameterDef=xs$14925:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - IGeometry_18:Library.Triangles(x: Concept:ITriangleMesh3D): Concept:IArray<ConcreteType:Triangle3D> [Library]; => Map(AllFaceVertices(x), (\(ParameterDef=xs$14971:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - IGeometry_18:Library.Triangles(q: ConcreteType:Quad2D): Concept:IArray<ConcreteType:Triangle2D> [Library]; => [New(Triangle2D, A(q), B(q), C(q)), New(Triangle2D, C(q), D(q), A(q))]
    - IGeometry_18:Library.Triangles(q: ConcreteType:Quad3D): Concept:IArray<ConcreteType:Triangle3D> [Library]; => [New(Triangle3D, A(q), B(q), C(q)), New(Triangle3D, C(q), D(q), A(q))]
    - IGeometry_18:Library.Triangles(xs: Concept:IArray<ConcreteType:Triangle2D>): Concept:IArray<ConcreteType:Triangle2D> [Library]; => xs
    - IGeometry_18:Library.Triangles(xs: Concept:IArray<ConcreteType:Triangle3D>): Concept:IArray<ConcreteType:Triangle3D> [Library]; => xs
    - IGeometry_18:Library.Triangles(xs: Concept:IArray<ConcreteType:Quad2D>): Concept:IArray<ConcreteType:Triangle2D> [Library]; => FlatMap(xs, (\(ParameterDef=x$17615:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - IGeometry_18:Library.Triangles(xs: Concept:IArray<ConcreteType:Quad3D>): Concept:IArray<ConcreteType:Triangle3D> [Library]; => FlatMap(xs, (\(ParameterDef=x$17637:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - IGeometry_18:Library.Triangles(xs: Concept:IQuadArray2D): Concept:IArray<ConcreteType:Triangle2D> [Library]; => FlatMap(Quads(xs), (\(ParameterDef=x$17901:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - IGeometry_18:Library.Triangles(xs: Concept:IQuadArray3D): Concept:IArray<ConcreteType:Triangle3D> [Library]; => FlatMap(Quads(xs), (\(ParameterDef=x$17925:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - TriangleArray2D_430:ConcreteType.Triangles(self: ConcreteType:TriangleArray2D): Concept:IArray<ConcreteType:Triangle2D> [Field]; => 
    - TriangleArray3D_432:ConcreteType.Triangles(self: ConcreteType:TriangleArray3D): Concept:IArray<ConcreteType:Triangle3D> [Field]; => 
    _ARG_ 0: g => ITriangleMesh2D

409. Faces
  Type: (ITriangleMesh3D) => $852:constraint=(IArray, Triangle3D)
  Sig: IGeometry_18:Library.Faces(g: ITriangleMesh3D): $852:constraint=(IArray, Triangle3D)
  Body: Triangles(g)
  # functions: 12 AMBIGUOUS
    - IGeometry_18:Library.Triangles(x: Concept:ITriangleMesh2D): Concept:IArray<ConcreteType:Triangle2D> [Library]; => Map(AllFaceVertices(x), (\(ParameterDef=xs$14925:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - IGeometry_18:Library.Triangles(x: Concept:ITriangleMesh3D): Concept:IArray<ConcreteType:Triangle3D> [Library]; => Map(AllFaceVertices(x), (\(ParameterDef=xs$14971:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - IGeometry_18:Library.Triangles(q: ConcreteType:Quad2D): Concept:IArray<ConcreteType:Triangle2D> [Library]; => [New(Triangle2D, A(q), B(q), C(q)), New(Triangle2D, C(q), D(q), A(q))]
    - IGeometry_18:Library.Triangles(q: ConcreteType:Quad3D): Concept:IArray<ConcreteType:Triangle3D> [Library]; => [New(Triangle3D, A(q), B(q), C(q)), New(Triangle3D, C(q), D(q), A(q))]
    - IGeometry_18:Library.Triangles(xs: Concept:IArray<ConcreteType:Triangle2D>): Concept:IArray<ConcreteType:Triangle2D> [Library]; => xs
    - IGeometry_18:Library.Triangles(xs: Concept:IArray<ConcreteType:Triangle3D>): Concept:IArray<ConcreteType:Triangle3D> [Library]; => xs
    - IGeometry_18:Library.Triangles(xs: Concept:IArray<ConcreteType:Quad2D>): Concept:IArray<ConcreteType:Triangle2D> [Library]; => FlatMap(xs, (\(ParameterDef=x$17615:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - IGeometry_18:Library.Triangles(xs: Concept:IArray<ConcreteType:Quad3D>): Concept:IArray<ConcreteType:Triangle3D> [Library]; => FlatMap(xs, (\(ParameterDef=x$17637:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - IGeometry_18:Library.Triangles(xs: Concept:IQuadArray2D): Concept:IArray<ConcreteType:Triangle2D> [Library]; => FlatMap(Quads(xs), (\(ParameterDef=x$17901:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - IGeometry_18:Library.Triangles(xs: Concept:IQuadArray3D): Concept:IArray<ConcreteType:Triangle3D> [Library]; => FlatMap(Quads(xs), (\(ParameterDef=x$17925:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - TriangleArray2D_430:ConcreteType.Triangles(self: ConcreteType:TriangleArray2D): Concept:IArray<ConcreteType:Triangle2D> [Field]; => 
    - TriangleArray3D_432:ConcreteType.Triangles(self: ConcreteType:TriangleArray3D): Concept:IArray<ConcreteType:Triangle3D> [Field]; => 
    _ARG_ 0: g => ITriangleMesh3D

410. Faces
  Type: (IQuadMesh2D) => $853:constraint=(IArray, Quad2D)
  Sig: IGeometry_18:Library.Faces(g: IQuadMesh2D): $853:constraint=(IArray, Quad2D)
  Body: Quads(g)
  # functions: 4 AMBIGUOUS
    - IGeometry_18:Library.Quads(x: Concept:IQuadMesh2D): Concept:IArray<ConcreteType:Quad2D> [Library]; => Map(AllFaceVertices(x), (\(ParameterDef=xs$15017:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - IGeometry_18:Library.Quads(x: Concept:IQuadMesh3D): Concept:IArray<ConcreteType:Quad3D> [Library]; => Map(AllFaceVertices(x), (\(ParameterDef=xs$15070:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - QuadArray2D_434:ConcreteType.Quads(self: ConcreteType:QuadArray2D): Concept:IArray<ConcreteType:Quad2D> [Field]; => 
    - QuadArray3D_436:ConcreteType.Quads(self: ConcreteType:QuadArray3D): Concept:IArray<ConcreteType:Quad3D> [Field]; => 
    _ARG_ 0: g => IQuadMesh2D

411. Faces
  Type: (IQuadMesh3D) => $854:constraint=(IArray, Quad3D)
  Sig: IGeometry_18:Library.Faces(g: IQuadMesh3D): $854:constraint=(IArray, Quad3D)
  Body: Quads(g)
  # functions: 4 AMBIGUOUS
    - IGeometry_18:Library.Quads(x: Concept:IQuadMesh2D): Concept:IArray<ConcreteType:Quad2D> [Library]; => Map(AllFaceVertices(x), (\(ParameterDef=xs$15017:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - IGeometry_18:Library.Quads(x: Concept:IQuadMesh3D): Concept:IArray<ConcreteType:Quad3D> [Library]; => Map(AllFaceVertices(x), (\(ParameterDef=xs$15070:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - QuadArray2D_434:ConcreteType.Quads(self: ConcreteType:QuadArray2D): Concept:IArray<ConcreteType:Quad2D> [Field]; => 
    - QuadArray3D_436:ConcreteType.Quads(self: ConcreteType:QuadArray3D): Concept:IArray<ConcreteType:Quad3D> [Field]; => 
    _ARG_ 0: g => IQuadMesh3D

414. FaceVertices
  Type: (IIndexedGeometry2D, Integer) => $856:constraint=(IArray, Vector2D)
  Sig: IGeometry_18:Library.FaceVertices(g: IIndexedGeometry2D, f: Integer): $856:constraint=(IArray, Vector2D)
  Body: Map(FaceIndices(g, f), (\(ParameterDef=i$14588:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
  # functions: 2 AMBIGUOUS
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray<TypeVariable:$T2> [Library]; => MapRange(Count(xs), (\(ParameterDef=i$6222:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray2D<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray2D<TypeVariable:$T2> [Library]; => MakeArray2D(NumColumns(xs), NumRows(xs), (\(ParameterDef=a$6857:Concept:IAny, ParameterDef=b$6859:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    _ARG_ 0: FaceIndices(g, f) => $855:constraint=(IArray, Integer)
    _ARG_ 1: (\(ParameterDef=i$14588:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1> => (Function1, $1546:, $1547:)

415. FaceVertices
  Type: (IIndexedGeometry3D, Integer) => $857:constraint=(IArray, Vector3D)
  Sig: IGeometry_18:Library.FaceVertices(g: IIndexedGeometry3D, f: Integer): $857:constraint=(IArray, Vector3D)
  Body: Map(FaceIndices(g, f), (\(ParameterDef=i$14618:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
  # functions: 2 AMBIGUOUS
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray<TypeVariable:$T2> [Library]; => MapRange(Count(xs), (\(ParameterDef=i$6222:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray2D<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray2D<TypeVariable:$T2> [Library]; => MakeArray2D(NumColumns(xs), NumRows(xs), (\(ParameterDef=a$6857:Concept:IAny, ParameterDef=b$6859:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    _ARG_ 0: FaceIndices(g, f) => $855:constraint=(IArray, Integer)
    _ARG_ 1: (\(ParameterDef=i$14618:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1> => (Function1, $1548:, $1549:)

417. Vertex
  Type: (IIndexedGeometry2D, Integer) => Vector2D
  Sig: IGeometry_18:Library.Vertex(g: IIndexedGeometry2D, n: Integer): Vector2D
  Body: At(Points(g), At(Indices(g), n))
  # functions: 9 AMBIGUOUS
    - ArrayLibrary_0:Library.At(xs: Concept:IArray2D<TypeVariable:$T>,i: ConcreteType:Integer): TypeVariable:$T [Library]; => At(xs, Modulo(i, NumColumns(xs)), Divide(i, NumColumns(xs)))
    - ArrayLibrary_0:Library.At(xs: Concept:IArray3D<TypeVariable:$T>,i: ConcreteType:Integer): TypeVariable:$T [Library]; => At(xs, Modulo(i, NumColumns(xs)), Divide(i, NumColumns(xs)), Divide(i, NumLayers(xs)))
    - IGeometry_18:Library.At(c: ConcreteType:Complex,n: ConcreteType:Integer): ConcreteType:Number [Library]; => (Equals(n, 0)?IReal(c):Imaginary(c))
    - IGeometry_18:Library.At(v: ConcreteType:Vector2D,n: ConcreteType:Integer): ConcreteType:Number [Library]; => (Equals(n, 0)?X(v):Y(v))
    - IGeometry_18:Library.At(v: ConcreteType:Vector3D,n: ConcreteType:Integer): ConcreteType:Number [Library]; => (Equals(n, 0)?X(v):(Equals(n, 1)?Y(v):Z(v)))
    - IGeometry_18:Library.At(v: ConcreteType:Vector4D,n: ConcreteType:Integer): ConcreteType:Number [Library]; => (Equals(n, 0)?X(v):(Equals(n, 1)?Y(v):(Equals(n, 2)?Z(v):W(v))))
    - IGeometry_18:Library.At(x: ConcreteType:RegularPolygon,n: ConcreteType:Integer): ConcreteType:Vector2D [Library]; => UnitCircle(Turns(Divide(Number(n), NumPoints(x))))
    - Intrinsics_22:Library.At(x: ConcreteType:String,y: ConcreteType:Integer): ConcreteType:Character [Intrinsic]; => 
    - Intrinsics_22:Library.At(xs: ConcreteType:Array<TypeVariable:$T>,n: ConcreteType:Integer): TypeVariable:$T [Intrinsic]; => 
    _ARG_ 0: Points(g) => $844:constraint=(IArray, Vector2D)
    _ARG_ 1: At(Indices(g), n) => $618:

418. Vertex
  Type: (IIndexedGeometry3D, Integer) => Vector3D
  Sig: IGeometry_18:Library.Vertex(g: IIndexedGeometry3D, n: Integer): Vector3D
  Body: At(Points(g), At(Indices(g), n))
  # functions: 9 AMBIGUOUS
    - ArrayLibrary_0:Library.At(xs: Concept:IArray2D<TypeVariable:$T>,i: ConcreteType:Integer): TypeVariable:$T [Library]; => At(xs, Modulo(i, NumColumns(xs)), Divide(i, NumColumns(xs)))
    - ArrayLibrary_0:Library.At(xs: Concept:IArray3D<TypeVariable:$T>,i: ConcreteType:Integer): TypeVariable:$T [Library]; => At(xs, Modulo(i, NumColumns(xs)), Divide(i, NumColumns(xs)), Divide(i, NumLayers(xs)))
    - IGeometry_18:Library.At(c: ConcreteType:Complex,n: ConcreteType:Integer): ConcreteType:Number [Library]; => (Equals(n, 0)?IReal(c):Imaginary(c))
    - IGeometry_18:Library.At(v: ConcreteType:Vector2D,n: ConcreteType:Integer): ConcreteType:Number [Library]; => (Equals(n, 0)?X(v):Y(v))
    - IGeometry_18:Library.At(v: ConcreteType:Vector3D,n: ConcreteType:Integer): ConcreteType:Number [Library]; => (Equals(n, 0)?X(v):(Equals(n, 1)?Y(v):Z(v)))
    - IGeometry_18:Library.At(v: ConcreteType:Vector4D,n: ConcreteType:Integer): ConcreteType:Number [Library]; => (Equals(n, 0)?X(v):(Equals(n, 1)?Y(v):(Equals(n, 2)?Z(v):W(v))))
    - IGeometry_18:Library.At(x: ConcreteType:RegularPolygon,n: ConcreteType:Integer): ConcreteType:Vector2D [Library]; => UnitCircle(Turns(Divide(Number(n), NumPoints(x))))
    - Intrinsics_22:Library.At(x: ConcreteType:String,y: ConcreteType:Integer): ConcreteType:Character [Intrinsic]; => 
    - Intrinsics_22:Library.At(xs: ConcreteType:Array<TypeVariable:$T>,n: ConcreteType:Integer): TypeVariable:$T [Intrinsic]; => 
    _ARG_ 0: Points(g) => $844:constraint=(IArray, Vector2D)
    _ARG_ 1: At(Indices(g), n) => $618:

419. Vertices
  Type: (IIndexedGeometry2D, (IArray, Integer)) => $859:constraint=(IArray, Vector2D)
  Sig: IGeometry_18:Library.Vertices(g: IIndexedGeometry2D, xs: (IArray, Integer)): $859:constraint=(IArray, Vector2D)
  Body: Map(xs, (\(ParameterDef=i$14703:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
  # functions: 2 AMBIGUOUS
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray<TypeVariable:$T2> [Library]; => MapRange(Count(xs), (\(ParameterDef=i$6222:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray2D<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray2D<TypeVariable:$T2> [Library]; => MakeArray2D(NumColumns(xs), NumRows(xs), (\(ParameterDef=a$6857:Concept:IAny, ParameterDef=b$6859:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    _ARG_ 0: xs => (IArray, Integer)
    _ARG_ 1: (\(ParameterDef=i$14703:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1> => (Function1, $1550:, $1551:)

420. Vertices
  Type: (IIndexedGeometry3D, (IArray, Integer)) => $860:constraint=(IArray, Vector3D)
  Sig: IGeometry_18:Library.Vertices(g: IIndexedGeometry3D, xs: (IArray, Integer)): $860:constraint=(IArray, Vector3D)
  Body: Map(xs, (\(ParameterDef=i$14729:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
  # functions: 2 AMBIGUOUS
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray<TypeVariable:$T2> [Library]; => MapRange(Count(xs), (\(ParameterDef=i$6222:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray2D<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray2D<TypeVariable:$T2> [Library]; => MakeArray2D(NumColumns(xs), NumRows(xs), (\(ParameterDef=a$6857:Concept:IAny, ParameterDef=b$6859:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    _ARG_ 0: xs => (IArray, Integer)
    _ARG_ 1: (\(ParameterDef=i$14729:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1> => (Function1, $1552:, $1553:)

421. AllFaceVertices
  Type: (IIndexedGeometry2D) => $861:constraint=(IArray, (IArray, Vector2D))
  Sig: IGeometry_18:Library.AllFaceVertices(g: IIndexedGeometry2D): $861:constraint=(IArray, (IArray, Vector2D))
  Body: Map(Slices(Indices(g), PrimitiveSize(g)), (\(ParameterDef=xs$14763:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
  # functions: 2 AMBIGUOUS
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray<TypeVariable:$T2> [Library]; => MapRange(Count(xs), (\(ParameterDef=i$6222:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray2D<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray2D<TypeVariable:$T2> [Library]; => MakeArray2D(NumColumns(xs), NumRows(xs), (\(ParameterDef=a$6857:Concept:IAny, ParameterDef=b$6859:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    _ARG_ 0: Slices(Indices(g), PrimitiveSize(g)) => $633:constraint=(IArray, (IArray, $632:))
    _ARG_ 1: (\(ParameterDef=xs$14763:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1> => (Function1, $1284:, $1285:)

422. AllFaceVertices
  Type: (IIndexedGeometry3D) => $862:constraint=(IArray, (IArray, Vector3D))
  Sig: IGeometry_18:Library.AllFaceVertices(g: IIndexedGeometry3D): $862:constraint=(IArray, (IArray, Vector3D))
  Body: Map(Slices(Indices(g), PrimitiveSize(g)), (\(ParameterDef=xs$14797:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
  # functions: 2 AMBIGUOUS
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray<TypeVariable:$T2> [Library]; => MapRange(Count(xs), (\(ParameterDef=i$6222:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray2D<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray2D<TypeVariable:$T2> [Library]; => MakeArray2D(NumColumns(xs), NumRows(xs), (\(ParameterDef=a$6857:Concept:IAny, ParameterDef=b$6859:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    _ARG_ 0: Slices(Indices(g), PrimitiveSize(g)) => $633:constraint=(IArray, (IArray, $632:))
    _ARG_ 1: (\(ParameterDef=xs$14797:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1> => (Function1, $1252:, $1253:)

423. AllVertices
  Type: (IIndexedGeometry2D) => $863:constraint=(IArray, Vector2D)
  Sig: IGeometry_18:Library.AllVertices(g: IIndexedGeometry2D): $863:constraint=(IArray, Vector2D)
  Body: Vertices(g, Indices(g))
  # functions: 2 AMBIGUOUS
    - IGeometry_18:Library.Vertices(g: Concept:IIndexedGeometry2D,xs: Concept:IArray<ConcreteType:Integer>): Concept:IArray<ConcreteType:Vector2D> [Library]; => Map(xs, (\(ParameterDef=i$14703:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - IGeometry_18:Library.Vertices(g: Concept:IIndexedGeometry3D,xs: Concept:IArray<ConcreteType:Integer>): Concept:IArray<ConcreteType:Vector3D> [Library]; => Map(xs, (\(ParameterDef=i$14729:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    _ARG_ 0: g => IIndexedGeometry2D
    _ARG_ 1: Indices(g) => $614:constraint=(IArray, Integer)

424. AllVertices
  Type: (IIndexedGeometry3D) => $864:constraint=(IArray, Vector3D)
  Sig: IGeometry_18:Library.AllVertices(g: IIndexedGeometry3D): $864:constraint=(IArray, Vector3D)
  Body: Vertices(g, Indices(g))
  # functions: 2 AMBIGUOUS
    - IGeometry_18:Library.Vertices(g: Concept:IIndexedGeometry2D,xs: Concept:IArray<ConcreteType:Integer>): Concept:IArray<ConcreteType:Vector2D> [Library]; => Map(xs, (\(ParameterDef=i$14703:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - IGeometry_18:Library.Vertices(g: Concept:IIndexedGeometry3D,xs: Concept:IArray<ConcreteType:Integer>): Concept:IArray<ConcreteType:Vector3D> [Library]; => Map(xs, (\(ParameterDef=i$14729:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    _ARG_ 0: g => IIndexedGeometry3D
    _ARG_ 1: Indices(g) => $614:constraint=(IArray, Integer)

425. Lines
  Type: (ILineMesh2D) => $865:constraint=(IArray, Line2D)
  Sig: IGeometry_18:Library.Lines(x: ILineMesh2D): $865:constraint=(IArray, Line2D)
  Body: Map(AllFaceVertices(x), (\(ParameterDef=xs$14847:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
  # functions: 2 AMBIGUOUS
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray<TypeVariable:$T2> [Library]; => MapRange(Count(xs), (\(ParameterDef=i$6222:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray2D<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray2D<TypeVariable:$T2> [Library]; => MakeArray2D(NumColumns(xs), NumRows(xs), (\(ParameterDef=a$6857:Concept:IAny, ParameterDef=b$6859:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    _ARG_ 0: AllFaceVertices(x) => $861:constraint=(IArray, (IArray, Vector2D))
    _ARG_ 1: (\(ParameterDef=xs$14847:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1> => (Function1, $1286:, $1287:)

426. Lines
  Type: (ILineMesh3D) => $866:constraint=(IArray, Line3D)
  Sig: IGeometry_18:Library.Lines(x: ILineMesh3D): $866:constraint=(IArray, Line3D)
  Body: Map(AllFaceVertices(x), (\(ParameterDef=xs$14886:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
  # functions: 2 AMBIGUOUS
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray<TypeVariable:$T2> [Library]; => MapRange(Count(xs), (\(ParameterDef=i$6222:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray2D<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray2D<TypeVariable:$T2> [Library]; => MakeArray2D(NumColumns(xs), NumRows(xs), (\(ParameterDef=a$6857:Concept:IAny, ParameterDef=b$6859:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    _ARG_ 0: AllFaceVertices(x) => $861:constraint=(IArray, (IArray, Vector2D))
    _ARG_ 1: (\(ParameterDef=xs$14886:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1> => (Function1, $1254:, $1255:)

427. Triangles
  Type: (ITriangleMesh2D) => $867:constraint=(IArray, Triangle2D)
  Sig: IGeometry_18:Library.Triangles(x: ITriangleMesh2D): $867:constraint=(IArray, Triangle2D)
  Body: Map(AllFaceVertices(x), (\(ParameterDef=xs$14925:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
  # functions: 2 AMBIGUOUS
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray<TypeVariable:$T2> [Library]; => MapRange(Count(xs), (\(ParameterDef=i$6222:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray2D<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray2D<TypeVariable:$T2> [Library]; => MakeArray2D(NumColumns(xs), NumRows(xs), (\(ParameterDef=a$6857:Concept:IAny, ParameterDef=b$6859:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    _ARG_ 0: AllFaceVertices(x) => $861:constraint=(IArray, (IArray, Vector2D))
    _ARG_ 1: (\(ParameterDef=xs$14925:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1> => (Function1, $1224:, $1225:)

428. Triangles
  Type: (ITriangleMesh3D) => $868:constraint=(IArray, Triangle3D)
  Sig: IGeometry_18:Library.Triangles(x: ITriangleMesh3D): $868:constraint=(IArray, Triangle3D)
  Body: Map(AllFaceVertices(x), (\(ParameterDef=xs$14971:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
  # functions: 2 AMBIGUOUS
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray<TypeVariable:$T2> [Library]; => MapRange(Count(xs), (\(ParameterDef=i$6222:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray2D<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray2D<TypeVariable:$T2> [Library]; => MakeArray2D(NumColumns(xs), NumRows(xs), (\(ParameterDef=a$6857:Concept:IAny, ParameterDef=b$6859:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    _ARG_ 0: AllFaceVertices(x) => $861:constraint=(IArray, (IArray, Vector2D))
    _ARG_ 1: (\(ParameterDef=xs$14971:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1> => (Function1, $1226:, $1227:)

429. Quads
  Type: (IQuadMesh2D) => $869:constraint=(IArray, Quad2D)
  Sig: IGeometry_18:Library.Quads(x: IQuadMesh2D): $869:constraint=(IArray, Quad2D)
  Body: Map(AllFaceVertices(x), (\(ParameterDef=xs$15017:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
  # functions: 2 AMBIGUOUS
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray<TypeVariable:$T2> [Library]; => MapRange(Count(xs), (\(ParameterDef=i$6222:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray2D<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray2D<TypeVariable:$T2> [Library]; => MakeArray2D(NumColumns(xs), NumRows(xs), (\(ParameterDef=a$6857:Concept:IAny, ParameterDef=b$6859:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    _ARG_ 0: AllFaceVertices(x) => $861:constraint=(IArray, (IArray, Vector2D))
    _ARG_ 1: (\(ParameterDef=xs$15017:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1> => (Function1, $1234:, $1235:)

430. Quads
  Type: (IQuadMesh3D) => $870:constraint=(IArray, Quad3D)
  Sig: IGeometry_18:Library.Quads(x: IQuadMesh3D): $870:constraint=(IArray, Quad3D)
  Body: Map(AllFaceVertices(x), (\(ParameterDef=xs$15070:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
  # functions: 2 AMBIGUOUS
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray<TypeVariable:$T2> [Library]; => MapRange(Count(xs), (\(ParameterDef=i$6222:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray2D<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray2D<TypeVariable:$T2> [Library]; => MakeArray2D(NumColumns(xs), NumRows(xs), (\(ParameterDef=a$6857:Concept:IAny, ParameterDef=b$6859:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    _ARG_ 0: AllFaceVertices(x) => $861:constraint=(IArray, (IArray, Vector2D))
    _ARG_ 1: (\(ParameterDef=xs$15070:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1> => (Function1, $1236:, $1237:)

431. NumPrimitives
  Type: (IIndexedGeometry) => Integer
  Sig: IGeometry_18:Library.NumPrimitives(g: IIndexedGeometry): Integer
  Body: Divide(Count(Indices(g)), PrimitiveSize(g))
  # functions: 7 AMBIGUOUS
    - INumerical_4:Library.Divide(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Divide(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Divide(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9030:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Divide(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9196:Concept:IAny, ParameterDef=b$9198:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Divide(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Divide(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Divide(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Divide(Column1(m), s), Divide(Column2(m), s), Divide(Column3(m), s), Divide(Column4(m), s))
    - Transforms_26:Library.Divide(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Divide(Vector4D(q), scalar)
    _ARG_ 0: Count(Indices(g)) => Integer
    _ARG_ 1: PrimitiveSize(g) => Integer

436. Indices
  Type: (IPointArray2D) => $871:constraint=(IArray, Integer)
  Sig: IGeometry_18:Library.Indices(x: IPointArray2D): $871:constraint=(IArray, Integer)
  Body: Indices(Points(x))
  # functions: 13 AMBIGUOUS
    - ArrayLibrary_0:Library.Indices(xs: Concept:IArray<TypeVariable:$T>): Concept:IArray<ConcreteType:Integer> [Library]; => Range(Count(xs))
    - IGeometry_18:Library.Indices(x: Concept:IPointArray2D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:IPointArray3D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:ILineArray2D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:ILineArray3D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:ITriangleArray2D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:ITriangleArray3D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:IQuadArray2D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:IQuadArray3D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: ConcreteType:QuadGrid3D): Concept:IArray<ConcreteType:Integer> [Library]; => FlatMap(AllQuadFaceIndices(PointGrid(x), ClosedX(x), ClosedY(x)), (\(ParameterDef=x$16763:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - LineMesh3D_412:ConcreteType.Indices(self: ConcreteType:LineMesh3D): Concept:IArray<ConcreteType:Integer> [Field]; => 
    - TriangleMesh3D_414:ConcreteType.Indices(self: ConcreteType:TriangleMesh3D): Concept:IArray<ConcreteType:Integer> [Field]; => 
    - QuadMesh3D_416:ConcreteType.Indices(self: ConcreteType:QuadMesh3D): Concept:IArray<ConcreteType:Integer> [Field]; => 
    _ARG_ 0: Points(x) => $844:constraint=(IArray, Vector2D)

437. Indices
  Type: (IPointArray3D) => $872:constraint=(IArray, Integer)
  Sig: IGeometry_18:Library.Indices(x: IPointArray3D): $872:constraint=(IArray, Integer)
  Body: Indices(Points(x))
  # functions: 13 AMBIGUOUS
    - ArrayLibrary_0:Library.Indices(xs: Concept:IArray<TypeVariable:$T>): Concept:IArray<ConcreteType:Integer> [Library]; => Range(Count(xs))
    - IGeometry_18:Library.Indices(x: Concept:IPointArray2D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:IPointArray3D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:ILineArray2D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:ILineArray3D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:ITriangleArray2D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:ITriangleArray3D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:IQuadArray2D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:IQuadArray3D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: ConcreteType:QuadGrid3D): Concept:IArray<ConcreteType:Integer> [Library]; => FlatMap(AllQuadFaceIndices(PointGrid(x), ClosedX(x), ClosedY(x)), (\(ParameterDef=x$16763:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - LineMesh3D_412:ConcreteType.Indices(self: ConcreteType:LineMesh3D): Concept:IArray<ConcreteType:Integer> [Field]; => 
    - TriangleMesh3D_414:ConcreteType.Indices(self: ConcreteType:TriangleMesh3D): Concept:IArray<ConcreteType:Integer> [Field]; => 
    - QuadMesh3D_416:ConcreteType.Indices(self: ConcreteType:QuadMesh3D): Concept:IArray<ConcreteType:Integer> [Field]; => 
    _ARG_ 0: Points(x) => $844:constraint=(IArray, Vector2D)

438. Indices
  Type: (ILineArray2D) => $873:constraint=(IArray, Integer)
  Sig: IGeometry_18:Library.Indices(x: ILineArray2D): $873:constraint=(IArray, Integer)
  Body: Indices(Points(x))
  # functions: 13 AMBIGUOUS
    - ArrayLibrary_0:Library.Indices(xs: Concept:IArray<TypeVariable:$T>): Concept:IArray<ConcreteType:Integer> [Library]; => Range(Count(xs))
    - IGeometry_18:Library.Indices(x: Concept:IPointArray2D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:IPointArray3D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:ILineArray2D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:ILineArray3D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:ITriangleArray2D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:ITriangleArray3D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:IQuadArray2D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:IQuadArray3D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: ConcreteType:QuadGrid3D): Concept:IArray<ConcreteType:Integer> [Library]; => FlatMap(AllQuadFaceIndices(PointGrid(x), ClosedX(x), ClosedY(x)), (\(ParameterDef=x$16763:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - LineMesh3D_412:ConcreteType.Indices(self: ConcreteType:LineMesh3D): Concept:IArray<ConcreteType:Integer> [Field]; => 
    - TriangleMesh3D_414:ConcreteType.Indices(self: ConcreteType:TriangleMesh3D): Concept:IArray<ConcreteType:Integer> [Field]; => 
    - QuadMesh3D_416:ConcreteType.Indices(self: ConcreteType:QuadMesh3D): Concept:IArray<ConcreteType:Integer> [Field]; => 
    _ARG_ 0: Points(x) => $844:constraint=(IArray, Vector2D)

439. Indices
  Type: (ILineArray3D) => $874:constraint=(IArray, Integer)
  Sig: IGeometry_18:Library.Indices(x: ILineArray3D): $874:constraint=(IArray, Integer)
  Body: Indices(Points(x))
  # functions: 13 AMBIGUOUS
    - ArrayLibrary_0:Library.Indices(xs: Concept:IArray<TypeVariable:$T>): Concept:IArray<ConcreteType:Integer> [Library]; => Range(Count(xs))
    - IGeometry_18:Library.Indices(x: Concept:IPointArray2D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:IPointArray3D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:ILineArray2D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:ILineArray3D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:ITriangleArray2D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:ITriangleArray3D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:IQuadArray2D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:IQuadArray3D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: ConcreteType:QuadGrid3D): Concept:IArray<ConcreteType:Integer> [Library]; => FlatMap(AllQuadFaceIndices(PointGrid(x), ClosedX(x), ClosedY(x)), (\(ParameterDef=x$16763:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - LineMesh3D_412:ConcreteType.Indices(self: ConcreteType:LineMesh3D): Concept:IArray<ConcreteType:Integer> [Field]; => 
    - TriangleMesh3D_414:ConcreteType.Indices(self: ConcreteType:TriangleMesh3D): Concept:IArray<ConcreteType:Integer> [Field]; => 
    - QuadMesh3D_416:ConcreteType.Indices(self: ConcreteType:QuadMesh3D): Concept:IArray<ConcreteType:Integer> [Field]; => 
    _ARG_ 0: Points(x) => $844:constraint=(IArray, Vector2D)

440. Indices
  Type: (ITriangleArray2D) => $875:constraint=(IArray, Integer)
  Sig: IGeometry_18:Library.Indices(x: ITriangleArray2D): $875:constraint=(IArray, Integer)
  Body: Indices(Points(x))
  # functions: 13 AMBIGUOUS
    - ArrayLibrary_0:Library.Indices(xs: Concept:IArray<TypeVariable:$T>): Concept:IArray<ConcreteType:Integer> [Library]; => Range(Count(xs))
    - IGeometry_18:Library.Indices(x: Concept:IPointArray2D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:IPointArray3D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:ILineArray2D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:ILineArray3D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:ITriangleArray2D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:ITriangleArray3D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:IQuadArray2D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:IQuadArray3D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: ConcreteType:QuadGrid3D): Concept:IArray<ConcreteType:Integer> [Library]; => FlatMap(AllQuadFaceIndices(PointGrid(x), ClosedX(x), ClosedY(x)), (\(ParameterDef=x$16763:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - LineMesh3D_412:ConcreteType.Indices(self: ConcreteType:LineMesh3D): Concept:IArray<ConcreteType:Integer> [Field]; => 
    - TriangleMesh3D_414:ConcreteType.Indices(self: ConcreteType:TriangleMesh3D): Concept:IArray<ConcreteType:Integer> [Field]; => 
    - QuadMesh3D_416:ConcreteType.Indices(self: ConcreteType:QuadMesh3D): Concept:IArray<ConcreteType:Integer> [Field]; => 
    _ARG_ 0: Points(x) => $844:constraint=(IArray, Vector2D)

441. Indices
  Type: (ITriangleArray3D) => $876:constraint=(IArray, Integer)
  Sig: IGeometry_18:Library.Indices(x: ITriangleArray3D): $876:constraint=(IArray, Integer)
  Body: Indices(Points(x))
  # functions: 13 AMBIGUOUS
    - ArrayLibrary_0:Library.Indices(xs: Concept:IArray<TypeVariable:$T>): Concept:IArray<ConcreteType:Integer> [Library]; => Range(Count(xs))
    - IGeometry_18:Library.Indices(x: Concept:IPointArray2D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:IPointArray3D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:ILineArray2D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:ILineArray3D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:ITriangleArray2D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:ITriangleArray3D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:IQuadArray2D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:IQuadArray3D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: ConcreteType:QuadGrid3D): Concept:IArray<ConcreteType:Integer> [Library]; => FlatMap(AllQuadFaceIndices(PointGrid(x), ClosedX(x), ClosedY(x)), (\(ParameterDef=x$16763:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - LineMesh3D_412:ConcreteType.Indices(self: ConcreteType:LineMesh3D): Concept:IArray<ConcreteType:Integer> [Field]; => 
    - TriangleMesh3D_414:ConcreteType.Indices(self: ConcreteType:TriangleMesh3D): Concept:IArray<ConcreteType:Integer> [Field]; => 
    - QuadMesh3D_416:ConcreteType.Indices(self: ConcreteType:QuadMesh3D): Concept:IArray<ConcreteType:Integer> [Field]; => 
    _ARG_ 0: Points(x) => $844:constraint=(IArray, Vector2D)

442. Indices
  Type: (IQuadArray2D) => $877:constraint=(IArray, Integer)
  Sig: IGeometry_18:Library.Indices(x: IQuadArray2D): $877:constraint=(IArray, Integer)
  Body: Indices(Points(x))
  # functions: 13 AMBIGUOUS
    - ArrayLibrary_0:Library.Indices(xs: Concept:IArray<TypeVariable:$T>): Concept:IArray<ConcreteType:Integer> [Library]; => Range(Count(xs))
    - IGeometry_18:Library.Indices(x: Concept:IPointArray2D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:IPointArray3D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:ILineArray2D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:ILineArray3D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:ITriangleArray2D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:ITriangleArray3D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:IQuadArray2D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:IQuadArray3D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: ConcreteType:QuadGrid3D): Concept:IArray<ConcreteType:Integer> [Library]; => FlatMap(AllQuadFaceIndices(PointGrid(x), ClosedX(x), ClosedY(x)), (\(ParameterDef=x$16763:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - LineMesh3D_412:ConcreteType.Indices(self: ConcreteType:LineMesh3D): Concept:IArray<ConcreteType:Integer> [Field]; => 
    - TriangleMesh3D_414:ConcreteType.Indices(self: ConcreteType:TriangleMesh3D): Concept:IArray<ConcreteType:Integer> [Field]; => 
    - QuadMesh3D_416:ConcreteType.Indices(self: ConcreteType:QuadMesh3D): Concept:IArray<ConcreteType:Integer> [Field]; => 
    _ARG_ 0: Points(x) => $844:constraint=(IArray, Vector2D)

443. Indices
  Type: (IQuadArray3D) => $878:constraint=(IArray, Integer)
  Sig: IGeometry_18:Library.Indices(x: IQuadArray3D): $878:constraint=(IArray, Integer)
  Body: Indices(Points(x))
  # functions: 13 AMBIGUOUS
    - ArrayLibrary_0:Library.Indices(xs: Concept:IArray<TypeVariable:$T>): Concept:IArray<ConcreteType:Integer> [Library]; => Range(Count(xs))
    - IGeometry_18:Library.Indices(x: Concept:IPointArray2D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:IPointArray3D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:ILineArray2D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:ILineArray3D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:ITriangleArray2D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:ITriangleArray3D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:IQuadArray2D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: Concept:IQuadArray3D): Concept:IArray<ConcreteType:Integer> [Library]; => Indices(Points(x))
    - IGeometry_18:Library.Indices(x: ConcreteType:QuadGrid3D): Concept:IArray<ConcreteType:Integer> [Library]; => FlatMap(AllQuadFaceIndices(PointGrid(x), ClosedX(x), ClosedY(x)), (\(ParameterDef=x$16763:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - LineMesh3D_412:ConcreteType.Indices(self: ConcreteType:LineMesh3D): Concept:IArray<ConcreteType:Integer> [Field]; => 
    - TriangleMesh3D_414:ConcreteType.Indices(self: ConcreteType:TriangleMesh3D): Concept:IArray<ConcreteType:Integer> [Field]; => 
    - QuadMesh3D_416:ConcreteType.Indices(self: ConcreteType:QuadMesh3D): Concept:IArray<ConcreteType:Integer> [Field]; => 
    _ARG_ 0: Points(x) => $844:constraint=(IArray, Vector2D)

457. TriangleMesh3D
  Type: (Triangle3D) => TriangleMesh3D
  Sig: IGeometry_18:Library.TriangleMesh3D(g: Triangle3D): TriangleMesh3D
  Body: TriangleArray3D(g)
  # functions: 4 AMBIGUOUS
    - IGeometry_18:Library.TriangleArray3D(t: ConcreteType:Triangle3D): ConcreteType:TriangleArray3D [Library]; => New(TriangleArray3D, [t])
    - IGeometry_18:Library.TriangleArray3D(q: ConcreteType:Quad3D): ConcreteType:TriangleArray3D [Library]; => New(TriangleArray3D, Triangles(q))
    - IGeometry_18:Library.TriangleArray3D(q: Concept:IQuadArray3D): ConcreteType:TriangleArray3D [Library]; => New(TriangleArray3D, Triangles(q))
    - TriangleArray3D_432:ConcreteType.TriangleArray3D(Triangles: Concept:IArray<ConcreteType:Triangle3D>): ConcreteType:TriangleArray3D [Constructor]; => 
    _ARG_ 0: g => Triangle3D

458. TriangleMesh3D
  Type: (Quad3D) => TriangleMesh3D
  Sig: IGeometry_18:Library.TriangleMesh3D(g: Quad3D): TriangleMesh3D
  Body: TriangleArray3D(g)
  # functions: 4 AMBIGUOUS
    - IGeometry_18:Library.TriangleArray3D(t: ConcreteType:Triangle3D): ConcreteType:TriangleArray3D [Library]; => New(TriangleArray3D, [t])
    - IGeometry_18:Library.TriangleArray3D(q: ConcreteType:Quad3D): ConcreteType:TriangleArray3D [Library]; => New(TriangleArray3D, Triangles(q))
    - IGeometry_18:Library.TriangleArray3D(q: Concept:IQuadArray3D): ConcreteType:TriangleArray3D [Library]; => New(TriangleArray3D, Triangles(q))
    - TriangleArray3D_432:ConcreteType.TriangleArray3D(Triangles: Concept:IArray<ConcreteType:Triangle3D>): ConcreteType:TriangleArray3D [Constructor]; => 
    _ARG_ 0: g => Quad3D

460. TriangleMesh3D
  Type: (IQuadArray3D) => TriangleMesh3D
  Sig: IGeometry_18:Library.TriangleMesh3D(g: IQuadArray3D): TriangleMesh3D
  Body: TriangleArray3D(g)
  # functions: 4 AMBIGUOUS
    - IGeometry_18:Library.TriangleArray3D(t: ConcreteType:Triangle3D): ConcreteType:TriangleArray3D [Library]; => New(TriangleArray3D, [t])
    - IGeometry_18:Library.TriangleArray3D(q: ConcreteType:Quad3D): ConcreteType:TriangleArray3D [Library]; => New(TriangleArray3D, Triangles(q))
    - IGeometry_18:Library.TriangleArray3D(q: Concept:IQuadArray3D): ConcreteType:TriangleArray3D [Library]; => New(TriangleArray3D, Triangles(q))
    - TriangleArray3D_432:ConcreteType.TriangleArray3D(Triangles: Concept:IArray<ConcreteType:Triangle3D>): ConcreteType:TriangleArray3D [Constructor]; => 
    _ARG_ 0: g => IQuadArray3D

469. Line3D
  Type: (Line2D) => Line3D
  Sig: IGeometry_18:Library.Line3D(x: Line2D): Line3D
  Body: To3D(x)
  # functions: 7 AMBIGUOUS
    - IGeometry_18:Library.To3D(x: ConcreteType:Vector2D): ConcreteType:Vector3D [Library]; => x
    - IGeometry_18:Library.To3D(x: ConcreteType:Line2D): ConcreteType:Line3D [Library]; => Tuple2(To3D(A(x)), To3D(B(x)))
    - IGeometry_18:Library.To3D(x: ConcreteType:Triangle2D): ConcreteType:Triangle3D [Library]; => Tuple3(To3D(A(x)), To3D(B(x)), To3D(C(x)))
    - IGeometry_18:Library.To3D(x: ConcreteType:Quad2D): ConcreteType:Quad3D [Library]; => Tuple4(To3D(A(x)), To3D(B(x)), To3D(C(x)), To3D(D(x)))
    - IGeometry_18:Library.To3D(x: ConcreteType:Bounds2D): ConcreteType:Bounds3D [Library]; => Tuple2(To3D(Min(x)), To3D(Max(x)))
    - IGeometry_18:Library.To3D(x: ConcreteType:Ray2D): ConcreteType:Ray3D [Library]; => Tuple2(To3D(Origin(x)), To3D(Direction(x)))
    - IGeometry_18:Library.To3D(x: ConcreteType:PolyLine2D): ConcreteType:PolyLine3D [Library]; => Tuple2(Map(Points(x), (\(ParameterDef=p$15728:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>), Closed(x))
    _ARG_ 0: x => Line2D

470. Triangle3D
  Type: (Triangle2D) => Triangle3D
  Sig: IGeometry_18:Library.Triangle3D(x: Triangle2D): Triangle3D
  Body: To3D(x)
  # functions: 7 AMBIGUOUS
    - IGeometry_18:Library.To3D(x: ConcreteType:Vector2D): ConcreteType:Vector3D [Library]; => x
    - IGeometry_18:Library.To3D(x: ConcreteType:Line2D): ConcreteType:Line3D [Library]; => Tuple2(To3D(A(x)), To3D(B(x)))
    - IGeometry_18:Library.To3D(x: ConcreteType:Triangle2D): ConcreteType:Triangle3D [Library]; => Tuple3(To3D(A(x)), To3D(B(x)), To3D(C(x)))
    - IGeometry_18:Library.To3D(x: ConcreteType:Quad2D): ConcreteType:Quad3D [Library]; => Tuple4(To3D(A(x)), To3D(B(x)), To3D(C(x)), To3D(D(x)))
    - IGeometry_18:Library.To3D(x: ConcreteType:Bounds2D): ConcreteType:Bounds3D [Library]; => Tuple2(To3D(Min(x)), To3D(Max(x)))
    - IGeometry_18:Library.To3D(x: ConcreteType:Ray2D): ConcreteType:Ray3D [Library]; => Tuple2(To3D(Origin(x)), To3D(Direction(x)))
    - IGeometry_18:Library.To3D(x: ConcreteType:PolyLine2D): ConcreteType:PolyLine3D [Library]; => Tuple2(Map(Points(x), (\(ParameterDef=p$15728:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>), Closed(x))
    _ARG_ 0: x => Triangle2D

471. Quad3D
  Type: (Quad2D) => Quad3D
  Sig: IGeometry_18:Library.Quad3D(x: Quad2D): Quad3D
  Body: To3D(x)
  # functions: 7 AMBIGUOUS
    - IGeometry_18:Library.To3D(x: ConcreteType:Vector2D): ConcreteType:Vector3D [Library]; => x
    - IGeometry_18:Library.To3D(x: ConcreteType:Line2D): ConcreteType:Line3D [Library]; => Tuple2(To3D(A(x)), To3D(B(x)))
    - IGeometry_18:Library.To3D(x: ConcreteType:Triangle2D): ConcreteType:Triangle3D [Library]; => Tuple3(To3D(A(x)), To3D(B(x)), To3D(C(x)))
    - IGeometry_18:Library.To3D(x: ConcreteType:Quad2D): ConcreteType:Quad3D [Library]; => Tuple4(To3D(A(x)), To3D(B(x)), To3D(C(x)), To3D(D(x)))
    - IGeometry_18:Library.To3D(x: ConcreteType:Bounds2D): ConcreteType:Bounds3D [Library]; => Tuple2(To3D(Min(x)), To3D(Max(x)))
    - IGeometry_18:Library.To3D(x: ConcreteType:Ray2D): ConcreteType:Ray3D [Library]; => Tuple2(To3D(Origin(x)), To3D(Direction(x)))
    - IGeometry_18:Library.To3D(x: ConcreteType:PolyLine2D): ConcreteType:PolyLine3D [Library]; => Tuple2(Map(Points(x), (\(ParameterDef=p$15728:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>), Closed(x))
    _ARG_ 0: x => Quad2D

472. Bounds3D
  Type: (Bounds2D) => Bounds3D
  Sig: IGeometry_18:Library.Bounds3D(x: Bounds2D): Bounds3D
  Body: To3D(x)
  # functions: 7 AMBIGUOUS
    - IGeometry_18:Library.To3D(x: ConcreteType:Vector2D): ConcreteType:Vector3D [Library]; => x
    - IGeometry_18:Library.To3D(x: ConcreteType:Line2D): ConcreteType:Line3D [Library]; => Tuple2(To3D(A(x)), To3D(B(x)))
    - IGeometry_18:Library.To3D(x: ConcreteType:Triangle2D): ConcreteType:Triangle3D [Library]; => Tuple3(To3D(A(x)), To3D(B(x)), To3D(C(x)))
    - IGeometry_18:Library.To3D(x: ConcreteType:Quad2D): ConcreteType:Quad3D [Library]; => Tuple4(To3D(A(x)), To3D(B(x)), To3D(C(x)), To3D(D(x)))
    - IGeometry_18:Library.To3D(x: ConcreteType:Bounds2D): ConcreteType:Bounds3D [Library]; => Tuple2(To3D(Min(x)), To3D(Max(x)))
    - IGeometry_18:Library.To3D(x: ConcreteType:Ray2D): ConcreteType:Ray3D [Library]; => Tuple2(To3D(Origin(x)), To3D(Direction(x)))
    - IGeometry_18:Library.To3D(x: ConcreteType:PolyLine2D): ConcreteType:PolyLine3D [Library]; => Tuple2(Map(Points(x), (\(ParameterDef=p$15728:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>), Closed(x))
    _ARG_ 0: x => Bounds2D

473. Ray3D
  Type: (Ray2D) => Ray3D
  Sig: IGeometry_18:Library.Ray3D(x: Ray2D): Ray3D
  Body: To3D(x)
  # functions: 7 AMBIGUOUS
    - IGeometry_18:Library.To3D(x: ConcreteType:Vector2D): ConcreteType:Vector3D [Library]; => x
    - IGeometry_18:Library.To3D(x: ConcreteType:Line2D): ConcreteType:Line3D [Library]; => Tuple2(To3D(A(x)), To3D(B(x)))
    - IGeometry_18:Library.To3D(x: ConcreteType:Triangle2D): ConcreteType:Triangle3D [Library]; => Tuple3(To3D(A(x)), To3D(B(x)), To3D(C(x)))
    - IGeometry_18:Library.To3D(x: ConcreteType:Quad2D): ConcreteType:Quad3D [Library]; => Tuple4(To3D(A(x)), To3D(B(x)), To3D(C(x)), To3D(D(x)))
    - IGeometry_18:Library.To3D(x: ConcreteType:Bounds2D): ConcreteType:Bounds3D [Library]; => Tuple2(To3D(Min(x)), To3D(Max(x)))
    - IGeometry_18:Library.To3D(x: ConcreteType:Ray2D): ConcreteType:Ray3D [Library]; => Tuple2(To3D(Origin(x)), To3D(Direction(x)))
    - IGeometry_18:Library.To3D(x: ConcreteType:PolyLine2D): ConcreteType:PolyLine3D [Library]; => Tuple2(Map(Points(x), (\(ParameterDef=p$15728:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>), Closed(x))
    _ARG_ 0: x => Ray2D

474. PolyLine3D
  Type: (PolyLine2D) => PolyLine3D
  Sig: IGeometry_18:Library.PolyLine3D(x: PolyLine2D): PolyLine3D
  Body: To3D(x)
  # functions: 7 AMBIGUOUS
    - IGeometry_18:Library.To3D(x: ConcreteType:Vector2D): ConcreteType:Vector3D [Library]; => x
    - IGeometry_18:Library.To3D(x: ConcreteType:Line2D): ConcreteType:Line3D [Library]; => Tuple2(To3D(A(x)), To3D(B(x)))
    - IGeometry_18:Library.To3D(x: ConcreteType:Triangle2D): ConcreteType:Triangle3D [Library]; => Tuple3(To3D(A(x)), To3D(B(x)), To3D(C(x)))
    - IGeometry_18:Library.To3D(x: ConcreteType:Quad2D): ConcreteType:Quad3D [Library]; => Tuple4(To3D(A(x)), To3D(B(x)), To3D(C(x)), To3D(D(x)))
    - IGeometry_18:Library.To3D(x: ConcreteType:Bounds2D): ConcreteType:Bounds3D [Library]; => Tuple2(To3D(Min(x)), To3D(Max(x)))
    - IGeometry_18:Library.To3D(x: ConcreteType:Ray2D): ConcreteType:Ray3D [Library]; => Tuple2(To3D(Origin(x)), To3D(Direction(x)))
    - IGeometry_18:Library.To3D(x: ConcreteType:PolyLine2D): ConcreteType:PolyLine3D [Library]; => Tuple2(Map(Points(x), (\(ParameterDef=p$15728:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>), Closed(x))
    _ARG_ 0: x => PolyLine2D

475. Deform
  Type: (IDeformable3D, ITransform3D) => $879:constraint=IDeformable3D
  Sig: IGeometry_18:Library.Deform(x: IDeformable3D, t: ITransform3D): $879:constraint=IDeformable3D
  Body: Deform(x, (\(ParameterDef=v$15801:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
  # functions: 16 AMBIGUOUS
    - IGeometry_18:Library.Deform(x: ConcreteType:Line3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Line3D [Library]; => Tuple2(f(A(x)), f(B(x)))
    - IGeometry_18:Library.Deform(x: ConcreteType:Ray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Ray3D [Library]; => Tuple2(f(Origin(x)), Normalize(f(Add(Origin(x), Direction(x)))))
    - IGeometry_18:Library.Deform(t: ConcreteType:Triangle3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Triangle3D [Library]; => Tuple3(f(A(t)), f(B(t)), f(C(t)))
    - IGeometry_18:Library.Deform(q: ConcreteType:Quad3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Quad3D [Library]; => Tuple4(f(A(q)), f(B(q)), f(C(q)), f(D(q)))
    - IGeometry_18:Library.Deform(v: ConcreteType:Vector3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Vector3D [Library]; => f(v)
    - IGeometry_18:Library.Deform(x: Concept:IDeformable3D,t: Concept:ITransform3D): Concept:IDeformable3D [Library]; => Deform(x, (\(ParameterDef=v$15801:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - IGeometry_18:Library.Deform(x: ConcreteType:LineMesh3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:LineMesh3D [Library]; => Tuple2(Map(Points(x), f), Indices(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:TriangleMesh3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:TriangleMesh3D [Library]; => Tuple2(Map(Points(x), f), Indices(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:QuadMesh3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:QuadMesh3D [Library]; => Tuple2(Map(Points(x), f), Indices(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:PolyLine3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:PolyLine3D [Library]; => Tuple2(Map(Points(x), f), Closed(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:LineArray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:LineArray3D [Library]; => New(LineArray3D, Map(Lines(x), (\(ParameterDef=l$16549:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>))
    - IGeometry_18:Library.Deform(x: ConcreteType:TriangleArray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:TriangleArray3D [Library]; => New(TriangleArray3D, Map(Triangles(x), (\(ParameterDef=t$16585:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>))
    - IGeometry_18:Library.Deform(x: ConcreteType:PointArray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:PointArray3D [Library]; => New(PointArray3D, Map(Points(x), f))
    - IGeometry_18:Library.Deform(x: ConcreteType:QuadArray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:QuadArray3D [Library]; => New(QuadArray3D, Map(Quads(x), (\(ParameterDef=q$16643:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>))
    - IGeometry_18:Library.Deform(x: ConcreteType:QuadGrid3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:QuadGrid3D [Library]; => New(QuadGrid3D, Map(PointGrid(x), f), ClosedX(x), ClosedY(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:Bounds3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Bounds3D [Library]; => Bounds(Map(Corners(x), f))
    _ARG_ 0: x => IDeformable3D
    _ARG_ 1: (\(ParameterDef=v$15801:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1> => (Function1, $1590:, $1591:)

476. Translate
  Type: (IDeformable3D, Vector3D) => $880:constraint=IDeformable3D
  Sig: IGeometry_18:Library.Translate(x: IDeformable3D, v: Vector3D): $880:constraint=IDeformable3D
  Body: Deform(x, (\(ParameterDef=p$15826:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
  # functions: 16 AMBIGUOUS
    - IGeometry_18:Library.Deform(x: ConcreteType:Line3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Line3D [Library]; => Tuple2(f(A(x)), f(B(x)))
    - IGeometry_18:Library.Deform(x: ConcreteType:Ray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Ray3D [Library]; => Tuple2(f(Origin(x)), Normalize(f(Add(Origin(x), Direction(x)))))
    - IGeometry_18:Library.Deform(t: ConcreteType:Triangle3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Triangle3D [Library]; => Tuple3(f(A(t)), f(B(t)), f(C(t)))
    - IGeometry_18:Library.Deform(q: ConcreteType:Quad3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Quad3D [Library]; => Tuple4(f(A(q)), f(B(q)), f(C(q)), f(D(q)))
    - IGeometry_18:Library.Deform(v: ConcreteType:Vector3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Vector3D [Library]; => f(v)
    - IGeometry_18:Library.Deform(x: Concept:IDeformable3D,t: Concept:ITransform3D): Concept:IDeformable3D [Library]; => Deform(x, (\(ParameterDef=v$15801:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - IGeometry_18:Library.Deform(x: ConcreteType:LineMesh3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:LineMesh3D [Library]; => Tuple2(Map(Points(x), f), Indices(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:TriangleMesh3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:TriangleMesh3D [Library]; => Tuple2(Map(Points(x), f), Indices(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:QuadMesh3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:QuadMesh3D [Library]; => Tuple2(Map(Points(x), f), Indices(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:PolyLine3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:PolyLine3D [Library]; => Tuple2(Map(Points(x), f), Closed(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:LineArray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:LineArray3D [Library]; => New(LineArray3D, Map(Lines(x), (\(ParameterDef=l$16549:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>))
    - IGeometry_18:Library.Deform(x: ConcreteType:TriangleArray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:TriangleArray3D [Library]; => New(TriangleArray3D, Map(Triangles(x), (\(ParameterDef=t$16585:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>))
    - IGeometry_18:Library.Deform(x: ConcreteType:PointArray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:PointArray3D [Library]; => New(PointArray3D, Map(Points(x), f))
    - IGeometry_18:Library.Deform(x: ConcreteType:QuadArray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:QuadArray3D [Library]; => New(QuadArray3D, Map(Quads(x), (\(ParameterDef=q$16643:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>))
    - IGeometry_18:Library.Deform(x: ConcreteType:QuadGrid3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:QuadGrid3D [Library]; => New(QuadGrid3D, Map(PointGrid(x), f), ClosedX(x), ClosedY(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:Bounds3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Bounds3D [Library]; => Bounds(Map(Corners(x), f))
    _ARG_ 0: x => IDeformable3D
    _ARG_ 1: (\(ParameterDef=p$15826:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1> => (Function1, $1606:, $1607:)

477. Rotate
  Type: (IDeformable3D, Quaternion) => $881:constraint=IDeformable3D
  Sig: IGeometry_18:Library.Rotate(x: IDeformable3D, q: Quaternion): $881:constraint=IDeformable3D
  Body: Deform(x, q)
  # functions: 16 AMBIGUOUS
    - IGeometry_18:Library.Deform(x: ConcreteType:Line3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Line3D [Library]; => Tuple2(f(A(x)), f(B(x)))
    - IGeometry_18:Library.Deform(x: ConcreteType:Ray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Ray3D [Library]; => Tuple2(f(Origin(x)), Normalize(f(Add(Origin(x), Direction(x)))))
    - IGeometry_18:Library.Deform(t: ConcreteType:Triangle3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Triangle3D [Library]; => Tuple3(f(A(t)), f(B(t)), f(C(t)))
    - IGeometry_18:Library.Deform(q: ConcreteType:Quad3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Quad3D [Library]; => Tuple4(f(A(q)), f(B(q)), f(C(q)), f(D(q)))
    - IGeometry_18:Library.Deform(v: ConcreteType:Vector3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Vector3D [Library]; => f(v)
    - IGeometry_18:Library.Deform(x: Concept:IDeformable3D,t: Concept:ITransform3D): Concept:IDeformable3D [Library]; => Deform(x, (\(ParameterDef=v$15801:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - IGeometry_18:Library.Deform(x: ConcreteType:LineMesh3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:LineMesh3D [Library]; => Tuple2(Map(Points(x), f), Indices(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:TriangleMesh3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:TriangleMesh3D [Library]; => Tuple2(Map(Points(x), f), Indices(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:QuadMesh3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:QuadMesh3D [Library]; => Tuple2(Map(Points(x), f), Indices(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:PolyLine3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:PolyLine3D [Library]; => Tuple2(Map(Points(x), f), Closed(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:LineArray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:LineArray3D [Library]; => New(LineArray3D, Map(Lines(x), (\(ParameterDef=l$16549:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>))
    - IGeometry_18:Library.Deform(x: ConcreteType:TriangleArray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:TriangleArray3D [Library]; => New(TriangleArray3D, Map(Triangles(x), (\(ParameterDef=t$16585:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>))
    - IGeometry_18:Library.Deform(x: ConcreteType:PointArray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:PointArray3D [Library]; => New(PointArray3D, Map(Points(x), f))
    - IGeometry_18:Library.Deform(x: ConcreteType:QuadArray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:QuadArray3D [Library]; => New(QuadArray3D, Map(Quads(x), (\(ParameterDef=q$16643:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>))
    - IGeometry_18:Library.Deform(x: ConcreteType:QuadGrid3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:QuadGrid3D [Library]; => New(QuadGrid3D, Map(PointGrid(x), f), ClosedX(x), ClosedY(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:Bounds3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Bounds3D [Library]; => Bounds(Map(Corners(x), f))
    _ARG_ 0: x => IDeformable3D
    _ARG_ 1: q => Quaternion

478. Scale
  Type: (IDeformable3D, Vector3D) => $882:constraint=IDeformable3D
  Sig: IGeometry_18:Library.Scale(x: IDeformable3D, v: Vector3D): $882:constraint=IDeformable3D
  Body: Deform(x, (\(ParameterDef=p$15862:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
  # functions: 16 AMBIGUOUS
    - IGeometry_18:Library.Deform(x: ConcreteType:Line3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Line3D [Library]; => Tuple2(f(A(x)), f(B(x)))
    - IGeometry_18:Library.Deform(x: ConcreteType:Ray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Ray3D [Library]; => Tuple2(f(Origin(x)), Normalize(f(Add(Origin(x), Direction(x)))))
    - IGeometry_18:Library.Deform(t: ConcreteType:Triangle3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Triangle3D [Library]; => Tuple3(f(A(t)), f(B(t)), f(C(t)))
    - IGeometry_18:Library.Deform(q: ConcreteType:Quad3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Quad3D [Library]; => Tuple4(f(A(q)), f(B(q)), f(C(q)), f(D(q)))
    - IGeometry_18:Library.Deform(v: ConcreteType:Vector3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Vector3D [Library]; => f(v)
    - IGeometry_18:Library.Deform(x: Concept:IDeformable3D,t: Concept:ITransform3D): Concept:IDeformable3D [Library]; => Deform(x, (\(ParameterDef=v$15801:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - IGeometry_18:Library.Deform(x: ConcreteType:LineMesh3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:LineMesh3D [Library]; => Tuple2(Map(Points(x), f), Indices(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:TriangleMesh3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:TriangleMesh3D [Library]; => Tuple2(Map(Points(x), f), Indices(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:QuadMesh3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:QuadMesh3D [Library]; => Tuple2(Map(Points(x), f), Indices(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:PolyLine3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:PolyLine3D [Library]; => Tuple2(Map(Points(x), f), Closed(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:LineArray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:LineArray3D [Library]; => New(LineArray3D, Map(Lines(x), (\(ParameterDef=l$16549:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>))
    - IGeometry_18:Library.Deform(x: ConcreteType:TriangleArray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:TriangleArray3D [Library]; => New(TriangleArray3D, Map(Triangles(x), (\(ParameterDef=t$16585:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>))
    - IGeometry_18:Library.Deform(x: ConcreteType:PointArray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:PointArray3D [Library]; => New(PointArray3D, Map(Points(x), f))
    - IGeometry_18:Library.Deform(x: ConcreteType:QuadArray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:QuadArray3D [Library]; => New(QuadArray3D, Map(Quads(x), (\(ParameterDef=q$16643:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>))
    - IGeometry_18:Library.Deform(x: ConcreteType:QuadGrid3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:QuadGrid3D [Library]; => New(QuadGrid3D, Map(PointGrid(x), f), ClosedX(x), ClosedY(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:Bounds3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Bounds3D [Library]; => Bounds(Map(Corners(x), f))
    _ARG_ 0: x => IDeformable3D
    _ARG_ 1: (\(ParameterDef=p$15862:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1> => (Function1, $1608:, $1609:)

479. Scale
  Type: (IDeformable3D, Number) => $883:constraint=IDeformable3D
  Sig: IGeometry_18:Library.Scale(x: IDeformable3D, s: Number): $883:constraint=IDeformable3D
  Body: Deform(x, (\(ParameterDef=p$15887:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
  # functions: 16 AMBIGUOUS
    - IGeometry_18:Library.Deform(x: ConcreteType:Line3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Line3D [Library]; => Tuple2(f(A(x)), f(B(x)))
    - IGeometry_18:Library.Deform(x: ConcreteType:Ray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Ray3D [Library]; => Tuple2(f(Origin(x)), Normalize(f(Add(Origin(x), Direction(x)))))
    - IGeometry_18:Library.Deform(t: ConcreteType:Triangle3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Triangle3D [Library]; => Tuple3(f(A(t)), f(B(t)), f(C(t)))
    - IGeometry_18:Library.Deform(q: ConcreteType:Quad3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Quad3D [Library]; => Tuple4(f(A(q)), f(B(q)), f(C(q)), f(D(q)))
    - IGeometry_18:Library.Deform(v: ConcreteType:Vector3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Vector3D [Library]; => f(v)
    - IGeometry_18:Library.Deform(x: Concept:IDeformable3D,t: Concept:ITransform3D): Concept:IDeformable3D [Library]; => Deform(x, (\(ParameterDef=v$15801:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - IGeometry_18:Library.Deform(x: ConcreteType:LineMesh3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:LineMesh3D [Library]; => Tuple2(Map(Points(x), f), Indices(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:TriangleMesh3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:TriangleMesh3D [Library]; => Tuple2(Map(Points(x), f), Indices(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:QuadMesh3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:QuadMesh3D [Library]; => Tuple2(Map(Points(x), f), Indices(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:PolyLine3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:PolyLine3D [Library]; => Tuple2(Map(Points(x), f), Closed(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:LineArray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:LineArray3D [Library]; => New(LineArray3D, Map(Lines(x), (\(ParameterDef=l$16549:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>))
    - IGeometry_18:Library.Deform(x: ConcreteType:TriangleArray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:TriangleArray3D [Library]; => New(TriangleArray3D, Map(Triangles(x), (\(ParameterDef=t$16585:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>))
    - IGeometry_18:Library.Deform(x: ConcreteType:PointArray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:PointArray3D [Library]; => New(PointArray3D, Map(Points(x), f))
    - IGeometry_18:Library.Deform(x: ConcreteType:QuadArray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:QuadArray3D [Library]; => New(QuadArray3D, Map(Quads(x), (\(ParameterDef=q$16643:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>))
    - IGeometry_18:Library.Deform(x: ConcreteType:QuadGrid3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:QuadGrid3D [Library]; => New(QuadGrid3D, Map(PointGrid(x), f), ClosedX(x), ClosedY(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:Bounds3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Bounds3D [Library]; => Bounds(Map(Corners(x), f))
    _ARG_ 0: x => IDeformable3D
    _ARG_ 1: (\(ParameterDef=p$15887:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1> => (Function1, $1610:, $1611:)

483. TranslateX
  Type: (IDeformable3D, Number) => $887:constraint=IDeformable3D
  Sig: IGeometry_18:Library.TranslateX(x: IDeformable3D, s: Number): $887:constraint=IDeformable3D
  Body: Deform(x, (\(ParameterDef=p$15954:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
  # functions: 16 AMBIGUOUS
    - IGeometry_18:Library.Deform(x: ConcreteType:Line3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Line3D [Library]; => Tuple2(f(A(x)), f(B(x)))
    - IGeometry_18:Library.Deform(x: ConcreteType:Ray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Ray3D [Library]; => Tuple2(f(Origin(x)), Normalize(f(Add(Origin(x), Direction(x)))))
    - IGeometry_18:Library.Deform(t: ConcreteType:Triangle3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Triangle3D [Library]; => Tuple3(f(A(t)), f(B(t)), f(C(t)))
    - IGeometry_18:Library.Deform(q: ConcreteType:Quad3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Quad3D [Library]; => Tuple4(f(A(q)), f(B(q)), f(C(q)), f(D(q)))
    - IGeometry_18:Library.Deform(v: ConcreteType:Vector3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Vector3D [Library]; => f(v)
    - IGeometry_18:Library.Deform(x: Concept:IDeformable3D,t: Concept:ITransform3D): Concept:IDeformable3D [Library]; => Deform(x, (\(ParameterDef=v$15801:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - IGeometry_18:Library.Deform(x: ConcreteType:LineMesh3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:LineMesh3D [Library]; => Tuple2(Map(Points(x), f), Indices(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:TriangleMesh3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:TriangleMesh3D [Library]; => Tuple2(Map(Points(x), f), Indices(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:QuadMesh3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:QuadMesh3D [Library]; => Tuple2(Map(Points(x), f), Indices(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:PolyLine3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:PolyLine3D [Library]; => Tuple2(Map(Points(x), f), Closed(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:LineArray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:LineArray3D [Library]; => New(LineArray3D, Map(Lines(x), (\(ParameterDef=l$16549:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>))
    - IGeometry_18:Library.Deform(x: ConcreteType:TriangleArray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:TriangleArray3D [Library]; => New(TriangleArray3D, Map(Triangles(x), (\(ParameterDef=t$16585:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>))
    - IGeometry_18:Library.Deform(x: ConcreteType:PointArray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:PointArray3D [Library]; => New(PointArray3D, Map(Points(x), f))
    - IGeometry_18:Library.Deform(x: ConcreteType:QuadArray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:QuadArray3D [Library]; => New(QuadArray3D, Map(Quads(x), (\(ParameterDef=q$16643:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>))
    - IGeometry_18:Library.Deform(x: ConcreteType:QuadGrid3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:QuadGrid3D [Library]; => New(QuadGrid3D, Map(PointGrid(x), f), ClosedX(x), ClosedY(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:Bounds3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Bounds3D [Library]; => Bounds(Map(Corners(x), f))
    _ARG_ 0: x => IDeformable3D
    _ARG_ 1: (\(ParameterDef=p$15954:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1> => (Function1, $1614:, $1615:)

484. TranslateY
  Type: (IDeformable3D, Number) => $888:constraint=IDeformable3D
  Sig: IGeometry_18:Library.TranslateY(x: IDeformable3D, s: Number): $888:constraint=IDeformable3D
  Body: Deform(x, (\(ParameterDef=p$15986:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
  # functions: 16 AMBIGUOUS
    - IGeometry_18:Library.Deform(x: ConcreteType:Line3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Line3D [Library]; => Tuple2(f(A(x)), f(B(x)))
    - IGeometry_18:Library.Deform(x: ConcreteType:Ray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Ray3D [Library]; => Tuple2(f(Origin(x)), Normalize(f(Add(Origin(x), Direction(x)))))
    - IGeometry_18:Library.Deform(t: ConcreteType:Triangle3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Triangle3D [Library]; => Tuple3(f(A(t)), f(B(t)), f(C(t)))
    - IGeometry_18:Library.Deform(q: ConcreteType:Quad3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Quad3D [Library]; => Tuple4(f(A(q)), f(B(q)), f(C(q)), f(D(q)))
    - IGeometry_18:Library.Deform(v: ConcreteType:Vector3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Vector3D [Library]; => f(v)
    - IGeometry_18:Library.Deform(x: Concept:IDeformable3D,t: Concept:ITransform3D): Concept:IDeformable3D [Library]; => Deform(x, (\(ParameterDef=v$15801:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - IGeometry_18:Library.Deform(x: ConcreteType:LineMesh3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:LineMesh3D [Library]; => Tuple2(Map(Points(x), f), Indices(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:TriangleMesh3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:TriangleMesh3D [Library]; => Tuple2(Map(Points(x), f), Indices(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:QuadMesh3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:QuadMesh3D [Library]; => Tuple2(Map(Points(x), f), Indices(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:PolyLine3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:PolyLine3D [Library]; => Tuple2(Map(Points(x), f), Closed(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:LineArray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:LineArray3D [Library]; => New(LineArray3D, Map(Lines(x), (\(ParameterDef=l$16549:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>))
    - IGeometry_18:Library.Deform(x: ConcreteType:TriangleArray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:TriangleArray3D [Library]; => New(TriangleArray3D, Map(Triangles(x), (\(ParameterDef=t$16585:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>))
    - IGeometry_18:Library.Deform(x: ConcreteType:PointArray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:PointArray3D [Library]; => New(PointArray3D, Map(Points(x), f))
    - IGeometry_18:Library.Deform(x: ConcreteType:QuadArray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:QuadArray3D [Library]; => New(QuadArray3D, Map(Quads(x), (\(ParameterDef=q$16643:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>))
    - IGeometry_18:Library.Deform(x: ConcreteType:QuadGrid3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:QuadGrid3D [Library]; => New(QuadGrid3D, Map(PointGrid(x), f), ClosedX(x), ClosedY(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:Bounds3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Bounds3D [Library]; => Bounds(Map(Corners(x), f))
    _ARG_ 0: x => IDeformable3D
    _ARG_ 1: (\(ParameterDef=p$15986:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1> => (Function1, $1616:, $1617:)

485. TranslateZ
  Type: (IDeformable3D, Number) => $889:constraint=IDeformable3D
  Sig: IGeometry_18:Library.TranslateZ(x: IDeformable3D, s: Number): $889:constraint=IDeformable3D
  Body: Deform(x, (\(ParameterDef=p$16018:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
  # functions: 16 AMBIGUOUS
    - IGeometry_18:Library.Deform(x: ConcreteType:Line3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Line3D [Library]; => Tuple2(f(A(x)), f(B(x)))
    - IGeometry_18:Library.Deform(x: ConcreteType:Ray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Ray3D [Library]; => Tuple2(f(Origin(x)), Normalize(f(Add(Origin(x), Direction(x)))))
    - IGeometry_18:Library.Deform(t: ConcreteType:Triangle3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Triangle3D [Library]; => Tuple3(f(A(t)), f(B(t)), f(C(t)))
    - IGeometry_18:Library.Deform(q: ConcreteType:Quad3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Quad3D [Library]; => Tuple4(f(A(q)), f(B(q)), f(C(q)), f(D(q)))
    - IGeometry_18:Library.Deform(v: ConcreteType:Vector3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Vector3D [Library]; => f(v)
    - IGeometry_18:Library.Deform(x: Concept:IDeformable3D,t: Concept:ITransform3D): Concept:IDeformable3D [Library]; => Deform(x, (\(ParameterDef=v$15801:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - IGeometry_18:Library.Deform(x: ConcreteType:LineMesh3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:LineMesh3D [Library]; => Tuple2(Map(Points(x), f), Indices(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:TriangleMesh3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:TriangleMesh3D [Library]; => Tuple2(Map(Points(x), f), Indices(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:QuadMesh3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:QuadMesh3D [Library]; => Tuple2(Map(Points(x), f), Indices(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:PolyLine3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:PolyLine3D [Library]; => Tuple2(Map(Points(x), f), Closed(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:LineArray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:LineArray3D [Library]; => New(LineArray3D, Map(Lines(x), (\(ParameterDef=l$16549:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>))
    - IGeometry_18:Library.Deform(x: ConcreteType:TriangleArray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:TriangleArray3D [Library]; => New(TriangleArray3D, Map(Triangles(x), (\(ParameterDef=t$16585:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>))
    - IGeometry_18:Library.Deform(x: ConcreteType:PointArray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:PointArray3D [Library]; => New(PointArray3D, Map(Points(x), f))
    - IGeometry_18:Library.Deform(x: ConcreteType:QuadArray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:QuadArray3D [Library]; => New(QuadArray3D, Map(Quads(x), (\(ParameterDef=q$16643:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>))
    - IGeometry_18:Library.Deform(x: ConcreteType:QuadGrid3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:QuadGrid3D [Library]; => New(QuadGrid3D, Map(PointGrid(x), f), ClosedX(x), ClosedY(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:Bounds3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Bounds3D [Library]; => Bounds(Map(Corners(x), f))
    _ARG_ 0: x => IDeformable3D
    _ARG_ 1: (\(ParameterDef=p$16018:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1> => (Function1, $1618:, $1619:)

486. ScaleX
  Type: (IDeformable3D, Number) => $890:constraint=IDeformable3D
  Sig: IGeometry_18:Library.ScaleX(x: IDeformable3D, s: Number): $890:constraint=IDeformable3D
  Body: Deform(x, (\(ParameterDef=p$16050:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
  # functions: 16 AMBIGUOUS
    - IGeometry_18:Library.Deform(x: ConcreteType:Line3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Line3D [Library]; => Tuple2(f(A(x)), f(B(x)))
    - IGeometry_18:Library.Deform(x: ConcreteType:Ray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Ray3D [Library]; => Tuple2(f(Origin(x)), Normalize(f(Add(Origin(x), Direction(x)))))
    - IGeometry_18:Library.Deform(t: ConcreteType:Triangle3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Triangle3D [Library]; => Tuple3(f(A(t)), f(B(t)), f(C(t)))
    - IGeometry_18:Library.Deform(q: ConcreteType:Quad3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Quad3D [Library]; => Tuple4(f(A(q)), f(B(q)), f(C(q)), f(D(q)))
    - IGeometry_18:Library.Deform(v: ConcreteType:Vector3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Vector3D [Library]; => f(v)
    - IGeometry_18:Library.Deform(x: Concept:IDeformable3D,t: Concept:ITransform3D): Concept:IDeformable3D [Library]; => Deform(x, (\(ParameterDef=v$15801:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - IGeometry_18:Library.Deform(x: ConcreteType:LineMesh3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:LineMesh3D [Library]; => Tuple2(Map(Points(x), f), Indices(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:TriangleMesh3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:TriangleMesh3D [Library]; => Tuple2(Map(Points(x), f), Indices(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:QuadMesh3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:QuadMesh3D [Library]; => Tuple2(Map(Points(x), f), Indices(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:PolyLine3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:PolyLine3D [Library]; => Tuple2(Map(Points(x), f), Closed(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:LineArray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:LineArray3D [Library]; => New(LineArray3D, Map(Lines(x), (\(ParameterDef=l$16549:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>))
    - IGeometry_18:Library.Deform(x: ConcreteType:TriangleArray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:TriangleArray3D [Library]; => New(TriangleArray3D, Map(Triangles(x), (\(ParameterDef=t$16585:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>))
    - IGeometry_18:Library.Deform(x: ConcreteType:PointArray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:PointArray3D [Library]; => New(PointArray3D, Map(Points(x), f))
    - IGeometry_18:Library.Deform(x: ConcreteType:QuadArray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:QuadArray3D [Library]; => New(QuadArray3D, Map(Quads(x), (\(ParameterDef=q$16643:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>))
    - IGeometry_18:Library.Deform(x: ConcreteType:QuadGrid3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:QuadGrid3D [Library]; => New(QuadGrid3D, Map(PointGrid(x), f), ClosedX(x), ClosedY(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:Bounds3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Bounds3D [Library]; => Bounds(Map(Corners(x), f))
    _ARG_ 0: x => IDeformable3D
    _ARG_ 1: (\(ParameterDef=p$16050:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1> => (Function1, $1620:, $1621:)

487. ScaleY
  Type: (IDeformable3D, Number) => $891:constraint=IDeformable3D
  Sig: IGeometry_18:Library.ScaleY(x: IDeformable3D, s: Number): $891:constraint=IDeformable3D
  Body: Deform(x, (\(ParameterDef=p$16082:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
  # functions: 16 AMBIGUOUS
    - IGeometry_18:Library.Deform(x: ConcreteType:Line3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Line3D [Library]; => Tuple2(f(A(x)), f(B(x)))
    - IGeometry_18:Library.Deform(x: ConcreteType:Ray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Ray3D [Library]; => Tuple2(f(Origin(x)), Normalize(f(Add(Origin(x), Direction(x)))))
    - IGeometry_18:Library.Deform(t: ConcreteType:Triangle3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Triangle3D [Library]; => Tuple3(f(A(t)), f(B(t)), f(C(t)))
    - IGeometry_18:Library.Deform(q: ConcreteType:Quad3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Quad3D [Library]; => Tuple4(f(A(q)), f(B(q)), f(C(q)), f(D(q)))
    - IGeometry_18:Library.Deform(v: ConcreteType:Vector3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Vector3D [Library]; => f(v)
    - IGeometry_18:Library.Deform(x: Concept:IDeformable3D,t: Concept:ITransform3D): Concept:IDeformable3D [Library]; => Deform(x, (\(ParameterDef=v$15801:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - IGeometry_18:Library.Deform(x: ConcreteType:LineMesh3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:LineMesh3D [Library]; => Tuple2(Map(Points(x), f), Indices(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:TriangleMesh3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:TriangleMesh3D [Library]; => Tuple2(Map(Points(x), f), Indices(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:QuadMesh3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:QuadMesh3D [Library]; => Tuple2(Map(Points(x), f), Indices(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:PolyLine3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:PolyLine3D [Library]; => Tuple2(Map(Points(x), f), Closed(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:LineArray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:LineArray3D [Library]; => New(LineArray3D, Map(Lines(x), (\(ParameterDef=l$16549:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>))
    - IGeometry_18:Library.Deform(x: ConcreteType:TriangleArray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:TriangleArray3D [Library]; => New(TriangleArray3D, Map(Triangles(x), (\(ParameterDef=t$16585:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>))
    - IGeometry_18:Library.Deform(x: ConcreteType:PointArray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:PointArray3D [Library]; => New(PointArray3D, Map(Points(x), f))
    - IGeometry_18:Library.Deform(x: ConcreteType:QuadArray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:QuadArray3D [Library]; => New(QuadArray3D, Map(Quads(x), (\(ParameterDef=q$16643:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>))
    - IGeometry_18:Library.Deform(x: ConcreteType:QuadGrid3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:QuadGrid3D [Library]; => New(QuadGrid3D, Map(PointGrid(x), f), ClosedX(x), ClosedY(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:Bounds3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Bounds3D [Library]; => Bounds(Map(Corners(x), f))
    _ARG_ 0: x => IDeformable3D
    _ARG_ 1: (\(ParameterDef=p$16082:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1> => (Function1, $1622:, $1623:)

488. ScaleZ
  Type: (IDeformable3D, Number) => $892:constraint=IDeformable3D
  Sig: IGeometry_18:Library.ScaleZ(x: IDeformable3D, s: Number): $892:constraint=IDeformable3D
  Body: Deform(x, (\(ParameterDef=p$16114:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
  # functions: 16 AMBIGUOUS
    - IGeometry_18:Library.Deform(x: ConcreteType:Line3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Line3D [Library]; => Tuple2(f(A(x)), f(B(x)))
    - IGeometry_18:Library.Deform(x: ConcreteType:Ray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Ray3D [Library]; => Tuple2(f(Origin(x)), Normalize(f(Add(Origin(x), Direction(x)))))
    - IGeometry_18:Library.Deform(t: ConcreteType:Triangle3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Triangle3D [Library]; => Tuple3(f(A(t)), f(B(t)), f(C(t)))
    - IGeometry_18:Library.Deform(q: ConcreteType:Quad3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Quad3D [Library]; => Tuple4(f(A(q)), f(B(q)), f(C(q)), f(D(q)))
    - IGeometry_18:Library.Deform(v: ConcreteType:Vector3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Vector3D [Library]; => f(v)
    - IGeometry_18:Library.Deform(x: Concept:IDeformable3D,t: Concept:ITransform3D): Concept:IDeformable3D [Library]; => Deform(x, (\(ParameterDef=v$15801:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - IGeometry_18:Library.Deform(x: ConcreteType:LineMesh3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:LineMesh3D [Library]; => Tuple2(Map(Points(x), f), Indices(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:TriangleMesh3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:TriangleMesh3D [Library]; => Tuple2(Map(Points(x), f), Indices(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:QuadMesh3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:QuadMesh3D [Library]; => Tuple2(Map(Points(x), f), Indices(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:PolyLine3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:PolyLine3D [Library]; => Tuple2(Map(Points(x), f), Closed(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:LineArray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:LineArray3D [Library]; => New(LineArray3D, Map(Lines(x), (\(ParameterDef=l$16549:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>))
    - IGeometry_18:Library.Deform(x: ConcreteType:TriangleArray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:TriangleArray3D [Library]; => New(TriangleArray3D, Map(Triangles(x), (\(ParameterDef=t$16585:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>))
    - IGeometry_18:Library.Deform(x: ConcreteType:PointArray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:PointArray3D [Library]; => New(PointArray3D, Map(Points(x), f))
    - IGeometry_18:Library.Deform(x: ConcreteType:QuadArray3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:QuadArray3D [Library]; => New(QuadArray3D, Map(Quads(x), (\(ParameterDef=q$16643:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>))
    - IGeometry_18:Library.Deform(x: ConcreteType:QuadGrid3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:QuadGrid3D [Library]; => New(QuadGrid3D, Map(PointGrid(x), f), ClosedX(x), ClosedY(x))
    - IGeometry_18:Library.Deform(x: ConcreteType:Bounds3D,f: ConcreteType:Function1<ConcreteType:Vector3D,ConcreteType:Vector3D>): ConcreteType:Bounds3D [Library]; => Bounds(Map(Corners(x), f))
    _ARG_ 0: x => IDeformable3D
    _ARG_ 1: (\(ParameterDef=p$16114:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1> => (Function1, $1624:, $1625:)

515. NumColumns
  Type: (QuadGrid3D) => Integer
  Sig: IGeometry_18:Library.NumColumns(x: QuadGrid3D): Integer
  Body: NumColumns(PointGrid(x))
  # functions: 3 AMBIGUOUS
    - IGeometry_18:Library.NumColumns(x: ConcreteType:QuadGrid3D): ConcreteType:Integer [Library]; => NumColumns(PointGrid(x))
    - Intrinsics_22:Library.NumColumns(xs: ConcreteType:Array2D<TypeVariable:$T>): ConcreteType:Integer [Intrinsic]; => 
    - Intrinsics_22:Library.NumColumns(xs: ConcreteType:Array3D<TypeVariable:$T>): ConcreteType:Integer [Intrinsic]; => 
    _ARG_ 0: PointGrid(x) => $88:constraint=(IArray2D, Vector3D)

516. NumRows
  Type: (QuadGrid3D) => Integer
  Sig: IGeometry_18:Library.NumRows(x: QuadGrid3D): Integer
  Body: NumRows(PointGrid(x))
  # functions: 3 AMBIGUOUS
    - IGeometry_18:Library.NumRows(x: ConcreteType:QuadGrid3D): ConcreteType:Integer [Library]; => NumRows(PointGrid(x))
    - Intrinsics_22:Library.NumRows(xs: ConcreteType:Array2D<TypeVariable:$T>): ConcreteType:Integer [Intrinsic]; => 
    - Intrinsics_22:Library.NumRows(xs: ConcreteType:Array3D<TypeVariable:$T>): ConcreteType:Integer [Intrinsic]; => 
    _ARG_ 0: PointGrid(x) => $88:constraint=(IArray2D, Vector3D)


Group IInterval_20:Library

568. Size
  Type: ((IInterval, $942:)) => $943:
  Sig: IInterval_20:Library.Size(x: (IInterval, $942:)): $943:
  Body: Subtract(End(x), Start(x))
  # functions: 4 AMBIGUOUS
    - INumerical_4:Library.Subtract(x: Concept:INumerical,y: Concept:INumerical): Concept:INumerical [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9113:Concept:IAny, ParameterDef=b$9115:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Subtract(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Subtract(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Subtract(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Subtract(Vector4D(q1), Vector4D(q2))
    _ARG_ 0: End(x) => Vector2D
    _ARG_ 1: Start(x) => Vector2D

571. Center
  Type: ((IInterval, $949:)) => $950:
  Sig: IInterval_20:Library.Center(x: (IInterval, $949:)): $950:
  Body: Lerp(x, 0.5)
  # functions: 2 AMBIGUOUS
    - IBounds_2:Library.Lerp(x: Concept:IBounds<TypeVariable:$T>,amount: ConcreteType:Number): TypeVariable:$T [Library]; => Lerp(Min(x), Max(x), amount)
    - IInterval_20:Library.Lerp(x: Concept:IInterval<TypeVariable:$T>,amount: ConcreteType:Number): TypeVariable:$T [Library]; => Lerp(Start(x), End(x), amount)
    _ARG_ 0: x => (IInterval, $949:)
    _ARG_ 1: 0.5 => Number

572. Contains
  Type: ((IInterval, $951:), $952:) => Boolean
  Sig: IInterval_20:Library.Contains(x: (IInterval, $951:), value: $952:): Boolean
  Body: Between(value, Start(x), End(x))
  # functions: 2 AMBIGUOUS
    - INumerical_4:Library.Between(self: Concept:IReal,min: Concept:IReal,max: Concept:IReal): ConcreteType:Boolean [Library]; => And(GreaterThanOrEquals(self, min), LessThanOrEquals(self, max))
    - INumerical_4:Library.Between(x: Concept:INumerical,a: Concept:INumerical,b: Concept:INumerical): ConcreteType:Boolean [Library]; => All(Zip(Components(x), Components(a), Components(b), (\(ParameterDef=x0$8487:Concept:IAny, ParameterDef=a0$8489:Concept:IAny, ParameterDef=b0$8491:Concept:IAny) -> ConcreteType:Function3<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2,TypeVariable:$T3>), (\(ParameterDef=x0$8516:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    _ARG_ 0: value => $952:
    _ARG_ 1: Start(x) => Vector2D
    _ARG_ 2: End(x) => Vector2D

587. LinearSpace
  Type: ((IInterval, $992:), Integer) => $994:constraint=(IArray, $993:)
  Sig: IInterval_20:Library.LinearSpace(interval: (IInterval, $992:), count: Integer): $994:constraint=(IArray, $993:)
  Body: Map(LinearSpace(count), (\(ParameterDef=x$18508:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
  # functions: 2 AMBIGUOUS
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray<TypeVariable:$T2> [Library]; => MapRange(Count(xs), (\(ParameterDef=i$6222:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray2D<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray2D<TypeVariable:$T2> [Library]; => MakeArray2D(NumColumns(xs), NumRows(xs), (\(ParameterDef=a$6857:Concept:IAny, ParameterDef=b$6859:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    _ARG_ 0: LinearSpace(count) => $990:constraint=(IArray, Number)
    _ARG_ 1: (\(ParameterDef=x$18508:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1> => (Function1, $1361:, $1362:)

588. LinearSpaceExclusive
  Type: ((IInterval, $995:), Integer) => $997:constraint=(IArray, $996:)
  Sig: IInterval_20:Library.LinearSpaceExclusive(interval: (IInterval, $995:), count: Integer): $997:constraint=(IArray, $996:)
  Body: Map(LinearSpaceExclusive(count), (\(ParameterDef=x$18538:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
  # functions: 2 AMBIGUOUS
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray<TypeVariable:$T2> [Library]; => MapRange(Count(xs), (\(ParameterDef=i$6222:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray2D<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray2D<TypeVariable:$T2> [Library]; => MakeArray2D(NumColumns(xs), NumRows(xs), (\(ParameterDef=a$6857:Concept:IAny, ParameterDef=b$6859:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    _ARG_ 0: LinearSpaceExclusive(count) => $991:constraint=(IArray, Number)
    _ARG_ 1: (\(ParameterDef=x$18538:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1> => (Function1, $1726:, $1727:)

589. GeometricSpace
  Type: (Integer) => $998:constraint=(IArray, Number)
  Sig: IInterval_20:Library.GeometricSpace(count: Integer): $998:constraint=(IArray, Number)
  Body: Map(LinearSpace(count), (\(ParameterDef=x$18564:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
  # functions: 2 AMBIGUOUS
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray<TypeVariable:$T2> [Library]; => MapRange(Count(xs), (\(ParameterDef=i$6222:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray2D<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray2D<TypeVariable:$T2> [Library]; => MakeArray2D(NumColumns(xs), NumRows(xs), (\(ParameterDef=a$6857:Concept:IAny, ParameterDef=b$6859:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    _ARG_ 0: LinearSpace(count) => $990:constraint=(IArray, Number)
    _ARG_ 1: (\(ParameterDef=x$18564:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1> => (Function1, $1728:, $1729:)

590. GeometricSpaceExclusive
  Type: (Integer) => $999:constraint=(IArray, Number)
  Sig: IInterval_20:Library.GeometricSpaceExclusive(count: Integer): $999:constraint=(IArray, Number)
  Body: Map(LinearSpaceExclusive(count), (\(ParameterDef=x$18590:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
  # functions: 2 AMBIGUOUS
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray<TypeVariable:$T2> [Library]; => MapRange(Count(xs), (\(ParameterDef=i$6222:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray2D<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray2D<TypeVariable:$T2> [Library]; => MakeArray2D(NumColumns(xs), NumRows(xs), (\(ParameterDef=a$6857:Concept:IAny, ParameterDef=b$6859:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    _ARG_ 0: LinearSpaceExclusive(count) => $991:constraint=(IArray, Number)
    _ARG_ 1: (\(ParameterDef=x$18590:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1> => (Function1, $1730:, $1731:)

591. GeometricSpace
  Type: ((IInterval, $1000:), Integer) => $1002:constraint=(IArray, $1001:)
  Sig: IInterval_20:Library.GeometricSpace(interval: (IInterval, $1000:), count: Integer): $1002:constraint=(IArray, $1001:)
  Body: Map(GeometricSpace(count), (\(ParameterDef=x$18620:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
  # functions: 2 AMBIGUOUS
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray<TypeVariable:$T2> [Library]; => MapRange(Count(xs), (\(ParameterDef=i$6222:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray2D<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray2D<TypeVariable:$T2> [Library]; => MakeArray2D(NumColumns(xs), NumRows(xs), (\(ParameterDef=a$6857:Concept:IAny, ParameterDef=b$6859:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    _ARG_ 0: GeometricSpace(count) => $998:constraint=(IArray, Number)
    _ARG_ 1: (\(ParameterDef=x$18620:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1> => (Function1, $1732:, $1733:)

592. GeometricSpaceExclusive
  Type: ((IInterval, $1003:), Integer) => $1005:constraint=(IArray, $1004:)
  Sig: IInterval_20:Library.GeometricSpaceExclusive(interval: (IInterval, $1003:), count: Integer): $1005:constraint=(IArray, $1004:)
  Body: Map(GeometricSpaceExclusive(count), (\(ParameterDef=x$18650:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
  # functions: 2 AMBIGUOUS
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray<TypeVariable:$T2> [Library]; => MapRange(Count(xs), (\(ParameterDef=i$6222:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray2D<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray2D<TypeVariable:$T2> [Library]; => MakeArray2D(NumColumns(xs), NumRows(xs), (\(ParameterDef=a$6857:Concept:IAny, ParameterDef=b$6859:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    _ARG_ 0: GeometricSpaceExclusive(count) => $999:constraint=(IArray, Number)
    _ARG_ 1: (\(ParameterDef=x$18650:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1> => (Function1, $1734:, $1735:)

596. Subdivide
  Type: ((IInterval, $1013:), Integer) => $1015:constraint=(IArray, (IInterval, $1014:))
  Sig: IInterval_20:Library.Subdivide(interval: (IInterval, $1013:), count: Integer): $1015:constraint=(IArray, (IInterval, $1014:))
  Body: Map(Intervals(count), (\(ParameterDef=i$18764:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
  # functions: 2 AMBIGUOUS
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray<TypeVariable:$T2> [Library]; => MapRange(Count(xs), (\(ParameterDef=i$6222:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - ArrayLibrary_0:Library.Map(xs: Concept:IArray2D<TypeVariable:$T1>,f: ConcreteType:Function1<TypeVariable:$T1,TypeVariable:$T2>): Concept:IArray2D<TypeVariable:$T2> [Library]; => MakeArray2D(NumColumns(xs), NumRows(xs), (\(ParameterDef=a$6857:Concept:IAny, ParameterDef=b$6859:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    _ARG_ 0: Intervals(count) => $1006:constraint=(IArray, NumberInterval)
    _ARG_ 1: (\(ParameterDef=i$18764:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1> => (Function1, $1741:, $1742:)


Group Intrinsics_22:Library


Group Transforms_26:Library

663. Matrix
  Type: (Translation3D) => Matrix4x4
  Sig: Transforms_26:Library.Matrix(t: Translation3D): Matrix4x4
  Body: Matrix(Translation(t))
  # functions: 12 AMBIGUOUS
    - Transforms_26:Library.Matrix(v: ConcreteType:Vector3D): ConcreteType:Matrix4x4 [Library]; => CreateTranslation(Matrix4x4, v)
    - Transforms_26:Library.Matrix(t: ConcreteType:Translation3D): ConcreteType:Matrix4x4 [Library]; => Matrix(Translation(t))
    - Transforms_26:Library.Matrix(m: ConcreteType:Matrix3x3): ConcreteType:Matrix4x4 [Library]; => CreateFromRows(Matrix4x4, Row1(m), Row2(m), Row3(m), Tuple4(0, 0, 0, 1))
    - Transforms_26:Library.Matrix(m: ConcreteType:Matrix4x4): ConcreteType:Matrix4x4 [Library]; => m
    - Transforms_26:Library.Matrix(t: ConcreteType:IdentityTransform3D): ConcreteType:Matrix4x4 [Library]; => Identity(Matrix4x4)
    - Transforms_26:Library.Matrix(t: ConcreteType:Transform3D): ConcreteType:Matrix4x4 [Library]; => Multiply(Matrix(Scale(t)), Multiply(Matrix(Rotation(t)), Matrix(Translation(t))))
    - Transforms_26:Library.Matrix(p: ConcreteType:Pose3D): ConcreteType:Matrix4x4 [Library]; => Multiply(Matrix(Rotation(p)), Matrix(Position(p)))
    - Transforms_26:Library.Matrix(aa: ConcreteType:AxisAngle): ConcreteType:Matrix4x4 [Library]; => Matrix(Quaternion(aa))
    - Transforms_26:Library.Matrix(e: ConcreteType:EulerAngles): ConcreteType:Matrix4x4 [Library]; => Matrix(Quaternion(e))
    - Transforms_26:Library.Matrix(f: ConcreteType:Frame3D): ConcreteType:Matrix4x4 [Library]; => Matrix(Pose3D(f))
    - Transforms_26:Library.Matrix(r: ConcreteType:Rotation3D): ConcreteType:Matrix4x4 [Library]; => Matrix(Quaternion(r))
    - Transforms_26:Library.Matrix(q: ConcreteType:Quaternion): ConcreteType:Matrix4x4 [Library]; => Plato.Compiler.Symbols.BlockStatement
    _ARG_ 0: Translation(t) => Vector3D

664. Transform
  Type: (Translation3D, Vector3D) => Vector3D
  Sig: Transforms_26:Library.Transform(t: Translation3D, v: Vector3D): Vector3D
  Body: Add(v, Translation(t))
  # functions: 5 AMBIGUOUS
    - INumerical_4:Library.Add(x: Concept:INumberLike,y: ConcreteType:Number): Concept:INumberLike [Library]; => FromNumber(x, Add(ToNumber(x), y))
    - INumerical_4:Library.Add(x: Concept:INumerical,y: Concept:INumerical): Concept:INumerical [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9082:Concept:IAny, ParameterDef=b$9084:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Add(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Add(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Add(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Add(Vector4D(q1), Vector4D(q2))
    _ARG_ 0: v => Vector3D
    _ARG_ 1: Translation(t) => Vector3D

666. Matrix4x4
  Type: (ITransform3D) => Matrix4x4
  Sig: Transforms_26:Library.Matrix4x4(t: ITransform3D): Matrix4x4
  Body: Matrix(t)
  # functions: 12 AMBIGUOUS
    - Transforms_26:Library.Matrix(v: ConcreteType:Vector3D): ConcreteType:Matrix4x4 [Library]; => CreateTranslation(Matrix4x4, v)
    - Transforms_26:Library.Matrix(t: ConcreteType:Translation3D): ConcreteType:Matrix4x4 [Library]; => Matrix(Translation(t))
    - Transforms_26:Library.Matrix(m: ConcreteType:Matrix3x3): ConcreteType:Matrix4x4 [Library]; => CreateFromRows(Matrix4x4, Row1(m), Row2(m), Row3(m), Tuple4(0, 0, 0, 1))
    - Transforms_26:Library.Matrix(m: ConcreteType:Matrix4x4): ConcreteType:Matrix4x4 [Library]; => m
    - Transforms_26:Library.Matrix(t: ConcreteType:IdentityTransform3D): ConcreteType:Matrix4x4 [Library]; => Identity(Matrix4x4)
    - Transforms_26:Library.Matrix(t: ConcreteType:Transform3D): ConcreteType:Matrix4x4 [Library]; => Multiply(Matrix(Scale(t)), Multiply(Matrix(Rotation(t)), Matrix(Translation(t))))
    - Transforms_26:Library.Matrix(p: ConcreteType:Pose3D): ConcreteType:Matrix4x4 [Library]; => Multiply(Matrix(Rotation(p)), Matrix(Position(p)))
    - Transforms_26:Library.Matrix(aa: ConcreteType:AxisAngle): ConcreteType:Matrix4x4 [Library]; => Matrix(Quaternion(aa))
    - Transforms_26:Library.Matrix(e: ConcreteType:EulerAngles): ConcreteType:Matrix4x4 [Library]; => Matrix(Quaternion(e))
    - Transforms_26:Library.Matrix(f: ConcreteType:Frame3D): ConcreteType:Matrix4x4 [Library]; => Matrix(Pose3D(f))
    - Transforms_26:Library.Matrix(r: ConcreteType:Rotation3D): ConcreteType:Matrix4x4 [Library]; => Matrix(Quaternion(r))
    - Transforms_26:Library.Matrix(q: ConcreteType:Quaternion): ConcreteType:Matrix4x4 [Library]; => Plato.Compiler.Symbols.BlockStatement
    _ARG_ 0: t => ITransform3D

667. M11
  Type: (Matrix4x4) => Number
  Sig: Transforms_26:Library.M11(m: Matrix4x4): Number
  Body: X(Column1(m))
  # functions: 4 AMBIGUOUS
    - Vector2D_528:ConcreteType.X(self: ConcreteType:Vector2D): ConcreteType:Number [Field]; => 
    - Vector3D_530:ConcreteType.X(self: ConcreteType:Vector3D): ConcreteType:Number [Field]; => 
    - Vector4D_532:ConcreteType.X(self: ConcreteType:Vector4D): ConcreteType:Number [Field]; => 
    - Quaternion_548:ConcreteType.X(self: ConcreteType:Quaternion): ConcreteType:Number [Field]; => 
    _ARG_ 0: Column1(m) => Vector3D

668. M12
  Type: (Matrix4x4) => Number
  Sig: Transforms_26:Library.M12(m: Matrix4x4): Number
  Body: X(Column2(m))
  # functions: 4 AMBIGUOUS
    - Vector2D_528:ConcreteType.X(self: ConcreteType:Vector2D): ConcreteType:Number [Field]; => 
    - Vector3D_530:ConcreteType.X(self: ConcreteType:Vector3D): ConcreteType:Number [Field]; => 
    - Vector4D_532:ConcreteType.X(self: ConcreteType:Vector4D): ConcreteType:Number [Field]; => 
    - Quaternion_548:ConcreteType.X(self: ConcreteType:Quaternion): ConcreteType:Number [Field]; => 
    _ARG_ 0: Column2(m) => Vector3D

669. M13
  Type: (Matrix4x4) => Number
  Sig: Transforms_26:Library.M13(m: Matrix4x4): Number
  Body: X(Column3(m))
  # functions: 4 AMBIGUOUS
    - Vector2D_528:ConcreteType.X(self: ConcreteType:Vector2D): ConcreteType:Number [Field]; => 
    - Vector3D_530:ConcreteType.X(self: ConcreteType:Vector3D): ConcreteType:Number [Field]; => 
    - Vector4D_532:ConcreteType.X(self: ConcreteType:Vector4D): ConcreteType:Number [Field]; => 
    - Quaternion_548:ConcreteType.X(self: ConcreteType:Quaternion): ConcreteType:Number [Field]; => 
    _ARG_ 0: Column3(m) => Vector3D

670. M14
  Type: (Matrix4x4) => Number
  Sig: Transforms_26:Library.M14(m: Matrix4x4): Number
  Body: X(Column4(m))
  # functions: 4 AMBIGUOUS
    - Vector2D_528:ConcreteType.X(self: ConcreteType:Vector2D): ConcreteType:Number [Field]; => 
    - Vector3D_530:ConcreteType.X(self: ConcreteType:Vector3D): ConcreteType:Number [Field]; => 
    - Vector4D_532:ConcreteType.X(self: ConcreteType:Vector4D): ConcreteType:Number [Field]; => 
    - Quaternion_548:ConcreteType.X(self: ConcreteType:Quaternion): ConcreteType:Number [Field]; => 
    _ARG_ 0: Column4(m) => Vector4D

671. M21
  Type: (Matrix4x4) => Number
  Sig: Transforms_26:Library.M21(m: Matrix4x4): Number
  Body: Y(Column1(m))
  # functions: 5 AMBIGUOUS
    - ColorYCbCr_106:ConcreteType.Y(self: ConcreteType:ColorYCbCr): ConcreteType:Unit [Field]; => 
    - Vector2D_528:ConcreteType.Y(self: ConcreteType:Vector2D): ConcreteType:Number [Field]; => 
    - Vector3D_530:ConcreteType.Y(self: ConcreteType:Vector3D): ConcreteType:Number [Field]; => 
    - Vector4D_532:ConcreteType.Y(self: ConcreteType:Vector4D): ConcreteType:Number [Field]; => 
    - Quaternion_548:ConcreteType.Y(self: ConcreteType:Quaternion): ConcreteType:Number [Field]; => 
    _ARG_ 0: Column1(m) => Vector3D

672. M22
  Type: (Matrix4x4) => Number
  Sig: Transforms_26:Library.M22(m: Matrix4x4): Number
  Body: Y(Column2(m))
  # functions: 5 AMBIGUOUS
    - ColorYCbCr_106:ConcreteType.Y(self: ConcreteType:ColorYCbCr): ConcreteType:Unit [Field]; => 
    - Vector2D_528:ConcreteType.Y(self: ConcreteType:Vector2D): ConcreteType:Number [Field]; => 
    - Vector3D_530:ConcreteType.Y(self: ConcreteType:Vector3D): ConcreteType:Number [Field]; => 
    - Vector4D_532:ConcreteType.Y(self: ConcreteType:Vector4D): ConcreteType:Number [Field]; => 
    - Quaternion_548:ConcreteType.Y(self: ConcreteType:Quaternion): ConcreteType:Number [Field]; => 
    _ARG_ 0: Column2(m) => Vector3D

673. M23
  Type: (Matrix4x4) => Number
  Sig: Transforms_26:Library.M23(m: Matrix4x4): Number
  Body: Y(Column3(m))
  # functions: 5 AMBIGUOUS
    - ColorYCbCr_106:ConcreteType.Y(self: ConcreteType:ColorYCbCr): ConcreteType:Unit [Field]; => 
    - Vector2D_528:ConcreteType.Y(self: ConcreteType:Vector2D): ConcreteType:Number [Field]; => 
    - Vector3D_530:ConcreteType.Y(self: ConcreteType:Vector3D): ConcreteType:Number [Field]; => 
    - Vector4D_532:ConcreteType.Y(self: ConcreteType:Vector4D): ConcreteType:Number [Field]; => 
    - Quaternion_548:ConcreteType.Y(self: ConcreteType:Quaternion): ConcreteType:Number [Field]; => 
    _ARG_ 0: Column3(m) => Vector3D

674. M24
  Type: (Matrix4x4) => Number
  Sig: Transforms_26:Library.M24(m: Matrix4x4): Number
  Body: Y(Column4(m))
  # functions: 5 AMBIGUOUS
    - ColorYCbCr_106:ConcreteType.Y(self: ConcreteType:ColorYCbCr): ConcreteType:Unit [Field]; => 
    - Vector2D_528:ConcreteType.Y(self: ConcreteType:Vector2D): ConcreteType:Number [Field]; => 
    - Vector3D_530:ConcreteType.Y(self: ConcreteType:Vector3D): ConcreteType:Number [Field]; => 
    - Vector4D_532:ConcreteType.Y(self: ConcreteType:Vector4D): ConcreteType:Number [Field]; => 
    - Quaternion_548:ConcreteType.Y(self: ConcreteType:Quaternion): ConcreteType:Number [Field]; => 
    _ARG_ 0: Column4(m) => Vector4D

675. M31
  Type: (Matrix4x4) => Number
  Sig: Transforms_26:Library.M31(m: Matrix4x4): Number
  Body: Z(Column1(m))
  # functions: 3 AMBIGUOUS
    - Vector3D_530:ConcreteType.Z(self: ConcreteType:Vector3D): ConcreteType:Number [Field]; => 
    - Vector4D_532:ConcreteType.Z(self: ConcreteType:Vector4D): ConcreteType:Number [Field]; => 
    - Quaternion_548:ConcreteType.Z(self: ConcreteType:Quaternion): ConcreteType:Number [Field]; => 
    _ARG_ 0: Column1(m) => Vector3D

676. M32
  Type: (Matrix4x4) => Number
  Sig: Transforms_26:Library.M32(m: Matrix4x4): Number
  Body: Z(Column2(m))
  # functions: 3 AMBIGUOUS
    - Vector3D_530:ConcreteType.Z(self: ConcreteType:Vector3D): ConcreteType:Number [Field]; => 
    - Vector4D_532:ConcreteType.Z(self: ConcreteType:Vector4D): ConcreteType:Number [Field]; => 
    - Quaternion_548:ConcreteType.Z(self: ConcreteType:Quaternion): ConcreteType:Number [Field]; => 
    _ARG_ 0: Column2(m) => Vector3D

677. M33
  Type: (Matrix4x4) => Number
  Sig: Transforms_26:Library.M33(m: Matrix4x4): Number
  Body: Z(Column3(m))
  # functions: 3 AMBIGUOUS
    - Vector3D_530:ConcreteType.Z(self: ConcreteType:Vector3D): ConcreteType:Number [Field]; => 
    - Vector4D_532:ConcreteType.Z(self: ConcreteType:Vector4D): ConcreteType:Number [Field]; => 
    - Quaternion_548:ConcreteType.Z(self: ConcreteType:Quaternion): ConcreteType:Number [Field]; => 
    _ARG_ 0: Column3(m) => Vector3D

678. M34
  Type: (Matrix4x4) => Number
  Sig: Transforms_26:Library.M34(m: Matrix4x4): Number
  Body: Z(Column4(m))
  # functions: 3 AMBIGUOUS
    - Vector3D_530:ConcreteType.Z(self: ConcreteType:Vector3D): ConcreteType:Number [Field]; => 
    - Vector4D_532:ConcreteType.Z(self: ConcreteType:Vector4D): ConcreteType:Number [Field]; => 
    - Quaternion_548:ConcreteType.Z(self: ConcreteType:Quaternion): ConcreteType:Number [Field]; => 
    _ARG_ 0: Column4(m) => Vector4D

679. M41
  Type: (Matrix4x4) => Number
  Sig: Transforms_26:Library.M41(m: Matrix4x4): Number
  Body: W(Column1(m))
  # functions: 2 AMBIGUOUS
    - Vector4D_532:ConcreteType.W(self: ConcreteType:Vector4D): ConcreteType:Number [Field]; => 
    - Quaternion_548:ConcreteType.W(self: ConcreteType:Quaternion): ConcreteType:Number [Field]; => 
    _ARG_ 0: Column1(m) => Vector3D

680. M42
  Type: (Matrix4x4) => Number
  Sig: Transforms_26:Library.M42(m: Matrix4x4): Number
  Body: W(Column2(m))
  # functions: 2 AMBIGUOUS
    - Vector4D_532:ConcreteType.W(self: ConcreteType:Vector4D): ConcreteType:Number [Field]; => 
    - Quaternion_548:ConcreteType.W(self: ConcreteType:Quaternion): ConcreteType:Number [Field]; => 
    _ARG_ 0: Column2(m) => Vector3D

681. M43
  Type: (Matrix4x4) => Number
  Sig: Transforms_26:Library.M43(m: Matrix4x4): Number
  Body: W(Column3(m))
  # functions: 2 AMBIGUOUS
    - Vector4D_532:ConcreteType.W(self: ConcreteType:Vector4D): ConcreteType:Number [Field]; => 
    - Quaternion_548:ConcreteType.W(self: ConcreteType:Quaternion): ConcreteType:Number [Field]; => 
    _ARG_ 0: Column3(m) => Vector3D

682. M44
  Type: (Matrix4x4) => Number
  Sig: Transforms_26:Library.M44(m: Matrix4x4): Number
  Body: W(Column4(m))
  # functions: 2 AMBIGUOUS
    - Vector4D_532:ConcreteType.W(self: ConcreteType:Vector4D): ConcreteType:Number [Field]; => 
    - Quaternion_548:ConcreteType.W(self: ConcreteType:Quaternion): ConcreteType:Number [Field]; => 
    _ARG_ 0: Column4(m) => Vector4D

695. Transform
  Type: (Matrix4x4, Vector3D) => Vector3D
  Sig: Transforms_26:Library.Transform(m: Matrix4x4, v: Vector3D): Vector3D
  Body: Multiply(m, v)
  # functions: 10 AMBIGUOUS
    - INumerical_4:Library.Multiply(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Multiply(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Multiply(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9005:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Multiply(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9165:Concept:IAny, ParameterDef=b$9167:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Tuple3(Add(Multiply(X(v), M11(m)), Add(Multiply(Y(v), M21(m)), Add(Multiply(Z(v), M31(m)), M41(m)))), Add(Multiply(X(v), M12(m)), Add(Multiply(Y(v), M22(m)), Add(Multiply(Z(v), M32(m)), M42(m)))), Add(Multiply(X(v), M13(m)), Add(Multiply(Y(v), M23(m)), Add(Multiply(Z(v), M33(m)), M43(m)))))
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Multiply(Column1(m), s), Multiply(Column2(m), s), Multiply(Column3(m), s), Multiply(Column4(m), s))
    - Transforms_26:Library.Multiply(a: ConcreteType:Matrix4x4,b: ConcreteType:Matrix4x4): ConcreteType:Matrix4x4 [Library]; => CreateFromRows(Matrix4x4, Tuple4(Add(Multiply(M11(a), M11(b)), Add(Multiply(M12(a), M21(b)), Add(Multiply(M13(a), M31(b)), Multiply(M14(a), M41(b))))), Add(Multiply(M11(a), M12(b)), Add(Multiply(M12(a), M22(b)), Add(Multiply(M13(a), M32(b)), Multiply(M14(a), M42(b))))), Add(Multiply(M11(a), M13(b)), Add(Multiply(M12(a), M23(b)), Add(Multiply(M13(a), M33(b)), Multiply(M14(a), M43(b))))), Add(Multiply(M11(a), M14(b)), Add(Multiply(M12(a), M24(b)), Add(Multiply(M13(a), M34(b)), Multiply(M14(a), M44(b)))))), Tuple4(Add(Multiply(M21(a), M11(b)), Add(Multiply(M22(a), M21(b)), Add(Multiply(M23(a), M31(b)), Multiply(M24(a), M41(b))))), Add(Multiply(M21(a), M12(b)), Add(Multiply(M22(a), M22(b)), Add(Multiply(M23(a), M32(b)), Multiply(M24(a), M42(b))))), Add(Multiply(M21(a), M13(b)), Add(Multiply(M22(a), M23(b)), Add(Multiply(M23(a), M33(b)), Multiply(M24(a), M43(b))))), Add(Multiply(M21(a), M14(b)), Add(Multiply(M22(a), M24(b)), Add(Multiply(M23(a), M34(b)), Multiply(M24(a), M44(b)))))), Tuple4(Add(Multiply(M31(a), M11(b)), Add(Multiply(M32(a), M21(b)), Add(Multiply(M33(a), M31(b)), Multiply(M34(a), M41(b))))), Add(Multiply(M31(a), M12(b)), Add(Multiply(M32(a), M22(b)), Add(Multiply(M33(a), M32(b)), Multiply(M34(a), M42(b))))), Add(Multiply(M31(a), M13(b)), Add(Multiply(M32(a), M23(b)), Add(Multiply(M33(a), M33(b)), Multiply(M34(a), M43(b))))), Add(Multiply(M31(a), M14(b)), Add(Multiply(M32(a), M24(b)), Add(Multiply(M33(a), M34(b)), Multiply(M34(a), M44(b)))))), Tuple4(Add(Multiply(M41(a), M11(b)), Add(Multiply(M42(a), M21(b)), Add(Multiply(M43(a), M31(b)), Multiply(M44(a), M41(b))))), Add(Multiply(M41(a), M12(b)), Add(Multiply(M42(a), M22(b)), Add(Multiply(M43(a), M32(b)), Multiply(M44(a), M42(b))))), Add(Multiply(M41(a), M13(b)), Add(Multiply(M42(a), M23(b)), Add(Multiply(M43(a), M33(b)), Multiply(M44(a), M43(b))))), Add(Multiply(M41(a), M14(b)), Add(Multiply(M42(a), M24(b)), Add(Multiply(M43(a), M34(b)), Multiply(M44(a), M44(b)))))))
    - Transforms_26:Library.Multiply(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Multiply(Vector4D(q), scalar)
    - Transforms_26:Library.Multiply(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Plato.Compiler.Symbols.BlockStatement
    _ARG_ 0: m => Matrix4x4
    _ARG_ 1: v => Vector3D

706. M11
  Type: (Matrix3x3) => Number
  Sig: Transforms_26:Library.M11(m: Matrix3x3): Number
  Body: X(Column1)
  # functions: 4 AMBIGUOUS
    - Vector2D_528:ConcreteType.X(self: ConcreteType:Vector2D): ConcreteType:Number [Field]; => 
    - Vector3D_530:ConcreteType.X(self: ConcreteType:Vector3D): ConcreteType:Number [Field]; => 
    - Vector4D_532:ConcreteType.X(self: ConcreteType:Vector4D): ConcreteType:Number [Field]; => 
    - Quaternion_548:ConcreteType.X(self: ConcreteType:Quaternion): ConcreteType:Number [Field]; => 
    _ARG_ 0: Column1 => IAny

707. M12
  Type: (Matrix3x3) => Number
  Sig: Transforms_26:Library.M12(m: Matrix3x3): Number
  Body: X(Column2)
  # functions: 4 AMBIGUOUS
    - Vector2D_528:ConcreteType.X(self: ConcreteType:Vector2D): ConcreteType:Number [Field]; => 
    - Vector3D_530:ConcreteType.X(self: ConcreteType:Vector3D): ConcreteType:Number [Field]; => 
    - Vector4D_532:ConcreteType.X(self: ConcreteType:Vector4D): ConcreteType:Number [Field]; => 
    - Quaternion_548:ConcreteType.X(self: ConcreteType:Quaternion): ConcreteType:Number [Field]; => 
    _ARG_ 0: Column2 => IAny

708. M13
  Type: (Matrix3x3) => Number
  Sig: Transforms_26:Library.M13(m: Matrix3x3): Number
  Body: X(Column3)
  # functions: 4 AMBIGUOUS
    - Vector2D_528:ConcreteType.X(self: ConcreteType:Vector2D): ConcreteType:Number [Field]; => 
    - Vector3D_530:ConcreteType.X(self: ConcreteType:Vector3D): ConcreteType:Number [Field]; => 
    - Vector4D_532:ConcreteType.X(self: ConcreteType:Vector4D): ConcreteType:Number [Field]; => 
    - Quaternion_548:ConcreteType.X(self: ConcreteType:Quaternion): ConcreteType:Number [Field]; => 
    _ARG_ 0: Column3 => IAny

709. M21
  Type: (Matrix3x3) => Number
  Sig: Transforms_26:Library.M21(m: Matrix3x3): Number
  Body: Y(Column1)
  # functions: 5 AMBIGUOUS
    - ColorYCbCr_106:ConcreteType.Y(self: ConcreteType:ColorYCbCr): ConcreteType:Unit [Field]; => 
    - Vector2D_528:ConcreteType.Y(self: ConcreteType:Vector2D): ConcreteType:Number [Field]; => 
    - Vector3D_530:ConcreteType.Y(self: ConcreteType:Vector3D): ConcreteType:Number [Field]; => 
    - Vector4D_532:ConcreteType.Y(self: ConcreteType:Vector4D): ConcreteType:Number [Field]; => 
    - Quaternion_548:ConcreteType.Y(self: ConcreteType:Quaternion): ConcreteType:Number [Field]; => 
    _ARG_ 0: Column1 => IAny

710. M22
  Type: (Matrix3x3) => Number
  Sig: Transforms_26:Library.M22(m: Matrix3x3): Number
  Body: Y(Column2)
  # functions: 5 AMBIGUOUS
    - ColorYCbCr_106:ConcreteType.Y(self: ConcreteType:ColorYCbCr): ConcreteType:Unit [Field]; => 
    - Vector2D_528:ConcreteType.Y(self: ConcreteType:Vector2D): ConcreteType:Number [Field]; => 
    - Vector3D_530:ConcreteType.Y(self: ConcreteType:Vector3D): ConcreteType:Number [Field]; => 
    - Vector4D_532:ConcreteType.Y(self: ConcreteType:Vector4D): ConcreteType:Number [Field]; => 
    - Quaternion_548:ConcreteType.Y(self: ConcreteType:Quaternion): ConcreteType:Number [Field]; => 
    _ARG_ 0: Column2 => IAny

711. M23
  Type: (Matrix3x3) => Number
  Sig: Transforms_26:Library.M23(m: Matrix3x3): Number
  Body: Y(Column3)
  # functions: 5 AMBIGUOUS
    - ColorYCbCr_106:ConcreteType.Y(self: ConcreteType:ColorYCbCr): ConcreteType:Unit [Field]; => 
    - Vector2D_528:ConcreteType.Y(self: ConcreteType:Vector2D): ConcreteType:Number [Field]; => 
    - Vector3D_530:ConcreteType.Y(self: ConcreteType:Vector3D): ConcreteType:Number [Field]; => 
    - Vector4D_532:ConcreteType.Y(self: ConcreteType:Vector4D): ConcreteType:Number [Field]; => 
    - Quaternion_548:ConcreteType.Y(self: ConcreteType:Quaternion): ConcreteType:Number [Field]; => 
    _ARG_ 0: Column3 => IAny

712. M31
  Type: (Matrix3x3) => Number
  Sig: Transforms_26:Library.M31(m: Matrix3x3): Number
  Body: Z(Column1)
  # functions: 3 AMBIGUOUS
    - Vector3D_530:ConcreteType.Z(self: ConcreteType:Vector3D): ConcreteType:Number [Field]; => 
    - Vector4D_532:ConcreteType.Z(self: ConcreteType:Vector4D): ConcreteType:Number [Field]; => 
    - Quaternion_548:ConcreteType.Z(self: ConcreteType:Quaternion): ConcreteType:Number [Field]; => 
    _ARG_ 0: Column1 => IAny

713. M32
  Type: (Matrix3x3) => Number
  Sig: Transforms_26:Library.M32(m: Matrix3x3): Number
  Body: Z(Column2)
  # functions: 3 AMBIGUOUS
    - Vector3D_530:ConcreteType.Z(self: ConcreteType:Vector3D): ConcreteType:Number [Field]; => 
    - Vector4D_532:ConcreteType.Z(self: ConcreteType:Vector4D): ConcreteType:Number [Field]; => 
    - Quaternion_548:ConcreteType.Z(self: ConcreteType:Quaternion): ConcreteType:Number [Field]; => 
    _ARG_ 0: Column2 => IAny

714. M33
  Type: (Matrix3x3) => Number
  Sig: Transforms_26:Library.M33(m: Matrix3x3): Number
  Body: Z(Column3)
  # functions: 3 AMBIGUOUS
    - Vector3D_530:ConcreteType.Z(self: ConcreteType:Vector3D): ConcreteType:Number [Field]; => 
    - Vector4D_532:ConcreteType.Z(self: ConcreteType:Vector4D): ConcreteType:Number [Field]; => 
    - Quaternion_548:ConcreteType.Z(self: ConcreteType:Quaternion): ConcreteType:Number [Field]; => 
    _ARG_ 0: Column3 => IAny

715. Determinant
  Type: (Matrix3x3) => Number
  Sig: Transforms_26:Library.Determinant(m: Matrix3x3): Number
  Body: Subtract(Multiply(M11, Subtract(Multiply(M22, M33), Multiply(M23, M32))), Add(Multiply(M12, Subtract(Multiply(M21, M33), Multiply(M23, M31))), Multiply(M13, Subtract(Multiply(M21, M32), Multiply(M22, M31)))))
  # functions: 4 AMBIGUOUS
    - INumerical_4:Library.Subtract(x: Concept:INumerical,y: Concept:INumerical): Concept:INumerical [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9113:Concept:IAny, ParameterDef=b$9115:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Subtract(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Subtract(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Subtract(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Subtract(Vector4D(q1), Vector4D(q2))
    _ARG_ 0: Multiply(M11, Subtract(Multiply(M22, M33), Multiply(M23, M32))) => $787:constraint=INumberLike
    _ARG_ 1: Add(Multiply(M12, Subtract(Multiply(M21, M33), Multiply(M23, M31))), Multiply(M13, Subtract(Multiply(M21, M32), Multiply(M22, M31)))) => $822:constraint=INumberLike

718. Matrix
  Type: (IdentityTransform3D) => Matrix4x4
  Sig: Transforms_26:Library.Matrix(t: IdentityTransform3D): Matrix4x4
  Body: Identity(Matrix4x4)
  # functions: 3 AMBIGUOUS
    - IGeometry_18:Library.Identity(_: ConcreteType:Matrix3x3): ConcreteType:Matrix3x3 [Library]; => Tuple3(Tuple3(1, 0, 0), Tuple3(0, 1, 0), Tuple3(0, 0, 1))
    - IGeometry_18:Library.Identity(_: ConcreteType:Matrix4x4): ConcreteType:Matrix4x4 [Library]; => Tuple4(Tuple4(1, 0, 0, 0), Tuple4(0, 1, 0, 0), Tuple4(0, 0, 1, 0), Tuple4(0, 0, 0, 1))
    - IGeometry_18:Library.Identity(_: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Tuple4(0, 0, 0, 1)
    _ARG_ 0: Matrix4x4 => IAny

719. Transform
  Type: (Transform3D, Vector3D) => Vector3D
  Sig: Transforms_26:Library.Transform(t: Transform3D, v: Vector3D): Vector3D
  Body: Multiply(Add(Transform(Rotation(t), v), Translation(t)), Scale(t))
  # functions: 10 AMBIGUOUS
    - INumerical_4:Library.Multiply(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Multiply(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Multiply(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9005:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Multiply(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9165:Concept:IAny, ParameterDef=b$9167:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Tuple3(Add(Multiply(X(v), M11(m)), Add(Multiply(Y(v), M21(m)), Add(Multiply(Z(v), M31(m)), M41(m)))), Add(Multiply(X(v), M12(m)), Add(Multiply(Y(v), M22(m)), Add(Multiply(Z(v), M32(m)), M42(m)))), Add(Multiply(X(v), M13(m)), Add(Multiply(Y(v), M23(m)), Add(Multiply(Z(v), M33(m)), M43(m)))))
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Multiply(Column1(m), s), Multiply(Column2(m), s), Multiply(Column3(m), s), Multiply(Column4(m), s))
    - Transforms_26:Library.Multiply(a: ConcreteType:Matrix4x4,b: ConcreteType:Matrix4x4): ConcreteType:Matrix4x4 [Library]; => CreateFromRows(Matrix4x4, Tuple4(Add(Multiply(M11(a), M11(b)), Add(Multiply(M12(a), M21(b)), Add(Multiply(M13(a), M31(b)), Multiply(M14(a), M41(b))))), Add(Multiply(M11(a), M12(b)), Add(Multiply(M12(a), M22(b)), Add(Multiply(M13(a), M32(b)), Multiply(M14(a), M42(b))))), Add(Multiply(M11(a), M13(b)), Add(Multiply(M12(a), M23(b)), Add(Multiply(M13(a), M33(b)), Multiply(M14(a), M43(b))))), Add(Multiply(M11(a), M14(b)), Add(Multiply(M12(a), M24(b)), Add(Multiply(M13(a), M34(b)), Multiply(M14(a), M44(b)))))), Tuple4(Add(Multiply(M21(a), M11(b)), Add(Multiply(M22(a), M21(b)), Add(Multiply(M23(a), M31(b)), Multiply(M24(a), M41(b))))), Add(Multiply(M21(a), M12(b)), Add(Multiply(M22(a), M22(b)), Add(Multiply(M23(a), M32(b)), Multiply(M24(a), M42(b))))), Add(Multiply(M21(a), M13(b)), Add(Multiply(M22(a), M23(b)), Add(Multiply(M23(a), M33(b)), Multiply(M24(a), M43(b))))), Add(Multiply(M21(a), M14(b)), Add(Multiply(M22(a), M24(b)), Add(Multiply(M23(a), M34(b)), Multiply(M24(a), M44(b)))))), Tuple4(Add(Multiply(M31(a), M11(b)), Add(Multiply(M32(a), M21(b)), Add(Multiply(M33(a), M31(b)), Multiply(M34(a), M41(b))))), Add(Multiply(M31(a), M12(b)), Add(Multiply(M32(a), M22(b)), Add(Multiply(M33(a), M32(b)), Multiply(M34(a), M42(b))))), Add(Multiply(M31(a), M13(b)), Add(Multiply(M32(a), M23(b)), Add(Multiply(M33(a), M33(b)), Multiply(M34(a), M43(b))))), Add(Multiply(M31(a), M14(b)), Add(Multiply(M32(a), M24(b)), Add(Multiply(M33(a), M34(b)), Multiply(M34(a), M44(b)))))), Tuple4(Add(Multiply(M41(a), M11(b)), Add(Multiply(M42(a), M21(b)), Add(Multiply(M43(a), M31(b)), Multiply(M44(a), M41(b))))), Add(Multiply(M41(a), M12(b)), Add(Multiply(M42(a), M22(b)), Add(Multiply(M43(a), M32(b)), Multiply(M44(a), M42(b))))), Add(Multiply(M41(a), M13(b)), Add(Multiply(M42(a), M23(b)), Add(Multiply(M43(a), M33(b)), Multiply(M44(a), M43(b))))), Add(Multiply(M41(a), M14(b)), Add(Multiply(M42(a), M24(b)), Add(Multiply(M43(a), M34(b)), Multiply(M44(a), M44(b)))))))
    - Transforms_26:Library.Multiply(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Multiply(Vector4D(q), scalar)
    - Transforms_26:Library.Multiply(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Plato.Compiler.Symbols.BlockStatement
    _ARG_ 0: Add(Transform(Rotation(t), v), Translation(t)) => $822:constraint=INumberLike
    _ARG_ 1: Scale(t) => $882:constraint=IDeformable3D

720. TransformNormal
  Type: (Transform3D, Vector3D) => Vector3D
  Sig: Transforms_26:Library.TransformNormal(t: Transform3D, v: Vector3D): Vector3D
  Body: TransformNormal(Rotation(t), v)
  # functions: 10 AMBIGUOUS
    - Transforms_26:Library.TransformNormal(t: ConcreteType:Translation3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => v
    - Transforms_26:Library.TransformNormal(m: ConcreteType:Matrix4x4,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Tuple3(Add(Multiply(X(v), M11(m)), Add(Multiply(Y(v), M21(m)), Multiply(Z(v), M31(m)))), Add(Multiply(X(v), M12(m)), Add(Multiply(Y(v), M22(m)), Multiply(Z(v), M32(m)))), Add(Multiply(X(v), M13(m)), Add(Multiply(Y(v), M23(m)), Multiply(Z(v), M33(m)))))
    - Transforms_26:Library.TransformNormal(t: ConcreteType:IdentityTransform3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => v
    - Transforms_26:Library.TransformNormal(t: ConcreteType:Transform3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => TransformNormal(Rotation(t), v)
    - Transforms_26:Library.TransformNormal(p: ConcreteType:Pose3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => TransformNormal(Rotation(p), v)
    - Transforms_26:Library.TransformNormal(aa: ConcreteType:AxisAngle,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Transform(aa, v)
    - Transforms_26:Library.TransformNormal(e: ConcreteType:EulerAngles,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => TransformNormal(Quaternion(e), v)
    - Transforms_26:Library.TransformNormal(f: ConcreteType:Frame3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => TransformNormal(Pose3D(f), v)
    - Transforms_26:Library.TransformNormal(r: ConcreteType:Rotation3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => TransformNormal(Quaternion(r), v)
    - Transforms_26:Library.TransformNormal(q: ConcreteType:Quaternion,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Transform(q, v)
    _ARG_ 0: Rotation(t) => Quaternion
    _ARG_ 1: v => Vector3D

721. Matrix
  Type: (Transform3D) => Matrix4x4
  Sig: Transforms_26:Library.Matrix(t: Transform3D): Matrix4x4
  Body: Multiply(Matrix(Scale(t)), Multiply(Matrix(Rotation(t)), Matrix(Translation(t))))
  # functions: 10 AMBIGUOUS
    - INumerical_4:Library.Multiply(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Multiply(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Multiply(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9005:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Multiply(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9165:Concept:IAny, ParameterDef=b$9167:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Tuple3(Add(Multiply(X(v), M11(m)), Add(Multiply(Y(v), M21(m)), Add(Multiply(Z(v), M31(m)), M41(m)))), Add(Multiply(X(v), M12(m)), Add(Multiply(Y(v), M22(m)), Add(Multiply(Z(v), M32(m)), M42(m)))), Add(Multiply(X(v), M13(m)), Add(Multiply(Y(v), M23(m)), Add(Multiply(Z(v), M33(m)), M43(m)))))
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Multiply(Column1(m), s), Multiply(Column2(m), s), Multiply(Column3(m), s), Multiply(Column4(m), s))
    - Transforms_26:Library.Multiply(a: ConcreteType:Matrix4x4,b: ConcreteType:Matrix4x4): ConcreteType:Matrix4x4 [Library]; => CreateFromRows(Matrix4x4, Tuple4(Add(Multiply(M11(a), M11(b)), Add(Multiply(M12(a), M21(b)), Add(Multiply(M13(a), M31(b)), Multiply(M14(a), M41(b))))), Add(Multiply(M11(a), M12(b)), Add(Multiply(M12(a), M22(b)), Add(Multiply(M13(a), M32(b)), Multiply(M14(a), M42(b))))), Add(Multiply(M11(a), M13(b)), Add(Multiply(M12(a), M23(b)), Add(Multiply(M13(a), M33(b)), Multiply(M14(a), M43(b))))), Add(Multiply(M11(a), M14(b)), Add(Multiply(M12(a), M24(b)), Add(Multiply(M13(a), M34(b)), Multiply(M14(a), M44(b)))))), Tuple4(Add(Multiply(M21(a), M11(b)), Add(Multiply(M22(a), M21(b)), Add(Multiply(M23(a), M31(b)), Multiply(M24(a), M41(b))))), Add(Multiply(M21(a), M12(b)), Add(Multiply(M22(a), M22(b)), Add(Multiply(M23(a), M32(b)), Multiply(M24(a), M42(b))))), Add(Multiply(M21(a), M13(b)), Add(Multiply(M22(a), M23(b)), Add(Multiply(M23(a), M33(b)), Multiply(M24(a), M43(b))))), Add(Multiply(M21(a), M14(b)), Add(Multiply(M22(a), M24(b)), Add(Multiply(M23(a), M34(b)), Multiply(M24(a), M44(b)))))), Tuple4(Add(Multiply(M31(a), M11(b)), Add(Multiply(M32(a), M21(b)), Add(Multiply(M33(a), M31(b)), Multiply(M34(a), M41(b))))), Add(Multiply(M31(a), M12(b)), Add(Multiply(M32(a), M22(b)), Add(Multiply(M33(a), M32(b)), Multiply(M34(a), M42(b))))), Add(Multiply(M31(a), M13(b)), Add(Multiply(M32(a), M23(b)), Add(Multiply(M33(a), M33(b)), Multiply(M34(a), M43(b))))), Add(Multiply(M31(a), M14(b)), Add(Multiply(M32(a), M24(b)), Add(Multiply(M33(a), M34(b)), Multiply(M34(a), M44(b)))))), Tuple4(Add(Multiply(M41(a), M11(b)), Add(Multiply(M42(a), M21(b)), Add(Multiply(M43(a), M31(b)), Multiply(M44(a), M41(b))))), Add(Multiply(M41(a), M12(b)), Add(Multiply(M42(a), M22(b)), Add(Multiply(M43(a), M32(b)), Multiply(M44(a), M42(b))))), Add(Multiply(M41(a), M13(b)), Add(Multiply(M42(a), M23(b)), Add(Multiply(M43(a), M33(b)), Multiply(M44(a), M43(b))))), Add(Multiply(M41(a), M14(b)), Add(Multiply(M42(a), M24(b)), Add(Multiply(M43(a), M34(b)), Multiply(M44(a), M44(b)))))))
    - Transforms_26:Library.Multiply(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Multiply(Vector4D(q), scalar)
    - Transforms_26:Library.Multiply(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Plato.Compiler.Symbols.BlockStatement
    _ARG_ 0: Matrix(Scale(t)) => Matrix4x4
    _ARG_ 1: Multiply(Matrix(Rotation(t)), Matrix(Translation(t))) => $787:constraint=INumberLike

722. Transform
  Type: (Pose3D, Vector3D) => Vector3D
  Sig: Transforms_26:Library.Transform(p: Pose3D, v: Vector3D): Vector3D
  Body: Add(Transform(Rotation(p), v), Position(p))
  # functions: 5 AMBIGUOUS
    - INumerical_4:Library.Add(x: Concept:INumberLike,y: ConcreteType:Number): Concept:INumberLike [Library]; => FromNumber(x, Add(ToNumber(x), y))
    - INumerical_4:Library.Add(x: Concept:INumerical,y: Concept:INumerical): Concept:INumerical [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9082:Concept:IAny, ParameterDef=b$9084:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Add(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Add(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Add(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Add(Vector4D(q1), Vector4D(q2))
    _ARG_ 0: Transform(Rotation(p), v) => Vector3D
    _ARG_ 1: Position(p) => Vector2D

723. TransformNormal
  Type: (Pose3D, Vector3D) => Vector3D
  Sig: Transforms_26:Library.TransformNormal(p: Pose3D, v: Vector3D): Vector3D
  Body: TransformNormal(Rotation(p), v)
  # functions: 10 AMBIGUOUS
    - Transforms_26:Library.TransformNormal(t: ConcreteType:Translation3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => v
    - Transforms_26:Library.TransformNormal(m: ConcreteType:Matrix4x4,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Tuple3(Add(Multiply(X(v), M11(m)), Add(Multiply(Y(v), M21(m)), Multiply(Z(v), M31(m)))), Add(Multiply(X(v), M12(m)), Add(Multiply(Y(v), M22(m)), Multiply(Z(v), M32(m)))), Add(Multiply(X(v), M13(m)), Add(Multiply(Y(v), M23(m)), Multiply(Z(v), M33(m)))))
    - Transforms_26:Library.TransformNormal(t: ConcreteType:IdentityTransform3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => v
    - Transforms_26:Library.TransformNormal(t: ConcreteType:Transform3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => TransformNormal(Rotation(t), v)
    - Transforms_26:Library.TransformNormal(p: ConcreteType:Pose3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => TransformNormal(Rotation(p), v)
    - Transforms_26:Library.TransformNormal(aa: ConcreteType:AxisAngle,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Transform(aa, v)
    - Transforms_26:Library.TransformNormal(e: ConcreteType:EulerAngles,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => TransformNormal(Quaternion(e), v)
    - Transforms_26:Library.TransformNormal(f: ConcreteType:Frame3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => TransformNormal(Pose3D(f), v)
    - Transforms_26:Library.TransformNormal(r: ConcreteType:Rotation3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => TransformNormal(Quaternion(r), v)
    - Transforms_26:Library.TransformNormal(q: ConcreteType:Quaternion,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Transform(q, v)
    _ARG_ 0: Rotation(p) => Quaternion
    _ARG_ 1: v => Vector3D

724. Matrix
  Type: (Pose3D) => Matrix4x4
  Sig: Transforms_26:Library.Matrix(p: Pose3D): Matrix4x4
  Body: Multiply(Matrix(Rotation(p)), Matrix(Position(p)))
  # functions: 10 AMBIGUOUS
    - INumerical_4:Library.Multiply(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Multiply(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Multiply(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9005:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Multiply(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9165:Concept:IAny, ParameterDef=b$9167:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Tuple3(Add(Multiply(X(v), M11(m)), Add(Multiply(Y(v), M21(m)), Add(Multiply(Z(v), M31(m)), M41(m)))), Add(Multiply(X(v), M12(m)), Add(Multiply(Y(v), M22(m)), Add(Multiply(Z(v), M32(m)), M42(m)))), Add(Multiply(X(v), M13(m)), Add(Multiply(Y(v), M23(m)), Add(Multiply(Z(v), M33(m)), M43(m)))))
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Multiply(Column1(m), s), Multiply(Column2(m), s), Multiply(Column3(m), s), Multiply(Column4(m), s))
    - Transforms_26:Library.Multiply(a: ConcreteType:Matrix4x4,b: ConcreteType:Matrix4x4): ConcreteType:Matrix4x4 [Library]; => CreateFromRows(Matrix4x4, Tuple4(Add(Multiply(M11(a), M11(b)), Add(Multiply(M12(a), M21(b)), Add(Multiply(M13(a), M31(b)), Multiply(M14(a), M41(b))))), Add(Multiply(M11(a), M12(b)), Add(Multiply(M12(a), M22(b)), Add(Multiply(M13(a), M32(b)), Multiply(M14(a), M42(b))))), Add(Multiply(M11(a), M13(b)), Add(Multiply(M12(a), M23(b)), Add(Multiply(M13(a), M33(b)), Multiply(M14(a), M43(b))))), Add(Multiply(M11(a), M14(b)), Add(Multiply(M12(a), M24(b)), Add(Multiply(M13(a), M34(b)), Multiply(M14(a), M44(b)))))), Tuple4(Add(Multiply(M21(a), M11(b)), Add(Multiply(M22(a), M21(b)), Add(Multiply(M23(a), M31(b)), Multiply(M24(a), M41(b))))), Add(Multiply(M21(a), M12(b)), Add(Multiply(M22(a), M22(b)), Add(Multiply(M23(a), M32(b)), Multiply(M24(a), M42(b))))), Add(Multiply(M21(a), M13(b)), Add(Multiply(M22(a), M23(b)), Add(Multiply(M23(a), M33(b)), Multiply(M24(a), M43(b))))), Add(Multiply(M21(a), M14(b)), Add(Multiply(M22(a), M24(b)), Add(Multiply(M23(a), M34(b)), Multiply(M24(a), M44(b)))))), Tuple4(Add(Multiply(M31(a), M11(b)), Add(Multiply(M32(a), M21(b)), Add(Multiply(M33(a), M31(b)), Multiply(M34(a), M41(b))))), Add(Multiply(M31(a), M12(b)), Add(Multiply(M32(a), M22(b)), Add(Multiply(M33(a), M32(b)), Multiply(M34(a), M42(b))))), Add(Multiply(M31(a), M13(b)), Add(Multiply(M32(a), M23(b)), Add(Multiply(M33(a), M33(b)), Multiply(M34(a), M43(b))))), Add(Multiply(M31(a), M14(b)), Add(Multiply(M32(a), M24(b)), Add(Multiply(M33(a), M34(b)), Multiply(M34(a), M44(b)))))), Tuple4(Add(Multiply(M41(a), M11(b)), Add(Multiply(M42(a), M21(b)), Add(Multiply(M43(a), M31(b)), Multiply(M44(a), M41(b))))), Add(Multiply(M41(a), M12(b)), Add(Multiply(M42(a), M22(b)), Add(Multiply(M43(a), M32(b)), Multiply(M44(a), M42(b))))), Add(Multiply(M41(a), M13(b)), Add(Multiply(M42(a), M23(b)), Add(Multiply(M43(a), M33(b)), Multiply(M44(a), M43(b))))), Add(Multiply(M41(a), M14(b)), Add(Multiply(M42(a), M24(b)), Add(Multiply(M43(a), M34(b)), Multiply(M44(a), M44(b)))))))
    - Transforms_26:Library.Multiply(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Multiply(Vector4D(q), scalar)
    - Transforms_26:Library.Multiply(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Plato.Compiler.Symbols.BlockStatement
    _ARG_ 0: Matrix(Rotation(p)) => Matrix4x4
    _ARG_ 1: Matrix(Position(p)) => Matrix4x4

725. Transform
  Type: (AxisAngle, Vector3D) => Vector3D
  Sig: Transforms_26:Library.Transform(aa: AxisAngle, v: Vector3D): Vector3D
  Body: Transform(Quaternion(aa), v)
  # functions: 10 AMBIGUOUS
    - Transforms_26:Library.Transform(t: ConcreteType:Translation3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Add(v, Translation(t))
    - Transforms_26:Library.Transform(m: ConcreteType:Matrix4x4,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Multiply(m, v)
    - Transforms_26:Library.Transform(t: ConcreteType:IdentityTransform3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => v
    - Transforms_26:Library.Transform(t: ConcreteType:Transform3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Multiply(Add(Transform(Rotation(t), v), Translation(t)), Scale(t))
    - Transforms_26:Library.Transform(p: ConcreteType:Pose3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Add(Transform(Rotation(p), v), Position(p))
    - Transforms_26:Library.Transform(aa: ConcreteType:AxisAngle,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Transform(Quaternion(aa), v)
    - Transforms_26:Library.Transform(e: ConcreteType:EulerAngles,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Transform(Quaternion(e), v)
    - Transforms_26:Library.Transform(f: ConcreteType:Frame3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Transform(Pose3D(f), v)
    - Transforms_26:Library.Transform(r: ConcreteType:Rotation3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Transform(Quaternion(r), v)
    - Transforms_26:Library.Transform(q: ConcreteType:Quaternion,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Plato.Compiler.Symbols.BlockStatement
    _ARG_ 0: Quaternion(aa) => Quaternion
    _ARG_ 1: v => Vector3D

726. TransformNormal
  Type: (AxisAngle, Vector3D) => Vector3D
  Sig: Transforms_26:Library.TransformNormal(aa: AxisAngle, v: Vector3D): Vector3D
  Body: Transform(aa, v)
  # functions: 10 AMBIGUOUS
    - Transforms_26:Library.Transform(t: ConcreteType:Translation3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Add(v, Translation(t))
    - Transforms_26:Library.Transform(m: ConcreteType:Matrix4x4,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Multiply(m, v)
    - Transforms_26:Library.Transform(t: ConcreteType:IdentityTransform3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => v
    - Transforms_26:Library.Transform(t: ConcreteType:Transform3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Multiply(Add(Transform(Rotation(t), v), Translation(t)), Scale(t))
    - Transforms_26:Library.Transform(p: ConcreteType:Pose3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Add(Transform(Rotation(p), v), Position(p))
    - Transforms_26:Library.Transform(aa: ConcreteType:AxisAngle,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Transform(Quaternion(aa), v)
    - Transforms_26:Library.Transform(e: ConcreteType:EulerAngles,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Transform(Quaternion(e), v)
    - Transforms_26:Library.Transform(f: ConcreteType:Frame3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Transform(Pose3D(f), v)
    - Transforms_26:Library.Transform(r: ConcreteType:Rotation3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Transform(Quaternion(r), v)
    - Transforms_26:Library.Transform(q: ConcreteType:Quaternion,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Plato.Compiler.Symbols.BlockStatement
    _ARG_ 0: aa => AxisAngle
    _ARG_ 1: v => Vector3D

728. Matrix
  Type: (AxisAngle) => Matrix4x4
  Sig: Transforms_26:Library.Matrix(aa: AxisAngle): Matrix4x4
  Body: Matrix(Quaternion(aa))
  # functions: 12 AMBIGUOUS
    - Transforms_26:Library.Matrix(v: ConcreteType:Vector3D): ConcreteType:Matrix4x4 [Library]; => CreateTranslation(Matrix4x4, v)
    - Transforms_26:Library.Matrix(t: ConcreteType:Translation3D): ConcreteType:Matrix4x4 [Library]; => Matrix(Translation(t))
    - Transforms_26:Library.Matrix(m: ConcreteType:Matrix3x3): ConcreteType:Matrix4x4 [Library]; => CreateFromRows(Matrix4x4, Row1(m), Row2(m), Row3(m), Tuple4(0, 0, 0, 1))
    - Transforms_26:Library.Matrix(m: ConcreteType:Matrix4x4): ConcreteType:Matrix4x4 [Library]; => m
    - Transforms_26:Library.Matrix(t: ConcreteType:IdentityTransform3D): ConcreteType:Matrix4x4 [Library]; => Identity(Matrix4x4)
    - Transforms_26:Library.Matrix(t: ConcreteType:Transform3D): ConcreteType:Matrix4x4 [Library]; => Multiply(Matrix(Scale(t)), Multiply(Matrix(Rotation(t)), Matrix(Translation(t))))
    - Transforms_26:Library.Matrix(p: ConcreteType:Pose3D): ConcreteType:Matrix4x4 [Library]; => Multiply(Matrix(Rotation(p)), Matrix(Position(p)))
    - Transforms_26:Library.Matrix(aa: ConcreteType:AxisAngle): ConcreteType:Matrix4x4 [Library]; => Matrix(Quaternion(aa))
    - Transforms_26:Library.Matrix(e: ConcreteType:EulerAngles): ConcreteType:Matrix4x4 [Library]; => Matrix(Quaternion(e))
    - Transforms_26:Library.Matrix(f: ConcreteType:Frame3D): ConcreteType:Matrix4x4 [Library]; => Matrix(Pose3D(f))
    - Transforms_26:Library.Matrix(r: ConcreteType:Rotation3D): ConcreteType:Matrix4x4 [Library]; => Matrix(Quaternion(r))
    - Transforms_26:Library.Matrix(q: ConcreteType:Quaternion): ConcreteType:Matrix4x4 [Library]; => Plato.Compiler.Symbols.BlockStatement
    _ARG_ 0: Quaternion(aa) => Quaternion

730. Transform
  Type: (EulerAngles, Vector3D) => Vector3D
  Sig: Transforms_26:Library.Transform(e: EulerAngles, v: Vector3D): Vector3D
  Body: Transform(Quaternion(e), v)
  # functions: 10 AMBIGUOUS
    - Transforms_26:Library.Transform(t: ConcreteType:Translation3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Add(v, Translation(t))
    - Transforms_26:Library.Transform(m: ConcreteType:Matrix4x4,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Multiply(m, v)
    - Transforms_26:Library.Transform(t: ConcreteType:IdentityTransform3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => v
    - Transforms_26:Library.Transform(t: ConcreteType:Transform3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Multiply(Add(Transform(Rotation(t), v), Translation(t)), Scale(t))
    - Transforms_26:Library.Transform(p: ConcreteType:Pose3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Add(Transform(Rotation(p), v), Position(p))
    - Transforms_26:Library.Transform(aa: ConcreteType:AxisAngle,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Transform(Quaternion(aa), v)
    - Transforms_26:Library.Transform(e: ConcreteType:EulerAngles,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Transform(Quaternion(e), v)
    - Transforms_26:Library.Transform(f: ConcreteType:Frame3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Transform(Pose3D(f), v)
    - Transforms_26:Library.Transform(r: ConcreteType:Rotation3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Transform(Quaternion(r), v)
    - Transforms_26:Library.Transform(q: ConcreteType:Quaternion,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Plato.Compiler.Symbols.BlockStatement
    _ARG_ 0: Quaternion(e) => Quaternion
    _ARG_ 1: v => Vector3D

731. TransformNormal
  Type: (EulerAngles, Vector3D) => Vector3D
  Sig: Transforms_26:Library.TransformNormal(e: EulerAngles, v: Vector3D): Vector3D
  Body: TransformNormal(Quaternion(e), v)
  # functions: 10 AMBIGUOUS
    - Transforms_26:Library.TransformNormal(t: ConcreteType:Translation3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => v
    - Transforms_26:Library.TransformNormal(m: ConcreteType:Matrix4x4,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Tuple3(Add(Multiply(X(v), M11(m)), Add(Multiply(Y(v), M21(m)), Multiply(Z(v), M31(m)))), Add(Multiply(X(v), M12(m)), Add(Multiply(Y(v), M22(m)), Multiply(Z(v), M32(m)))), Add(Multiply(X(v), M13(m)), Add(Multiply(Y(v), M23(m)), Multiply(Z(v), M33(m)))))
    - Transforms_26:Library.TransformNormal(t: ConcreteType:IdentityTransform3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => v
    - Transforms_26:Library.TransformNormal(t: ConcreteType:Transform3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => TransformNormal(Rotation(t), v)
    - Transforms_26:Library.TransformNormal(p: ConcreteType:Pose3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => TransformNormal(Rotation(p), v)
    - Transforms_26:Library.TransformNormal(aa: ConcreteType:AxisAngle,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Transform(aa, v)
    - Transforms_26:Library.TransformNormal(e: ConcreteType:EulerAngles,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => TransformNormal(Quaternion(e), v)
    - Transforms_26:Library.TransformNormal(f: ConcreteType:Frame3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => TransformNormal(Pose3D(f), v)
    - Transforms_26:Library.TransformNormal(r: ConcreteType:Rotation3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => TransformNormal(Quaternion(r), v)
    - Transforms_26:Library.TransformNormal(q: ConcreteType:Quaternion,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Transform(q, v)
    _ARG_ 0: Quaternion(e) => Quaternion
    _ARG_ 1: v => Vector3D

732. Matrix
  Type: (EulerAngles) => Matrix4x4
  Sig: Transforms_26:Library.Matrix(e: EulerAngles): Matrix4x4
  Body: Matrix(Quaternion(e))
  # functions: 12 AMBIGUOUS
    - Transforms_26:Library.Matrix(v: ConcreteType:Vector3D): ConcreteType:Matrix4x4 [Library]; => CreateTranslation(Matrix4x4, v)
    - Transforms_26:Library.Matrix(t: ConcreteType:Translation3D): ConcreteType:Matrix4x4 [Library]; => Matrix(Translation(t))
    - Transforms_26:Library.Matrix(m: ConcreteType:Matrix3x3): ConcreteType:Matrix4x4 [Library]; => CreateFromRows(Matrix4x4, Row1(m), Row2(m), Row3(m), Tuple4(0, 0, 0, 1))
    - Transforms_26:Library.Matrix(m: ConcreteType:Matrix4x4): ConcreteType:Matrix4x4 [Library]; => m
    - Transforms_26:Library.Matrix(t: ConcreteType:IdentityTransform3D): ConcreteType:Matrix4x4 [Library]; => Identity(Matrix4x4)
    - Transforms_26:Library.Matrix(t: ConcreteType:Transform3D): ConcreteType:Matrix4x4 [Library]; => Multiply(Matrix(Scale(t)), Multiply(Matrix(Rotation(t)), Matrix(Translation(t))))
    - Transforms_26:Library.Matrix(p: ConcreteType:Pose3D): ConcreteType:Matrix4x4 [Library]; => Multiply(Matrix(Rotation(p)), Matrix(Position(p)))
    - Transforms_26:Library.Matrix(aa: ConcreteType:AxisAngle): ConcreteType:Matrix4x4 [Library]; => Matrix(Quaternion(aa))
    - Transforms_26:Library.Matrix(e: ConcreteType:EulerAngles): ConcreteType:Matrix4x4 [Library]; => Matrix(Quaternion(e))
    - Transforms_26:Library.Matrix(f: ConcreteType:Frame3D): ConcreteType:Matrix4x4 [Library]; => Matrix(Pose3D(f))
    - Transforms_26:Library.Matrix(r: ConcreteType:Rotation3D): ConcreteType:Matrix4x4 [Library]; => Matrix(Quaternion(r))
    - Transforms_26:Library.Matrix(q: ConcreteType:Quaternion): ConcreteType:Matrix4x4 [Library]; => Plato.Compiler.Symbols.BlockStatement
    _ARG_ 0: Quaternion(e) => Quaternion

734. Transform
  Type: (Frame3D, Vector3D) => Vector3D
  Sig: Transforms_26:Library.Transform(f: Frame3D, v: Vector3D): Vector3D
  Body: Transform(Pose3D(f), v)
  # functions: 10 AMBIGUOUS
    - Transforms_26:Library.Transform(t: ConcreteType:Translation3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Add(v, Translation(t))
    - Transforms_26:Library.Transform(m: ConcreteType:Matrix4x4,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Multiply(m, v)
    - Transforms_26:Library.Transform(t: ConcreteType:IdentityTransform3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => v
    - Transforms_26:Library.Transform(t: ConcreteType:Transform3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Multiply(Add(Transform(Rotation(t), v), Translation(t)), Scale(t))
    - Transforms_26:Library.Transform(p: ConcreteType:Pose3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Add(Transform(Rotation(p), v), Position(p))
    - Transforms_26:Library.Transform(aa: ConcreteType:AxisAngle,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Transform(Quaternion(aa), v)
    - Transforms_26:Library.Transform(e: ConcreteType:EulerAngles,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Transform(Quaternion(e), v)
    - Transforms_26:Library.Transform(f: ConcreteType:Frame3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Transform(Pose3D(f), v)
    - Transforms_26:Library.Transform(r: ConcreteType:Rotation3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Transform(Quaternion(r), v)
    - Transforms_26:Library.Transform(q: ConcreteType:Quaternion,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Plato.Compiler.Symbols.BlockStatement
    _ARG_ 0: Pose3D(f) => Pose3D
    _ARG_ 1: v => Vector3D

735. TransformNormal
  Type: (Frame3D, Vector3D) => Vector3D
  Sig: Transforms_26:Library.TransformNormal(f: Frame3D, v: Vector3D): Vector3D
  Body: TransformNormal(Pose3D(f), v)
  # functions: 10 AMBIGUOUS
    - Transforms_26:Library.TransformNormal(t: ConcreteType:Translation3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => v
    - Transforms_26:Library.TransformNormal(m: ConcreteType:Matrix4x4,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Tuple3(Add(Multiply(X(v), M11(m)), Add(Multiply(Y(v), M21(m)), Multiply(Z(v), M31(m)))), Add(Multiply(X(v), M12(m)), Add(Multiply(Y(v), M22(m)), Multiply(Z(v), M32(m)))), Add(Multiply(X(v), M13(m)), Add(Multiply(Y(v), M23(m)), Multiply(Z(v), M33(m)))))
    - Transforms_26:Library.TransformNormal(t: ConcreteType:IdentityTransform3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => v
    - Transforms_26:Library.TransformNormal(t: ConcreteType:Transform3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => TransformNormal(Rotation(t), v)
    - Transforms_26:Library.TransformNormal(p: ConcreteType:Pose3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => TransformNormal(Rotation(p), v)
    - Transforms_26:Library.TransformNormal(aa: ConcreteType:AxisAngle,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Transform(aa, v)
    - Transforms_26:Library.TransformNormal(e: ConcreteType:EulerAngles,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => TransformNormal(Quaternion(e), v)
    - Transforms_26:Library.TransformNormal(f: ConcreteType:Frame3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => TransformNormal(Pose3D(f), v)
    - Transforms_26:Library.TransformNormal(r: ConcreteType:Rotation3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => TransformNormal(Quaternion(r), v)
    - Transforms_26:Library.TransformNormal(q: ConcreteType:Quaternion,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Transform(q, v)
    _ARG_ 0: Pose3D(f) => Pose3D
    _ARG_ 1: v => Vector3D

736. Matrix
  Type: (Frame3D) => Matrix4x4
  Sig: Transforms_26:Library.Matrix(f: Frame3D): Matrix4x4
  Body: Matrix(Pose3D(f))
  # functions: 12 AMBIGUOUS
    - Transforms_26:Library.Matrix(v: ConcreteType:Vector3D): ConcreteType:Matrix4x4 [Library]; => CreateTranslation(Matrix4x4, v)
    - Transforms_26:Library.Matrix(t: ConcreteType:Translation3D): ConcreteType:Matrix4x4 [Library]; => Matrix(Translation(t))
    - Transforms_26:Library.Matrix(m: ConcreteType:Matrix3x3): ConcreteType:Matrix4x4 [Library]; => CreateFromRows(Matrix4x4, Row1(m), Row2(m), Row3(m), Tuple4(0, 0, 0, 1))
    - Transforms_26:Library.Matrix(m: ConcreteType:Matrix4x4): ConcreteType:Matrix4x4 [Library]; => m
    - Transforms_26:Library.Matrix(t: ConcreteType:IdentityTransform3D): ConcreteType:Matrix4x4 [Library]; => Identity(Matrix4x4)
    - Transforms_26:Library.Matrix(t: ConcreteType:Transform3D): ConcreteType:Matrix4x4 [Library]; => Multiply(Matrix(Scale(t)), Multiply(Matrix(Rotation(t)), Matrix(Translation(t))))
    - Transforms_26:Library.Matrix(p: ConcreteType:Pose3D): ConcreteType:Matrix4x4 [Library]; => Multiply(Matrix(Rotation(p)), Matrix(Position(p)))
    - Transforms_26:Library.Matrix(aa: ConcreteType:AxisAngle): ConcreteType:Matrix4x4 [Library]; => Matrix(Quaternion(aa))
    - Transforms_26:Library.Matrix(e: ConcreteType:EulerAngles): ConcreteType:Matrix4x4 [Library]; => Matrix(Quaternion(e))
    - Transforms_26:Library.Matrix(f: ConcreteType:Frame3D): ConcreteType:Matrix4x4 [Library]; => Matrix(Pose3D(f))
    - Transforms_26:Library.Matrix(r: ConcreteType:Rotation3D): ConcreteType:Matrix4x4 [Library]; => Matrix(Quaternion(r))
    - Transforms_26:Library.Matrix(q: ConcreteType:Quaternion): ConcreteType:Matrix4x4 [Library]; => Plato.Compiler.Symbols.BlockStatement
    _ARG_ 0: Pose3D(f) => Pose3D

737. Transform
  Type: (Rotation3D, Vector3D) => Vector3D
  Sig: Transforms_26:Library.Transform(r: Rotation3D, v: Vector3D): Vector3D
  Body: Transform(Quaternion(r), v)
  # functions: 10 AMBIGUOUS
    - Transforms_26:Library.Transform(t: ConcreteType:Translation3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Add(v, Translation(t))
    - Transforms_26:Library.Transform(m: ConcreteType:Matrix4x4,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Multiply(m, v)
    - Transforms_26:Library.Transform(t: ConcreteType:IdentityTransform3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => v
    - Transforms_26:Library.Transform(t: ConcreteType:Transform3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Multiply(Add(Transform(Rotation(t), v), Translation(t)), Scale(t))
    - Transforms_26:Library.Transform(p: ConcreteType:Pose3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Add(Transform(Rotation(p), v), Position(p))
    - Transforms_26:Library.Transform(aa: ConcreteType:AxisAngle,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Transform(Quaternion(aa), v)
    - Transforms_26:Library.Transform(e: ConcreteType:EulerAngles,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Transform(Quaternion(e), v)
    - Transforms_26:Library.Transform(f: ConcreteType:Frame3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Transform(Pose3D(f), v)
    - Transforms_26:Library.Transform(r: ConcreteType:Rotation3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Transform(Quaternion(r), v)
    - Transforms_26:Library.Transform(q: ConcreteType:Quaternion,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Plato.Compiler.Symbols.BlockStatement
    _ARG_ 0: Quaternion(r) => Quaternion
    _ARG_ 1: v => Vector3D

738. TransformNormal
  Type: (Rotation3D, Vector3D) => Vector3D
  Sig: Transforms_26:Library.TransformNormal(r: Rotation3D, v: Vector3D): Vector3D
  Body: TransformNormal(Quaternion(r), v)
  # functions: 10 AMBIGUOUS
    - Transforms_26:Library.TransformNormal(t: ConcreteType:Translation3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => v
    - Transforms_26:Library.TransformNormal(m: ConcreteType:Matrix4x4,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Tuple3(Add(Multiply(X(v), M11(m)), Add(Multiply(Y(v), M21(m)), Multiply(Z(v), M31(m)))), Add(Multiply(X(v), M12(m)), Add(Multiply(Y(v), M22(m)), Multiply(Z(v), M32(m)))), Add(Multiply(X(v), M13(m)), Add(Multiply(Y(v), M23(m)), Multiply(Z(v), M33(m)))))
    - Transforms_26:Library.TransformNormal(t: ConcreteType:IdentityTransform3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => v
    - Transforms_26:Library.TransformNormal(t: ConcreteType:Transform3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => TransformNormal(Rotation(t), v)
    - Transforms_26:Library.TransformNormal(p: ConcreteType:Pose3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => TransformNormal(Rotation(p), v)
    - Transforms_26:Library.TransformNormal(aa: ConcreteType:AxisAngle,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Transform(aa, v)
    - Transforms_26:Library.TransformNormal(e: ConcreteType:EulerAngles,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => TransformNormal(Quaternion(e), v)
    - Transforms_26:Library.TransformNormal(f: ConcreteType:Frame3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => TransformNormal(Pose3D(f), v)
    - Transforms_26:Library.TransformNormal(r: ConcreteType:Rotation3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => TransformNormal(Quaternion(r), v)
    - Transforms_26:Library.TransformNormal(q: ConcreteType:Quaternion,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Transform(q, v)
    _ARG_ 0: Quaternion(r) => Quaternion
    _ARG_ 1: v => Vector3D

739. Matrix
  Type: (Rotation3D) => Matrix4x4
  Sig: Transforms_26:Library.Matrix(r: Rotation3D): Matrix4x4
  Body: Matrix(Quaternion(r))
  # functions: 12 AMBIGUOUS
    - Transforms_26:Library.Matrix(v: ConcreteType:Vector3D): ConcreteType:Matrix4x4 [Library]; => CreateTranslation(Matrix4x4, v)
    - Transforms_26:Library.Matrix(t: ConcreteType:Translation3D): ConcreteType:Matrix4x4 [Library]; => Matrix(Translation(t))
    - Transforms_26:Library.Matrix(m: ConcreteType:Matrix3x3): ConcreteType:Matrix4x4 [Library]; => CreateFromRows(Matrix4x4, Row1(m), Row2(m), Row3(m), Tuple4(0, 0, 0, 1))
    - Transforms_26:Library.Matrix(m: ConcreteType:Matrix4x4): ConcreteType:Matrix4x4 [Library]; => m
    - Transforms_26:Library.Matrix(t: ConcreteType:IdentityTransform3D): ConcreteType:Matrix4x4 [Library]; => Identity(Matrix4x4)
    - Transforms_26:Library.Matrix(t: ConcreteType:Transform3D): ConcreteType:Matrix4x4 [Library]; => Multiply(Matrix(Scale(t)), Multiply(Matrix(Rotation(t)), Matrix(Translation(t))))
    - Transforms_26:Library.Matrix(p: ConcreteType:Pose3D): ConcreteType:Matrix4x4 [Library]; => Multiply(Matrix(Rotation(p)), Matrix(Position(p)))
    - Transforms_26:Library.Matrix(aa: ConcreteType:AxisAngle): ConcreteType:Matrix4x4 [Library]; => Matrix(Quaternion(aa))
    - Transforms_26:Library.Matrix(e: ConcreteType:EulerAngles): ConcreteType:Matrix4x4 [Library]; => Matrix(Quaternion(e))
    - Transforms_26:Library.Matrix(f: ConcreteType:Frame3D): ConcreteType:Matrix4x4 [Library]; => Matrix(Pose3D(f))
    - Transforms_26:Library.Matrix(r: ConcreteType:Rotation3D): ConcreteType:Matrix4x4 [Library]; => Matrix(Quaternion(r))
    - Transforms_26:Library.Matrix(q: ConcreteType:Quaternion): ConcreteType:Matrix4x4 [Library]; => Plato.Compiler.Symbols.BlockStatement
    _ARG_ 0: Quaternion(r) => Quaternion

742. Magnitude
  Type: (Quaternion) => Number
  Sig: Transforms_26:Library.Magnitude(q: Quaternion): Number
  Body: Magnitude(Vector4D(q))
  # functions: 3 AMBIGUOUS
    - INumerical_4:Library.Magnitude(x: Concept:IReal): ConcreteType:Number [Library]; => Value(x)
    - IGeometry_18:Library.Magnitude(v: Concept:IVector): ConcreteType:Number [Library]; => SquareRoot(MagnitudeSquared(v))
    - Transforms_26:Library.Magnitude(q: ConcreteType:Quaternion): ConcreteType:Number [Library]; => Magnitude(Vector4D(q))
    _ARG_ 0: Vector4D(q) => Vector4D

743. MagnitudeSquared
  Type: (Quaternion) => Number
  Sig: Transforms_26:Library.MagnitudeSquared(q: Quaternion): Number
  Body: MagnitudeSquared(Vector4D(q))
  # functions: 2 AMBIGUOUS
    - IGeometry_18:Library.MagnitudeSquared(v: Concept:IVector): ConcreteType:Number [Library]; => SumSquares(v)
    - Transforms_26:Library.MagnitudeSquared(q: ConcreteType:Quaternion): ConcreteType:Number [Library]; => MagnitudeSquared(Vector4D(q))
    _ARG_ 0: Vector4D(q) => Vector4D

745. TransformNormal
  Type: (Quaternion, Vector3D) => Vector3D
  Sig: Transforms_26:Library.TransformNormal(q: Quaternion, v: Vector3D): Vector3D
  Body: Transform(q, v)
  # functions: 10 AMBIGUOUS
    - Transforms_26:Library.Transform(t: ConcreteType:Translation3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Add(v, Translation(t))
    - Transforms_26:Library.Transform(m: ConcreteType:Matrix4x4,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Multiply(m, v)
    - Transforms_26:Library.Transform(t: ConcreteType:IdentityTransform3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => v
    - Transforms_26:Library.Transform(t: ConcreteType:Transform3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Multiply(Add(Transform(Rotation(t), v), Translation(t)), Scale(t))
    - Transforms_26:Library.Transform(p: ConcreteType:Pose3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Add(Transform(Rotation(p), v), Position(p))
    - Transforms_26:Library.Transform(aa: ConcreteType:AxisAngle,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Transform(Quaternion(aa), v)
    - Transforms_26:Library.Transform(e: ConcreteType:EulerAngles,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Transform(Quaternion(e), v)
    - Transforms_26:Library.Transform(f: ConcreteType:Frame3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Transform(Pose3D(f), v)
    - Transforms_26:Library.Transform(r: ConcreteType:Rotation3D,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Transform(Quaternion(r), v)
    - Transforms_26:Library.Transform(q: ConcreteType:Quaternion,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Plato.Compiler.Symbols.BlockStatement
    _ARG_ 0: q => Quaternion
    _ARG_ 1: v => Vector3D

748. Inverse
  Type: (Quaternion) => Quaternion
  Sig: Transforms_26:Library.Inverse(q: Quaternion): Quaternion
  Body: Multiply(Conjugate(q), Inverse(MagnitudeSquared(q)))
  # functions: 10 AMBIGUOUS
    - INumerical_4:Library.Multiply(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Multiply(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Multiply(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9005:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Multiply(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9165:Concept:IAny, ParameterDef=b$9167:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Tuple3(Add(Multiply(X(v), M11(m)), Add(Multiply(Y(v), M21(m)), Add(Multiply(Z(v), M31(m)), M41(m)))), Add(Multiply(X(v), M12(m)), Add(Multiply(Y(v), M22(m)), Add(Multiply(Z(v), M32(m)), M42(m)))), Add(Multiply(X(v), M13(m)), Add(Multiply(Y(v), M23(m)), Add(Multiply(Z(v), M33(m)), M43(m)))))
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Multiply(Column1(m), s), Multiply(Column2(m), s), Multiply(Column3(m), s), Multiply(Column4(m), s))
    - Transforms_26:Library.Multiply(a: ConcreteType:Matrix4x4,b: ConcreteType:Matrix4x4): ConcreteType:Matrix4x4 [Library]; => CreateFromRows(Matrix4x4, Tuple4(Add(Multiply(M11(a), M11(b)), Add(Multiply(M12(a), M21(b)), Add(Multiply(M13(a), M31(b)), Multiply(M14(a), M41(b))))), Add(Multiply(M11(a), M12(b)), Add(Multiply(M12(a), M22(b)), Add(Multiply(M13(a), M32(b)), Multiply(M14(a), M42(b))))), Add(Multiply(M11(a), M13(b)), Add(Multiply(M12(a), M23(b)), Add(Multiply(M13(a), M33(b)), Multiply(M14(a), M43(b))))), Add(Multiply(M11(a), M14(b)), Add(Multiply(M12(a), M24(b)), Add(Multiply(M13(a), M34(b)), Multiply(M14(a), M44(b)))))), Tuple4(Add(Multiply(M21(a), M11(b)), Add(Multiply(M22(a), M21(b)), Add(Multiply(M23(a), M31(b)), Multiply(M24(a), M41(b))))), Add(Multiply(M21(a), M12(b)), Add(Multiply(M22(a), M22(b)), Add(Multiply(M23(a), M32(b)), Multiply(M24(a), M42(b))))), Add(Multiply(M21(a), M13(b)), Add(Multiply(M22(a), M23(b)), Add(Multiply(M23(a), M33(b)), Multiply(M24(a), M43(b))))), Add(Multiply(M21(a), M14(b)), Add(Multiply(M22(a), M24(b)), Add(Multiply(M23(a), M34(b)), Multiply(M24(a), M44(b)))))), Tuple4(Add(Multiply(M31(a), M11(b)), Add(Multiply(M32(a), M21(b)), Add(Multiply(M33(a), M31(b)), Multiply(M34(a), M41(b))))), Add(Multiply(M31(a), M12(b)), Add(Multiply(M32(a), M22(b)), Add(Multiply(M33(a), M32(b)), Multiply(M34(a), M42(b))))), Add(Multiply(M31(a), M13(b)), Add(Multiply(M32(a), M23(b)), Add(Multiply(M33(a), M33(b)), Multiply(M34(a), M43(b))))), Add(Multiply(M31(a), M14(b)), Add(Multiply(M32(a), M24(b)), Add(Multiply(M33(a), M34(b)), Multiply(M34(a), M44(b)))))), Tuple4(Add(Multiply(M41(a), M11(b)), Add(Multiply(M42(a), M21(b)), Add(Multiply(M43(a), M31(b)), Multiply(M44(a), M41(b))))), Add(Multiply(M41(a), M12(b)), Add(Multiply(M42(a), M22(b)), Add(Multiply(M43(a), M32(b)), Multiply(M44(a), M42(b))))), Add(Multiply(M41(a), M13(b)), Add(Multiply(M42(a), M23(b)), Add(Multiply(M43(a), M33(b)), Multiply(M44(a), M43(b))))), Add(Multiply(M41(a), M14(b)), Add(Multiply(M42(a), M24(b)), Add(Multiply(M43(a), M34(b)), Multiply(M44(a), M44(b)))))))
    - Transforms_26:Library.Multiply(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Multiply(Vector4D(q), scalar)
    - Transforms_26:Library.Multiply(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Plato.Compiler.Symbols.BlockStatement
    _ARG_ 0: Conjugate(q) => Quaternion
    _ARG_ 1: Inverse(MagnitudeSquared(q)) => Number

749. Normalize
  Type: (Quaternion) => Quaternion
  Sig: Transforms_26:Library.Normalize(q: Quaternion): Quaternion
  Body: Normalize(Vector4D(q))
  # functions: 2 AMBIGUOUS
    - IGeometry_18:Library.Normalize(x: Concept:IVector): Concept:IVector [Library]; => (GreaterThan(MagnitudeSquared(x), 0)?Divide(x, Magnitude(x)):Zero(x))
    - Transforms_26:Library.Normalize(q: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Normalize(Vector4D(q))
    _ARG_ 0: Vector4D(q) => Vector4D

754. Multiply
  Type: (Quaternion, Number) => Quaternion
  Sig: Transforms_26:Library.Multiply(q: Quaternion, scalar: Number): Quaternion
  Body: Multiply(Vector4D(q), scalar)
  # functions: 10 AMBIGUOUS
    - INumerical_4:Library.Multiply(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Multiply(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Multiply(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9005:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Multiply(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9165:Concept:IAny, ParameterDef=b$9167:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Multiply(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,v: ConcreteType:Vector3D): ConcreteType:Vector3D [Library]; => Tuple3(Add(Multiply(X(v), M11(m)), Add(Multiply(Y(v), M21(m)), Add(Multiply(Z(v), M31(m)), M41(m)))), Add(Multiply(X(v), M12(m)), Add(Multiply(Y(v), M22(m)), Add(Multiply(Z(v), M32(m)), M42(m)))), Add(Multiply(X(v), M13(m)), Add(Multiply(Y(v), M23(m)), Add(Multiply(Z(v), M33(m)), M43(m)))))
    - Transforms_26:Library.Multiply(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Multiply(Column1(m), s), Multiply(Column2(m), s), Multiply(Column3(m), s), Multiply(Column4(m), s))
    - Transforms_26:Library.Multiply(a: ConcreteType:Matrix4x4,b: ConcreteType:Matrix4x4): ConcreteType:Matrix4x4 [Library]; => CreateFromRows(Matrix4x4, Tuple4(Add(Multiply(M11(a), M11(b)), Add(Multiply(M12(a), M21(b)), Add(Multiply(M13(a), M31(b)), Multiply(M14(a), M41(b))))), Add(Multiply(M11(a), M12(b)), Add(Multiply(M12(a), M22(b)), Add(Multiply(M13(a), M32(b)), Multiply(M14(a), M42(b))))), Add(Multiply(M11(a), M13(b)), Add(Multiply(M12(a), M23(b)), Add(Multiply(M13(a), M33(b)), Multiply(M14(a), M43(b))))), Add(Multiply(M11(a), M14(b)), Add(Multiply(M12(a), M24(b)), Add(Multiply(M13(a), M34(b)), Multiply(M14(a), M44(b)))))), Tuple4(Add(Multiply(M21(a), M11(b)), Add(Multiply(M22(a), M21(b)), Add(Multiply(M23(a), M31(b)), Multiply(M24(a), M41(b))))), Add(Multiply(M21(a), M12(b)), Add(Multiply(M22(a), M22(b)), Add(Multiply(M23(a), M32(b)), Multiply(M24(a), M42(b))))), Add(Multiply(M21(a), M13(b)), Add(Multiply(M22(a), M23(b)), Add(Multiply(M23(a), M33(b)), Multiply(M24(a), M43(b))))), Add(Multiply(M21(a), M14(b)), Add(Multiply(M22(a), M24(b)), Add(Multiply(M23(a), M34(b)), Multiply(M24(a), M44(b)))))), Tuple4(Add(Multiply(M31(a), M11(b)), Add(Multiply(M32(a), M21(b)), Add(Multiply(M33(a), M31(b)), Multiply(M34(a), M41(b))))), Add(Multiply(M31(a), M12(b)), Add(Multiply(M32(a), M22(b)), Add(Multiply(M33(a), M32(b)), Multiply(M34(a), M42(b))))), Add(Multiply(M31(a), M13(b)), Add(Multiply(M32(a), M23(b)), Add(Multiply(M33(a), M33(b)), Multiply(M34(a), M43(b))))), Add(Multiply(M31(a), M14(b)), Add(Multiply(M32(a), M24(b)), Add(Multiply(M33(a), M34(b)), Multiply(M34(a), M44(b)))))), Tuple4(Add(Multiply(M41(a), M11(b)), Add(Multiply(M42(a), M21(b)), Add(Multiply(M43(a), M31(b)), Multiply(M44(a), M41(b))))), Add(Multiply(M41(a), M12(b)), Add(Multiply(M42(a), M22(b)), Add(Multiply(M43(a), M32(b)), Multiply(M44(a), M42(b))))), Add(Multiply(M41(a), M13(b)), Add(Multiply(M42(a), M23(b)), Add(Multiply(M43(a), M33(b)), Multiply(M44(a), M43(b))))), Add(Multiply(M41(a), M14(b)), Add(Multiply(M42(a), M24(b)), Add(Multiply(M43(a), M34(b)), Multiply(M44(a), M44(b)))))))
    - Transforms_26:Library.Multiply(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Multiply(Vector4D(q), scalar)
    - Transforms_26:Library.Multiply(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Plato.Compiler.Symbols.BlockStatement
    _ARG_ 0: Vector4D(q) => Vector4D
    _ARG_ 1: scalar => Number

755. Divide
  Type: (Quaternion, Number) => Quaternion
  Sig: Transforms_26:Library.Divide(q: Quaternion, scalar: Number): Quaternion
  Body: Divide(Vector4D(q), scalar)
  # functions: 7 AMBIGUOUS
    - INumerical_4:Library.Divide(x: Concept:INumberLike,y: Concept:INumberLike): Concept:INumberLike [Library]; => FromNumber(x, Divide(ToNumber(x), ToNumber(y)))
    - INumerical_4:Library.Divide(x: Concept:INumerical,s: ConcreteType:Number): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=i$9030:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - INumerical_4:Library.Divide(x: Concept:IVector,y: Concept:IVector): Concept:IVector [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9196:Concept:IAny, ParameterDef=b$9198:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Divide(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Divide(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Divide(m: ConcreteType:Matrix4x4,s: ConcreteType:Number): ConcreteType:Matrix4x4 [Library]; => Tuple4(Divide(Column1(m), s), Divide(Column2(m), s), Divide(Column3(m), s), Divide(Column4(m), s))
    - Transforms_26:Library.Divide(q: ConcreteType:Quaternion,scalar: ConcreteType:Number): ConcreteType:Quaternion [Library]; => Divide(Vector4D(q), scalar)
    _ARG_ 0: Vector4D(q) => Vector4D
    _ARG_ 1: scalar => Number

756. Rotation
  Type: (Vector3D, Angle) => Quaternion
  Sig: Transforms_26:Library.Rotation(v: Vector3D, theta: Angle): Quaternion
  Body: AxisAngle(v, theta)
  # functions: 2 AMBIGUOUS
    - Transforms_26:Library.AxisAngle(v: ConcreteType:Vector3D,a: ConcreteType:Angle): ConcreteType:AxisAngle [Library]; => Tuple2(v, a)
    - AxisAngle_550:ConcreteType.AxisAngle(Axis: ConcreteType:Vector3D,Angle: ConcreteType:Angle): ConcreteType:AxisAngle [Constructor]; => 
    _ARG_ 0: v => Vector3D
    _ARG_ 1: theta => Angle

760. Add
  Type: (Quaternion, Quaternion) => Quaternion
  Sig: Transforms_26:Library.Add(q1: Quaternion, q2: Quaternion): Quaternion
  Body: Add(Vector4D(q1), Vector4D(q2))
  # functions: 5 AMBIGUOUS
    - INumerical_4:Library.Add(x: Concept:INumberLike,y: ConcreteType:Number): Concept:INumberLike [Library]; => FromNumber(x, Add(ToNumber(x), y))
    - INumerical_4:Library.Add(x: Concept:INumerical,y: Concept:INumerical): Concept:INumerical [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9082:Concept:IAny, ParameterDef=b$9084:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Add(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Add(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Add(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Add(Vector4D(q1), Vector4D(q2))
    _ARG_ 0: Vector4D(q1) => Vector4D
    _ARG_ 1: Vector4D(q2) => Vector4D

761. Negate
  Type: (Quaternion) => Quaternion
  Sig: Transforms_26:Library.Negate(q: Quaternion): Quaternion
  Body: Negative(Vector4D(q))
  # functions: 3 AMBIGUOUS
    - INumerical_4:Library.Negative(x: Concept:INumerical): Concept:INumerical [Library]; => MapComponents(x, (\(ParameterDef=a$9140:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
    - Intrinsics_22:Library.Negative(x: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Negative(x: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    _ARG_ 0: Vector4D(q) => Vector4D

762. Subtract
  Type: (Quaternion, Quaternion) => Quaternion
  Sig: Transforms_26:Library.Subtract(q1: Quaternion, q2: Quaternion): Quaternion
  Body: Subtract(Vector4D(q1), Vector4D(q2))
  # functions: 4 AMBIGUOUS
    - INumerical_4:Library.Subtract(x: Concept:INumerical,y: Concept:INumerical): Concept:INumerical [Library]; => ZipComponents(x, y, (\(ParameterDef=a$9113:Concept:IAny, ParameterDef=b$9115:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
    - Intrinsics_22:Library.Subtract(x: ConcreteType:Number,y: ConcreteType:Number): ConcreteType:Number [Intrinsic]; => 
    - Intrinsics_22:Library.Subtract(x: ConcreteType:Integer,y: ConcreteType:Integer): ConcreteType:Integer [Intrinsic]; => 
    - Transforms_26:Library.Subtract(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Quaternion [Library]; => Subtract(Vector4D(q1), Vector4D(q2))
    _ARG_ 0: Vector4D(q1) => Vector4D
    _ARG_ 1: Vector4D(q2) => Vector4D

763. Dot
  Type: (Quaternion, Quaternion) => Number
  Sig: Transforms_26:Library.Dot(q1: Quaternion, q2: Quaternion): Number
  Body: Dot(Vector4D(q1), Vector4D(q2))
  # functions: 2 AMBIGUOUS
    - IGeometry_18:Library.Dot(v1: Concept:IVector,v2: Concept:IVector): ConcreteType:Number [Library]; => Sum(Multiply(v1, v2))
    - Transforms_26:Library.Dot(q1: ConcreteType:Quaternion,q2: ConcreteType:Quaternion): ConcreteType:Number [Library]; => Dot(Vector4D(q1), Vector4D(q2))
    _ARG_ 0: Vector4D(q1) => Vector4D
    _ARG_ 1: Vector4D(q2) => Vector4D

