Found 13 function groups

Group ArrayLibrary_0:Library

0. Repeat
  Signature : ArrayLibrary_0:Library.Repeat(x: IAny, n: Integer): $611:constraint=(IArray, IAny)
  Body      : MapRange(n, (i) => x)
  Inline    : MapRange(n#:Integer:, (i) => x#:(Function1, $1069:, $1070:):)#0::$611:constraint=(IArray, IAny)
1. Range
  Signature : ArrayLibrary_0:Library.Range(n: Integer): $612:constraint=(IArray, Integer)
  Body      : MapRange(n, (i) => i)
  Inline    : MapRange(n#:Integer:, (i) => i#:(Function1, $1071:, $1072:):)#0::$612:constraint=(IArray, Integer)
2. Indices
  Signature : ArrayLibrary_0:Library.Indices(xs: (IArray, $613:)): $614:constraint=(IArray, Integer)
  Body      : Range(Count(xs))
  Inline    : MapRange(Count(xs#:(IArray, $613:):)#1:Integer:Integer, (i) => i#:(Function1, $1071:, $1072:):)#1::
3. Count
  Signature : ArrayLibrary_0:Library.Count(xs: (IArray2D, $615:)): Integer
  Body      : Multiply(NumRows(xs), NumColumns(xs))
  Inline    : Multiply(NumRows(xs#:(IArray2D, $615:):)#2:Integer:, NumColumns(xs#:(IArray2D, $615:):)#2:Integer:)#2:Integer:Integer
4. Count
  Signature : ArrayLibrary_0:Library.Count(xs: (IArray3D, $616:)): Integer
  Body      : Multiply(NumRows(xs), Multiply(NumColumns(xs), NumLayers(xs)))
  Inline    : Multiply(NumRows(xs#:(IArray3D, $616:):)#2:Integer:, Multiply(NumColumns(xs#:(IArray3D, $616:):)#2:Integer:, NumLayers(xs#:(IArray3D, $616:):)#1:Integer:)#2:Integer:)#2:Integer:Integer
5. At
  Signature : ArrayLibrary_0:Library.At(xs: (IArray2D, $617:), i: Integer): $618:
  Body      : At(xs, Modulo(i, NumColumns(xs)), Divide(i, NumColumns(xs)))
  Inline    : At(xs#:(IArray2D, $617:):, Modulo(i#:Integer:, NumColumns(xs#:(IArray2D, $617:):)#2:Integer:)#2:Integer:, Divide(i#:Integer:, NumColumns(xs#:(IArray2D, $617:):)#2:Integer:)#2:Integer:)#1:$8::$618:
6. At
  Signature : ArrayLibrary_0:Library.At(xs: (IArray3D, $619:), i: Integer): $620:
  Body      : At(xs, Modulo(i, NumColumns(xs)), Divide(i, NumColumns(xs)), Divide(i, NumLayers(xs)))
  Inline    : At(xs#:(IArray3D, $619:):, Modulo(i#:Integer:, NumColumns(xs#:(IArray3D, $619:):)#2:Integer:)#2:Integer:, Divide(i#:Integer:, NumColumns(xs#:(IArray3D, $619:):)#2:Integer:)#2:Integer:, Divide(i#:Integer:, NumLayers(xs#:(IArray3D, $619:):)#1:Integer:)#2:Integer:)#1:$16::$620:
7. IsEmpty
  Signature : ArrayLibrary_0:Library.IsEmpty(xs: (IArray, $621:)): Boolean
  Body      : Equals(Count(xs), 0)
  Inline    : Equals(Count(xs#:(IArray, $621:):)#1:Integer:, 0#:Integer:)#2:Boolean:Boolean
8. First
  Signature : ArrayLibrary_0:Library.First(xs: (IArray, $622:)): $623:
  Body      : At(xs, 0)
  Inline    : At(xs#:(IArray, $622:):, 0#:Integer:)#1:$2::$623:
9. Last
  Signature : ArrayLibrary_0:Library.Last(xs: (IArray, $624:)): $625:
  Body      : At(xs, Subtract(Count(xs), 1))
  Inline    : At(xs#:(IArray, $624:):, Subtract(Count(xs#:(IArray, $624:):)#1:Integer:, 1#:Integer:)#2:Integer:)#1:$2::$625:
10. Middle
  Signature : ArrayLibrary_0:Library.Middle(xs: (IArray, $626:), n: Integer): $627:
  Body      : At(xs, Divide(Count(xs), 2))
  Inline    : At(xs#:(IArray, $626:):, Divide(Count(xs#:(IArray, $626:):)#1:Integer:, 2#:Integer:)#2:Integer:)#1:$2::$627:
11. Slice
  Signature : ArrayLibrary_0:Library.Slice(xs: (IArray, $628:), from: Integer, to: Integer): $630:constraint=(IArray, $629:)
  Body      : Subarray(xs, from, Subtract(to, from))
  Inline    : MapRange(Subtract(to#:Integer:, from#:Integer:)#2:Integer:Integer, (i) => At(xs, Add(i, from))#:(Function1, $1174:, $1175:):)#1::
12. Slices
  Signature : ArrayLibrary_0:Library.Slices(xs: (IArray, $631:), size: Integer): $633:constraint=(IArray, (IArray, $632:))
  Body      : MapRange(Divide(Count(xs), size), (i) => NthSlice(xs, i, size))
  Inline    : MapRange(Divide(Count(xs#:(IArray, $631:):)#1:Integer:, size#:Integer:)#2:Integer:, (i) => NthSlice(xs, i, size)#:(Function1, $1176:, $1177:):)#0::$633:constraint=(IArray, (IArray, $632:))
13. NthSlice
  Signature : ArrayLibrary_0:Library.NthSlice(xs: (IArray, $634:), n: Integer, size: Integer): $636:constraint=(IArray, $635:)
  Body      : Subarray(xs, Multiply(n, size), size)
  Inline    : MapRange(size#:Integer:Integer, (i) => At(xs, Add(i, from))#:(Function1, $1174:, $1175:):)#1::
14. Subarray
  Signature : ArrayLibrary_0:Library.Subarray(xs: (IArray, $637:), from: Integer, count: Integer): $639:constraint=(IArray, $638:)
  Body      : MapRange(count, (i) => At(xs, Add(i, from)))
  Inline    : MapRange(count#:Integer:, (i) => At(xs, Add(i, from))#:(Function1, $1174:, $1175:):)#0::$639:constraint=(IArray, $638:)
15. Skip
  Signature : ArrayLibrary_0:Library.Skip(xs: (IArray, $640:), n: Integer): $642:constraint=(IArray, $641:)
  Body      : Subarray(xs, n, Subtract(Count(xs), n))
  Inline    : MapRange(Subtract(Count(xs#:(IArray, $640:):)#1:Integer:, n#:Integer:)#2:Integer:Integer, (i) => At(xs, Add(i, from))#:(Function1, $1174:, $1175:):)#1::
16. Take
  Signature : ArrayLibrary_0:Library.Take(xs: (IArray, $643:), n: Integer): $645:constraint=(IArray, $644:)
  Body      : Subarray(xs, 0, n)
  Inline    : MapRange(n#:Integer:Integer, (i) => At(xs, Add(i, from))#:(Function1, $1174:, $1175:):)#1::
17. TakeLast
  Signature : ArrayLibrary_0:Library.TakeLast(xs: (IArray, $646:), n: Integer): $648:constraint=(IArray, $647:)
  Body      : Skip(xs, Subtract(Count(xs), 1))
  Inline    : MapRange(Subtract(Count(xs#:(IArray, $646:):(IArray, $640:))#1:Integer:, Subtract(Count(xs#:(IArray, $646:):)#1:Integer:, 1#:Integer:)#2:Integer:Integer)#2:Integer:Integer, (i) => At(xs, Add(i, from))#:(Function1, $1174:, $1175:):)#1::
18. Drop
  Signature : ArrayLibrary_0:Library.Drop(xs: (IArray, $649:), n: Integer): $651:constraint=(IArray, $650:)
  Body      : Take(xs, Subtract(Count(xs), n))
  Inline    : MapRange(Subtract(Count(xs#:(IArray, $649:):)#1:Integer:, n#:Integer:)#2:Integer:Integer, (i) => At(xs, Add(i, from))#:(Function1, $1174:, $1175:):)#1::
19. Trim
  Signature : ArrayLibrary_0:Library.Trim(xs: (IArray, $652:), first: Integer, last: Integer): $654:constraint=(IArray, $653:)
  Body      : Drop(Skip(xs, first), last)
  Inline    : MapRange(Subtract(Count(MapRange(Subtract(Count(xs#:(IArray, $652:):(IArray, $640:))#1:Integer:, first#:Integer:Integer)#2:Integer:Integer, (i) => At(xs, Add(i, from))#:(Function1, $1174:, $1175:):)#1::)#1:Integer:, last#:Integer:Integer)#2:Integer:Integer, (i) => At(xs, Add(i, from))#:(Function1, $1174:, $1175:):)#1::
20. Rest
  Signature : ArrayLibrary_0:Library.Rest(xs: (IArray, $655:)): $657:constraint=(IArray, $656:)
  Body      : Skip(xs, 1)
  Inline    : MapRange(Subtract(Count(xs#:(IArray, $655:):(IArray, $640:))#1:Integer:, 1#:Integer:Integer)#2:Integer:Integer, (i) => At(xs, Add(i, from))#:(Function1, $1174:, $1175:):)#1::
21. Map
  Signature : ArrayLibrary_0:Library.Map(xs: (IArray, $668:), f: (Function1, $669:, $670:)): $672:constraint=(IArray, $671:)
  Body      : MapRange(Count(xs), (i) => f(At(xs, i)))
  Inline    : MapRange(Count(xs#:(IArray, $668:):)#1:Integer:, (i) => f(At(xs, i))#:(Function1, $1143:, $1144:):)#0::$672:constraint=(IArray, $671:)
22. Zip
  Signature : ArrayLibrary_0:Library.Zip(xs: (IArray, $673:), ys: (IArray, $674:), f: (Function2, $675:, $676:, $677:)): $679:constraint=(IArray, $678:)
  Body      : MapRange(Lesser(Count(xs), Count(ys)), (i) => f(At(xs, i), At(ys, i)))
  Inline    : MapRange(Lesser(Count(xs#:(IArray, $673:):)#1:Integer:, Count(ys#:(IArray, $674:):)#1:Integer:)#0::, (i) => f(At(xs, i), At(ys, i))#:(Function1, $1080:, $1081:):)#0::$679:constraint=(IArray, $678:)
23. Zip
  Signature : ArrayLibrary_0:Library.Zip(xs: (IArray, $680:), ys: (IArray, $681:), zs: (IArray, $682:), f: (Function3, $683:, $684:, $685:, $686:)): $688:constraint=(IArray, $687:)
  Body      : MapRange(Lesser(Lesser(Count(xs), Count(ys)), Count(zs)), (i) => f(At(xs, i), At(ys, i), At(zs, i)))
  Inline    : MapRange(Lesser(Lesser(Count(xs#:(IArray, $680:):)#1:Integer:, Count(ys#:(IArray, $681:):)#1:Integer:)#0::, Count(zs#:(IArray, $682:):)#1:Integer:)#0::, (i) => f(At(xs, i), At(ys, i), At(zs, i))#:(Function1, $1082:, $1083:):)#0::$688:constraint=(IArray, $687:)
24. ModuloAt
  Signature : ArrayLibrary_0:Library.ModuloAt(xs: (IArray, $689:), n: Integer): $690:
  Body      : At(xs, Modulo(n, Count(xs)))
  Inline    : At(xs#:(IArray, $689:):, Modulo(n#:Integer:, Count(xs#:(IArray, $689:):)#1:Integer:)#2:Integer:)#1:$2::$690:
25. Shift
  Signature : ArrayLibrary_0:Library.Shift(xs: (IArray, $691:), n: Integer): $693:constraint=(IArray, $692:)
  Body      : MapRange(Count(xs), (i) => ModuloAt(xs, i))
  Inline    : MapRange(Count(xs#:(IArray, $691:):)#1:Integer:, (i) => ModuloAt(xs, i)#:(Function1, $1178:, $1179:):)#0::$693:constraint=(IArray, $692:)
26. WithNext
  Signature : ArrayLibrary_0:Library.WithNext(xs: (IArray, $694:), f: (Function2, $695:, $696:, $697:)): $699:constraint=(IArray, $698:)
  Body      : Zip(Drop(xs, 1), Skip(xs, 1), f)
  Inline    : Zip(MapRange(Subtract(Count(xs#:(IArray, $694:):(IArray, $649:))#1:Integer:, 1#:Integer:Integer)#2:Integer:Integer, (i) => At(xs, Add(i, from))#:(Function1, $1174:, $1175:):)#1::, MapRange(Subtract(Count(xs#:(IArray, $694:):(IArray, $640:))#1:Integer:, 1#:Integer:Integer)#2:Integer:Integer, (i) => At(xs, Add(i, from))#:(Function1, $1174:, $1175:):)#1::, f#:(Function2, $695:, $696:, $697:):)#0::$699:constraint=(IArray, $698:)
27. WithNextAndBeginning
  Signature : ArrayLibrary_0:Library.WithNextAndBeginning(xs: (IArray, $700:), f: (Function2, $701:, $702:, $703:)): $705:constraint=(IArray, $704:)
  Body      : Zip(xs, Shift(xs, 1), f)
  Inline    : Zip(xs#:(IArray, $700:):, MapRange(Count(xs#:(IArray, $700:):(IArray, $691:))#1:Integer:, (i) => ModuloAt(xs, i)#:(Function1, $1178:, $1179:):)#1::, f#:(Function2, $701:, $702:, $703:):)#0::$705:constraint=(IArray, $704:)
28. WithNext
  Signature : ArrayLibrary_0:Library.WithNext(xs: (IArray, $706:), f: (Function2, $707:, $708:, $709:), connect: Boolean): $711:constraint=(IArray, $710:)
  Body      : (connect?WithNextAndBeginning(xs, f):WithNext(xs, f))
  Inline    : (connect#:Boolean:Boolean?WithNextAndBeginning(xs#:(IArray, $706:):, f#:(Function2, $707:, $708:, $709:):)#0:::WithNext(xs#:(IArray, $706:):, f#:(Function2, $707:, $708:, $709:):)#0::)#::$711:constraint=(IArray, $710:)
29. EveryNth
  Signature : ArrayLibrary_0:Library.EveryNth(self: (IArray, $712:), n: Integer): $714:constraint=(IArray, $713:)
  Body      : Map(Indices(self), (i) => ModuloAt(self, Multiply(i, n)))
  Inline    : Map(Indices(self#:(IArray, $712:):)#2:$614:constraint=(IArray, Integer):, (i) => ModuloAt(self, Multiply(i, n))#:(Function1, $1290:, $1291:):)#0::$714:constraint=(IArray, $713:)
30. CartesianProduct
  Signature : ArrayLibrary_0:Library.CartesianProduct(columns: (IArray, $715:), rows: (IArray, $716:), func: (Function2, $717:, $718:, $719:)): $721:constraint=(IArray2D, $720:)
  Body      : MakeArray2D(Count(columns), Count(rows), (i, j) => func(At(columns, i), At(rows, j)))
  Inline    : MakeArray2D(Count(columns#:(IArray, $715:):)#1:Integer:, Count(rows#:(IArray, $716:):)#1:Integer:, (i, j) => func(At(columns, i), At(rows, j))#:(Function2, $1292:, $1293:, $1294:):)#0::$721:constraint=(IArray2D, $720:)
31. Reverse
  Signature : ArrayLibrary_0:Library.Reverse(self: (IArray, $722:)): $724:constraint=(IArray, $723:)
  Body      : Map(Indices(self), (i) => At(self, Subtract(Subtract(Count(self), 1), i)))
  Inline    : Map(Indices(self#:(IArray, $722:):)#2:$614:constraint=(IArray, Integer):, (i) => At(self, Subtract(Subtract(Count(self), 1), i))#:(Function1, $1295:, $1296:):)#0::$724:constraint=(IArray, $723:)
32. Concat
  Signature : ArrayLibrary_0:Library.Concat(xs: (IArray, $725:), ys: (IArray, $726:)): $728:constraint=(IArray, $727:)
  Body      : MapRange(Add(Count(xs), Count(ys)), (i) => (LessThan(i, Count(xs))?At(xs, i):At(ys, Subtract(i, Count(xs)))))
  Inline    : MapRange(Add(Count(xs#:(IArray, $725:):)#1:Integer:, Count(ys#:(IArray, $726:):)#1:Integer:)#2:Integer:, (i) => (LessThan(i, Count(xs))?At(xs, i):At(ys, Subtract(i, Count(xs))))#:(Function1, $1297:, $1298:):)#0::$728:constraint=(IArray, $727:)
33. Prepend
  Signature : ArrayLibrary_0:Library.Prepend(self: (IArray, $729:), value: $730:): $732:constraint=(IArray, $731:)
  Body      : MapRange(Add(Count(self), 1), (i) => (Equals(i, 0)?value:At(self, Subtract(i, 1))))
  Inline    : MapRange(Add(Count(self#:(IArray, $729:):)#1:Integer:, 1#:Integer:)#2:Integer:, (i) => (Equals(i, 0)?value:At(self, Subtract(i, 1)))#:(Function1, $1299:, $1300:):)#0::$732:constraint=(IArray, $731:)
34. Append
  Signature : ArrayLibrary_0:Library.Append(self: (IArray, $733:), value: $734:): $736:constraint=(IArray, $735:)
  Body      : MapRange(Add(Count(self), 1), (i) => (Equals(i, 0)?value:At(self, Subtract(i, 1))))
  Inline    : MapRange(Add(Count(self#:(IArray, $733:):)#1:Integer:, 1#:Integer:)#2:Integer:, (i) => (Equals(i, 0)?value:At(self, Subtract(i, 1)))#:(Function1, $1301:, $1302:):)#0::$736:constraint=(IArray, $735:)
35. PrependAndAppend
  Signature : ArrayLibrary_0:Library.PrependAndAppend(self: (IArray, $737:), before: $738:, after: $739:): $741:constraint=(IArray, $740:)
  Body      : Append(Prepend(self, before), after)
  Inline    : MapRange(Add(Count(MapRange(Add(Count(self#:(IArray, $737:):(IArray, $729:))#1:Integer:, 1#:Integer:)#2:Integer:, (i) => (Equals(i, 0)?value:At(self, Subtract(i, 1)))#:(Function1, $1299:, $1300:):)#1::)#1:Integer:, 1#:Integer:)#2:Integer:, (i) => (Equals(i, 0)?value:At(self, Subtract(i, 1)))#:(Function1, $1301:, $1302:):)#1::
36. Map
  Signature : ArrayLibrary_0:Library.Map(xs: (IArray2D, $742:), f: (Function1, $743:, $744:)): $746:constraint=(IArray2D, $745:)
  Body      : MakeArray2D(NumColumns(xs), NumRows(xs), (a, b) => f(At(xs, a, b)))
  Inline    : MakeArray2D(NumColumns(xs#:(IArray2D, $742:):)#2:Integer:, NumRows(xs#:(IArray2D, $742:):)#2:Integer:, (a, b) => f(At(xs, a, b))#:(Function2, $1145:, $1146:, $1147:):)#0::$746:constraint=(IArray2D, $745:)

Group IBounds_2:Library

37. Size
  Signature : IBounds_2:Library.Size(x: (IBounds, $747:)): $748:
  Body      : Subtract(Max(x), Min(x))
  Inline    : Subtract(Max(x#:(IBounds, $747:):)#1:$49::, Min(x#:(IBounds, $747:):)#1:$47::)#5:$828:constraint=INumerical:$748:
38. Lerp
  Signature : IBounds_2:Library.Lerp(x: (IBounds, $749:), amount: Number): $750:
  Body      : Lerp(Min(x), Max(x), amount)
  Inline    : Add(Multiply(Min(x#:(IBounds, $749:):)#1:$47::IInterpolatable, FromOne(amount#:Number:Number)#0::)#0::, Multiply(Max(x#:(IBounds, $749:):)#1:$49::IInterpolatable, amount#:Number:Number)#2:$35:constraint=IScalarArithmetic:)#1::
39. Center
  Signature : IBounds_2:Library.Center(x: (IBounds, $751:)): $752:
  Body      : Lerp(x, 0.5)
  Inline    : Add(Multiply(Min(x#:(IBounds, $751:):(IBounds, $749:))#1:$47::IInterpolatable, FromOne(0.5#:Number:Number)#0::)#0::, Multiply(Max(x#:(IBounds, $751:):(IBounds, $749:))#1:$49::IInterpolatable, 0.5#:Number:Number)#2:$35:constraint=IScalarArithmetic:)#1::
40. Contains
  Signature : IBounds_2:Library.Contains(x: (IBounds, $753:), value: $754:): Boolean
  Body      : Between(value, Min(x), Max(x))
  Inline    : Between(value#:$754::, Min(x#:(IBounds, $753:):)#1:$47::, Max(x#:(IBounds, $753:):)#1:$49::)#2:Boolean:Boolean
41. Contains
  Signature : IBounds_2:Library.Contains(x: (IBounds, $755:), y: (IBounds, $756:)): Boolean
  Body      : And(Contains(x, Min(y)), Contains(x, Max(y)))
  Inline    : And(Contains(x#:(IBounds, $755:):, Min(y#:(IBounds, $756:):)#1:$47::)#2:Boolean:, Contains(x#:(IBounds, $755:):, Max(y#:(IBounds, $756:):)#1:$49::)#2:Boolean:)#2:Boolean:Boolean
42. Overlaps
  Signature : IBounds_2:Library.Overlaps(x: (IBounds, $757:), y: (IBounds, $758:)): Boolean
  Body      : Or(Contains(x, Min(y)), Or(Contains(x, Max(y)), Or(Contains(y, Min(x)), Contains(y, Max(x)))))
  Inline    : Or(Contains(x#:(IBounds, $757:):, Min(y#:(IBounds, $758:):)#1:$47::)#2:Boolean:, Or(Contains(x#:(IBounds, $757:):, Max(y#:(IBounds, $758:):)#1:$49::)#2:Boolean:, Or(Contains(y#:(IBounds, $758:):, Min(x#:(IBounds, $757:):)#1:$47::)#2:Boolean:, Contains(y#:(IBounds, $758:):, Max(x#:(IBounds, $757:):)#1:$49::)#2:Boolean:)#2:Boolean:)#2:Boolean:)#2:Boolean:Boolean
43. Recenter
  Signature : IBounds_2:Library.Recenter(x: (IBounds, $759:), c: $760:): $762:constraint=(IBounds, $761:)
  Body      : Tuple2(Subtract(c, Half(Size(x))), Add(c, Half(Size(x))))
  Inline    : Tuple2(Subtract(c#:$760::, Divide(Subtract(Max(x#:(IBounds, $759:):(IBounds, $747:))#1:$49::, Min(x#:(IBounds, $759:):(IBounds, $747:))#1:$47::)#1:$828:constraint=INumerical:, 2#:Number:)#1:$34:constraint=IScalarArithmetic:)#5:$828:constraint=INumerical:, Add(c#:$760::, Divide(Subtract(Max(x#:(IBounds, $759:):(IBounds, $747:))#1:$49::, Min(x#:(IBounds, $759:):(IBounds, $747:))#1:$47::)#1:$828:constraint=INumerical:, 2#:Number:)#1:$34:constraint=IScalarArithmetic:)#6:$822:constraint=INumberLike:)#:(Tuple2, $1309:, $1310:):$762:constraint=(IBounds, $761:)
44. Clamp
  Signature : IBounds_2:Library.Clamp(x: (IBounds, $763:), y: (IBounds, $764:)): $766:constraint=(IBounds, $765:)
  Body      : Tuple2(Clamp(x, Min(y)), Clamp(x, Max(y)))
  Inline    : Tuple2(Clamp(x#:(IBounds, $763:):, Min(y#:(IBounds, $764:):)#1:$47::)#2:$766:constraint=(IBounds, $765:):, Clamp(x#:(IBounds, $763:):, Max(y#:(IBounds, $764:):)#1:$49::)#2:$766:constraint=(IBounds, $765:):)#:(Tuple2, $1317:, $1318:):$766:constraint=(IBounds, $765:)
45. Clamp
  Signature : IBounds_2:Library.Clamp(x: (IBounds, $767:), value: $768:): $769:
  Body      : Clamp(value, Min(x), Max(x))
  Inline    : FromComponents(value#:$768::INumerical, Zip(Components(value#:$768::INumerical)#1:$24:constraint=(IArray, Number):, Components(Min(x#:(IBounds, $767:):)#1:$47::INumerical)#1:$24:constraint=(IArray, Number):, Components(Max(x#:(IBounds, $767:):)#1:$49::INumerical)#1:$24:constraint=(IArray, Number):, (x0, a0, b0) => Clamp(x0, a0, b0)#:(Function3, $1311:, $1312:, $1313:, $1314:):)#0::)#1::
46. Include
  Signature : IBounds_2:Library.Include(x: (IBounds, $770:), value: $771:): $773:constraint=(IBounds, $772:)
  Body      : Tuple2(Min(Min(x), value), Max(Max(x), value))
  Inline    : Tuple2(Min(Min(x#:(IBounds, $770:):)#1:$47::, value#:$771::)#2:Number:, Max(Max(x#:(IBounds, $770:):)#1:$49::, value#:$771::)#2:Number:)#:(Tuple2, $1319:, $1320:):$773:constraint=(IBounds, $772:)
47. Include
  Signature : IBounds_2:Library.Include(x: (IBounds, $774:), y: (IBounds, $775:)): $777:constraint=(IBounds, $776:)
  Body      : Include(Include(x, Min(y)), Max(y))
  Inline    : Include(Include(x#:(IBounds, $774:):, Min(y#:(IBounds, $775:):)#1:$47::)#2:$773:constraint=(IBounds, $772:):, Max(y#:(IBounds, $775:):)#1:$49::)#2:$773:constraint=(IBounds, $772:):$777:constraint=(IBounds, $776:)

Group INumerical_4:Library

48. XAxis2D
  Signature : INumerical_4:Library.XAxis2D(): Vector2D
  Body      : Tuple2(1, 0)
  Inline    : Tuple2(1#:Integer:, 0#:Integer:)#:(Tuple2, $1321:, $1322:):Vector2D
49. YAxis2D
  Signature : INumerical_4:Library.YAxis2D(): Vector2D
  Body      : Tuple2(0, 1)
  Inline    : Tuple2(0#:Integer:, 1#:Integer:)#:(Tuple2, $1323:, $1324:):Vector2D
50. XAxis3D
  Signature : INumerical_4:Library.XAxis3D(): Vector3D
  Body      : Tuple3(1, 0, 0)
  Inline    : Tuple3(1#:Integer:, 0#:Integer:, 0#:Integer:)#:(Tuple3, $1325:, $1326:, $1327:):Vector3D
51. YAxis3D
  Signature : INumerical_4:Library.YAxis3D(): Vector3D
  Body      : Tuple3(0, 1, 0)
  Inline    : Tuple3(0#:Integer:, 1#:Integer:, 0#:Integer:)#:(Tuple3, $1328:, $1329:, $1330:):Vector3D
52. ZAxis3D
  Signature : INumerical_4:Library.ZAxis3D(): Vector3D
  Body      : Tuple3(0, 0, 1)
  Inline    : Tuple3(0#:Integer:, 0#:Integer:, 1#:Integer:)#:(Tuple3, $1331:, $1332:, $1333:):Vector3D
53. UnitInterval
  Signature : INumerical_4:Library.UnitInterval(): NumberInterval
  Body      : Tuple2(0, 1)
  Inline    : Tuple2(0#:Number:, 1#:Number:)#:(Tuple2, $1334:, $1335:):NumberInterval
54. Pi
  Signature : INumerical_4:Library.Pi(): Number
  Body      : 3.1415926535897
  Inline    : 3.1415926535897#:Number:Number
55. E
  Signature : INumerical_4:Library.E(): Number
  Body      : 2.718281828459
  Inline    : 2.718281828459#:Number:Number
56. TwoPi
  Signature : INumerical_4:Library.TwoPi(): Number
  Body      : Twice(Pi)
  Inline    : Twice(Pi#:IAny:)#0::Number
57. HalfPi
  Signature : INumerical_4:Library.HalfPi(): Number
  Body      : Half(Pi)
  Inline    : Half(Pi#:IAny:)#0::Number
58. Epsilon
  Signature : INumerical_4:Library.Epsilon(): Number
  Body      : 1E-15
  Inline    : 1E-15#:Number:Number
59. UnitCircle
  Signature : INumerical_4:Library.UnitCircle(): Circle
  Body      : Tuple2(Tuple2(0, 0), 1)
  Inline    : Tuple2(Tuple2(0#:Integer:, 0#:Integer:)#:(Tuple2, $1165:, $1166:):, 1#:Integer:)#:(Tuple2, $1167:, $1168:):Circle
60. FeetPerMeter
  Signature : INumerical_4:Library.FeetPerMeter(): Number
  Body      : 3.280839895
  Inline    : 3.280839895#:Number:Number
61. FeetPerMile
  Signature : INumerical_4:Library.FeetPerMile(): Number
  Body      : 5280
  Inline    : 5280#:Integer:Number
62. MetersPerLightyear
  Signature : INumerical_4:Library.MetersPerLightyear(): Number
  Body      : 9460730472580000
  Inline    : 9460730472580000#:Number:Number
63. MetersPerAU
  Signature : INumerical_4:Library.MetersPerAU(): Number
  Body      : 149597870691
  Inline    : 149597870691#:Number:Number
64. DaltonPerKilogram
  Signature : INumerical_4:Library.DaltonPerKilogram(): Number
  Body      : 1.66053E-27
  Inline    : 1.66053E-27#:Number:Number
65. PoundPerKilogram
  Signature : INumerical_4:Library.PoundPerKilogram(): Number
  Body      : 0.45359237
  Inline    : 0.45359237#:Number:Number
66. PoundPerTon
  Signature : INumerical_4:Library.PoundPerTon(): Number
  Body      : 2000
  Inline    : 2000#:Integer:Number
67. KilogramPerSolarMass
  Signature : INumerical_4:Library.KilogramPerSolarMass(): Number
  Body      : 1.9889200011446E+30
  Inline    : 1.9889200011446E+30#:Number:Number
68. JulianYearSeconds
  Signature : INumerical_4:Library.JulianYearSeconds(): Number
  Body      : 31557600
  Inline    : 31557600#:Integer:Number
69. GregorianYearDays
  Signature : INumerical_4:Library.GregorianYearDays(): Number
  Body      : 365.2425
  Inline    : 365.2425#:Number:Number
70. RadiansPerDegree
  Signature : INumerical_4:Library.RadiansPerDegree(): Number
  Body      : Divide(Pi, 180)
  Inline    : Divide(Pi#:IAny:, 180#:Number:)#2:$34:constraint=IScalarArithmetic:Number
71. DegreesPerRadian
  Signature : INumerical_4:Library.DegreesPerRadian(): Number
  Body      : Divide(180, Pi)
  Inline    : Divide(180#:Number:, Pi#:IAny:)#1:$38:constraint=IDivisible:Number
72. OunceToGram
  Signature : INumerical_4:Library.OunceToGram(x: Number): Number
  Body      : Multiply(x, 28.349523125)
  Inline    : Multiply(x#:Number:, 28.349523125#:Number:)#3:Number:Number
73. TroyOunceToGram
  Signature : INumerical_4:Library.TroyOunceToGram(x: Number): Number
  Body      : Multiply(x, 31.1034768)
  Inline    : Multiply(x#:Number:, 31.1034768#:Number:)#3:Number:Number
74. GrainToMilligram
  Signature : INumerical_4:Library.GrainToMilligram(x: Number): Number
  Body      : Multiply(x, 64.79891)
  Inline    : Multiply(x#:Number:, 64.79891#:Number:)#3:Number:Number
75. Mole
  Signature : INumerical_4:Library.Mole(x: Number): Number
  Body      : Multiply(x, 6.02214076E+23)
  Inline    : Multiply(x#:Number:, 6.02214076E+23#:Number:)#3:Number:Number
76. Min
  Signature : INumerical_4:Library.Min(x: Number, y: Number): Number
  Body      : (LessThanOrEquals(x, y)?x:y)
  Inline    : (LessThanOrEquals(x#:Number:, y#:Number:)#2:Boolean:Boolean?x#:Number::y#:Number:)#:Number:Number
77. Max
  Signature : INumerical_4:Library.Max(x: Number, y: Number): Number
  Body      : (GreaterThanOrEquals(x, y)?x:y)
  Inline    : (GreaterThanOrEquals(x#:Number:, y#:Number:)#0::Boolean?x#:Number::y#:Number:)#:Number:Number
78. Inverse
  Signature : INumerical_4:Library.Inverse(x: Number): Number
  Body      : Divide(1, x)
  Inline    : Divide(1#:Number:, x#:Number:)#3:Number:Number
79. Reciprocal
  Signature : INumerical_4:Library.Reciprocal(x: Number): Number
  Body      : Inverse(x)
  Inline    : Inverse(x#:Number:)#2:Number:Number
80. SquareRoot
  Signature : INumerical_4:Library.SquareRoot(x: Number): Number
  Body      : Pow(x, 0.5)
  Inline    : Pow(x#:Number:, 0.5#:Number:)#1:Number:Number
81. Sqrt
  Signature : INumerical_4:Library.Sqrt(x: Number): Number
  Body      : SquareRoot(x)
  Inline    : Pow(x#:Number:Number, 0.5#:Number:)#1:Number:
82. InversePow
  Signature : INumerical_4:Library.InversePow(x: Number, n: Number): Number
  Body      : Pow(x, Reciprocal(n))
  Inline    : Pow(x#:Number:, Inverse(n#:Number:Number)#1:Number:)#1:Number:Number
83. Exp
  Signature : INumerical_4:Library.Exp(x: Number): Number
  Body      : Pow(E, x)
  Inline    : Pow(E#:IAny:, x#:Number:)#0::Number
84. SmoothStep
  Signature : INumerical_4:Library.SmoothStep(x: Number): Number
  Body      : Multiply(Square(x), Subtract(3, Twice(x)))
  Inline    : Multiply(Square(x#:Number:)#0::, Subtract(3#:Number:, Twice(x#:Number:)#0::)#0::)#0::Number
85. MultiplyEpsilon
  Signature : INumerical_4:Library.MultiplyEpsilon(x: Number, y: Number): Number
  Body      : Multiply(Greater(Abs(x), Abs(y)), Epsilon)
  Inline    : Multiply(Greater(Abs(x#:Number:)#0::, Abs(y#:Number:)#0::)#0::, Epsilon#:IAny:)#0::Number
86. AlmostEqual
  Signature : INumerical_4:Library.AlmostEqual(x: Number, y: Number): Boolean
  Body      : LessThanOrEquals(Abs(Subtract(x, y)), MultiplyEpsilon(x, y))
  Inline    : LessThanOrEquals(Abs(Subtract(x#:Number:, y#:Number:)#2:Number:)#0::, Multiply(Greater(Abs(x#:Number:Number)#0::, Abs(y#:Number:Number)#0::)#0::, Epsilon#:IAny:)#1::)#0::Boolean
87. AlmostZero
  Signature : INumerical_4:Library.AlmostZero(x: Number): Boolean
  Body      : LessThan(Abs(x), Epsilon)
  Inline    : LessThan(Abs(x#:Number:)#0::, Epsilon#:IAny:)#0::Boolean
88. AlmostZeroOrOne
  Signature : INumerical_4:Library.AlmostZeroOrOne(x: Number): Boolean
  Body      : Or(AlmostEqual(x, 0), AlmostEqual(x, 1))
  Inline    : Or(AlmostEqual(x#:Number:, 0#:Integer:)#0::, AlmostEqual(x#:Number:, 1#:Integer:)#0::)#0::Boolean
89. Fract
  Signature : INumerical_4:Library.Fract(x: Number): Number
  Body      : Subtract(x, Floor(x))
  Inline    : Subtract(x#:Number:, Floor(x#:Number:)#1:Number:)#2:Number:Number
90. Pow2
  Signature : INumerical_4:Library.Pow2(x: IArithmetic): $778:constraint=IArithmetic
  Body      : Multiply(x, x)
  Inline    : Multiply(x#:IArithmetic:, x#:IArithmetic:)#1:$36:constraint=IMultiplicative:$778:constraint=IArithmetic
91. Pow3
  Signature : INumerical_4:Library.Pow3(x: IArithmetic): $779:constraint=IArithmetic
  Body      : Multiply(Pow2(x), x)
  Inline    : Multiply(Multiply(x#:IArithmetic:IArithmetic, x#:IArithmetic:IArithmetic)#1:$36:constraint=IMultiplicative:, x#:IArithmetic:)#1:$36:constraint=IMultiplicative:$779:constraint=IArithmetic
92. Pow4
  Signature : INumerical_4:Library.Pow4(x: IArithmetic): $780:constraint=IArithmetic
  Body      : Multiply(Pow3(x), x)
  Inline    : Multiply(Multiply(Multiply(x#:IArithmetic:IArithmetic, x#:IArithmetic:IArithmetic)#1:$36:constraint=IMultiplicative:, x#:IArithmetic:IArithmetic)#1:$36:constraint=IMultiplicative:, x#:IArithmetic:)#1:$36:constraint=IMultiplicative:$780:constraint=IArithmetic
93. Pow5
  Signature : INumerical_4:Library.Pow5(x: IArithmetic): $781:constraint=IArithmetic
  Body      : Multiply(Pow4(x), x)
  Inline    : Multiply(Multiply(Multiply(Multiply(x#:IArithmetic:IArithmetic, x#:IArithmetic:IArithmetic)#1:$36:constraint=IMultiplicative:, x#:IArithmetic:IArithmetic)#1:$36:constraint=IMultiplicative:, x#:IArithmetic:IArithmetic)#1:$36:constraint=IMultiplicative:, x#:IArithmetic:)#1:$36:constraint=IMultiplicative:$781:constraint=IArithmetic
94. Square
  Signature : INumerical_4:Library.Square(x: IArithmetic): $782:constraint=IArithmetic
  Body      : Pow2(x)
  Inline    : Multiply(x#:IArithmetic:IArithmetic, x#:IArithmetic:IArithmetic)#1:$36:constraint=IMultiplicative:
95. Sqr
  Signature : INumerical_4:Library.Sqr(x: IArithmetic): $783:constraint=IArithmetic
  Body      : Pow2(x)
  Inline    : Multiply(x#:IArithmetic:IArithmetic, x#:IArithmetic:IArithmetic)#1:$36:constraint=IMultiplicative:
96. Cube
  Signature : INumerical_4:Library.Cube(x: IArithmetic): $784:constraint=IArithmetic
  Body      : Pow3(x)
  Inline    : Multiply(Multiply(x#:IArithmetic:IArithmetic, x#:IArithmetic:IArithmetic)#1:$36:constraint=IMultiplicative:, x#:IArithmetic:IArithmetic)#1:$36:constraint=IMultiplicative:
97. ToNumber
  Signature : INumerical_4:Library.ToNumber(x: Integer): Number
  Body      : Number(x)
  Inline    : Number(x#:Integer:)#1:Number:Number
98. PlusOne
  Signature : INumerical_4:Library.PlusOne(x: Integer): Integer
  Body      : Add(x, 1)
  Inline    : Add(x#:Integer:, 1#:Integer:)#2:Integer:Integer
99. MinusOne
  Signature : INumerical_4:Library.MinusOne(x: Integer): Integer
  Body      : Subtract(x, 1)
  Inline    : Subtract(x#:Integer:, 1#:Integer:)#2:Integer:Integer
100. FromOne
  Signature : INumerical_4:Library.FromOne(x: Integer): Integer
  Body      : Subtract(1, x)
  Inline    : Subtract(1#:Integer:, x#:Integer:)#2:Integer:Integer
101. FloatDivision
  Signature : INumerical_4:Library.FloatDivision(x: Integer, y: Integer): Number
  Body      : Divide(ToNumber(x), ToNumber(y))
  Inline    : Divide(ToNumber(x#:Integer:)#2:Number:, ToNumber(y#:Integer:)#2:Number:)#3:Number:Number
102. Fractions
  Signature : INumerical_4:Library.Fractions(x: Integer): $785:constraint=(IArray, Number)
  Body      : Map(Range(x), (i) => FloatDivision(i, Subtract(x, 1)))
  Inline    : Map(MapRange(x#:Integer:Integer, (i) => i#:(Function1, $1071:, $1072:):)#1::, (i) => FloatDivision(i, Subtract(x, 1))#:(Function1, $1202:, $1203:):)#0::$785:constraint=(IArray, Number)
103. FractionsExclusive
  Signature : INumerical_4:Library.FractionsExclusive(x: Integer): $786:constraint=(IArray, Number)
  Body      : Map(Range(x), (i) => FloatDivision(i, x))
  Inline    : Map(MapRange(x#:Integer:Integer, (i) => i#:(Function1, $1071:, $1072:):)#1::, (i) => FloatDivision(i, x)#:(Function1, $1353:, $1354:):)#0::$786:constraint=(IArray, Number)
104. Multiply
  Signature : INumerical_4:Library.Multiply(x: INumberLike, y: INumberLike): $787:constraint=INumberLike
  Body      : FromNumber(x, Multiply(ToNumber(x), ToNumber(y)))
  Inline    : FromNumber(x#:INumberLike:, Multiply(ToNumber(x#:INumberLike:)#2:Number:, ToNumber(y#:INumberLike:)#2:Number:)#3:Number:)#2:$821:constraint=INumberLike:$787:constraint=INumberLike
105. Divide
  Signature : INumerical_4:Library.Divide(x: INumberLike, y: INumberLike): $788:constraint=INumberLike
  Body      : FromNumber(x, Divide(ToNumber(x), ToNumber(y)))
  Inline    : FromNumber(x#:INumberLike:, Divide(ToNumber(x#:INumberLike:)#2:Number:, ToNumber(y#:INumberLike:)#2:Number:)#3:Number:)#2:$821:constraint=INumberLike:$788:constraint=INumberLike
106. Modulo
  Signature : INumerical_4:Library.Modulo(x: INumberLike, y: INumberLike): $789:constraint=INumberLike
  Body      : FromNumber(x, Modulo(ToNumber(x), ToNumber(y)))
  Inline    : FromNumber(x#:INumberLike:, Modulo(ToNumber(x#:INumberLike:)#2:Number:, ToNumber(y#:INumberLike:)#2:Number:)#3:Number:)#2:$821:constraint=INumberLike:$789:constraint=INumberLike
107. Magnitude
  Signature : INumerical_4:Library.Magnitude(x: IReal): Number
  Body      : Value(x)
  Inline    : Value(x#:IReal:)#0::Number
108. GtZ
  Signature : INumerical_4:Library.GtZ(x: IReal): Boolean
  Body      : GreaterThan(x, Zero(x))
  Inline    : And(LessThanOrEquals(MapComponents(x#:IReal:INumerical, (i) => 0#:(Function1, $1347:, $1348:):)#1::, x#:IReal:IOrderable)#1:Boolean:, Not(Equals(MapComponents(x#:IReal:INumerical, (i) => 0#:(Function1, $1347:, $1348:):)#1::, x#:IReal:IOrderable)#2:Boolean:)#1:Boolean:)#1:Boolean:
109. LtZ
  Signature : INumerical_4:Library.LtZ(x: IReal): Boolean
  Body      : LessThan(x, Zero(x))
  Inline    : And(LessThanOrEquals(x#:IReal:IOrderable, MapComponents(x#:IReal:INumerical, (i) => 0#:(Function1, $1347:, $1348:):)#1::)#1:Boolean:, Not(Equals(x#:IReal:IOrderable, MapComponents(x#:IReal:INumerical, (i) => 0#:(Function1, $1347:, $1348:):)#1::)#2:Boolean:)#1:Boolean:)#1:Boolean:
110. GtEqZ
  Signature : INumerical_4:Library.GtEqZ(x: IReal): Boolean
  Body      : GreaterThanOrEquals(x, Zero(x))
  Inline    : LessThanOrEquals(MapComponents(x#:IReal:INumerical, (i) => 0#:(Function1, $1347:, $1348:):)#1::, x#:IReal:IOrderable)#1:Boolean:
111. LtEqZ
  Signature : INumerical_4:Library.LtEqZ(x: IReal): Boolean
  Body      : LessThanOrEquals(x, Zero(x))
  Inline    : LessThanOrEquals(x#:IReal:, MapComponents(x#:IReal:INumerical, (i) => 0#:(Function1, $1347:, $1348:):)#1::)#1:Boolean:Boolean
112. IsPositive
  Signature : INumerical_4:Library.IsPositive(x: IReal): Boolean
  Body      : GtEqZ(x)
  Inline    : LessThanOrEquals(MapComponents(x#:IReal:IReal, (i) => 0#:(Function1, $1347:, $1348:):)#1::, x#:IReal:IReal)#1:Boolean:
113. IsNegative
  Signature : INumerical_4:Library.IsNegative(x: IReal): Boolean
  Body      : LtZ(x)
  Inline    : And(LessThanOrEquals(x#:IReal:IReal, MapComponents(x#:IReal:IReal, (i) => 0#:(Function1, $1347:, $1348:):)#1::)#1:Boolean:, Not(Equals(x#:IReal:IReal, MapComponents(x#:IReal:IReal, (i) => 0#:(Function1, $1347:, $1348:):)#1::)#2:Boolean:)#1:Boolean:)#1:Boolean:
114. Sign
  Signature : INumerical_4:Library.Sign(x: IReal): Integer
  Body      : (LtZ(x)?Negative(1):(GtZ(x)?1:0))
  Inline    : (And(LessThanOrEquals(x#:IReal:IReal, MapComponents(x#:IReal:IReal, (i) => 0#:(Function1, $1347:, $1348:):)#1::)#1:Boolean:, Not(Equals(x#:IReal:IReal, MapComponents(x#:IReal:IReal, (i) => 0#:(Function1, $1347:, $1348:):)#1::)#2:Boolean:)#1:Boolean:)#1:Boolean:?Negative(1#:Integer:)#2:Integer::(And(LessThanOrEquals(MapComponents(x#:IReal:IReal, (i) => 0#:(Function1, $1347:, $1348:):)#1::, x#:IReal:IReal)#1:Boolean:, Not(Equals(MapComponents(x#:IReal:IReal, (i) => 0#:(Function1, $1347:, $1348:):)#1::, x#:IReal:IReal)#2:Boolean:)#1:Boolean:)#1:Boolean:?1#:Integer::0#:Integer:)#:Integer:)#:Integer:Integer
115. Abs
  Signature : INumerical_4:Library.Abs(x: IReal): $790:constraint=IReal
  Body      : (LtZ(x)?Negative(x):x)
  Inline    : (And(LessThanOrEquals(x#:IReal:IReal, MapComponents(x#:IReal:IReal, (i) => 0#:(Function1, $1347:, $1348:):)#1::)#1:Boolean:, Not(Equals(x#:IReal:IReal, MapComponents(x#:IReal:IReal, (i) => 0#:(Function1, $1347:, $1348:):)#1::)#2:Boolean:)#1:Boolean:)#1:Boolean:?Negative(x#:IReal:)#2:$829:constraint=INumerical::x#:IReal:)#:$829:constraint=INumerical:$790:constraint=IReal
116. Inverse
  Signature : INumerical_4:Library.Inverse(x: IReal): $791:constraint=IReal
  Body      : Divide(One(x), x)
  Inline    : Divide(MapComponents(x#:IReal:INumerical, (i) => 1#:(Function1, $1336:, $1337:):)#1::, x#:IReal:)#2:$788:constraint=INumberLike:$791:constraint=IReal
117. Between
  Signature : INumerical_4:Library.Between(self: IReal, min: IReal, max: IReal): Boolean
  Body      : And(GreaterThanOrEquals(self, min), LessThanOrEquals(self, max))
  Inline    : And(LessThanOrEquals(min#:IReal:IOrderable, self#:IReal:IOrderable)#1:Boolean:, LessThanOrEquals(self#:IReal:, max#:IReal:)#1:Boolean:)#2:Boolean:Boolean
118. Half
  Signature : INumerical_4:Library.Half(x: IScalarArithmetic): $792:constraint=IScalarArithmetic
  Body      : Divide(x, 2)
  Inline    : Divide(x#:IScalarArithmetic:, 2#:Number:)#2:$34:constraint=IScalarArithmetic:$792:constraint=IScalarArithmetic
119. Quarter
  Signature : INumerical_4:Library.Quarter(x: IScalarArithmetic): $793:constraint=IScalarArithmetic
  Body      : Divide(x, 4)
  Inline    : Divide(x#:IScalarArithmetic:, 4#:Number:)#2:$34:constraint=IScalarArithmetic:$793:constraint=IScalarArithmetic
120. Eight
  Signature : INumerical_4:Library.Eight(x: IScalarArithmetic): $794:constraint=IScalarArithmetic
  Body      : Divide(x, 8)
  Inline    : Divide(x#:IScalarArithmetic:, 8#:Number:)#2:$34:constraint=IScalarArithmetic:$794:constraint=IScalarArithmetic
121. Sixteenth
  Signature : INumerical_4:Library.Sixteenth(x: IScalarArithmetic): $795:constraint=IScalarArithmetic
  Body      : Divide(x, 16)
  Inline    : Divide(x#:IScalarArithmetic:, 16#:Number:)#2:$34:constraint=IScalarArithmetic:$795:constraint=IScalarArithmetic
122. Tenth
  Signature : INumerical_4:Library.Tenth(x: IScalarArithmetic): $796:constraint=IScalarArithmetic
  Body      : Divide(x, 10)
  Inline    : Divide(x#:IScalarArithmetic:, 10#:Number:)#2:$34:constraint=IScalarArithmetic:$796:constraint=IScalarArithmetic
123. Twice
  Signature : INumerical_4:Library.Twice(x: IScalarArithmetic): $797:constraint=IScalarArithmetic
  Body      : Multiply(x, 2)
  Inline    : Multiply(x#:IScalarArithmetic:, 2#:Number:)#2:$35:constraint=IScalarArithmetic:$797:constraint=IScalarArithmetic
124. Hundred
  Signature : INumerical_4:Library.Hundred(x: IScalarArithmetic): $798:constraint=IScalarArithmetic
  Body      : Multiply(x, 100)
  Inline    : Multiply(x#:IScalarArithmetic:, 100#:Number:)#2:$35:constraint=IScalarArithmetic:$798:constraint=IScalarArithmetic
125. Thousand
  Signature : INumerical_4:Library.Thousand(x: IScalarArithmetic): $799:constraint=IScalarArithmetic
  Body      : Multiply(x, 1000)
  Inline    : Multiply(x#:IScalarArithmetic:, 1000#:Number:)#2:$35:constraint=IScalarArithmetic:$799:constraint=IScalarArithmetic
126. Million
  Signature : INumerical_4:Library.Million(x: IScalarArithmetic): $800:constraint=IScalarArithmetic
  Body      : Thousand(Thousand(x))
  Inline    : Multiply(Multiply(x#:IScalarArithmetic:IScalarArithmetic, 1000#:Number:)#1:$35:constraint=IScalarArithmetic:, 1000#:Number:)#1:$35:constraint=IScalarArithmetic:
127. Billion
  Signature : INumerical_4:Library.Billion(x: IScalarArithmetic): $801:constraint=IScalarArithmetic
  Body      : Million(Thousand(x))
  Inline    : Multiply(Multiply(Multiply(x#:IScalarArithmetic:IScalarArithmetic, 1000#:Number:)#1:$35:constraint=IScalarArithmetic:, 1000#:Number:)#1:$35:constraint=IScalarArithmetic:, 1000#:Number:)#1:$35:constraint=IScalarArithmetic:
128. Turns
  Signature : INumerical_4:Library.Turns(x: Number): Angle
  Body      : Radians(Multiply(x, TwoPi))
  Inline    : Radians(Multiply(x#:Number:, TwoPi#:IAny:)#1:$36:constraint=IMultiplicative:)#2:Angle:Angle
129. Degrees
  Signature : INumerical_4:Library.Degrees(x: Number): Angle
  Body      : Turns(Divide(x, 360))
  Inline    : Radians(Multiply(Divide(x#:Number:, 360#:Number:)#3:Number:Number, TwoPi#:IAny:)#1:$36:constraint=IMultiplicative:)#1:Angle:
130. Gradians
  Signature : INumerical_4:Library.Gradians(x: Number): Angle
  Body      : Turns(Divide(x, 400))
  Inline    : Radians(Multiply(Divide(x#:Number:, 400#:Number:)#3:Number:Number, TwoPi#:IAny:)#1:$36:constraint=IMultiplicative:)#1:Angle:
131. Radians
  Signature : INumerical_4:Library.Radians(x: Number): Angle
  Body      : x
  Inline    : x#:Number:Angle
132. Turns
  Signature : INumerical_4:Library.Turns(x: Angle): Number
  Body      : Divide(Radians(x), TwoPi)
  Inline    : Divide(Radians(x#:Angle:)#1:Number:, TwoPi#:IAny:)#1:$38:constraint=IDivisible:Number
133. Degrees
  Signature : INumerical_4:Library.Degrees(x: Angle): Number
  Body      : Multiply(Turns(x), 360)
  Inline    : Multiply(Divide(Radians(x#:Angle:Angle)#1:Number:, TwoPi#:IAny:)#1:$38:constraint=IDivisible:, 360#:Number:)#3:Number:Number
134. Gradians
  Signature : INumerical_4:Library.Gradians(x: Angle): Number
  Body      : Multiply(Turns(x), 400)
  Inline    : Multiply(Divide(Radians(x#:Angle:Angle)#1:Number:, TwoPi#:IAny:)#1:$38:constraint=IDivisible:, 400#:Number:)#3:Number:Number
135. Sin
  Signature : INumerical_4:Library.Sin(x: Number): Number
  Body      : Sin(Turns(x))
  Inline    : Sin(Radians(Multiply(x#:Number:Number, TwoPi#:IAny:)#1:$36:constraint=IMultiplicative:)#1:Angle:)#1:Number:Number
136. Cos
  Signature : INumerical_4:Library.Cos(x: Number): Number
  Body      : Cos(Turns(x))
  Inline    : Cos(Radians(Multiply(x#:Number:Number, TwoPi#:IAny:)#1:$36:constraint=IMultiplicative:)#1:Angle:)#1:Number:Number
137. Tan
  Signature : INumerical_4:Library.Tan(x: Number): Number
  Body      : Tan(Turns(x))
  Inline    : Tan(Radians(Multiply(x#:Number:Number, TwoPi#:IAny:)#1:$36:constraint=IMultiplicative:)#1:Angle:)#1:Number:Number
138. Sec
  Signature : INumerical_4:Library.Sec(x: Angle): Number
  Body      : Reciprocal(Cos(x))
  Inline    : Inverse(Cos(x#:Angle:)#1:Number:Number)#1:Number:
139. Csc
  Signature : INumerical_4:Library.Csc(x: Angle): Number
  Body      : Reciprocal(Sin(x))
  Inline    : Inverse(Sin(x#:Angle:)#1:Number:Number)#1:Number:
140. Cot
  Signature : INumerical_4:Library.Cot(x: Angle): Number
  Body      : Reciprocal(Tan(x))
  Inline    : Inverse(Tan(x#:Angle:)#1:Number:Number)#1:Number:
141. PlusOne
  Signature : INumerical_4:Library.PlusOne(x: INumerical): $802:constraint=INumerical
  Body      : Add(x, One)
  Inline    : Add(x#:INumerical:, One#:IAny:)#1:$30:constraint=IAdditive:$802:constraint=INumerical
142. MinusOne
  Signature : INumerical_4:Library.MinusOne(x: INumerical): $803:constraint=INumerical
  Body      : Subtract(x, One)
  Inline    : Subtract(x#:INumerical:, One#:IAny:)#1:$31:constraint=IAdditive:$803:constraint=INumerical
143. FromOne
  Signature : INumerical_4:Library.FromOne(x: INumerical): $804:constraint=INumerical
  Body      : Subtract(One, x)
  Inline    : Subtract(One#:IAny:, x#:INumerical:)#1:$31:constraint=IAdditive:$804:constraint=INumerical
144. Component
  Signature : INumerical_4:Library.Component(x: INumerical, n: Integer): Number
  Body      : At(Components(x), n)
  Inline    : At(Components(x#:INumerical:)#1:$24:constraint=(IArray, Number):, n#:Integer:)#10:$618::Number
145. NumComponents
  Signature : INumerical_4:Library.NumComponents(x: INumerical): Integer
  Body      : Count(Components(x))
  Inline    : Count(Components(x#:INumerical:)#1:$24:constraint=(IArray, Number):)#10:Integer:Integer
146. MapComponents
  Signature : INumerical_4:Library.MapComponents(x: INumerical, f: (Function1, Number, Number)): $805:constraint=INumerical
  Body      : FromComponents(x, Map(Components(x), f))
  Inline    : FromComponents(x#:INumerical:, Map(Components(x#:INumerical:)#1:$24:constraint=(IArray, Number):, f#:(Function1, Number, Number):)#0::)#0::$805:constraint=INumerical
147. ZipComponents
  Signature : INumerical_4:Library.ZipComponents(x: INumerical, y: INumerical, f: (Function2, Number, Number, Number)): $806:constraint=INumerical
  Body      : FromComponents(x, Zip(Components(x), Components(y), f))
  Inline    : FromComponents(x#:INumerical:, Zip(Components(x#:INumerical:)#1:$24:constraint=(IArray, Number):, Components(y#:INumerical:)#1:$24:constraint=(IArray, Number):, f#:(Function2, Number, Number, Number):)#0::)#0::$806:constraint=INumerical
148. Zero
  Signature : INumerical_4:Library.Zero(x: INumerical): $807:constraint=INumerical
  Body      : MapComponents(x, (i) => 0)
  Inline    : MapComponents(x#:INumerical:, (i) => 0#:(Function1, $1347:, $1348:):)#0::$807:constraint=INumerical
149. One
  Signature : INumerical_4:Library.One(x: INumerical): $808:constraint=INumerical
  Body      : MapComponents(x, (i) => 1)
  Inline    : MapComponents(x#:INumerical:, (i) => 1#:(Function1, $1336:, $1337:):)#0::$808:constraint=INumerical
150. MinValue
  Signature : INumerical_4:Library.MinValue(x: INumerical): $809:constraint=INumerical
  Body      : MapComponents(x, (x) => MinValue(x))
  Inline    : MapComponents(x#:INumerical:, (x) => MinValue(x)#:(Function1, $1355:, $1356:):)#0::$809:constraint=INumerical
151. MaxValue
  Signature : INumerical_4:Library.MaxValue(x: INumerical): $810:constraint=INumerical
  Body      : MapComponents(x, (x) => MaxValue(x))
  Inline    : MapComponents(x#:INumerical:, (x) => MaxValue(x)#:(Function1, $1357:, $1358:):)#0::$810:constraint=INumerical
152. AllComponents
  Signature : INumerical_4:Library.AllComponents(x: INumerical, predicate: (Function1, Number, Boolean)): Boolean
  Body      : All(Components(x), predicate)
  Inline    : All(Components(x#:INumerical:)#1:$24:constraint=(IArray, Number):, predicate#:(Function1, Number, Boolean):)#0::Boolean
153. AnyComponent
  Signature : INumerical_4:Library.AnyComponent(x: INumerical, predicate: (Function1, Number, Boolean)): Boolean
  Body      : Any(Components(x), predicate)
  Inline    : Any(Components(x#:INumerical:)#1:$24:constraint=(IArray, Number):, predicate#:(Function1, Number, Boolean):)#0::Boolean
154. Between
  Signature : INumerical_4:Library.Between(x: INumerical, a: INumerical, b: INumerical): Boolean
  Body      : All(Zip(Components(x), Components(a), Components(b), (x0, a0, b0) => Between(x0, a0, b0)), (x0) => x0)
  Inline    : All(Zip(Components(x#:INumerical:)#1:$24:constraint=(IArray, Number):, Components(a#:INumerical:)#1:$24:constraint=(IArray, Number):, Components(b#:INumerical:)#1:$24:constraint=(IArray, Number):, (x0, a0, b0) => Between(x0, a0, b0)#:(Function3, $1303:, $1304:, $1305:, $1306:):)#0::, (x0) => x0#:(Function1, $1307:, $1308:):)#0::Boolean
155. BetweenZeroOne
  Signature : INumerical_4:Library.BetweenZeroOne(x: INumerical): Boolean
  Body      : Between(x, Zero(x), One(x))
  Inline    : All(Zip(Components(x#:INumerical:INumerical)#1:$24:constraint=(IArray, Number):, Components(MapComponents(x#:INumerical:INumerical, (i) => 0#:(Function1, $1347:, $1348:):)#1::)#1:$24:constraint=(IArray, Number):, Components(MapComponents(x#:INumerical:INumerical, (i) => 1#:(Function1, $1336:, $1337:):)#1::)#1:$24:constraint=(IArray, Number):, (x0, a0, b0) => Between(x0, a0, b0)#:(Function3, $1303:, $1304:, $1305:, $1306:):)#0::, (x0) => x0#:(Function1, $1307:, $1308:):)#1::
156. Clamp
  Signature : INumerical_4:Library.Clamp(x: INumerical, a: INumerical, b: INumerical): $811:constraint=INumerical
  Body      : FromComponents(x, Zip(Components(x), Components(a), Components(b), (x0, a0, b0) => Clamp(x0, a0, b0)))
  Inline    : FromComponents(x#:INumerical:, Zip(Components(x#:INumerical:)#1:$24:constraint=(IArray, Number):, Components(a#:INumerical:)#1:$24:constraint=(IArray, Number):, Components(b#:INumerical:)#1:$24:constraint=(IArray, Number):, (x0, a0, b0) => Clamp(x0, a0, b0)#:(Function3, $1311:, $1312:, $1313:, $1314:):)#0::)#0::$811:constraint=INumerical
157. ClampZeroOne
  Signature : INumerical_4:Library.ClampZeroOne(x: INumerical): $812:constraint=INumerical
  Body      : Clamp(x, Zero(x), One(x))
  Inline    : FromComponents(x#:INumerical:INumerical, Zip(Components(x#:INumerical:INumerical)#1:$24:constraint=(IArray, Number):, Components(MapComponents(x#:INumerical:INumerical, (i) => 0#:(Function1, $1347:, $1348:):)#1::)#1:$24:constraint=(IArray, Number):, Components(MapComponents(x#:INumerical:INumerical, (i) => 1#:(Function1, $1336:, $1337:):)#1::)#1:$24:constraint=(IArray, Number):, (x0, a0, b0) => Clamp(x0, a0, b0)#:(Function3, $1311:, $1312:, $1313:, $1314:):)#0::)#1::
158. Clamp01
  Signature : INumerical_4:Library.Clamp01(x: INumerical): $813:constraint=INumerical
  Body      : ClampZeroOne(x)
  Inline    : FromComponents(x#:INumerical:INumerical, Zip(Components(x#:INumerical:INumerical)#1:$24:constraint=(IArray, Number):, Components(MapComponents(x#:INumerical:INumerical, (i) => 0#:(Function1, $1347:, $1348:):)#1::)#1:$24:constraint=(IArray, Number):, Components(MapComponents(x#:INumerical:INumerical, (i) => 1#:(Function1, $1336:, $1337:):)#1::)#1:$24:constraint=(IArray, Number):, (x0, a0, b0) => Clamp(x0, a0, b0)#:(Function3, $1311:, $1312:, $1313:, $1314:):)#0::)#1::
159. Abs
  Signature : INumerical_4:Library.Abs(x: INumerical): $814:constraint=INumerical
  Body      : MapComponents(x, (i) => Abs(i))
  Inline    : MapComponents(x#:INumerical:, (i) => Abs(i)#:(Function1, $1349:, $1350:):)#0::$814:constraint=INumerical
160. Min
  Signature : INumerical_4:Library.Min(x: INumerical, y: INumerical): $815:constraint=INumerical
  Body      : ZipComponents(x, y, (a, b) => Min(a, b))
  Inline    : ZipComponents(x#:INumerical:, y#:INumerical:, (a, b) => Min(a, b)#:(Function2, $1180:, $1181:, $1182:):)#0::$815:constraint=INumerical
161. Max
  Signature : INumerical_4:Library.Max(x: INumerical, y: INumerical): $816:constraint=INumerical
  Body      : ZipComponents(x, y, (a, b) => Max(a, b))
  Inline    : ZipComponents(x#:INumerical:, y#:INumerical:, (a, b) => Max(a, b)#:(Function2, $1183:, $1184:, $1185:):)#0::$816:constraint=INumerical
162. Floor
  Signature : INumerical_4:Library.Floor(n: INumerical): $817:constraint=INumerical
  Body      : MapComponents(n, (c) => Floor(c))
  Inline    : MapComponents(n#:INumerical:, (c) => Floor(c)#:(Function1, $1351:, $1352:):)#0::$817:constraint=INumerical
163. Fract
  Signature : INumerical_4:Library.Fract(n: INumerical): $818:constraint=INumerical
  Body      : MapComponents(n, (c) => Fract(c))
  Inline    : MapComponents(n#:INumerical:, (c) => Fract(c)#:(Function1, $1359:, $1360:):)#0::$818:constraint=INumerical
164. Equals
  Signature : INumerical_4:Library.Equals(a: IEquatable, b: IEquatable): Boolean
  Body      : All(Zip(FieldValues(a), FieldValues(b), (a0, b0) => Equals(a0, b0)), (x) => x)
  Inline    : All(Zip(FieldValues(a#:IEquatable:)#1:$21:constraint=(IArray, Dynamic):, FieldValues(b#:IEquatable:)#1:$21:constraint=(IArray, Dynamic):, (a0, b0) => Equals(a0, b0)#:(Function2, $1160:, $1161:, $1162:):)#0::, (x) => x#:(Function1, $1163:, $1164:):)#0::Boolean
165. NotEquals
  Signature : INumerical_4:Library.NotEquals(a: IEquatable, b: IEquatable): Boolean
  Body      : Not(Equals(a, b))
  Inline    : Not(Equals(a#:IEquatable:, b#:IEquatable:)#2:Boolean:)#2:Boolean:Boolean
166. LessThan
  Signature : INumerical_4:Library.LessThan(a: IOrderable, b: IOrderable): Boolean
  Body      : And(LessThanOrEquals(a, b), NotEquals(a, b))
  Inline    : And(LessThanOrEquals(a#:IOrderable:, b#:IOrderable:)#1:Boolean:, Not(Equals(a#:IOrderable:IEquatable, b#:IOrderable:IEquatable)#2:Boolean:)#1:Boolean:)#2:Boolean:Boolean
167. GreaterThan
  Signature : INumerical_4:Library.GreaterThan(a: IOrderable, b: IOrderable): Boolean
  Body      : LessThan(b, a)
  Inline    : And(LessThanOrEquals(b#:IOrderable:IOrderable, a#:IOrderable:IOrderable)#1:Boolean:, Not(Equals(b#:IOrderable:IOrderable, a#:IOrderable:IOrderable)#2:Boolean:)#1:Boolean:)#1:Boolean:
168. GreaterThanOrEquals
  Signature : INumerical_4:Library.GreaterThanOrEquals(a: IOrderable, b: IOrderable): Boolean
  Body      : LessThanOrEquals(b, a)
  Inline    : LessThanOrEquals(b#:IOrderable:, a#:IOrderable:)#1:Boolean:Boolean
169. Lesser
  Signature : INumerical_4:Library.Lesser(a: IOrderable, b: IOrderable): $819:constraint=IOrderable
  Body      : (LessThanOrEquals(a, b)?a:b)
  Inline    : (LessThanOrEquals(a#:IOrderable:, b#:IOrderable:)#1:Boolean:Boolean?a#:IOrderable::b#:IOrderable:)#:IOrderable:$819:constraint=IOrderable
170. Greater
  Signature : INumerical_4:Library.Greater(a: IOrderable, b: IOrderable): $820:constraint=IOrderable
  Body      : (GreaterThanOrEquals(a, b)?a:b)
  Inline    : (LessThanOrEquals(b#:IOrderable:IOrderable, a#:IOrderable:IOrderable)#1:Boolean:?a#:IOrderable::b#:IOrderable:)#:IOrderable:$820:constraint=IOrderable
171. CompareTo
  Signature : INumerical_4:Library.CompareTo(a: IOrderable, b: IOrderable): Integer
  Body      : (LessThanOrEquals(a, b)?(Equals(a, b)?0:Negative(1)):1)
  Inline    : (LessThanOrEquals(a#:IOrderable:, b#:IOrderable:)#1:Boolean:Boolean?(Equals(a#:IOrderable:, b#:IOrderable:)#2:Boolean:Boolean?0#:Integer::Negative(1#:Integer:)#2:Integer:)#:Integer::1#:Integer:)#:Integer:Integer
172. ToNumber
  Signature : INumerical_4:Library.ToNumber(x: Number): Number
  Body      : x
  Inline    : x#:Number:Number
173. Number
  Signature : INumerical_4:Library.Number(x: INumberLike): Number
  Body      : ToNumber(x)
  Inline    : ToNumber(x#:INumberLike:)#2:Number:Number
174. ToNumber
  Signature : INumerical_4:Library.ToNumber(x: INumberLike): Number
  Body      : Component(x, 0)
  Inline    : At(Components(x#:INumberLike:INumerical)#1:$24:constraint=(IArray, Number):, 0#:Integer:Integer)#1:$618::
175. FromNumber
  Signature : INumerical_4:Library.FromNumber(x: INumberLike, n: Number): $821:constraint=INumberLike
  Body      : FromComponents(x, [n])
  Inline    : FromComponents(x#:INumberLike:, [n#::]#:(IArray, $1095:):)#1:$25:constraint=INumerical:$821:constraint=INumberLike
176. Compare
  Signature : INumerical_4:Library.Compare(a: INumberLike, b: INumberLike): Integer
  Body      : Compare(ToNumber(a), ToNumber(b))
  Inline    : Compare(ToNumber(a#:INumberLike:)#2:Number:, ToNumber(b#:INumberLike:)#2:Number:)#0::Integer
177. Add
  Signature : INumerical_4:Library.Add(x: INumberLike, y: Number): $822:constraint=INumberLike
  Body      : FromNumber(x, Add(ToNumber(x), y))
  Inline    : FromNumber(x#:INumberLike:, Add(ToNumber(x#:INumberLike:)#2:Number:, y#:Number:)#2:Number:)#2:$821:constraint=INumberLike:$822:constraint=INumberLike
178. Subract
  Signature : INumerical_4:Library.Subract(x: INumberLike, y: Number): $823:constraint=INumberLike
  Body      : FromNumber(x, Subtract(ToNumber(x), y))
  Inline    : FromNumber(x#:INumberLike:, Subtract(ToNumber(x#:INumberLike:)#2:Number:, y#:Number:)#2:Number:)#2:$821:constraint=INumberLike:$823:constraint=INumberLike
179. Multiply
  Signature : INumerical_4:Library.Multiply(x: INumerical, s: Number): $824:constraint=INumerical
  Body      : MapComponents(x, (i) => Multiply(i, s))
  Inline    : MapComponents(x#:INumerical:, (i) => Multiply(i, s)#:(Function1, $1075:, $1076:):)#0::$824:constraint=INumerical
180. Divide
  Signature : INumerical_4:Library.Divide(x: INumerical, s: Number): $825:constraint=INumerical
  Body      : MapComponents(x, (i) => Divide(i, s))
  Inline    : MapComponents(x#:INumerical:, (i) => Divide(i, s)#:(Function1, $1151:, $1152:):)#0::$825:constraint=INumerical
181. Modulo
  Signature : INumerical_4:Library.Modulo(x: INumerical, s: Number): $826:constraint=INumerical
  Body      : MapComponents(x, (i) => Modulo(i, s))
  Inline    : MapComponents(x#:INumerical:, (i) => Modulo(i, s)#:(Function1, $1073:, $1074:):)#0::$826:constraint=INumerical
182. Add
  Signature : INumerical_4:Library.Add(x: INumerical, y: INumerical): $827:constraint=INumerical
  Body      : ZipComponents(x, y, (a, b) => Add(a, b))
  Inline    : ZipComponents(x#:INumerical:, y#:INumerical:, (a, b) => Add(a, b)#:(Function2, $1092:, $1093:, $1094:):)#0::$827:constraint=INumerical
183. Subtract
  Signature : INumerical_4:Library.Subtract(x: INumerical, y: INumerical): $828:constraint=INumerical
  Body      : ZipComponents(x, y, (a, b) => Subtract(a, b))
  Inline    : ZipComponents(x#:INumerical:, y#:INumerical:, (a, b) => Subtract(a, b)#:(Function2, $1171:, $1172:, $1173:):)#0::$828:constraint=INumerical
184. Negative
  Signature : INumerical_4:Library.Negative(x: INumerical): $829:constraint=INumerical
  Body      : MapComponents(x, (a) => Negative(a))
  Inline    : MapComponents(x#:INumerical:, (a) => Negative(a)#:(Function1, $1338:, $1339:):)#0::$829:constraint=INumerical
185. Multiply
  Signature : INumerical_4:Library.Multiply(x: IVector, y: IVector): $830:constraint=IVector
  Body      : ZipComponents(x, y, (a, b) => Multiply(a, b))
  Inline    : ZipComponents(x#:IVector:, y#:IVector:, (a, b) => Multiply(a, b)#:(Function2, $1077:, $1078:, $1079:):)#0::$830:constraint=IVector
186. Divide
  Signature : INumerical_4:Library.Divide(x: IVector, y: IVector): $831:constraint=IVector
  Body      : ZipComponents(x, y, (a, b) => Divide(a, b))
  Inline    : ZipComponents(x#:IVector:, y#:IVector:, (a, b) => Divide(a, b)#:(Function2, $1153:, $1154:, $1155:):)#0::$831:constraint=IVector
187. Modulo
  Signature : INumerical_4:Library.Modulo(x: IVector, y: IVector): $832:constraint=IVector
  Body      : ZipComponents(x, y, (a, b) => Modulo(a, b))
  Inline    : ZipComponents(x#:IVector:, y#:IVector:, (a, b) => Modulo(a, b)#:(Function2, $1148:, $1149:, $1150:):)#0::$832:constraint=IVector
188. Lerp
  Signature : INumerical_4:Library.Lerp(a: IInterpolatable, b: IInterpolatable, t: Number): $833:constraint=IInterpolatable
  Body      : Add(Multiply(a, FromOne(t)), Multiply(b, t))
  Inline    : Add(Multiply(a#:IInterpolatable:, FromOne(t#:Number:)#0::)#0::, Multiply(b#:IInterpolatable:, t#:Number:)#2:$35:constraint=IScalarArithmetic:)#0::$833:constraint=IInterpolatable
189. Barycentric
  Signature : INumerical_4:Library.Barycentric(v1: IInterpolatable, v2: IInterpolatable, v3: IInterpolatable, uv: Vector2D): $834:constraint=IInterpolatable
  Body      : Add(Multiply(Add(v1, Subtract(v2, v1)), X(uv)), Multiply(Subtract(v3, v1), Y(uv)))
  Inline    : Add(Multiply(Add(v1#:IInterpolatable:, Subtract(v2#:IInterpolatable:, v1#:IInterpolatable:)#1:$31:constraint=IAdditive:)#1:$30:constraint=IAdditive:, X(uv#:Vector2D:)#1:Number:)#6:$824:constraint=INumerical:, Multiply(Subtract(v3#:IInterpolatable:, v1#:IInterpolatable:)#1:$31:constraint=IAdditive:, Y(uv#:Vector2D:)#1:Number:)#6:$824:constraint=INumerical:)#6:$822:constraint=INumberLike:$834:constraint=IInterpolatable

Group Curves_6:Library

190. Closed
  Signature : Curves_6:Library.Closed(curve: ICurve2D): Boolean
  Body      : False
  Inline    : False#:Boolean:Boolean
191. Closed
  Signature : Curves_6:Library.Closed(curve: ICurve3D): Boolean
  Body      : False
  Inline    : False#:Boolean:Boolean
192. Sample
  Signature : Curves_6:Library.Sample(curve: ICurve2D, numPoints: Integer): $835:constraint=(IArray, Vector2D)
  Body      : Map(LinearSpace(numPoints), (x) => Eval(curve, x))
  Inline    : Map(Map(MapRange(numPoints#:Integer:Integer, (i) => i#:(Function1, $1071:, $1072:):)#1::, (i) => FloatDivision(i, Subtract(x, 1))#:(Function1, $1202:, $1203:):)#1::, (x) => Eval(curve, x)#:(Function1, $1363:, $1364:):)#0::$835:constraint=(IArray, Vector2D)
193. Sample
  Signature : Curves_6:Library.Sample(curve: ICurve3D, numPoints: Integer): $836:constraint=(IArray, Vector3D)
  Body      : Map(LinearSpace(numPoints), (x) => Eval(curve, x))
  Inline    : Map(Map(MapRange(numPoints#:Integer:Integer, (i) => i#:(Function1, $1071:, $1072:):)#1::, (i) => FloatDivision(i, Subtract(x, 1))#:(Function1, $1202:, $1203:):)#1::, (x) => Eval(curve, x)#:(Function1, $1365:, $1366:):)#0::$836:constraint=(IArray, Vector3D)
194. ToPolyLine2D
  Signature : Curves_6:Library.ToPolyLine2D(curve: ICurve2D, numPoints: Integer): PolyLine2D
  Body      : Tuple2(Sample(curve, numPoints), Closed(curve))
  Inline    : Tuple2(Map(Map(MapRange(numPoints#:Integer:Integer, (i) => i#:(Function1, $1071:, $1072:):)#1::, (i) => FloatDivision(i, Subtract(x, 1))#:(Function1, $1202:, $1203:):)#1::, (x) => Eval(curve, x)#:(Function1, $1363:, $1364:):)#1::, Closed(curve#:ICurve2D:)#2:Boolean:)#:(Tuple2, $1367:, $1368:):PolyLine2D
195. ToPolyLine3D
  Signature : Curves_6:Library.ToPolyLine3D(curve: ICurve3D, numPoints: Integer): PolyLine3D
  Body      : Tuple2(Sample(curve, numPoints), Closed(curve))
  Inline    : Tuple2(Map(Map(MapRange(numPoints#:Integer:Integer, (i) => i#:(Function1, $1071:, $1072:):)#1::, (i) => FloatDivision(i, Subtract(x, 1))#:(Function1, $1202:, $1203:):)#1::, (x) => Eval(curve, x)#:(Function1, $1365:, $1366:):)#1::, Closed(curve#:ICurve3D:)#2:Boolean:)#:(Tuple2, $1369:, $1370:):PolyLine3D
196. Linear
  Signature : Curves_6:Library.Linear(x: Number, m: Number, b: Number): Number
  Body      : Add(Multiply(m, x), b)
  Inline    : Add(Multiply(m#:Number:, x#:Number:)#3:Number:, b#:Number:)#2:Number:Number
197. Eval
  Signature : Curves_6:Library.Eval(f: LinearEquation, x: Number): Number
  Body      : Linear(x, Slope(f), YIntercept(f))
  Inline    : Add(Multiply(Slope(f#:LinearEquation:)#1:Number:Number, x#:Number:Number)#3:Number:, YIntercept(f#:LinearEquation:)#1:Number:Number)#1:Number:
198. Quadratic
  Signature : Curves_6:Library.Quadratic(x: Number, a: Number, b: Number, c: Number): Number
  Body      : Add(Multiply(a, Sqr(x)), Add(Multiply(b, x), c))
  Inline    : Add(Multiply(a#:Number:, Sqr(x#:Number:)#0::)#0::, Add(Multiply(b#:Number:, x#:Number:)#3:Number:, c#:Number:)#2:Number:)#0::Number
199. Eval
  Signature : Curves_6:Library.Eval(f: Quadratic, x: Number): Number
  Body      : Quadratic(x, A(f), B(f), C(f))
  Inline    : Add(Multiply(A(f#:Quadratic:)#1:Number:Number, Sqr(x#:Number:Number)#0::)#0::, Add(Multiply(B(f#:Quadratic:)#1:Number:Number, x#:Number:Number)#3:Number:, C(f#:Quadratic:)#1:Number:Number)#2:Number:)#1::
200. Cubic
  Signature : Curves_6:Library.Cubic(x: Number, a: Number, b: Number, c: Number, d: Number): Number
  Body      : Add(Multiply(a, Cube(x)), Add(Multiply(b, Sqr(x)), Add(Multiply(c, x), d)))
  Inline    : Add(Multiply(a#:Number:, Cube(x#:Number:)#0::)#0::, Add(Multiply(b#:Number:, Sqr(x#:Number:)#0::)#0::, Add(Multiply(c#:Number:, x#:Number:)#3:Number:, d#:Number:)#2:Number:)#0::)#0::Number
201. Eval
  Signature : Curves_6:Library.Eval(f: Cubic, x: Number): Number
  Body      : Cubic(x, A(f), B(f), C(f), D(f))
  Inline    : Add(Multiply(A(f#:Cubic:)#1:Number:Number, Cube(x#:Number:Number)#0::)#0::, Add(Multiply(B(f#:Cubic:)#1:Number:Number, Sqr(x#:Number:Number)#0::)#0::, Add(Multiply(C(f#:Cubic:)#1:Number:Number, x#:Number:Number)#3:Number:, D(f#:Cubic:)#1:Number:Number)#2:Number:)#0::)#1::
202. SineWave
  Signature : Curves_6:Library.SineWave(x: Number, amplitude: Number, frequency: Number, phase: Number): Number
  Body      : Multiply(amplitude, Add(Multiply(frequency, Sin(Turns(x))), phase))
  Inline    : Multiply(amplitude#:Number:, Add(Multiply(frequency#:Number:, Sin(Radians(Multiply(x#:Number:Number, TwoPi#:IAny:)#1:$36:constraint=IMultiplicative:)#1:Angle:)#1:Number:)#3:Number:, phase#:Number:)#2:Number:)#3:Number:Number
203. Eval
  Signature : Curves_6:Library.Eval(f: SineWave, x: Number): Number
  Body      : SineWave(x, Amplitude(f), Frequency(f), Phase(f))
  Inline    : Multiply(Amplitude(f#:SineWave:)#1:Number:Number, Add(Multiply(Frequency(f#:SineWave:)#1:Number:Number, Sin(Radians(Multiply(x#:Number:Number, TwoPi#:IAny:)#1:$36:constraint=IMultiplicative:)#1:Angle:)#1:Number:)#3:Number:, Phase(f#:SineWave:)#1:Number:Number)#2:Number:)#1:Number:
204. Parabola
  Signature : Curves_6:Library.Parabola(x: IMultiplicative): $837:constraint=IMultiplicative
  Body      : Sqr(x)
  Inline    : Sqr(x#:IMultiplicative:)#0::$837:constraint=IMultiplicative
205. Eval
  Signature : Curves_6:Library.Eval(f: Parabola, x: Number): Number
  Body      : Parabola(x)
  Inline    : Parabola(x#:Number:)#0::Number
206. StaircaseFloor
  Signature : Curves_6:Library.StaircaseFloor(x: Number, steps: Integer): Number
  Body      : Divide(Floor(Multiply(x, steps)), steps)
  Inline    : Divide(Floor(Multiply(x#:Number:, steps#:Integer:)#1:$36:constraint=IMultiplicative:)#2:$817:constraint=INumerical:, steps#:Integer:)#2:Integer:Number
207. StaircaseCeiling
  Signature : Curves_6:Library.StaircaseCeiling(x: Number, steps: Integer): Number
  Body      : Divide(Ceiling(Multiply(x, steps)), steps)
  Inline    : Divide(Ceiling(Multiply(x#:Number:, steps#:Integer:)#1:$36:constraint=IMultiplicative:)#1:Number:, steps#:Integer:)#1:$38:constraint=IDivisible:Number
208. StaircaseRound
  Signature : Curves_6:Library.StaircaseRound(x: Number, steps: Integer): Number
  Body      : Divide(Round(Multiply(x, steps)), steps)
  Inline    : Divide(Round(Multiply(x#:Number:, steps#:Integer:)#1:$36:constraint=IMultiplicative:)#1:Number:, steps#:Integer:)#1:$38:constraint=IDivisible:Number
209. CubicBezier
  Signature : Curves_6:Library.CubicBezier(a: IAlgebraic, b: IAlgebraic, c: IAlgebraic, d: IAlgebraic, t: Number): $838:constraint=IAlgebraic
  Body      : Add(Multiply(a, Cube(Subtract(1, t))), Add(Multiply(b, Multiply(3, Multiply(Sqr(Subtract(1, t)), t))), Add(Multiply(c, Multiply(3, Multiply(Subtract(1, t), Sqr(t)))), Multiply(d, Cube(t)))))
  Inline    : Add(Multiply(a#:IAlgebraic:, Cube(Subtract(1#:Number:, t#:Number:)#2:Number:)#0::)#0::, Add(Multiply(b#:IAlgebraic:, Multiply(3#:Number:, Multiply(Sqr(Subtract(1#:Number:, t#:Number:)#2:Number:)#0::, t#:Number:)#0::)#0::)#0::, Add(Multiply(c#:IAlgebraic:, Multiply(3#:Number:, Multiply(Subtract(1#:Number:, t#:Number:)#2:Number:, Sqr(t#:Number:)#0::)#0::)#0::)#0::, Multiply(d#:IAlgebraic:, Cube(t#:Number:)#0::)#0::)#0::)#0::)#0::$838:constraint=IAlgebraic
210. CubicBezierDerivative
  Signature : Curves_6:Library.CubicBezierDerivative(a: IAlgebraic, b: IAlgebraic, c: IAlgebraic, d: IAlgebraic, t: Number): $839:constraint=IAlgebraic
  Body      : Add(Multiply(Subtract(b, a), Multiply(3, Sqr(Subtract(1, t)))), Add(Multiply(Subtract(c, b), Multiply(6, Multiply(Subtract(1, t), t))), Multiply(Subtract(d, c), Multiply(3, Sqr(t)))))
  Inline    : Add(Multiply(Subtract(b#:IAlgebraic:, a#:IAlgebraic:)#1:$31:constraint=IAdditive:, Multiply(3#:Number:, Sqr(Subtract(1#:Number:, t#:Number:)#2:Number:)#0::)#0::)#0::, Add(Multiply(Subtract(c#:IAlgebraic:, b#:IAlgebraic:)#1:$31:constraint=IAdditive:, Multiply(6#:Number:, Multiply(Subtract(1#:Number:, t#:Number:)#2:Number:, t#:Number:)#3:Number:)#3:Number:)#6:$824:constraint=INumerical:, Multiply(Subtract(d#:IAlgebraic:, c#:IAlgebraic:)#1:$31:constraint=IAdditive:, Multiply(3#:Number:, Sqr(t#:Number:)#0::)#0::)#0::)#0::)#0::$839:constraint=IAlgebraic
211. CubicBezierSecondDerivative
  Signature : Curves_6:Library.CubicBezierSecondDerivative(a: IAlgebraic, b: IAlgebraic, c: IAlgebraic, d: IAlgebraic, t: Number): $840:constraint=IAlgebraic
  Body      : Add(Multiply(Subtract(c, Add(Multiply(b, 2), a)), Multiply(6, Subtract(1, t))), Multiply(Subtract(d, Add(Multiply(c, 2), a)), Multiply(6, t)))
  Inline    : Add(Multiply(Subtract(c#:IAlgebraic:, Add(Multiply(b#:IAlgebraic:, 2#:Number:)#2:$35:constraint=IScalarArithmetic:, a#:IAlgebraic:)#1:$30:constraint=IAdditive:)#1:$31:constraint=IAdditive:, Multiply(6#:Number:, Subtract(1#:Number:, t#:Number:)#2:Number:)#3:Number:)#6:$824:constraint=INumerical:, Multiply(Subtract(d#:IAlgebraic:, Add(Multiply(c#:IAlgebraic:, 2#:Number:)#2:$35:constraint=IScalarArithmetic:, a#:IAlgebraic:)#1:$30:constraint=IAdditive:)#1:$31:constraint=IAdditive:, Multiply(6#:Number:, t#:Number:)#3:Number:)#6:$824:constraint=INumerical:)#6:$822:constraint=INumberLike:$840:constraint=IAlgebraic
212. QuadraticBezier
  Signature : Curves_6:Library.QuadraticBezier(a: IAlgebraic, b: IAlgebraic, c: IAlgebraic, t: Number): $841:constraint=IAlgebraic
  Body      : Add(Multiply(a, Sqr(Subtract(1, t))), Add(Multiply(b, Multiply(2, Multiply(Subtract(1, t), t))), Multiply(c, Sqr(t))))
  Inline    : Add(Multiply(a#:IAlgebraic:, Sqr(Subtract(1#:Number:, t#:Number:)#2:Number:)#0::)#0::, Add(Multiply(b#:IAlgebraic:, Multiply(2#:Number:, Multiply(Subtract(1#:Number:, t#:Number:)#2:Number:, t#:Number:)#3:Number:)#3:Number:)#2:$35:constraint=IScalarArithmetic:, Multiply(c#:IAlgebraic:, Sqr(t#:Number:)#0::)#0::)#0::)#0::$841:constraint=IAlgebraic
213. QuadraticBezierDerivative
  Signature : Curves_6:Library.QuadraticBezierDerivative(a: IAlgebraic, b: IAlgebraic, c: IAlgebraic, t: Number): $842:constraint=IAlgebraic
  Body      : Add(Multiply(Subtract(b, b), Multiply(2, Subtract(1, t))), Multiply(Subtract(c, b), Multiply(2, t)))
  Inline    : Add(Multiply(Subtract(b#:IAlgebraic:, b#:IAlgebraic:)#1:$31:constraint=IAdditive:, Multiply(2#:Number:, Subtract(1#:Number:, t#:Number:)#2:Number:)#3:Number:)#6:$824:constraint=INumerical:, Multiply(Subtract(c#:IAlgebraic:, b#:IAlgebraic:)#1:$31:constraint=IAdditive:, Multiply(2#:Number:, t#:Number:)#3:Number:)#6:$824:constraint=INumerical:)#6:$822:constraint=INumberLike:$842:constraint=IAlgebraic
214. QuadraticBezierSecondDerivative
  Signature : Curves_6:Library.QuadraticBezierSecondDerivative(a: IAlgebraic, b: IAlgebraic, c: IAlgebraic, t: Number): $843:constraint=IAlgebraic
  Body      : Subtract(c, Add(Multiply(b, 2), a))
  Inline    : Subtract(c#:IAlgebraic:, Add(Multiply(b#:IAlgebraic:, 2#:Number:)#2:$35:constraint=IScalarArithmetic:, a#:IAlgebraic:)#1:$30:constraint=IAdditive:)#1:$31:constraint=IAdditive:$843:constraint=IAlgebraic

Group Curves2D_8:Library

215. Spiral
  Signature : Curves2D_8:Library.Spiral(t: Number, R: Number, r: Number, numTurns: Number): Vector2D
  Body      : Multiply(New(Vector2D, Cos(Multiply(Turns(t), numTurns)), Sin(Multiply(Turns(t), numTurns))), Lerp(r, R, t))
  Inline    : Multiply(New(Vector2D#:Type:, Cos(Multiply(Radians(Multiply(t#:Number:Number, TwoPi#:IAny:)#1:$36:constraint=IMultiplicative:)#1:Angle:, numTurns#:Number:)#2:$35:constraint=IScalarArithmetic:)#2:Number:, Sin(Multiply(Radians(Multiply(t#:Number:Number, TwoPi#:IAny:)#1:$36:constraint=IMultiplicative:)#1:Angle:, numTurns#:Number:)#2:$35:constraint=IScalarArithmetic:)#2:Number:)#0::, Lerp(r#:Number:, R#:Number:, t#:Number:)#0::)#0::Vector2D
216. Eval
  Signature : Curves2D_8:Library.Eval(curve: Spiral, t: Number): Vector2D
  Body      : Spiral(t, Radius1(curve), Radius2(curve), NumTurns(curve))
  Inline    : Multiply(New(Vector2D#:Type:, Cos(Multiply(Radians(Multiply(t#:Number:Number, TwoPi#:IAny:)#1:$36:constraint=IMultiplicative:)#1:Angle:, NumTurns(curve#:Spiral:)#1:Number:Number)#2:$35:constraint=IScalarArithmetic:)#2:Number:, Sin(Multiply(Radians(Multiply(t#:Number:Number, TwoPi#:IAny:)#1:$36:constraint=IMultiplicative:)#1:Angle:, NumTurns(curve#:Spiral:)#1:Number:Number)#2:$35:constraint=IScalarArithmetic:)#2:Number:)#0::, Lerp(Radius2(curve#:Spiral:)#1:Number:Number, Radius1(curve#:Spiral:)#1:Number:Number, t#:Number:Number)#0::)#1::
217. Eval
  Signature : Curves2D_8:Library.Eval(curve: QuadraticBezier2D, t: Number): Vector2D
  Body      : QuadraticBezier(A(curve), B(curve), C(curve), t)
  Inline    : QuadraticBezier(A(curve#:QuadraticBezier2D:)#1:Vector2D:, B(curve#:QuadraticBezier2D:)#1:Vector2D:, C(curve#:QuadraticBezier2D:)#1:Vector2D:, t#:Number:)#0::Vector2D
218. Eval
  Signature : Curves2D_8:Library.Eval(curve: CubicBezier2D, t: Number): Vector2D
  Body      : QuadraticBezier(A(curve), B(curve), C(curve), t)
  Inline    : QuadraticBezier(A(curve#:CubicBezier2D:)#1:Vector2D:, B(curve#:CubicBezier2D:)#1:Vector2D:, C(curve#:CubicBezier2D:)#1:Vector2D:, t#:Number:)#0::Vector2D

Group AngularCurves2D_10:Library

219. Eval
  Signature : AngularCurves2D_10:Library.Eval(curve: IAngularCurve2D, t: Number): Vector2D
  Body      : GetPoint(curve, Turns(t))
  Inline    : GetPoint(curve#:IAngularCurve2D:, Radians(Multiply(t#:Number:Number, TwoPi#:IAny:)#1:$36:constraint=IMultiplicative:)#1:Angle:)#2:Vector2D:Vector2D
220. UnitCircle
  Signature : AngularCurves2D_10:Library.UnitCircle(t: Angle): Vector2D
  Body      : Tuple2(Cos(t), Sin(t))
  Inline    : Tuple2(Cos(t#:Angle:)#1:Number:, Sin(t#:Angle:)#1:Number:)#:(Tuple2, $1169:, $1170:):Vector2D
221. Circle
  Signature : AngularCurves2D_10:Library.Circle(t: Angle, center: Vector2D, radius: Number): Vector2D
  Body      : Add(Multiply(UnitCircle(t), radius), center)
  Inline    : Add(Multiply(Tuple2(Cos(t#:Angle:Angle)#1:Number:, Sin(t#:Angle:Angle)#1:Number:)#1:(Tuple2, $1169:, $1170:):, radius#:Number:)#2:$35:constraint=IScalarArithmetic:, center#:Vector2D:)#1:$30:constraint=IAdditive:Vector2D
222. GetPoint
  Signature : AngularCurves2D_10:Library.GetPoint(curve: Circle, t: Angle): Vector2D
  Body      : Circle(t, Center(curve), Radius(curve))
  Inline    : Add(Multiply(Tuple2(Cos(t#:Angle:Angle)#1:Number:, Sin(t#:Angle:Angle)#1:Number:)#1:(Tuple2, $1169:, $1170:):, Radius(curve#:Circle:)#1:Number:Number)#2:$35:constraint=IScalarArithmetic:, Center(curve#:Circle:)#1:Vector2D:Vector2D)#1:$30:constraint=IAdditive:
223. Ellipse
  Signature : AngularCurves2D_10:Library.Ellipse(t: Angle, center: Vector2D, size: Vector2D): Vector2D
  Body      : Add(Multiply(UnitCircle(t), size), center)
  Inline    : Add(Multiply(Tuple2(Cos(t#:Angle:Angle)#1:Number:, Sin(t#:Angle:Angle)#1:Number:)#1:(Tuple2, $1169:, $1170:):, size#:Vector2D:)#1:$36:constraint=IMultiplicative:, center#:Vector2D:)#1:$30:constraint=IAdditive:Vector2D
224. GetPoint
  Signature : AngularCurves2D_10:Library.GetPoint(curve: Ellipse, t: Angle): Vector2D
  Body      : Add(Multiply(UnitCircle(t), Size(curve)), Center(curve))
  Inline    : Add(Multiply(Tuple2(Cos(t#:Angle:Angle)#1:Number:, Sin(t#:Angle:Angle)#1:Number:)#1:(Tuple2, $1169:, $1170:):, Size(curve#:Ellipse:)#1:Vector2D:)#1:$36:constraint=IMultiplicative:, Center(curve#:Ellipse:)#1:Vector2D:)#1:$30:constraint=IAdditive:Vector2D
225. Epicycloid
  Signature : AngularCurves2D_10:Library.Epicycloid(t: Angle, R: Number, r: Number): Vector2D
  Body      : Tuple2(Subtract(Multiply(Add(R, r), Cos(t)), Multiply(r, Multiply(Add(R, r), Cos(Divide(t, r))))), Subtract(Multiply(Add(R, r), Sin(t)), Multiply(r, Multiply(Add(R, r), Sin(Divide(t, r))))))
  Inline    : Tuple2(Subtract(Multiply(Add(R#:Number:, r#:Number:)#2:Number:, Cos(t#:Angle:)#1:Number:)#3:Number:, Multiply(r#:Number:, Multiply(Add(R#:Number:, r#:Number:)#2:Number:, Cos(Divide(t#:Angle:, r#:Number:)#2:$34:constraint=IScalarArithmetic:)#2:Number:)#3:Number:)#3:Number:)#2:Number:, Subtract(Multiply(Add(R#:Number:, r#:Number:)#2:Number:, Sin(t#:Angle:)#1:Number:)#3:Number:, Multiply(r#:Number:, Multiply(Add(R#:Number:, r#:Number:)#2:Number:, Sin(Divide(t#:Angle:, r#:Number:)#2:$34:constraint=IScalarArithmetic:)#2:Number:)#3:Number:)#3:Number:)#2:Number:)#:(Tuple2, $1371:, $1372:):Vector2D
226. GetPoint
  Signature : AngularCurves2D_10:Library.GetPoint(curve: Epicycloid, t: Angle): Vector2D
  Body      : Epicycloid(t, Radius1(curve), Radius2(curve))
  Inline    : Tuple2(Subtract(Multiply(Add(Radius1(curve#:Epicycloid:)#1:Number:Number, Radius2(curve#:Epicycloid:)#1:Number:Number)#2:Number:, Cos(t#:Angle:Angle)#1:Number:)#3:Number:, Multiply(Radius2(curve#:Epicycloid:)#1:Number:Number, Multiply(Add(Radius1(curve#:Epicycloid:)#1:Number:Number, Radius2(curve#:Epicycloid:)#1:Number:Number)#2:Number:, Cos(Divide(t#:Angle:Angle, Radius2(curve#:Epicycloid:)#1:Number:Number)#2:$34:constraint=IScalarArithmetic:)#2:Number:)#3:Number:)#3:Number:)#2:Number:, Subtract(Multiply(Add(Radius1(curve#:Epicycloid:)#1:Number:Number, Radius2(curve#:Epicycloid:)#1:Number:Number)#2:Number:, Sin(t#:Angle:Angle)#1:Number:)#3:Number:, Multiply(Radius2(curve#:Epicycloid:)#1:Number:Number, Multiply(Add(Radius1(curve#:Epicycloid:)#1:Number:Number, Radius2(curve#:Epicycloid:)#1:Number:Number)#2:Number:, Sin(Divide(t#:Angle:Angle, Radius2(curve#:Epicycloid:)#1:Number:Number)#2:$34:constraint=IScalarArithmetic:)#2:Number:)#3:Number:)#3:Number:)#2:Number:)#1:(Tuple2, $1371:, $1372:):
227. Hypocycloid
  Signature : AngularCurves2D_10:Library.Hypocycloid(t: Angle, R: Number, r: Number): Vector2D
  Body      : Tuple2(Add(Multiply(Subtract(R, r), Cos(t)), Multiply(r, Multiply(Subtract(R, r), Cos(Divide(t, r))))), Subtract(Multiply(Subtract(R, r), Sin(t)), Multiply(r, Multiply(Subtract(R, r), Sin(Divide(t, r))))))
  Inline    : Tuple2(Add(Multiply(Subtract(R#:Number:, r#:Number:)#2:Number:, Cos(t#:Angle:)#1:Number:)#3:Number:, Multiply(r#:Number:, Multiply(Subtract(R#:Number:, r#:Number:)#2:Number:, Cos(Divide(t#:Angle:, r#:Number:)#2:$34:constraint=IScalarArithmetic:)#2:Number:)#3:Number:)#3:Number:)#2:Number:, Subtract(Multiply(Subtract(R#:Number:, r#:Number:)#2:Number:, Sin(t#:Angle:)#1:Number:)#3:Number:, Multiply(r#:Number:, Multiply(Subtract(R#:Number:, r#:Number:)#2:Number:, Sin(Divide(t#:Angle:, r#:Number:)#2:$34:constraint=IScalarArithmetic:)#2:Number:)#3:Number:)#3:Number:)#2:Number:)#:(Tuple2, $1373:, $1374:):Vector2D
228. GetPoint
  Signature : AngularCurves2D_10:Library.GetPoint(curve: Hypocycloid, t: Angle): Vector2D
  Body      : Hypocycloid(t, Radius1(curve), Radius2(curve))
  Inline    : Tuple2(Add(Multiply(Subtract(Radius1(curve#:Hypocycloid:)#1:Number:Number, Radius2(curve#:Hypocycloid:)#1:Number:Number)#2:Number:, Cos(t#:Angle:Angle)#1:Number:)#3:Number:, Multiply(Radius2(curve#:Hypocycloid:)#1:Number:Number, Multiply(Subtract(Radius1(curve#:Hypocycloid:)#1:Number:Number, Radius2(curve#:Hypocycloid:)#1:Number:Number)#2:Number:, Cos(Divide(t#:Angle:Angle, Radius2(curve#:Hypocycloid:)#1:Number:Number)#2:$34:constraint=IScalarArithmetic:)#2:Number:)#3:Number:)#3:Number:)#2:Number:, Subtract(Multiply(Subtract(Radius1(curve#:Hypocycloid:)#1:Number:Number, Radius2(curve#:Hypocycloid:)#1:Number:Number)#2:Number:, Sin(t#:Angle:Angle)#1:Number:)#3:Number:, Multiply(Radius2(curve#:Hypocycloid:)#1:Number:Number, Multiply(Subtract(Radius1(curve#:Hypocycloid:)#1:Number:Number, Radius2(curve#:Hypocycloid:)#1:Number:Number)#2:Number:, Sin(Divide(t#:Angle:Angle, Radius2(curve#:Hypocycloid:)#1:Number:Number)#2:$34:constraint=IScalarArithmetic:)#2:Number:)#3:Number:)#3:Number:)#2:Number:)#1:(Tuple2, $1373:, $1374:):
229. Epitrochoid
  Signature : AngularCurves2D_10:Library.Epitrochoid(t: Angle, R: Number, r: Number, d: Number): Vector2D
  Body      : Tuple2(Subtract(Multiply(Add(R, r), Cos(t)), Multiply(d, Multiply(Add(R, r), Cos(Divide(t, r))))), Subtract(Multiply(Add(R, r), Sin(t)), Multiply(d, Multiply(Add(R, r), Sin(Divide(t, r))))))
  Inline    : Tuple2(Subtract(Multiply(Add(R#:Number:, r#:Number:)#2:Number:, Cos(t#:Angle:)#1:Number:)#3:Number:, Multiply(d#:Number:, Multiply(Add(R#:Number:, r#:Number:)#2:Number:, Cos(Divide(t#:Angle:, r#:Number:)#2:$34:constraint=IScalarArithmetic:)#2:Number:)#3:Number:)#3:Number:)#2:Number:, Subtract(Multiply(Add(R#:Number:, r#:Number:)#2:Number:, Sin(t#:Angle:)#1:Number:)#3:Number:, Multiply(d#:Number:, Multiply(Add(R#:Number:, r#:Number:)#2:Number:, Sin(Divide(t#:Angle:, r#:Number:)#2:$34:constraint=IScalarArithmetic:)#2:Number:)#3:Number:)#3:Number:)#2:Number:)#:(Tuple2, $1375:, $1376:):Vector2D
230. GetPoint
  Signature : AngularCurves2D_10:Library.GetPoint(curve: Epitrochoid, t: Angle): Vector2D
  Body      : Epitrochoid(t, Radius1(curve), Radius2(curve), Dist(curve))
  Inline    : Tuple2(Subtract(Multiply(Add(Radius1(curve#:Epitrochoid:)#1:Number:Number, Radius2(curve#:Epitrochoid:)#1:Number:Number)#2:Number:, Cos(t#:Angle:Angle)#1:Number:)#3:Number:, Multiply(Dist(curve#:Epitrochoid:)#1:Number:Number, Multiply(Add(Radius1(curve#:Epitrochoid:)#1:Number:Number, Radius2(curve#:Epitrochoid:)#1:Number:Number)#2:Number:, Cos(Divide(t#:Angle:Angle, Radius2(curve#:Epitrochoid:)#1:Number:Number)#2:$34:constraint=IScalarArithmetic:)#2:Number:)#3:Number:)#3:Number:)#2:Number:, Subtract(Multiply(Add(Radius1(curve#:Epitrochoid:)#1:Number:Number, Radius2(curve#:Epitrochoid:)#1:Number:Number)#2:Number:, Sin(t#:Angle:Angle)#1:Number:)#3:Number:, Multiply(Dist(curve#:Epitrochoid:)#1:Number:Number, Multiply(Add(Radius1(curve#:Epitrochoid:)#1:Number:Number, Radius2(curve#:Epitrochoid:)#1:Number:Number)#2:Number:, Sin(Divide(t#:Angle:Angle, Radius2(curve#:Epitrochoid:)#1:Number:Number)#2:$34:constraint=IScalarArithmetic:)#2:Number:)#3:Number:)#3:Number:)#2:Number:)#1:(Tuple2, $1375:, $1376:):
231. Hypotrochoid
  Signature : AngularCurves2D_10:Library.Hypotrochoid(t: Angle, R: Number, r: Number, d: Number): Vector2D
  Body      : Tuple2(Add(Multiply(Subtract(R, r), Cos(t)), Multiply(d, Multiply(Subtract(R, r), Cos(Divide(t, r))))), Subtract(Multiply(Subtract(R, r), Sin(t)), Multiply(d, Multiply(Subtract(R, r), Sin(Divide(t, r))))))
  Inline    : Tuple2(Add(Multiply(Subtract(R#:Number:, r#:Number:)#2:Number:, Cos(t#:Angle:)#1:Number:)#3:Number:, Multiply(d#:Number:, Multiply(Subtract(R#:Number:, r#:Number:)#2:Number:, Cos(Divide(t#:Angle:, r#:Number:)#2:$34:constraint=IScalarArithmetic:)#2:Number:)#3:Number:)#3:Number:)#2:Number:, Subtract(Multiply(Subtract(R#:Number:, r#:Number:)#2:Number:, Sin(t#:Angle:)#1:Number:)#3:Number:, Multiply(d#:Number:, Multiply(Subtract(R#:Number:, r#:Number:)#2:Number:, Sin(Divide(t#:Angle:, r#:Number:)#2:$34:constraint=IScalarArithmetic:)#2:Number:)#3:Number:)#3:Number:)#2:Number:)#:(Tuple2, $1377:, $1378:):Vector2D
232. GetPoint
  Signature : AngularCurves2D_10:Library.GetPoint(curve: Hypotrochoid, t: Angle): Vector2D
  Body      : Hypotrochoid(t, Radius1(curve), Radius2(curve), Dist(curve))
  Inline    : Tuple2(Add(Multiply(Subtract(Radius1(curve#:Hypotrochoid:)#1:Number:Number, Radius2(curve#:Hypotrochoid:)#1:Number:Number)#2:Number:, Cos(t#:Angle:Angle)#1:Number:)#3:Number:, Multiply(Dist(curve#:Hypotrochoid:)#1:Number:Number, Multiply(Subtract(Radius1(curve#:Hypotrochoid:)#1:Number:Number, Radius2(curve#:Hypotrochoid:)#1:Number:Number)#2:Number:, Cos(Divide(t#:Angle:Angle, Radius2(curve#:Hypotrochoid:)#1:Number:Number)#2:$34:constraint=IScalarArithmetic:)#2:Number:)#3:Number:)#3:Number:)#2:Number:, Subtract(Multiply(Subtract(Radius1(curve#:Hypotrochoid:)#1:Number:Number, Radius2(curve#:Hypotrochoid:)#1:Number:Number)#2:Number:, Sin(t#:Angle:Angle)#1:Number:)#3:Number:, Multiply(Dist(curve#:Hypotrochoid:)#1:Number:Number, Multiply(Subtract(Radius1(curve#:Hypotrochoid:)#1:Number:Number, Radius2(curve#:Hypotrochoid:)#1:Number:Number)#2:Number:, Sin(Divide(t#:Angle:Angle, Radius2(curve#:Hypotrochoid:)#1:Number:Number)#2:$34:constraint=IScalarArithmetic:)#2:Number:)#3:Number:)#3:Number:)#2:Number:)#1:(Tuple2, $1377:, $1378:):
233. ButterflyCurve
  Signature : AngularCurves2D_10:Library.ButterflyCurve(t: Angle): Vector2D
  Body      : ButterflyCurveSection(Divide(t, 6))
  Inline    : Tuple2(Sin(Multiply(Divide(t#:Angle:, 6#:Number:)#2:$34:constraint=IScalarArithmetic:Angle, Subtract(Exp(Cos(Divide(t#:Angle:, 6#:Number:)#2:$34:constraint=IScalarArithmetic:Angle)#1:Number:)#2:Number:, Subtract(Multiply(2#:Number:, Cos(Multiply(Divide(t#:Angle:, 6#:Number:)#2:$34:constraint=IScalarArithmetic:Angle, 4#:Number:)#2:$35:constraint=IScalarArithmetic:)#2:Number:)#3:Number:, Pow(Sin(Divide(Divide(t#:Angle:, 6#:Number:)#2:$34:constraint=IScalarArithmetic:Angle, 12#:Number:)#2:$34:constraint=IScalarArithmetic:)#2:Number:, 5#:Number:)#1:Number:)#2:Number:)#2:Number:)#2:$35:constraint=IScalarArithmetic:)#2:Number:, Cos(Multiply(Divide(t#:Angle:, 6#:Number:)#2:$34:constraint=IScalarArithmetic:Angle, Subtract(Exp(Cos(Divide(t#:Angle:, 6#:Number:)#2:$34:constraint=IScalarArithmetic:Angle)#1:Number:)#2:Number:, Subtract(Multiply(2#:Number:, Cos(Multiply(Divide(t#:Angle:, 6#:Number:)#2:$34:constraint=IScalarArithmetic:Angle, 4#:Number:)#2:$35:constraint=IScalarArithmetic:)#2:Number:)#3:Number:, Pow(Sin(Divide(Divide(t#:Angle:, 6#:Number:)#2:$34:constraint=IScalarArithmetic:Angle, 12#:Number:)#2:$34:constraint=IScalarArithmetic:)#2:Number:, 5#:Number:)#1:Number:)#2:Number:)#2:Number:)#2:$35:constraint=IScalarArithmetic:)#2:Number:)#1:(Tuple2, $1379:, $1380:):
234. ButterflyCurveSection
  Signature : AngularCurves2D_10:Library.ButterflyCurveSection(t: Angle): Vector2D
  Body      : Tuple2(Sin(Multiply(t, Subtract(Exp(Cos(t)), Subtract(Multiply(2, Cos(Multiply(t, 4))), Pow(Sin(Divide(t, 12)), 5))))), Cos(Multiply(t, Subtract(Exp(Cos(t)), Subtract(Multiply(2, Cos(Multiply(t, 4))), Pow(Sin(Divide(t, 12)), 5))))))
  Inline    : Tuple2(Sin(Multiply(t#:Angle:, Subtract(Exp(Cos(t#:Angle:)#1:Number:)#2:Number:, Subtract(Multiply(2#:Number:, Cos(Multiply(t#:Angle:, 4#:Number:)#2:$35:constraint=IScalarArithmetic:)#2:Number:)#3:Number:, Pow(Sin(Divide(t#:Angle:, 12#:Number:)#2:$34:constraint=IScalarArithmetic:)#2:Number:, 5#:Number:)#1:Number:)#2:Number:)#2:Number:)#2:$35:constraint=IScalarArithmetic:)#2:Number:, Cos(Multiply(t#:Angle:, Subtract(Exp(Cos(t#:Angle:)#1:Number:)#2:Number:, Subtract(Multiply(2#:Number:, Cos(Multiply(t#:Angle:, 4#:Number:)#2:$35:constraint=IScalarArithmetic:)#2:Number:)#3:Number:, Pow(Sin(Divide(t#:Angle:, 12#:Number:)#2:$34:constraint=IScalarArithmetic:)#2:Number:, 5#:Number:)#1:Number:)#2:Number:)#2:Number:)#2:$35:constraint=IScalarArithmetic:)#2:Number:)#:(Tuple2, $1379:, $1380:):Vector2D
235. GetPoint
  Signature : AngularCurves2D_10:Library.GetPoint(curve: ButterflyCurve, t: Angle): Vector2D
  Body      : ButterflyCurve(t)
  Inline    : Tuple2(Sin(Multiply(Divide(t#:Angle:Angle, 6#:Number:)#2:$34:constraint=IScalarArithmetic:Angle, Subtract(Exp(Cos(Divide(t#:Angle:Angle, 6#:Number:)#2:$34:constraint=IScalarArithmetic:Angle)#1:Number:)#2:Number:, Subtract(Multiply(2#:Number:, Cos(Multiply(Divide(t#:Angle:Angle, 6#:Number:)#2:$34:constraint=IScalarArithmetic:Angle, 4#:Number:)#2:$35:constraint=IScalarArithmetic:)#2:Number:)#3:Number:, Pow(Sin(Divide(Divide(t#:Angle:Angle, 6#:Number:)#2:$34:constraint=IScalarArithmetic:Angle, 12#:Number:)#2:$34:constraint=IScalarArithmetic:)#2:Number:, 5#:Number:)#1:Number:)#2:Number:)#2:Number:)#2:$35:constraint=IScalarArithmetic:)#2:Number:, Cos(Multiply(Divide(t#:Angle:Angle, 6#:Number:)#2:$34:constraint=IScalarArithmetic:Angle, Subtract(Exp(Cos(Divide(t#:Angle:Angle, 6#:Number:)#2:$34:constraint=IScalarArithmetic:Angle)#1:Number:)#2:Number:, Subtract(Multiply(2#:Number:, Cos(Multiply(Divide(t#:Angle:Angle, 6#:Number:)#2:$34:constraint=IScalarArithmetic:Angle, 4#:Number:)#2:$35:constraint=IScalarArithmetic:)#2:Number:)#3:Number:, Pow(Sin(Divide(Divide(t#:Angle:Angle, 6#:Number:)#2:$34:constraint=IScalarArithmetic:Angle, 12#:Number:)#2:$34:constraint=IScalarArithmetic:)#2:Number:, 5#:Number:)#1:Number:)#2:Number:)#2:Number:)#2:$35:constraint=IScalarArithmetic:)#2:Number:)#1:(Tuple2, $1379:, $1380:):
236. Lissajous
  Signature : AngularCurves2D_10:Library.Lissajous(t: Angle, a: Number, b: Number, d: Angle): Vector2D
  Body      : Tuple2(Sin(Add(t, d)), Sin(b))
  Inline    : Tuple2(Sin(Add(t#:Angle:, d#:Angle:)#1:$30:constraint=IAdditive:)#2:Number:, Sin(Radians(Multiply(b#:Number:Number, TwoPi#:IAny:)#1:$36:constraint=IMultiplicative:)#1:Angle:)#1:Number:)#:(Tuple2, $1381:, $1382:):Vector2D
237. GetPoint
  Signature : AngularCurves2D_10:Library.GetPoint(curve: Lissajous, t: Angle): Vector2D
  Body      : Lissajous(t, A(curve), B(curve), Delta(curve))
  Inline    : Tuple2(Sin(Add(t#:Angle:Angle, Delta(curve#:Lissajous:)#1:Angle:Angle)#1:$30:constraint=IAdditive:)#2:Number:, Sin(Radians(Multiply(B(curve#:Lissajous:)#1:Number:Number, TwoPi#:IAny:)#1:$36:constraint=IMultiplicative:)#1:Angle:)#1:Number:)#1:(Tuple2, $1381:, $1382:):

Group PolarCurves_12:Library

238. EvalPolar
  Signature : PolarCurves_12:Library.EvalPolar(curve: IPolarCurve, t: Angle): PolarCoordinate
  Body      : Tuple2(GetRadius(curve, t), t)
  Inline    : Tuple2(GetRadius(curve#:IPolarCurve:, t#:Angle:)#1:Number:, t#:Angle:)#:(Tuple2, $1383:, $1384:):PolarCoordinate
239. Vector2D
  Signature : PolarCurves_12:Library.Vector2D(coord: PolarCoordinate): Vector2D
  Body      : Multiply(New(Vector2D, Cos(Angle(coord)), Sin(Angle(coord))), Radius(coord))
  Inline    : Multiply(New(Vector2D#:Type:, Cos(Angle(coord#:PolarCoordinate:)#1:Angle:)#1:Number:, Sin(Angle(coord#:PolarCoordinate:)#1:Angle:)#1:Number:)#0::, Radius(coord#:PolarCoordinate:)#1:Number:)#0::Vector2D
240. GetPoint
  Signature : PolarCurves_12:Library.GetPoint(curve: IPolarCurve, t: Angle): Vector2D
  Body      : EvalPolar(curve, t)
  Inline    : Tuple2(GetRadius(curve#:IPolarCurve:IPolarCurve, t#:Angle:Angle)#1:Number:, t#:Angle:Angle)#1:(Tuple2, $1383:, $1384:):
241. CycloidOfCeva
  Signature : PolarCurves_12:Library.CycloidOfCeva(t: Angle): Number
  Body      : Add(1, Multiply(Cos(Multiply(t, 2)), 2))
  Inline    : Add(1#:Number:, Multiply(Cos(Multiply(t#:Angle:, 2#:Number:)#2:$35:constraint=IScalarArithmetic:)#2:Number:, 2#:Number:)#3:Number:)#2:Number:Number
242. GetRadius
  Signature : PolarCurves_12:Library.GetRadius(curve: CycloidOfCeva, t: Angle): Number
  Body      : CycloidOfCeva(t)
  Inline    : Add(1#:Number:, Multiply(Cos(Multiply(t#:Angle:Angle, 2#:Number:)#2:$35:constraint=IScalarArithmetic:)#2:Number:, 2#:Number:)#3:Number:)#1:Number:
243. Limacon
  Signature : PolarCurves_12:Library.Limacon(t: Angle, a: Number, b: Number): Number
  Body      : Add(Multiply(a, Cos(t)), b)
  Inline    : Add(Multiply(a#:Number:, Cos(t#:Angle:)#1:Number:)#3:Number:, b#:Number:)#2:Number:Number
244. GetRadius
  Signature : PolarCurves_12:Library.GetRadius(curve: Limacon, t: Angle): Number
  Body      : Limacon(t, A(curve), B(curve))
  Inline    : Add(Multiply(A(curve#:Limacon:)#1:Number:Number, Cos(t#:Angle:Angle)#1:Number:)#3:Number:, B(curve#:Limacon:)#1:Number:Number)#1:Number:
245. Cardoid
  Signature : PolarCurves_12:Library.Cardoid(t: Angle): Number
  Body      : Add(1, Cos(t))
  Inline    : Add(1#:Number:, Cos(t#:Angle:)#1:Number:)#2:Number:Number
246. GetRadius
  Signature : PolarCurves_12:Library.GetRadius(curve: Cardoid, t: Angle): Number
  Body      : Cardoid(t)
  Inline    : Add(1#:Number:, Cos(t#:Angle:Angle)#1:Number:)#1:Number:
247. TschirnhausenCubic
  Signature : PolarCurves_12:Library.TschirnhausenCubic(t: Angle, a: Number): Number
  Body      : Multiply(a, Cube(Sec(Divide(t, 3))))
  Inline    : Multiply(a#:Number:, Cube(Inverse(Cos(Divide(t#:Angle:, 3#:Number:)#2:$34:constraint=IScalarArithmetic:Angle)#1:Number:Number)#1:Number:)#0::)#0::Number
248. GetRadius
  Signature : PolarCurves_12:Library.GetRadius(curve: TschirnhausenCubic, t: Angle): Number
  Body      : TschirnhausenCubic(t, A(curve))
  Inline    : Multiply(A(curve#:TschirnhausenCubic:)#1:Number:Number, Cube(Inverse(Cos(Divide(t#:Angle:Angle, 3#:Number:)#2:$34:constraint=IScalarArithmetic:Angle)#1:Number:Number)#1:Number:)#0::)#1::
249. Rose
  Signature : PolarCurves_12:Library.Rose(t: Angle, k: Number): Number
  Body      : Multiply(k, Cos(t))
  Inline    : Multiply(k#:Number:, Cos(t#:Angle:)#1:Number:)#3:Number:Number
250. GetRadius
  Signature : PolarCurves_12:Library.GetRadius(curve: Rose, t: Angle): Number
  Body      : Rose(t, K(curve))
  Inline    : Rose(t#:Angle:, K(curve#:Rose:)#1:Integer:)#0::Number
251. ArchimedeanSpiral
  Signature : PolarCurves_12:Library.ArchimedeanSpiral(t: Angle, a: Number, b: Number): Number
  Body      : Add(a, Multiply(b, Turns(t)))
  Inline    : Add(a#:Number:, Multiply(b#:Number:, Divide(Radians(t#:Angle:Angle)#1:Number:, TwoPi#:IAny:)#1:$38:constraint=IDivisible:)#3:Number:)#2:Number:Number
252. GetRadius
  Signature : PolarCurves_12:Library.GetRadius(curve: ArchimedeanSpiral, t: Angle): Number
  Body      : ArchimedeanSpiral(t, A(curve), B(curve))
  Inline    : Add(A(curve#:ArchimedeanSpiral:)#1:Number:Number, Multiply(B(curve#:ArchimedeanSpiral:)#1:Number:Number, Divide(Radians(t#:Angle:Angle)#1:Number:, TwoPi#:IAny:)#1:$38:constraint=IDivisible:)#3:Number:)#1:Number:
253. ConicSection
  Signature : PolarCurves_12:Library.ConicSection(t: Angle, semiLatusRectum: Number, eccentricity: Number): Number
  Body      : Divide(semiLatusRectum, Subtract(1, Multiply(eccentricity, Cos(t))))
  Inline    : Divide(semiLatusRectum#:Number:, Subtract(1#:Number:, Multiply(eccentricity#:Number:, Cos(t#:Angle:)#1:Number:)#3:Number:)#2:Number:)#3:Number:Number
254. GetRadius
  Signature : PolarCurves_12:Library.GetRadius(curve: ConicSection, t: Angle): Number
  Body      : ConicSection(t, SemiLatusRectum(curve), Eccentricity(curve))
  Inline    : Divide(SemiLatusRectum(curve#:ConicSection:)#1:Number:Number, Subtract(1#:Number:, Multiply(Eccentricity(curve#:ConicSection:)#1:Number:Number, Cos(t#:Angle:Angle)#1:Number:)#3:Number:)#2:Number:)#1:Number:
255. LemniscateOfBernoulli
  Signature : PolarCurves_12:Library.LemniscateOfBernoulli(t: Angle, a: Number): Number
  Body      : Sqrt(Multiply(Sqr(a), Cos(Multiply(t, 2))))
  Inline    : Sqrt(Multiply(Sqr(a#:Number:)#0::, Cos(Multiply(t#:Angle:, 2#:Number:)#2:$35:constraint=IScalarArithmetic:)#2:Number:)#0::)#0::Number
256. GetRadius
  Signature : PolarCurves_12:Library.GetRadius(curve: LemniscateOfBernoulli, t: Angle): Number
  Body      : LemniscateOfBernoulli(t, A(curve))
  Inline    : Sqrt(Multiply(Sqr(A(curve#:LemniscateOfBernoulli:)#1:Number:Number)#0::, Cos(Multiply(t#:Angle:Angle, 2#:Number:)#2:$35:constraint=IScalarArithmetic:)#2:Number:)#0::)#1::
257. TrisectrixOfMaclaurin
  Signature : PolarCurves_12:Library.TrisectrixOfMaclaurin(t: Angle, a: Number): Number
  Body      : Divide(Multiply(2, a), Cos(Divide(t, 3)))
  Inline    : Divide(Multiply(2#:Number:, a#:Number:)#3:Number:, Cos(Divide(t#:Angle:, 3#:Number:)#2:$34:constraint=IScalarArithmetic:)#2:Number:)#3:Number:Number
258. GetRadius
  Signature : PolarCurves_12:Library.GetRadius(curve: TrisectrixOfMaclaurin, t: Angle): Number
  Body      : TrisectrixOfMaclaurin(t, A(curve))
  Inline    : Divide(Multiply(2#:Number:, A(curve#:TrisectrixOfMaclaurin:)#1:Number:Number)#3:Number:, Cos(Divide(t#:Angle:Angle, 3#:Number:)#2:$34:constraint=IScalarArithmetic:)#2:Number:)#1:Number:
259. ConchoidOfDeSluze
  Signature : PolarCurves_12:Library.ConchoidOfDeSluze(t: Angle, a: Number): Number
  Body      : Add(Sec(t), Multiply(a, Cos(t)))
  Inline    : Add(Inverse(Cos(t#:Angle:Angle)#1:Number:Number)#1:Number:, Multiply(a#:Number:, Cos(t#:Angle:)#1:Number:)#3:Number:)#2:Number:Number
260. GetRadius
  Signature : PolarCurves_12:Library.GetRadius(curve: ConchoidOfDeSluze, t: Angle): Number
  Body      : ConchoidOfDeSluze(t, A(curve))
  Inline    : Add(Inverse(Cos(t#:Angle:Angle)#1:Number:Number)#1:Number:, Multiply(A(curve#:ConchoidOfDeSluze:)#1:Number:Number, Cos(t#:Angle:Angle)#1:Number:)#3:Number:)#1:Number:
261. SinusoidalSpiral
  Signature : PolarCurves_12:Library.SinusoidalSpiral(t: Angle, a: Number, n: Number): Number
  Body      : InversePow(Multiply(Pow(a, n), Cos(Multiply(t, n))), a)
  Inline    : Pow(Multiply(Pow(a#:Number:, n#:Number:)#1:Number:, Cos(Multiply(t#:Angle:, n#:Number:)#2:$35:constraint=IScalarArithmetic:)#2:Number:)#3:Number:Number, Inverse(a#:Number:Number)#1:Number:)#1:Number:
262. GetRadius
  Signature : PolarCurves_12:Library.GetRadius(curve: SinusoidalSpiral, t: Angle): Number
  Body      : SinusoidalSpiral(t, A(curve), N(curve))
  Inline    : Pow(Multiply(Pow(A(curve#:SinusoidalSpiral:)#1:Number:Number, N(curve#:SinusoidalSpiral:)#1:Number:Number)#1:Number:, Cos(Multiply(t#:Angle:Angle, N(curve#:SinusoidalSpiral:)#1:Number:Number)#2:$35:constraint=IScalarArithmetic:)#2:Number:)#3:Number:Number, Inverse(A(curve#:SinusoidalSpiral:)#1:Number:Number)#1:Number:)#1:Number:
263. FermatsSpiral
  Signature : PolarCurves_12:Library.FermatsSpiral(t: Angle, a: Number): Number
  Body      : Sqrt(Multiply(a, Sqr(Turns(t))))
  Inline    : Sqrt(Multiply(a#:Number:, Sqr(Divide(Radians(t#:Angle:Angle)#1:Number:, TwoPi#:IAny:)#1:$38:constraint=IDivisible:)#0::)#0::)#0::Number
264. GetRadius
  Signature : PolarCurves_12:Library.GetRadius(curve: FermatsSpiral, t: Angle): Number
  Body      : FermatsSpiral(t, A(curve))
  Inline    : Sqrt(Multiply(A(curve#:FermatsSpiral:)#1:Number:Number, Sqr(Divide(Radians(t#:Angle:Angle)#1:Number:, TwoPi#:IAny:)#1:$38:constraint=IDivisible:)#0::)#0::)#1::
265. LogarithmicSpiral
  Signature : PolarCurves_12:Library.LogarithmicSpiral(t: Angle, a: Number, k: Number): Number
  Body      : Multiply(a, Exp(Multiply(Radians(t), k)))
  Inline    : Multiply(a#:Number:, Exp(Multiply(Radians(t#:Angle:)#1:Number:, k#:Number:)#3:Number:)#2:Number:)#3:Number:Number
266. GetRadius
  Signature : PolarCurves_12:Library.GetRadius(curve: LogarithmicSpiral, t: Angle): Number
  Body      : LogarithmicSpiral(t, A(curve), K(curve))
  Inline    : Multiply(A(curve#:LogarithmicSpiral:)#1:Number:Number, Exp(Multiply(Radians(t#:Angle:Angle)#1:Number:, K(curve#:LogarithmicSpiral:)#1:Number:Number)#3:Number:)#2:Number:)#1:Number:

Group Curves3D_14:Library

267. Eval
  Signature : Curves3D_14:Library.Eval(curve: QuadraticBezier3D, t: Number): Vector3D
  Body      : QuadraticBezier(A(curve), B(curve), C(curve), t)
  Inline    : QuadraticBezier(A(curve#:QuadraticBezier3D:)#1:Vector3D:, B(curve#:QuadraticBezier3D:)#1:Vector3D:, C(curve#:QuadraticBezier3D:)#1:Vector3D:, t#:Number:)#0::Vector3D
268. Eval
  Signature : Curves3D_14:Library.Eval(curve: CubicBezier3D, t: Number): Vector3D
  Body      : QuadraticBezier(A(curve), B(curve), C(curve), t)
  Inline    : QuadraticBezier(A(curve#:CubicBezier3D:)#1:Vector3D:, B(curve#:CubicBezier3D:)#1:Vector3D:, C(curve#:CubicBezier3D:)#1:Vector3D:, t#:Number:)#0::Vector3D

Group AngularCurves3D_16:Library

269. Eval
  Signature : AngularCurves3D_16:Library.Eval(curve: IAngularCurve3D, t: Number): Vector3D
  Body      : GetPoint(curve, Turns(t))
  Inline    : GetPoint(curve#:IAngularCurve3D:, Radians(Multiply(t#:Number:Number, TwoPi#:IAny:)#1:$36:constraint=IMultiplicative:)#1:Angle:)#2:Vector2D:Vector3D
270. GetPoint
  Signature : AngularCurves3D_16:Library.GetPoint(curve: TorusKnot, t: Angle): Vector3D
  Body      : Multiply(TorusKnot(t, P(curve), Q(curve)), Radius(curve))
  Inline    : Multiply(TorusKnot(t#:Angle:, P(curve#:TorusKnot:)#1:Integer:, Q(curve#:TorusKnot:)#1:Integer:)#0::, Radius(curve#:TorusKnot:)#1:Number:)#0::Vector3D
271. TrefoilKnot
  Signature : AngularCurves3D_16:Library.TrefoilKnot(t: Angle): Vector3D
  Body      : Tuple3(Add(Sin(t), Multiply(Sin(Multiply(t, 2)), 2)), Add(Cos(t), Multiply(Cos(Multiply(t, 2)), 2)), Negative(Sin(Multiply(t, 3))))
  Inline    : Tuple3(Add(Sin(t#:Angle:)#1:Number:, Multiply(Sin(Multiply(t#:Angle:, 2#:Number:)#2:$35:constraint=IScalarArithmetic:)#2:Number:, 2#:Number:)#3:Number:)#2:Number:, Add(Cos(t#:Angle:)#1:Number:, Multiply(Cos(Multiply(t#:Angle:, 2#:Number:)#2:$35:constraint=IScalarArithmetic:)#2:Number:, 2#:Number:)#3:Number:)#2:Number:, Negative(Sin(Multiply(t#:Angle:, 3#:Number:)#2:$35:constraint=IScalarArithmetic:)#2:Number:)#2:Number:)#:(Tuple3, $1385:, $1386:, $1387:):Vector3D
272. GetPoint
  Signature : AngularCurves3D_16:Library.GetPoint(curve: TrefoilKnot, t: Angle): Vector3D
  Body      : TrefoilKnot(t)
  Inline    : Tuple3(Add(Sin(t#:Angle:Angle)#1:Number:, Multiply(Sin(Multiply(t#:Angle:Angle, 2#:Number:)#2:$35:constraint=IScalarArithmetic:)#2:Number:, 2#:Number:)#3:Number:)#2:Number:, Add(Cos(t#:Angle:Angle)#1:Number:, Multiply(Cos(Multiply(t#:Angle:Angle, 2#:Number:)#2:$35:constraint=IScalarArithmetic:)#2:Number:, 2#:Number:)#3:Number:)#2:Number:, Negative(Sin(Multiply(t#:Angle:Angle, 3#:Number:)#2:$35:constraint=IScalarArithmetic:)#2:Number:)#2:Number:)#1:(Tuple3, $1385:, $1386:, $1387:):
273. FigureEightKnot
  Signature : AngularCurves3D_16:Library.FigureEightKnot(t: Angle): Vector3D
  Body      : Tuple3(Multiply(Add(2, Cos(Multiply(t, 2))), Cos(Multiply(t, 3))), Multiply(Add(2, Cos(Multiply(t, 2))), Sin(Multiply(t, 3))), Sin(Multiply(t, 4)))
  Inline    : Tuple3(Multiply(Add(2#:Number:, Cos(Multiply(t#:Angle:, 2#:Number:)#2:$35:constraint=IScalarArithmetic:)#2:Number:)#2:Number:, Cos(Multiply(t#:Angle:, 3#:Number:)#2:$35:constraint=IScalarArithmetic:)#2:Number:)#3:Number:, Multiply(Add(2#:Number:, Cos(Multiply(t#:Angle:, 2#:Number:)#2:$35:constraint=IScalarArithmetic:)#2:Number:)#2:Number:, Sin(Multiply(t#:Angle:, 3#:Number:)#2:$35:constraint=IScalarArithmetic:)#2:Number:)#3:Number:, Sin(Multiply(t#:Angle:, 4#:Number:)#2:$35:constraint=IScalarArithmetic:)#2:Number:)#:(Tuple3, $1388:, $1389:, $1390:):Vector3D
274. GetPoint
  Signature : AngularCurves3D_16:Library.GetPoint(curve: FigureEightKnot, t: Angle): Vector3D
  Body      : FigureEightKnot(t)
  Inline    : Tuple3(Multiply(Add(2#:Number:, Cos(Multiply(t#:Angle:Angle, 2#:Number:)#2:$35:constraint=IScalarArithmetic:)#2:Number:)#2:Number:, Cos(Multiply(t#:Angle:Angle, 3#:Number:)#2:$35:constraint=IScalarArithmetic:)#2:Number:)#3:Number:, Multiply(Add(2#:Number:, Cos(Multiply(t#:Angle:Angle, 2#:Number:)#2:$35:constraint=IScalarArithmetic:)#2:Number:)#2:Number:, Sin(Multiply(t#:Angle:Angle, 3#:Number:)#2:$35:constraint=IScalarArithmetic:)#2:Number:)#3:Number:, Sin(Multiply(t#:Angle:Angle, 4#:Number:)#2:$35:constraint=IScalarArithmetic:)#2:Number:)#1:(Tuple3, $1388:, $1389:, $1390:):
275. Helix
  Signature : AngularCurves3D_16:Library.Helix(t: Angle, revs: Number): Vector3D
  Body      : Tuple3(Sin(Multiply(t, revs)), Cos(Multiply(t, revs)), Turns(t))
  Inline    : Tuple3(Sin(Multiply(t#:Angle:, revs#:Number:)#2:$35:constraint=IScalarArithmetic:)#2:Number:, Cos(Multiply(t#:Angle:, revs#:Number:)#2:$35:constraint=IScalarArithmetic:)#2:Number:, Divide(Radians(t#:Angle:Angle)#1:Number:, TwoPi#:IAny:)#1:$38:constraint=IDivisible:)#:(Tuple3, $1391:, $1392:, $1393:):Vector3D
276. GetPoint
  Signature : AngularCurves3D_16:Library.GetPoint(curve: Helix, t: Angle): Vector3D
  Body      : Multiply(Helix(t, NumTurns(curve)), Tuple3(Radius(curve), Radius(curve), Height(curve)))
  Inline    : Multiply(Tuple3(Sin(Multiply(t#:Angle:Angle, NumTurns(curve#:Helix:)#1:Number:Number)#2:$35:constraint=IScalarArithmetic:)#2:Number:, Cos(Multiply(t#:Angle:Angle, NumTurns(curve#:Helix:)#1:Number:Number)#2:$35:constraint=IScalarArithmetic:)#2:Number:, Divide(Radians(t#:Angle:Angle)#1:Number:, TwoPi#:IAny:)#1:$38:constraint=IDivisible:)#1:(Tuple3, $1391:, $1392:, $1393:):, Tuple3(Radius(curve#:Helix:)#1:Number:, Radius(curve#:Helix:)#1:Number:, Height(curve#:Helix:)#1:Number:)#:(Tuple3, $1394:, $1395:, $1396:):)#1:$36:constraint=IMultiplicative:Vector3D

Group IGeometry_18:Library

277. Length
  Signature : IGeometry_18:Library.Length(x: Line2D): Number
  Body      : Length(Subtract(B(x), A(x)))
  Inline    : Length(Subtract(B(x#:Line2D:)#1:Vector2D:, A(x#:Line2D:)#1:Vector2D:)#1:$31:constraint=IAdditive:)#4:Number:Number
278. Direction
  Signature : IGeometry_18:Library.Direction(x: Line2D): Vector2D
  Body      : Subtract(B(x), A(x))
  Inline    : Subtract(B(x#:Line2D:)#1:Vector2D:, A(x#:Line2D:)#1:Vector2D:)#1:$31:constraint=IAdditive:Vector2D
279. Ray2D
  Signature : IGeometry_18:Library.Ray2D(x: Line2D): Ray2D
  Body      : Tuple2(A(x), Direction(x))
  Inline    : Tuple2(A(x#:Line2D:)#1:Vector2D:, Subtract(B(x#:Line2D:Line2D)#1:Vector2D:, A(x#:Line2D:Line2D)#1:Vector2D:)#1:$31:constraint=IAdditive:)#:(Tuple2, $1397:, $1398:):Ray2D
280. Reverse
  Signature : IGeometry_18:Library.Reverse(x: Line2D): Line2D
  Body      : Tuple2(B(x), A(x))
  Inline    : Tuple2(B(x#:Line2D:)#1:Vector2D:, A(x#:Line2D:)#1:Vector2D:)#:(Tuple2, $1399:, $1400:):Line2D
281. Start
  Signature : IGeometry_18:Library.Start(x: Line2D): Vector2D
  Body      : A(x)
  Inline    : A(x#:Line2D:)#1:Vector2D:Vector2D
282. End
  Signature : IGeometry_18:Library.End(x: Line2D): Vector2D
  Body      : B(x)
  Inline    : B(x#:Line2D:)#1:Vector2D:Vector2D
283. Length
  Signature : IGeometry_18:Library.Length(x: Line3D): Number
  Body      : Length(Subtract(B(x), A(x)))
  Inline    : Length(Subtract(B(x#:Line3D:)#1:Vector3D:, A(x#:Line3D:)#1:Vector3D:)#1:$31:constraint=IAdditive:)#4:Number:Number
284. Direction
  Signature : IGeometry_18:Library.Direction(x: Line3D): Vector3D
  Body      : Subtract(B(x), A(x))
  Inline    : Subtract(B(x#:Line3D:)#1:Vector3D:, A(x#:Line3D:)#1:Vector3D:)#1:$31:constraint=IAdditive:Vector3D
285. Ray3D
  Signature : IGeometry_18:Library.Ray3D(x: Line3D): Ray3D
  Body      : Tuple2(A(x), Normalize(Direction(x)))
  Inline    : Tuple2(A(x#:Line3D:)#1:Vector3D:, Normalize(Subtract(B(x#:Line3D:Line3D)#1:Vector3D:, A(x#:Line3D:Line3D)#1:Vector3D:)#1:$31:constraint=IAdditive:)#0::)#:(Tuple2, $1401:, $1402:):Ray3D
286. Reverse
  Signature : IGeometry_18:Library.Reverse(x: Line3D): Line3D
  Body      : Tuple2(B(x), A(x))
  Inline    : Tuple2(B(x#:Line3D:)#1:Vector3D:, A(x#:Line3D:)#1:Vector3D:)#:(Tuple2, $1403:, $1404:):Line3D
287. Deform
  Signature : IGeometry_18:Library.Deform(x: Line3D, f: (Function1, Vector3D, Vector3D)): Line3D
  Body      : Tuple2(f(A(x)), f(B(x)))
  Inline    : Tuple2(f(A(x#:Line3D:)#1:Vector3D:)#:$1405::, f(B(x#:Line3D:)#1:Vector3D:)#:$1406::)#:(Tuple2, $1407:, $1408:):Line3D
288. Bounds3D
  Signature : IGeometry_18:Library.Bounds3D(x: Line3D): Bounds3D
  Body      : Tuple2(Min(A(x), B(x)), Max(A(x), B(x)))
  Inline    : Tuple2(Min(A(x#:Line3D:)#1:Vector3D:, B(x#:Line3D:)#1:Vector3D:)#0::, Max(A(x#:Line3D:)#1:Vector3D:, B(x#:Line3D:)#1:Vector3D:)#0::)#:(Tuple2, $1409:, $1410:):Bounds3D
289. Start
  Signature : IGeometry_18:Library.Start(x: Line3D): Vector3D
  Body      : A(x)
  Inline    : A(x#:Line3D:)#1:Vector3D:Vector3D
290. End
  Signature : IGeometry_18:Library.End(x: Line3D): Vector3D
  Body      : B(x)
  Inline    : B(x#:Line3D:)#1:Vector3D:Vector3D
291. Angle
  Signature : IGeometry_18:Library.Angle(a: Ray3D, b: Ray3D): Angle
  Body      : Angle(Direction(a), Direction(b))
  Inline    : Angle(Direction(a#:Ray3D:)#1:Vector3D:, Direction(b#:Ray3D:)#1:Vector3D:)#0::Angle
292. Deform
  Signature : IGeometry_18:Library.Deform(x: Ray3D, f: (Function1, Vector3D, Vector3D)): Ray3D
  Body      : Tuple2(f(Origin(x)), Normalize(f(Add(Origin(x), Direction(x)))))
  Inline    : Tuple2(f(Origin(x#:Ray3D:)#1:Vector3D:)#:$1411::, Normalize(f(Add(Origin(x#:Ray3D:)#1:Vector3D:, Direction(x#:Ray3D:)#1:Vector3D:)#1:$30:constraint=IAdditive:)#:$1412::)#2:$845:constraint=IVector:)#:(Tuple2, $1413:, $1414:):Ray3D
293. Line3D
  Signature : IGeometry_18:Library.Line3D(r: Ray3D): Line3D
  Body      : Tuple2(Origin(r), Add(Origin(r), Direction(r)))
  Inline    : Tuple2(Origin(r#:Ray3D:)#1:Vector3D:, Add(Origin(r#:Ray3D:)#1:Vector3D:, Direction(r#:Ray3D:)#1:Vector3D:)#1:$30:constraint=IAdditive:)#:(Tuple2, $1415:, $1416:):Line3D
294. Reverse
  Signature : IGeometry_18:Library.Reverse(r: Ray3D): Ray3D
  Body      : Tuple2(Origin(r), Negative(Direction(r)))
  Inline    : Tuple2(Origin(r#:Ray3D:)#1:Vector3D:, Negative(Direction(r#:Ray3D:)#1:Vector3D:)#1:$32:constraint=IAdditive:)#:(Tuple2, $1417:, $1418:):Ray3D
295. Area
  Signature : IGeometry_18:Library.Area(t: Triangle2D): Number
  Body      : Half(Add(Multiply(X(A(t)), Subtract(Y(C(t)), Y(B(t)))), Add(Multiply(X(B(t)), Subtract(Y(A(t)), Y(C(t)))), Multiply(X(C(t)), Subtract(Y(B(t)), Y(A(t)))))))
  Inline    : Half(Add(Multiply(X(A(t#:Triangle2D:)#1:Vector2D:)#1:Number:, Subtract(Y(C(t#:Triangle2D:)#1:Vector2D:)#1:Number:, Y(B(t#:Triangle2D:)#1:Vector2D:)#1:Number:)#2:Number:)#3:Number:, Add(Multiply(X(B(t#:Triangle2D:)#1:Vector2D:)#1:Number:, Subtract(Y(A(t#:Triangle2D:)#1:Vector2D:)#1:Number:, Y(C(t#:Triangle2D:)#1:Vector2D:)#1:Number:)#2:Number:)#3:Number:, Multiply(X(C(t#:Triangle2D:)#1:Vector2D:)#1:Number:, Subtract(Y(B(t#:Triangle2D:)#1:Vector2D:)#1:Number:, Y(A(t#:Triangle2D:)#1:Vector2D:)#1:Number:)#2:Number:)#3:Number:)#2:Number:)#2:Number:)#0::Number
296. Flip
  Signature : IGeometry_18:Library.Flip(t: Triangle2D): Triangle2D
  Body      : Tuple3(C(t), B(t), A(t))
  Inline    : Tuple3(C(t#:Triangle2D:)#1:Vector2D:, B(t#:Triangle2D:)#1:Vector2D:, A(t#:Triangle2D:)#1:Vector2D:)#:(Tuple3, $1419:, $1420:, $1421:):Triangle2D
297. Center
  Signature : IGeometry_18:Library.Center(t: Triangle2D): Vector2D
  Body      : Divide(Add(A(t), Add(B(t), C(t))), 3)
  Inline    : Divide(Add(A(t#:Triangle2D:)#1:Vector2D:, Add(B(t#:Triangle2D:)#1:Vector2D:, C(t#:Triangle2D:)#1:Vector2D:)#1:$30:constraint=IAdditive:)#1:$30:constraint=IAdditive:, 3#:Number:)#6:$825:constraint=INumerical:Vector2D
298. Barycentric
  Signature : IGeometry_18:Library.Barycentric(t: Triangle2D, uv: Vector2D): Vector2D
  Body      : Barycentric(A(t), B(t), C(t), uv)
  Inline    : Barycentric(A(t#:Triangle2D:)#1:Vector2D:, B(t#:Triangle2D:)#1:Vector2D:, C(t#:Triangle2D:)#1:Vector2D:, uv#:Vector2D:)#0::Vector2D
299. Flip
  Signature : IGeometry_18:Library.Flip(t: Triangle3D): Triangle3D
  Body      : Tuple3(C(t), B(t), A(t))
  Inline    : Tuple3(C(t#:Triangle3D:)#1:Vector3D:, B(t#:Triangle3D:)#1:Vector3D:, A(t#:Triangle3D:)#1:Vector3D:)#:(Tuple3, $1422:, $1423:, $1424:):Triangle3D
300. Normal
  Signature : IGeometry_18:Library.Normal(t: Triangle3D): Vector3D
  Body      : Normalize(Cross(Subtract(B(t), A(t)), Subtract(C(t), A(t))))
  Inline    : Normalize(Cross(Subtract(B(t#:Triangle3D:)#1:Vector3D:, A(t#:Triangle3D:)#1:Vector3D:)#1:$31:constraint=IAdditive:, Subtract(C(t#:Triangle3D:)#1:Vector3D:, A(t#:Triangle3D:)#1:Vector3D:)#1:$31:constraint=IAdditive:)#2:Number:)#0::Vector3D
301. Center
  Signature : IGeometry_18:Library.Center(t: Triangle3D): Vector3D
  Body      : Divide(Add(A(t), Add(B(t), C(t))), 3)
  Inline    : Divide(Add(A(t#:Triangle3D:)#1:Vector3D:, Add(B(t#:Triangle3D:)#1:Vector3D:, C(t#:Triangle3D:)#1:Vector3D:)#1:$30:constraint=IAdditive:)#1:$30:constraint=IAdditive:, 3#:Number:)#6:$825:constraint=INumerical:Vector3D
302. Plane
  Signature : IGeometry_18:Library.Plane(t: Triangle3D): Plane
  Body      : Tuple2(Normal(t), Dot(Normal(t), A(t)))
  Inline    : Tuple2(Normalize(Cross(Subtract(B(t#:Triangle3D:Triangle3D)#1:Vector3D:, A(t#:Triangle3D:Triangle3D)#1:Vector3D:)#1:$31:constraint=IAdditive:, Subtract(C(t#:Triangle3D:Triangle3D)#1:Vector3D:, A(t#:Triangle3D:Triangle3D)#1:Vector3D:)#1:$31:constraint=IAdditive:)#2:Number:)#1::, Dot(Normalize(Cross(Subtract(B(t#:Triangle3D:Triangle3D)#1:Vector3D:, A(t#:Triangle3D:Triangle3D)#1:Vector3D:)#1:$31:constraint=IAdditive:, Subtract(C(t#:Triangle3D:Triangle3D)#1:Vector3D:, A(t#:Triangle3D:Triangle3D)#1:Vector3D:)#1:$31:constraint=IAdditive:)#2:Number:)#1::, A(t#:Triangle3D:)#1:Vector3D:)#0::)#:(Tuple2, $1428:, $1429:):Plane
303. Barycentric
  Signature : IGeometry_18:Library.Barycentric(t: Triangle3D, uv: Vector2D): Vector3D
  Body      : Barycentric(A(t), B(t), C(t), uv)
  Inline    : Barycentric(A(t#:Triangle3D:)#1:Vector3D:, B(t#:Triangle3D:)#1:Vector3D:, C(t#:Triangle3D:)#1:Vector3D:, uv#:Vector2D:)#0::Vector3D
304. LineA
  Signature : IGeometry_18:Library.LineA(t: Triangle3D): Line3D
  Body      : Tuple2(A(t), B(t))
  Inline    : Tuple2(A(t#:Triangle3D:)#1:Vector3D:, B(t#:Triangle3D:)#1:Vector3D:)#:(Tuple2, $1430:, $1431:):Line3D
305. LineB
  Signature : IGeometry_18:Library.LineB(t: Triangle3D): Line3D
  Body      : Tuple2(B(t), C(t))
  Inline    : Tuple2(B(t#:Triangle3D:)#1:Vector3D:, C(t#:Triangle3D:)#1:Vector3D:)#:(Tuple2, $1432:, $1433:):Line3D
306. LineC
  Signature : IGeometry_18:Library.LineC(t: Triangle3D): Line3D
  Body      : Tuple2(C(t), A(t))
  Inline    : Tuple2(C(t#:Triangle3D:)#1:Vector3D:, A(t#:Triangle3D:)#1:Vector3D:)#:(Tuple2, $1434:, $1435:):Line3D
307. Deform
  Signature : IGeometry_18:Library.Deform(t: Triangle3D, f: (Function1, Vector3D, Vector3D)): Triangle3D
  Body      : Tuple3(f(A(t)), f(B(t)), f(C(t)))
  Inline    : Tuple3(f(A(t#:Triangle3D:)#1:Vector3D:)#:$1436::, f(B(t#:Triangle3D:)#1:Vector3D:)#:$1437::, f(C(t#:Triangle3D:)#1:Vector3D:)#:$1438::)#:(Tuple3, $1439:, $1440:, $1441:):Triangle3D
308. Barycentric
  Signature : IGeometry_18:Library.Barycentric(t: Triangle3D, uv: Vector2D): Vector3D
  Body      : Barycentric(A(t), B(t), C(t), uv)
  Inline    : Barycentric(A(t#:Triangle3D:)#1:Vector3D:, B(t#:Triangle3D:)#1:Vector3D:, C(t#:Triangle3D:)#1:Vector3D:, uv#:Vector2D:)#0::Vector3D
309. Width
  Signature : IGeometry_18:Library.Width(x: Rect2D): Number
  Body      : X(Size(x))
  Inline    : X(Size(x#:Rect2D:)#1:Vector2D:)#1:Number:Number
310. Height
  Signature : IGeometry_18:Library.Height(x: Rect2D): Number
  Body      : Y(Size(x))
  Inline    : Y(Size(x#:Rect2D:)#1:Vector2D:)#1:Number:Number
311. Left
  Signature : IGeometry_18:Library.Left(x: Rect2D): Number
  Body      : Subtract(X(Center(x)), Half(Width(x)))
  Inline    : Subtract(X(Center(x#:Rect2D:)#1:Vector2D:)#1:Number:, Half(X(Size(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:)#0::)#0::Number
312. Right
  Signature : IGeometry_18:Library.Right(x: Rect2D): Number
  Body      : Add(Left(x), Width(x))
  Inline    : Add(Subtract(X(Center(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:, Half(X(Size(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:)#0::)#1::, X(Size(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:)#2:Number:Number
313. Bottom
  Signature : IGeometry_18:Library.Bottom(x: Rect2D): Number
  Body      : Subtract(Y(Center(x)), Half(Height(x)))
  Inline    : Subtract(Y(Center(x#:Rect2D:)#1:Vector2D:)#1:Number:, Half(Y(Size(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:)#0::)#0::Number
314. Top
  Signature : IGeometry_18:Library.Top(x: Rect2D): Number
  Body      : Add(Bottom(x), Height(x))
  Inline    : Add(Subtract(Y(Center(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:, Half(Y(Size(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:)#0::)#1::, Y(Size(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:)#2:Number:Number
315. BottomLeft
  Signature : IGeometry_18:Library.BottomLeft(x: Rect2D): Vector2D
  Body      : Tuple2(Left(x), Bottom(x))
  Inline    : Tuple2(Subtract(X(Center(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:, Half(X(Size(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:)#0::)#1::, Subtract(Y(Center(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:, Half(Y(Size(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:)#0::)#1::)#:(Tuple2, $1188:, $1189:):Vector2D
316. BottomRight
  Signature : IGeometry_18:Library.BottomRight(x: Rect2D): Vector2D
  Body      : Tuple2(Right(x), Bottom(x))
  Inline    : Tuple2(Add(Subtract(X(Center(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:, Half(X(Size(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:)#0::)#1::, X(Size(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:)#1:Number:, Subtract(Y(Center(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:, Half(Y(Size(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:)#0::)#1::)#:(Tuple2, $1192:, $1193:):Vector2D
317. TopRight
  Signature : IGeometry_18:Library.TopRight(x: Rect2D): Vector2D
  Body      : Tuple2(Right(x), Top(x))
  Inline    : Tuple2(Add(Subtract(X(Center(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:, Half(X(Size(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:)#0::)#1::, X(Size(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:)#1:Number:, Add(Subtract(Y(Center(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:, Half(Y(Size(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:)#0::)#1::, Y(Size(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:)#1:Number:)#:(Tuple2, $1194:, $1195:):Vector2D
318. TopLeft
  Signature : IGeometry_18:Library.TopLeft(x: Rect2D): Vector2D
  Body      : Tuple2(Left(x), Top(x))
  Inline    : Tuple2(Subtract(X(Center(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:, Half(X(Size(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:)#0::)#1::, Add(Subtract(Y(Center(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:, Half(Y(Size(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:)#0::)#1::, Y(Size(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:)#1:Number:)#:(Tuple2, $1196:, $1197:):Vector2D
319. Quad2D
  Signature : IGeometry_18:Library.Quad2D(x: Rect2D): Quad2D
  Body      : Tuple4(BottomLeft(x), BottomRight(x), TopRight(x), TopLeft(x))
  Inline    : Tuple4(Tuple2(Subtract(X(Center(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:, Half(X(Size(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:)#0::)#1::, Subtract(Y(Center(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:, Half(Y(Size(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:)#0::)#1::)#1:(Tuple2, $1188:, $1189:):, Tuple2(Add(Subtract(X(Center(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:, Half(X(Size(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:)#0::)#1::, X(Size(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:)#1:Number:, Subtract(Y(Center(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:, Half(Y(Size(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:)#0::)#1::)#1:(Tuple2, $1192:, $1193:):, Tuple2(Add(Subtract(X(Center(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:, Half(X(Size(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:)#0::)#1::, X(Size(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:)#1:Number:, Add(Subtract(Y(Center(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:, Half(Y(Size(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:)#0::)#1::, Y(Size(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:)#1:Number:)#1:(Tuple2, $1194:, $1195:):, Tuple2(Subtract(X(Center(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:, Half(X(Size(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:)#0::)#1::, Add(Subtract(Y(Center(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:, Half(Y(Size(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:)#0::)#1::, Y(Size(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:)#1:Number:)#1:(Tuple2, $1196:, $1197:):)#:(Tuple4, $1198:, $1199:, $1200:, $1201:):Quad2D
320. Points
  Signature : IGeometry_18:Library.Points(x: Rect2D): $844:constraint=(IArray, Vector2D)
  Body      : Quad2D(x)
  Inline    : Tuple4(Tuple2(Subtract(X(Center(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:, Half(X(Size(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:)#0::)#1::, Subtract(Y(Center(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:, Half(Y(Size(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:)#0::)#1::)#1:(Tuple2, $1188:, $1189:):, Tuple2(Add(Subtract(X(Center(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:, Half(X(Size(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:)#0::)#1::, X(Size(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:)#1:Number:, Subtract(Y(Center(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:, Half(Y(Size(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:)#0::)#1::)#1:(Tuple2, $1192:, $1193:):, Tuple2(Add(Subtract(X(Center(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:, Half(X(Size(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:)#0::)#1::, X(Size(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:)#1:Number:, Add(Subtract(Y(Center(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:, Half(Y(Size(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:)#0::)#1::, Y(Size(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:)#1:Number:)#1:(Tuple2, $1194:, $1195:):, Tuple2(Subtract(X(Center(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:, Half(X(Size(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:)#0::)#1::, Add(Subtract(Y(Center(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:, Half(Y(Size(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:)#0::)#1::, Y(Size(x#:Rect2D:Rect2D)#1:Vector2D:)#1:Number:)#1:Number:)#1:(Tuple2, $1196:, $1197:):)#1:(Tuple4, $1198:, $1199:, $1200:, $1201:):
321. Flip
  Signature : IGeometry_18:Library.Flip(q: Quad2D): Quad2D
  Body      : Tuple4(D(q), C(q), B(q), A(q))
  Inline    : Tuple4(D(q#:Quad2D:)#1:Vector2D:, C(q#:Quad2D:)#1:Vector2D:, B(q#:Quad2D:)#1:Vector2D:, A(q#:Quad2D:)#1:Vector2D:)#:(Tuple4, $1442:, $1443:, $1444:, $1445:):Quad2D
322. Center
  Signature : IGeometry_18:Library.Center(q: Quad2D): Vector2D
  Body      : Divide(Add(A(q), Add(B(q), Add(C(q), D(q)))), 4)
  Inline    : Divide(Add(A(q#:Quad2D:)#1:Vector2D:, Add(B(q#:Quad2D:)#1:Vector2D:, Add(C(q#:Quad2D:)#1:Vector2D:, D(q#:Quad2D:)#1:Vector2D:)#1:$30:constraint=IAdditive:)#1:$30:constraint=IAdditive:)#1:$30:constraint=IAdditive:, 4#:Number:)#6:$825:constraint=INumerical:Vector2D
323. LineA
  Signature : IGeometry_18:Library.LineA(q: Quad2D): Line2D
  Body      : Tuple2(A(q), B(q))
  Inline    : Tuple2(A(q#:Quad2D:)#1:Vector2D:, B(q#:Quad2D:)#1:Vector2D:)#:(Tuple2, $1446:, $1447:):Line2D
324. LineB
  Signature : IGeometry_18:Library.LineB(q: Quad2D): Line2D
  Body      : Tuple2(B(q), C(q))
  Inline    : Tuple2(B(q#:Quad2D:)#1:Vector2D:, C(q#:Quad2D:)#1:Vector2D:)#:(Tuple2, $1448:, $1449:):Line2D
325. LineC
  Signature : IGeometry_18:Library.LineC(q: Quad2D): Line2D
  Body      : Tuple2(C(q), D(q))
  Inline    : Tuple2(C(q#:Quad2D:)#1:Vector2D:, D(q#:Quad2D:)#1:Vector2D:)#:(Tuple2, $1450:, $1451:):Line2D
326. LineD
  Signature : IGeometry_18:Library.LineD(q: Quad2D): Line2D
  Body      : Tuple2(D(q), A(q))
  Inline    : Tuple2(D(q#:Quad2D:)#1:Vector2D:, A(q#:Quad2D:)#1:Vector2D:)#:(Tuple2, $1452:, $1453:):Line2D
327. TriangleA
  Signature : IGeometry_18:Library.TriangleA(q: Quad2D): Triangle2D
  Body      : Tuple3(A(q), B(q), C(q))
  Inline    : Tuple3(A(q#:Quad2D:)#1:Vector2D:, B(q#:Quad2D:)#1:Vector2D:, C(q#:Quad2D:)#1:Vector2D:)#:(Tuple3, $1454:, $1455:, $1456:):Triangle2D
328. TriangleB
  Signature : IGeometry_18:Library.TriangleB(q: Quad2D): Triangle2D
  Body      : Tuple3(C(q), D(q), A(q))
  Inline    : Tuple3(C(q#:Quad2D:)#1:Vector2D:, D(q#:Quad2D:)#1:Vector2D:, A(q#:Quad2D:)#1:Vector2D:)#:(Tuple3, $1457:, $1458:, $1459:):Triangle2D
329. Flip
  Signature : IGeometry_18:Library.Flip(q: Quad3D): Quad3D
  Body      : Tuple4(D(q), C(q), B(q), A(q))
  Inline    : Tuple4(D(q#:Quad3D:)#1:Vector3D:, C(q#:Quad3D:)#1:Vector3D:, B(q#:Quad3D:)#1:Vector3D:, A(q#:Quad3D:)#1:Vector3D:)#:(Tuple4, $1460:, $1461:, $1462:, $1463:):Quad3D
330. Center
  Signature : IGeometry_18:Library.Center(q: Quad3D): Vector3D
  Body      : Divide(Add(A(q), Add(B(q), Add(C(q), D(q)))), 4)
  Inline    : Divide(Add(A(q#:Quad3D:)#1:Vector3D:, Add(B(q#:Quad3D:)#1:Vector3D:, Add(C(q#:Quad3D:)#1:Vector3D:, D(q#:Quad3D:)#1:Vector3D:)#1:$30:constraint=IAdditive:)#1:$30:constraint=IAdditive:)#1:$30:constraint=IAdditive:, 4#:Number:)#6:$825:constraint=INumerical:Vector3D
331. LineA
  Signature : IGeometry_18:Library.LineA(q: Quad3D): Line3D
  Body      : Tuple2(A(q), B(q))
  Inline    : Tuple2(A(q#:Quad3D:)#1:Vector3D:, B(q#:Quad3D:)#1:Vector3D:)#:(Tuple2, $1464:, $1465:):Line3D
332. LineB
  Signature : IGeometry_18:Library.LineB(q: Quad3D): Line3D
  Body      : Tuple2(B(q), C(q))
  Inline    : Tuple2(B(q#:Quad3D:)#1:Vector3D:, C(q#:Quad3D:)#1:Vector3D:)#:(Tuple2, $1466:, $1467:):Line3D
333. LineC
  Signature : IGeometry_18:Library.LineC(q: Quad3D): Line3D
  Body      : Tuple2(C(q), D(q))
  Inline    : Tuple2(C(q#:Quad3D:)#1:Vector3D:, D(q#:Quad3D:)#1:Vector3D:)#:(Tuple2, $1468:, $1469:):Line3D
334. LineD
  Signature : IGeometry_18:Library.LineD(q: Quad3D): Line3D
  Body      : Tuple2(D(q), A(q))
  Inline    : Tuple2(D(q#:Quad3D:)#1:Vector3D:, A(q#:Quad3D:)#1:Vector3D:)#:(Tuple2, $1470:, $1471:):Line3D
335. TriangleA
  Signature : IGeometry_18:Library.TriangleA(q: Quad3D): Triangle3D
  Body      : Tuple3(A(q), B(q), C(q))
  Inline    : Tuple3(A(q#:Quad3D:)#1:Vector3D:, B(q#:Quad3D:)#1:Vector3D:, C(q#:Quad3D:)#1:Vector3D:)#:(Tuple3, $1472:, $1473:, $1474:):Triangle3D
336. TriangleB
  Signature : IGeometry_18:Library.TriangleB(q: Quad3D): Triangle3D
  Body      : Tuple3(C(q), D(q), A(q))
  Inline    : Tuple3(C(q#:Quad3D:)#1:Vector3D:, D(q#:Quad3D:)#1:Vector3D:, A(q#:Quad3D:)#1:Vector3D:)#:(Tuple3, $1475:, $1476:, $1477:):Triangle3D
337. Deform
  Signature : IGeometry_18:Library.Deform(q: Quad3D, f: (Function1, Vector3D, Vector3D)): Quad3D
  Body      : Tuple4(f(A(q)), f(B(q)), f(C(q)), f(D(q)))
  Inline    : Tuple4(f(A(q#:Quad3D:)#1:Vector3D:)#:$1478::, f(B(q#:Quad3D:)#1:Vector3D:)#:$1479::, f(C(q#:Quad3D:)#1:Vector3D:)#:$1480::, f(D(q#:Quad3D:)#1:Vector3D:)#:$1481::)#:(Tuple4, $1482:, $1483:, $1484:, $1485:):Quad3D
338. Vector3D
  Signature : IGeometry_18:Library.Vector3D(v: Vector2D): Vector3D
  Body      : Tuple3(X(v), Y(v), 0)
  Inline    : Tuple3(X(v#:Vector2D:)#1:Number:, Y(v#:Vector2D:)#1:Number:, 0#:Integer:)#:(Tuple3, $1486:, $1487:, $1488:):Vector3D
339. MidPoint
  Signature : IGeometry_18:Library.MidPoint(a: Vector2D, b: Vector2D): Vector2D
  Body      : Divide(Add(a, b), 2)
  Inline    : Divide(Add(a#:Vector2D:, b#:Vector2D:)#1:$30:constraint=IAdditive:, 2#:Number:)#6:$825:constraint=INumerical:Vector2D
340. Line
  Signature : IGeometry_18:Library.Line(a: Vector2D, b: Vector2D): Line2D
  Body      : Tuple2(a, b)
  Inline    : Tuple2(a#:Vector2D:, b#:Vector2D:)#:(Tuple2, $1489:, $1490:):Line2D
341. Ray
  Signature : IGeometry_18:Library.Ray(a: Vector2D, b: Vector2D): Ray2D
  Body      : Tuple2(a, b)
  Inline    : Tuple2(a#:Vector2D:, b#:Vector2D:)#:(Tuple2, $1491:, $1492:):Ray2D
342. RayTo
  Signature : IGeometry_18:Library.RayTo(a: Vector2D, b: Vector2D): Ray2D
  Body      : Tuple2(a, Subtract(b, a))
  Inline    : Tuple2(a#:Vector2D:, Subtract(b#:Vector2D:, a#:Vector2D:)#1:$31:constraint=IAdditive:)#:(Tuple2, $1493:, $1494:):Ray2D
343. Cross
  Signature : IGeometry_18:Library.Cross(a: Vector2D, b: Vector2D): Number
  Body      : Subtract(Multiply(X(a), Y(b)), Multiply(Y(a), X(b)))
  Inline    : Subtract(Multiply(X(a#:Vector2D:)#1:Number:, Y(b#:Vector2D:)#1:Number:)#3:Number:, Multiply(Y(a#:Vector2D:)#1:Number:, X(b#:Vector2D:)#1:Number:)#3:Number:)#2:Number:Number
344. Vector4D
  Signature : IGeometry_18:Library.Vector4D(v: Vector3D): Vector4D
  Body      : ToVector4D(v, 0)
  Inline    : ToVector4D(v#:Vector3D:, 0#:Integer:)#0::Vector4D
345. ToVector4D
  Signature : IGeometry_18:Library.ToVector4D(v: Vector3D, w: Number): Vector4D
  Body      : Tuple4(X(v), Y(v), Z(v), w)
  Inline    : Tuple4(X(v#:Vector3D:)#1:Number:, Y(v#:Vector3D:)#1:Number:, Z(v#:Vector3D:)#1:Number:, w#:Number:)#:(Tuple4, $1084:, $1085:, $1086:, $1087:):Vector4D
346. XZY
  Signature : IGeometry_18:Library.XZY(v: Vector3D): Vector3D
  Body      : Tuple3(X(v), Z(v), Y(v))
  Inline    : Tuple3(X(v#:Vector3D:)#1:Number:, Z(v#:Vector3D:)#1:Number:, Y(v#:Vector3D:)#1:Number:)#:(Tuple3, $1495:, $1496:, $1497:):Vector3D
347. YXZ
  Signature : IGeometry_18:Library.YXZ(v: Vector3D): Vector3D
  Body      : Tuple3(Y(v), X(v), Z(v))
  Inline    : Tuple3(Y(v#:Vector3D:)#1:Number:, X(v#:Vector3D:)#1:Number:, Z(v#:Vector3D:)#1:Number:)#:(Tuple3, $1498:, $1499:, $1500:):Vector3D
348. YZX
  Signature : IGeometry_18:Library.YZX(v: Vector3D): Vector3D
  Body      : Tuple3(Y(v), Z(v), X(v))
  Inline    : Tuple3(Y(v#:Vector3D:)#1:Number:, Z(v#:Vector3D:)#1:Number:, X(v#:Vector3D:)#1:Number:)#:(Tuple3, $1501:, $1502:, $1503:):Vector3D
349. ZXY
  Signature : IGeometry_18:Library.ZXY(v: Vector3D): Vector3D
  Body      : Tuple3(Z(v), X(v), Y(v))
  Inline    : Tuple3(Z(v#:Vector3D:)#1:Number:, X(v#:Vector3D:)#1:Number:, Y(v#:Vector3D:)#1:Number:)#:(Tuple3, $1504:, $1505:, $1506:):Vector3D
350. ZYX
  Signature : IGeometry_18:Library.ZYX(v: Vector3D): Vector3D
  Body      : Tuple3(Z(v), Y(v), X(v))
  Inline    : Tuple3(Z(v#:Vector3D:)#1:Number:, Y(v#:Vector3D:)#1:Number:, X(v#:Vector3D:)#1:Number:)#:(Tuple3, $1507:, $1508:, $1509:):Vector3D
351. XY
  Signature : IGeometry_18:Library.XY(v: Vector3D): Vector2D
  Body      : Tuple2(X(v), Y(v))
  Inline    : Tuple2(X(v#:Vector3D:)#1:Number:, Y(v#:Vector3D:)#1:Number:)#:(Tuple2, $1510:, $1511:):Vector2D
352. YX
  Signature : IGeometry_18:Library.YX(v: Vector3D): Vector2D
  Body      : Tuple2(Y(v), X(v))
  Inline    : Tuple2(Y(v#:Vector3D:)#1:Number:, X(v#:Vector3D:)#1:Number:)#:(Tuple2, $1512:, $1513:):Vector2D
353. XZ
  Signature : IGeometry_18:Library.XZ(v: Vector3D): Vector2D
  Body      : Tuple2(X(v), Z(v))
  Inline    : Tuple2(X(v#:Vector3D:)#1:Number:, Z(v#:Vector3D:)#1:Number:)#:(Tuple2, $1514:, $1515:):Vector2D
354. ZX
  Signature : IGeometry_18:Library.ZX(v: Vector3D): Vector2D
  Body      : Tuple2(Z(v), X(v))
  Inline    : Tuple2(Z(v#:Vector3D:)#1:Number:, X(v#:Vector3D:)#1:Number:)#:(Tuple2, $1516:, $1517:):Vector2D
355. YZ
  Signature : IGeometry_18:Library.YZ(v: Vector3D): Vector2D
  Body      : Tuple2(Y(v), Z(v))
  Inline    : Tuple2(Y(v#:Vector3D:)#1:Number:, Z(v#:Vector3D:)#1:Number:)#:(Tuple2, $1518:, $1519:):Vector2D
356. ZY
  Signature : IGeometry_18:Library.ZY(v: Vector3D): Vector2D
  Body      : Tuple2(Z(v), Y(v))
  Inline    : Tuple2(Z(v#:Vector3D:)#1:Number:, Y(v#:Vector3D:)#1:Number:)#:(Tuple2, $1520:, $1521:):Vector2D
357. MidPoint
  Signature : IGeometry_18:Library.MidPoint(a: Vector3D, b: Vector3D): Vector3D
  Body      : Divide(Add(a, b), 2)
  Inline    : Divide(Add(a#:Vector3D:, b#:Vector3D:)#1:$30:constraint=IAdditive:, 2#:Number:)#6:$825:constraint=INumerical:Vector3D
358. Line
  Signature : IGeometry_18:Library.Line(a: Vector3D, b: Vector3D): Line3D
  Body      : Tuple2(a, b)
  Inline    : Tuple2(a#:Vector3D:, b#:Vector3D:)#:(Tuple2, $1522:, $1523:):Line3D
359. Ray
  Signature : IGeometry_18:Library.Ray(a: Vector3D, b: Vector3D): Ray3D
  Body      : Tuple2(a, b)
  Inline    : Tuple2(a#:Vector3D:, b#:Vector3D:)#:(Tuple2, $1524:, $1525:):Ray3D
360. RayTo
  Signature : IGeometry_18:Library.RayTo(a: Vector3D, b: Vector3D): Ray3D
  Body      : Tuple2(a, Subtract(b, a))
  Inline    : Tuple2(a#:Vector3D:, Subtract(b#:Vector3D:, a#:Vector3D:)#1:$31:constraint=IAdditive:)#:(Tuple2, $1526:, $1527:):Ray3D
361. Project
  Signature : IGeometry_18:Library.Project(v: Vector3D, p: Plane): Vector3D
  Body      : Subtract(v, Multiply(Normal(p), Dot(Normal(p), v)))
  Inline    : Subtract(v#:Vector3D:, Multiply(Normal(p#:Plane:)#1:Vector3D:, Dot(Normal(p#:Plane:)#1:Vector3D:, v#:Vector3D:)#0::)#0::)#0::Vector3D
362. Deform
  Signature : IGeometry_18:Library.Deform(v: Vector3D, f: (Function1, Vector3D, Vector3D)): Vector3D
  Body      : f(v)
  Inline    : f(v#:Vector3D:)#:$1528::Vector3D
363. To2D
  Signature : IGeometry_18:Library.To2D(v: Vector3D): Vector2D
  Body      : Tuple2(X(v), Y(v))
  Inline    : Tuple2(X(v#:Vector3D:)#1:Number:, Y(v#:Vector3D:)#1:Number:)#:(Tuple2, $1529:, $1530:):Vector2D
364. Cross
  Signature : IGeometry_18:Library.Cross(a: Vector3D, b: Vector3D): Vector3D
  Body      : Tuple3(Subtract(Multiply(Y(a), Z(b)), Multiply(Z(a), Y(b))), Subtract(Multiply(Z(a), X(b)), Multiply(X(a), Z(b))), Subtract(Multiply(X(a), Y(b)), Multiply(Y(a), X(b))))
  Inline    : Tuple3(Subtract(Multiply(Y(a#:Vector3D:)#1:Number:, Z(b#:Vector3D:)#1:Number:)#3:Number:, Multiply(Z(a#:Vector3D:)#1:Number:, Y(b#:Vector3D:)#1:Number:)#3:Number:)#2:Number:, Subtract(Multiply(Z(a#:Vector3D:)#1:Number:, X(b#:Vector3D:)#1:Number:)#3:Number:, Multiply(X(a#:Vector3D:)#1:Number:, Z(b#:Vector3D:)#1:Number:)#3:Number:)#2:Number:, Subtract(Multiply(X(a#:Vector3D:)#1:Number:, Y(b#:Vector3D:)#1:Number:)#3:Number:, Multiply(Y(a#:Vector3D:)#1:Number:, X(b#:Vector3D:)#1:Number:)#3:Number:)#2:Number:)#:(Tuple3, $1425:, $1426:, $1427:):Vector3D
365. MixedProduct
  Signature : IGeometry_18:Library.MixedProduct(a: Vector3D, b: Vector3D, c: Vector3D): Number
  Body      : Dot(Cross(a, b), c)
  Inline    : Dot(Tuple3(Subtract(Multiply(Y(a#:Vector3D:Vector3D)#1:Number:, Z(b#:Vector3D:Vector3D)#1:Number:)#3:Number:, Multiply(Z(a#:Vector3D:Vector3D)#1:Number:, Y(b#:Vector3D:Vector3D)#1:Number:)#3:Number:)#2:Number:, Subtract(Multiply(Z(a#:Vector3D:Vector3D)#1:Number:, X(b#:Vector3D:Vector3D)#1:Number:)#3:Number:, Multiply(X(a#:Vector3D:Vector3D)#1:Number:, Z(b#:Vector3D:Vector3D)#1:Number:)#3:Number:)#2:Number:, Subtract(Multiply(X(a#:Vector3D:Vector3D)#1:Number:, Y(b#:Vector3D:Vector3D)#1:Number:)#3:Number:, Multiply(Y(a#:Vector3D:Vector3D)#1:Number:, X(b#:Vector3D:Vector3D)#1:Number:)#3:Number:)#2:Number:)#1:(Tuple3, $1425:, $1426:, $1427:):, c#:Vector3D:)#0::Number
366. Count
  Signature : IGeometry_18:Library.Count(c: Complex): Integer
  Body      : 2
  Inline    : 2#:Integer:Integer
367. Count
  Signature : IGeometry_18:Library.Count(v: Vector2D): Integer
  Body      : 2
  Inline    : 2#:Integer:Integer
368. Count
  Signature : IGeometry_18:Library.Count(v: Vector3D): Integer
  Body      : 3
  Inline    : 3#:Integer:Integer
369. Count
  Signature : IGeometry_18:Library.Count(v: Vector4D): Integer
  Body      : 4
  Inline    : 4#:Integer:Integer
370. At
  Signature : IGeometry_18:Library.At(c: Complex, n: Integer): Number
  Body      : (Equals(n, 0)?IReal(c):Imaginary(c))
  Inline    : (Equals(n#:Integer:, 0#:Integer:)#2:Boolean:Boolean?IReal(c#:Complex:)#1:Number::Imaginary(c#:Complex:)#1:Number:)#:Number:Number
371. At
  Signature : IGeometry_18:Library.At(v: Vector2D, n: Integer): Number
  Body      : (Equals(n, 0)?X(v):Y(v))
  Inline    : (Equals(n#:Integer:, 0#:Integer:)#2:Boolean:Boolean?X(v#:Vector2D:)#1:Number::Y(v#:Vector2D:)#1:Number:)#:Number:Number
372. At
  Signature : IGeometry_18:Library.At(v: Vector3D, n: Integer): Number
  Body      : (Equals(n, 0)?X(v):(Equals(n, 1)?Y(v):Z(v)))
  Inline    : (Equals(n#:Integer:, 0#:Integer:)#2:Boolean:Boolean?X(v#:Vector3D:)#1:Number::(Equals(n#:Integer:, 1#:Integer:)#2:Boolean:Boolean?Y(v#:Vector3D:)#1:Number::Z(v#:Vector3D:)#1:Number:)#:Number:)#:Number:Number
373. At
  Signature : IGeometry_18:Library.At(v: Vector4D, n: Integer): Number
  Body      : (Equals(n, 0)?X(v):(Equals(n, 1)?Y(v):(Equals(n, 2)?Z(v):W(v))))
  Inline    : (Equals(n#:Integer:, 0#:Integer:)#2:Boolean:Boolean?X(v#:Vector4D:)#1:Number::(Equals(n#:Integer:, 1#:Integer:)#2:Boolean:Boolean?Y(v#:Vector4D:)#1:Number::(Equals(n#:Integer:, 2#:Integer:)#2:Boolean:Boolean?Z(v#:Vector4D:)#1:Number::W(v#:Vector4D:)#1:Number:)#:Number:)#:Number:)#:Number:Number
374. ToVector3D
  Signature : IGeometry_18:Library.ToVector3D(v: Vector4D): Vector3D
  Body      : Tuple3(X(v), Y(v), Z(v))
  Inline    : Tuple3(X(v#:Vector4D:)#1:Number:, Y(v#:Vector4D:)#1:Number:, Z(v#:Vector4D:)#1:Number:)#:(Tuple3, $1531:, $1532:, $1533:):Vector3D
375. Length
  Signature : IGeometry_18:Library.Length(a: IVector): Number
  Body      : Magnitude(a)
  Inline    : Pow(Reduce(Multiply(a#:IVector:IVector, a#:IVector:IVector)#1:$36:constraint=IMultiplicative:, 0#:Number:, (a, b) => Add(a, b)#:(Function2, $1344:, $1345:, $1346:):)#1::, 0.5#:Number:)#1:Number:
376. LengthSquared
  Signature : IGeometry_18:Library.LengthSquared(a: IVector): Number
  Body      : MagnitudeSquared(a)
  Inline    : Reduce(Multiply(a#:IVector:IVector, a#:IVector:IVector)#1:$36:constraint=IMultiplicative:, 0#:Number:, (a, b) => Add(a, b)#:(Function2, $1344:, $1345:, $1346:):)#1::
377. Sum
  Signature : IGeometry_18:Library.Sum(v: IVector): Number
  Body      : Reduce(v, 0, (a, b) => Add(a, b))
  Inline    : Reduce(v#:IVector:, 0#:Number:, (a, b) => Add(a, b)#:(Function2, $1344:, $1345:, $1346:):)#0::Number
378. SumSquares
  Signature : IGeometry_18:Library.SumSquares(v: IVector): Number
  Body      : Sum(Square(v))
  Inline    : Reduce(Multiply(v#:IVector:IArithmetic, v#:IVector:IArithmetic)#1:$36:constraint=IMultiplicative:, 0#:Number:, (a, b) => Add(a, b)#:(Function2, $1344:, $1345:, $1346:):)#1::
379. MagnitudeSquared
  Signature : IGeometry_18:Library.MagnitudeSquared(v: IVector): Number
  Body      : SumSquares(v)
  Inline    : Reduce(Multiply(v#:IVector:IVector, v#:IVector:IVector)#1:$36:constraint=IMultiplicative:, 0#:Number:, (a, b) => Add(a, b)#:(Function2, $1344:, $1345:, $1346:):)#1::
380. Magnitude
  Signature : IGeometry_18:Library.Magnitude(v: IVector): Number
  Body      : SquareRoot(MagnitudeSquared(v))
  Inline    : Pow(Reduce(Multiply(v#:IVector:IVector, v#:IVector:IVector)#1:$36:constraint=IMultiplicative:, 0#:Number:, (a, b) => Add(a, b)#:(Function2, $1344:, $1345:, $1346:):)#1::, 0.5#:Number:)#1:Number:
381. Dot
  Signature : IGeometry_18:Library.Dot(v1: IVector, v2: IVector): Number
  Body      : Sum(Multiply(v1, v2))
  Inline    : Reduce(Multiply(v1#:IVector:, v2#:IVector:)#2:$830:constraint=IVector:IVector, 0#:Number:, (a, b) => Add(a, b)#:(Function2, $1344:, $1345:, $1346:):)#1::
382. Average
  Signature : IGeometry_18:Library.Average(v: IVector): Number
  Body      : Divide(Sum(v), Count(v))
  Inline    : Divide(Reduce(v#:IVector:IVector, 0#:Number:, (a, b) => Add(a, b)#:(Function2, $1344:, $1345:, $1346:):)#1::, Count(v#:IVector:)#1:Integer:)#1:$38:constraint=IDivisible:Number
383. Normalize
  Signature : IGeometry_18:Library.Normalize(x: IVector): $845:constraint=IVector
  Body      : (GreaterThan(MagnitudeSquared(x), 0)?Divide(x, Magnitude(x)):Zero(x))
  Inline    : (GreaterThan(Reduce(Multiply(x#:IVector:IVector, x#:IVector:IVector)#1:$36:constraint=IMultiplicative:, 0#:Number:, (a, b) => Add(a, b)#:(Function2, $1344:, $1345:, $1346:):)#1::, 0#:Integer:)#0::Boolean?Divide(x#:IVector:, Pow(Reduce(Multiply(x#:IVector:IVector, x#:IVector:IVector)#1:$36:constraint=IMultiplicative:, 0#:Number:, (a, b) => Add(a, b)#:(Function2, $1344:, $1345:, $1346:):)#1::, 0.5#:Number:)#1:Number:)#3:$825:constraint=INumerical::MapComponents(x#:IVector:INumerical, (i) => 0#:(Function1, $1347:, $1348:):)#1::)#:$825:constraint=INumerical:$845:constraint=IVector
384. Reflect
  Signature : IGeometry_18:Library.Reflect(v: IVector, normal: IVector): $846:constraint=IVector
  Body      : Subtract(v, Multiply(normal, Multiply(Dot(v, normal), 2)))
  Inline    : Subtract(v#:IVector:, Multiply(normal#:IVector:, Multiply(Reduce(Multiply(v#:IVector:IVector, normal#:IVector:IVector)#2:$830:constraint=IVector:IVector, 0#:Number:, (a, b) => Add(a, b)#:(Function2, $1344:, $1345:, $1346:):)#1::, 2#:Number:)#3:Number:)#3:$824:constraint=INumerical:)#2:$828:constraint=INumerical:$846:constraint=IVector
385. Project
  Signature : IGeometry_18:Library.Project(v: IVector, other: IVector): $847:constraint=IVector
  Body      : Multiply(other, Dot(v, other))
  Inline    : Multiply(other#:IVector:, Reduce(Multiply(v#:IVector:IVector, other#:IVector:IVector)#2:$830:constraint=IVector:IVector, 0#:Number:, (a, b) => Add(a, b)#:(Function2, $1344:, $1345:, $1346:):)#1::)#3:$824:constraint=INumerical:$847:constraint=IVector
386. Distance
  Signature : IGeometry_18:Library.Distance(a: IVector, b: IVector): Number
  Body      : Magnitude(Subtract(b, a))
  Inline    : Magnitude(Subtract(b#:IVector:, a#:IVector:)#2:$828:constraint=INumerical:)#3:Number:Number
387. DistanceSquared
  Signature : IGeometry_18:Library.DistanceSquared(a: IVector, b: IVector): Number
  Body      : Magnitude(Subtract(b, a))
  Inline    : Magnitude(Subtract(b#:IVector:, a#:IVector:)#2:$828:constraint=INumerical:)#3:Number:Number
388. Angle
  Signature : IGeometry_18:Library.Angle(a: IVector, b: IVector): Angle
  Body      : Acos(Divide(Dot(a, b), Multiply(Magnitude(a), Magnitude(b))))
  Inline    : Acos(Divide(Reduce(Multiply(a#:IVector:IVector, b#:IVector:IVector)#2:$830:constraint=IVector:IVector, 0#:Number:, (a, b) => Add(a, b)#:(Function2, $1344:, $1345:, $1346:):)#1::, Multiply(Pow(Reduce(Multiply(a#:IVector:IVector, a#:IVector:IVector)#1:$36:constraint=IMultiplicative:, 0#:Number:, (a, b) => Add(a, b)#:(Function2, $1344:, $1345:, $1346:):)#1::, 0.5#:Number:)#1:Number:, Pow(Reduce(Multiply(b#:IVector:IVector, b#:IVector:IVector)#1:$36:constraint=IMultiplicative:, 0#:Number:, (a, b) => Add(a, b)#:(Function2, $1344:, $1345:, $1346:):)#1::, 0.5#:Number:)#1:Number:)#3:Number:)#3:Number:)#1:Angle:Angle
389. IsParallel
  Signature : IGeometry_18:Library.IsParallel(a: Vector3D, b: Vector3D): Boolean
  Body      : GreaterThan(Abs(Dot(a, b)), Subtract(1, 1E-06))
  Inline    : GreaterThan(Abs(Dot(a#:Vector3D:, b#:Vector3D:)#0::)#0::, Subtract(1#:Number:, 1E-06#:Number:)#2:Number:)#0::Boolean
390. Center
  Signature : IGeometry_18:Library.Center(x: Bounds3D): Vector3D
  Body      : Half(Add(Min(x), Max(x)))
  Inline    : Divide(Add(Min(x#:Bounds3D:)#2:$47::, Max(x#:Bounds3D:)#2:$49::)#6:$822:constraint=INumberLike:IScalarArithmetic, 2#:Number:)#1:$34:constraint=IScalarArithmetic:
391. Corners
  Signature : IGeometry_18:Library.Corners(x: Bounds3D): $848:constraint=(IArray, Vector3D)
  Body      : [Tuple3(X(Min(x)), Y(Min(x)), Z(Min(x))), Tuple3(X(Max(x)), Y(Min(x)), Z(Min(x))), Tuple3(X(Min(x)), Y(Max(x)), Z(Min(x))), Tuple3(X(Max(x)), Y(Max(x)), Z(Min(x))), Tuple3(X(Min(x)), Y(Min(x)), Z(Max(x))), Tuple3(X(Max(x)), Y(Min(x)), Z(Max(x))), Tuple3(X(Min(x)), Y(Max(x)), Z(Max(x))), Tuple3(X(Max(x)), Y(Max(x)), Z(Max(x)))]
  Inline    : [Tuple3(X(Min(x#::)#0::)#0::, Y(Min(x#::)#0::)#0::, Z(Min(x#::)#0::)#0::)#::, Tuple3(X(Max(x#::)#0::)#0::, Y(Min(x#::)#0::)#0::, Z(Min(x#::)#0::)#0::)#::, Tuple3(X(Min(x#::)#0::)#0::, Y(Max(x#::)#0::)#0::, Z(Min(x#::)#0::)#0::)#::, Tuple3(X(Max(x#::)#0::)#0::, Y(Max(x#::)#0::)#0::, Z(Min(x#::)#0::)#0::)#::, Tuple3(X(Min(x#::)#0::)#0::, Y(Min(x#::)#0::)#0::, Z(Max(x#::)#0::)#0::)#::, Tuple3(X(Max(x#::)#0::)#0::, Y(Min(x#::)#0::)#0::, Z(Max(x#::)#0::)#0::)#::, Tuple3(X(Min(x#::)#0::)#0::, Y(Max(x#::)#0::)#0::, Z(Max(x#::)#0::)#0::)#::, Tuple3(X(Max(x#::)#0::)#0::, Y(Max(x#::)#0::)#0::, Z(Max(x#::)#0::)#0::)#::]#:(IArray, $1534:):$848:constraint=(IArray, Vector3D)
392. Empty
  Signature : IGeometry_18:Library.Empty(_: Bounds3D): Bounds3D
  Body      : Tuple2(MaxValue(Vector3D), MinValue(Vector3D))
  Inline    : Tuple2(MaxValue(Vector3D#:IAny:)#0::, MinValue(Vector3D#:IAny:)#0::)#:(Tuple2, $1541:, $1542:):Bounds3D
393. Bounds
  Signature : IGeometry_18:Library.Bounds(xs: (IArray, Vector3D)): Bounds3D
  Body      : Reduce(xs, Empty(Bounds3D), (a, b) => Include(a, b))
  Inline    : Reduce(xs#:(IArray, Vector3D):, Empty(Bounds3D#:IAny:)#0::, (a, b) => Include(a, b)#:(Function2, $1543:, $1544:, $1545:):)#0::Bounds3D
394. Closed
  Signature : IGeometry_18:Library.Closed(x: IClosedShape): Boolean
  Body      : True
  Inline    : True#:Boolean:Boolean
395. Closed
  Signature : IGeometry_18:Library.Closed(x: IOpenShape): Boolean
  Body      : False
  Inline    : False#:Boolean:Boolean
396. CirclePoints
  Signature : IGeometry_18:Library.CirclePoints(n: Integer): $849:constraint=(IArray, Vector2D)
  Body      : Map(Fractions(n), (x) => UnitCircle(Turns(x)))
  Inline    : Map(Map(MapRange(n#:Integer:Integer, (i) => i#:(Function1, $1071:, $1072:):)#1::, (i) => FloatDivision(i, Subtract(x, 1))#:(Function1, $1202:, $1203:):)#1::, (x) => UnitCircle(Turns(x))#:(Function1, $1204:, $1205:):)#0::$849:constraint=(IArray, Vector2D)
397. Points
  Signature : IGeometry_18:Library.Points(x: RegularPolygon): $850:constraint=(IArray, Vector2D)
  Body      : CirclePoints(NumPoints(x))
  Inline    : Map(Map(MapRange(NumPoints(x#:RegularPolygon:)#1:Integer:Integer, (i) => i#:(Function1, $1071:, $1072:):)#1::, (i) => FloatDivision(i, Subtract(x, 1))#:(Function1, $1202:, $1203:):)#1::, (x) => UnitCircle(Turns(x))#:(Function1, $1204:, $1205:):)#1::
398. At
  Signature : IGeometry_18:Library.At(x: RegularPolygon, n: Integer): Vector2D
  Body      : UnitCircle(Turns(Divide(Number(n), NumPoints(x))))
  Inline    : Tuple2(Cos(Turns(Divide(Number(n#:Integer:)#1:Number:, NumPoints(x#:RegularPolygon:)#1:Integer:)#1:$38:constraint=IDivisible:)#2:Angle:Angle)#1:Number:, Sin(Turns(Divide(Number(n#:Integer:)#1:Number:, NumPoints(x#:RegularPolygon:)#1:Integer:)#1:$38:constraint=IDivisible:)#2:Angle:Angle)#1:Number:)#1:(Tuple2, $1169:, $1170:):
399. Count
  Signature : IGeometry_18:Library.Count(x: RegularPolygon): Integer
  Body      : NumPoints(x)
  Inline    : NumPoints(x#:RegularPolygon:)#1:Integer:Integer
400. Eval
  Signature : IGeometry_18:Library.Eval(x: Line2D, t: Number): Vector2D
  Body      : Lerp(A(x), B(x), t)
  Inline    : Lerp(A(x#:Line2D:)#1:Vector2D:, B(x#:Line2D:)#1:Vector2D:, t#:Number:)#0::Vector2D
401. Eval
  Signature : IGeometry_18:Library.Eval(x: Line3D, t: Number): Vector3D
  Body      : Lerp(A(x), B(x), t)
  Inline    : Lerp(A(x#:Line3D:)#1:Vector3D:, B(x#:Line3D:)#1:Vector3D:, t#:Number:)#0::Vector3D
402. Faces
  Signature : IGeometry_18:Library.Faces(g: ITriangleMesh2D): $851:constraint=(IArray, Triangle2D)
  Body      : Triangles(g)
  Inline    : Triangles(g#:ITriangleMesh2D:)#3:$867:constraint=(IArray, Triangle2D):$851:constraint=(IArray, Triangle2D)
403. Faces
  Signature : IGeometry_18:Library.Faces(g: ITriangleMesh3D): $852:constraint=(IArray, Triangle3D)
  Body      : Triangles(g)
  Inline    : Triangles(g#:ITriangleMesh3D:)#3:$868:constraint=(IArray, Triangle3D):$852:constraint=(IArray, Triangle3D)
404. Faces
  Signature : IGeometry_18:Library.Faces(g: IQuadMesh2D): $853:constraint=(IArray, Quad2D)
  Body      : Quads(g)
  Inline    : Quads(g#:IQuadMesh2D:)#3:$869:constraint=(IArray, Quad2D):$853:constraint=(IArray, Quad2D)
405. Faces
  Signature : IGeometry_18:Library.Faces(g: IQuadMesh3D): $854:constraint=(IArray, Quad3D)
  Body      : Quads(g)
  Inline    : Quads(g#:IQuadMesh3D:)#3:$870:constraint=(IArray, Quad3D):$854:constraint=(IArray, Quad3D)
406. NumFaces
  Signature : IGeometry_18:Library.NumFaces(g: IIndexedGeometry): Integer
  Body      : NumPrimitives(g)
  Inline    : NumPrimitives(g#:IIndexedGeometry:)#2:Integer:Integer
407. FaceIndices
  Signature : IGeometry_18:Library.FaceIndices(g: IIndexedGeometry, f: Integer): $855:constraint=(IArray, Integer)
  Body      : NthSlice(Indices(g), f, PrimitiveSize(g))
  Inline    : MapRange(PrimitiveSize(g#:IIndexedGeometry:)#1:Integer:Integer, (i) => At(xs, Add(i, from))#:(Function1, $1174:, $1175:):)#1::
408. FaceVertices
  Signature : IGeometry_18:Library.FaceVertices(g: IIndexedGeometry2D, f: Integer): $856:constraint=(IArray, Vector2D)
  Body      : Map(FaceIndices(g, f), (i) => Vertex(g, i))
  Inline    : Map(MapRange(PrimitiveSize(g#:IIndexedGeometry2D:IIndexedGeometry)#1:Integer:Integer, (i) => At(xs, Add(i, from))#:(Function1, $1174:, $1175:):)#1::, (i) => Vertex(g, i)#:(Function1, $1546:, $1547:):)#0::$856:constraint=(IArray, Vector2D)
409. FaceVertices
  Signature : IGeometry_18:Library.FaceVertices(g: IIndexedGeometry3D, f: Integer): $857:constraint=(IArray, Vector3D)
  Body      : Map(FaceIndices(g, f), (i) => Vertex(g, i))
  Inline    : Map(MapRange(PrimitiveSize(g#:IIndexedGeometry3D:IIndexedGeometry)#1:Integer:Integer, (i) => At(xs, Add(i, from))#:(Function1, $1174:, $1175:):)#1::, (i) => Vertex(g, i)#:(Function1, $1548:, $1549:):)#0::$857:constraint=(IArray, Vector3D)
410. AllFaceIndices
  Signature : IGeometry_18:Library.AllFaceIndices(g: IIndexedGeometry): $858:constraint=(IArray, (IArray, Integer))
  Body      : Slices(Indices(g), PrimitiveSize(g))
  Inline    : MapRange(Divide(Count(Indices(g#:IIndexedGeometry:)#1:$86:constraint=(IArray, Integer):(IArray, $631:))#1:Integer:, PrimitiveSize(g#:IIndexedGeometry:)#1:Integer:Integer)#2:Integer:, (i) => NthSlice(xs, i, size)#:(Function1, $1176:, $1177:):)#1::
411. Vertex
  Signature : IGeometry_18:Library.Vertex(g: IIndexedGeometry2D, n: Integer): Vector2D
  Body      : At(Points(g), At(Indices(g), n))
  Inline    : At(Points(g#:IIndexedGeometry2D:)#2:$70:constraint=(IArray, Vector2D):, At(Indices(g#:IIndexedGeometry2D:)#1:$86:constraint=(IArray, Integer):, n#:Integer:)#10:$618::)#10:$618::Vector2D
412. Vertex
  Signature : IGeometry_18:Library.Vertex(g: IIndexedGeometry3D, n: Integer): Vector3D
  Body      : At(Points(g), At(Indices(g), n))
  Inline    : At(Points(g#:IIndexedGeometry3D:)#2:$70:constraint=(IArray, Vector2D):, At(Indices(g#:IIndexedGeometry3D:)#1:$86:constraint=(IArray, Integer):, n#:Integer:)#10:$618::)#10:$618::Vector3D
413. Vertices
  Signature : IGeometry_18:Library.Vertices(g: IIndexedGeometry2D, xs: (IArray, Integer)): $859:constraint=(IArray, Vector2D)
  Body      : Map(xs, (i) => Vertex(g, i))
  Inline    : Map(xs#:(IArray, Integer):, (i) => Vertex(g, i)#:(Function1, $1550:, $1551:):)#0::$859:constraint=(IArray, Vector2D)
414. Vertices
  Signature : IGeometry_18:Library.Vertices(g: IIndexedGeometry3D, xs: (IArray, Integer)): $860:constraint=(IArray, Vector3D)
  Body      : Map(xs, (i) => Vertex(g, i))
  Inline    : Map(xs#:(IArray, Integer):, (i) => Vertex(g, i)#:(Function1, $1552:, $1553:):)#0::$860:constraint=(IArray, Vector3D)
415. AllFaceVertices
  Signature : IGeometry_18:Library.AllFaceVertices(g: IIndexedGeometry2D): $861:constraint=(IArray, (IArray, Vector2D))
  Body      : Map(Slices(Indices(g), PrimitiveSize(g)), (xs) => Vertices(g, xs))
  Inline    : Map(MapRange(Divide(Count(Indices(g#:IIndexedGeometry2D:)#1:$86:constraint=(IArray, Integer):(IArray, $631:))#1:Integer:, PrimitiveSize(g#:IIndexedGeometry2D:)#1:Integer:Integer)#2:Integer:, (i) => NthSlice(xs, i, size)#:(Function1, $1176:, $1177:):)#1::, (xs) => Vertices(g, xs)#:(Function1, $1284:, $1285:):)#0::$861:constraint=(IArray, (IArray, Vector2D))
416. AllFaceVertices
  Signature : IGeometry_18:Library.AllFaceVertices(g: IIndexedGeometry3D): $862:constraint=(IArray, (IArray, Vector3D))
  Body      : Map(Slices(Indices(g), PrimitiveSize(g)), (xs) => Vertices(g, xs))
  Inline    : Map(MapRange(Divide(Count(Indices(g#:IIndexedGeometry3D:)#1:$86:constraint=(IArray, Integer):(IArray, $631:))#1:Integer:, PrimitiveSize(g#:IIndexedGeometry3D:)#1:Integer:Integer)#2:Integer:, (i) => NthSlice(xs, i, size)#:(Function1, $1176:, $1177:):)#1::, (xs) => Vertices(g, xs)#:(Function1, $1252:, $1253:):)#0::$862:constraint=(IArray, (IArray, Vector3D))
417. AllVertices
  Signature : IGeometry_18:Library.AllVertices(g: IIndexedGeometry2D): $863:constraint=(IArray, Vector2D)
  Body      : Vertices(g, Indices(g))
  Inline    : Map(Indices(g#:IIndexedGeometry2D:)#1:$86:constraint=(IArray, Integer):(IArray, Integer), (i) => Vertex(g, i)#:(Function1, $1550:, $1551:):)#1::
418. AllVertices
  Signature : IGeometry_18:Library.AllVertices(g: IIndexedGeometry3D): $864:constraint=(IArray, Vector3D)
  Body      : Vertices(g, Indices(g))
  Inline    : Map(Indices(g#:IIndexedGeometry3D:)#1:$86:constraint=(IArray, Integer):(IArray, Integer), (i) => Vertex(g, i)#:(Function1, $1552:, $1553:):)#1::
419. Lines
  Signature : IGeometry_18:Library.Lines(x: ILineMesh2D): $865:constraint=(IArray, Line2D)
  Body      : Map(AllFaceVertices(x), (xs) => New(Line2D, At(xs, 0), At(xs, 1)))
  Inline    : Map(Map(MapRange(Divide(Count(Indices(x#:ILineMesh2D:IIndexedGeometry2D)#1:$86:constraint=(IArray, Integer):(IArray, $631:))#1:Integer:, PrimitiveSize(x#:ILineMesh2D:IIndexedGeometry2D)#1:Integer:Integer)#2:Integer:, (i) => NthSlice(xs, i, size)#:(Function1, $1176:, $1177:):)#1::, (xs) => Vertices(g, xs)#:(Function1, $1284:, $1285:):)#1::, (xs) => New(Line2D, At(xs, 0), At(xs, 1))#:(Function1, $1286:, $1287:):)#0::$865:constraint=(IArray, Line2D)
420. Lines
  Signature : IGeometry_18:Library.Lines(x: ILineMesh3D): $866:constraint=(IArray, Line3D)
  Body      : Map(AllFaceVertices(x), (xs) => New(Line3D, At(xs, 0), At(xs, 1)))
  Inline    : Map(Map(MapRange(Divide(Count(Indices(x#:ILineMesh3D:IIndexedGeometry3D)#1:$86:constraint=(IArray, Integer):(IArray, $631:))#1:Integer:, PrimitiveSize(x#:ILineMesh3D:IIndexedGeometry3D)#1:Integer:Integer)#2:Integer:, (i) => NthSlice(xs, i, size)#:(Function1, $1176:, $1177:):)#1::, (xs) => Vertices(g, xs)#:(Function1, $1252:, $1253:):)#1::, (xs) => New(Line3D, At(xs, 0), At(xs, 1))#:(Function1, $1254:, $1255:):)#0::$866:constraint=(IArray, Line3D)
421. Triangles
  Signature : IGeometry_18:Library.Triangles(x: ITriangleMesh2D): $867:constraint=(IArray, Triangle2D)
  Body      : Map(AllFaceVertices(x), (xs) => New(Triangle2D, At(xs, 0), At(xs, 1), At(xs, 2)))
  Inline    : Map(Map(MapRange(Divide(Count(Indices(x#:ITriangleMesh2D:IIndexedGeometry2D)#1:$86:constraint=(IArray, Integer):(IArray, $631:))#1:Integer:, PrimitiveSize(x#:ITriangleMesh2D:IIndexedGeometry2D)#1:Integer:Integer)#2:Integer:, (i) => NthSlice(xs, i, size)#:(Function1, $1176:, $1177:):)#1::, (xs) => Vertices(g, xs)#:(Function1, $1284:, $1285:):)#1::, (xs) => New(Triangle2D, At(xs, 0), At(xs, 1), At(xs, 2))#:(Function1, $1224:, $1225:):)#0::$867:constraint=(IArray, Triangle2D)
422. Triangles
  Signature : IGeometry_18:Library.Triangles(x: ITriangleMesh3D): $868:constraint=(IArray, Triangle3D)
  Body      : Map(AllFaceVertices(x), (xs) => New(Triangle3D, At(xs, 0), At(xs, 1), At(xs, 2)))
  Inline    : Map(Map(MapRange(Divide(Count(Indices(x#:ITriangleMesh3D:IIndexedGeometry3D)#1:$86:constraint=(IArray, Integer):(IArray, $631:))#1:Integer:, PrimitiveSize(x#:ITriangleMesh3D:IIndexedGeometry3D)#1:Integer:Integer)#2:Integer:, (i) => NthSlice(xs, i, size)#:(Function1, $1176:, $1177:):)#1::, (xs) => Vertices(g, xs)#:(Function1, $1252:, $1253:):)#1::, (xs) => New(Triangle3D, At(xs, 0), At(xs, 1), At(xs, 2))#:(Function1, $1226:, $1227:):)#0::$868:constraint=(IArray, Triangle3D)
423. Quads
  Signature : IGeometry_18:Library.Quads(x: IQuadMesh2D): $869:constraint=(IArray, Quad2D)
  Body      : Map(AllFaceVertices(x), (xs) => New(Quad2D, At(xs, 0), At(xs, 1), At(xs, 2), At(xs, 3)))
  Inline    : Map(Map(MapRange(Divide(Count(Indices(x#:IQuadMesh2D:IIndexedGeometry2D)#1:$86:constraint=(IArray, Integer):(IArray, $631:))#1:Integer:, PrimitiveSize(x#:IQuadMesh2D:IIndexedGeometry2D)#1:Integer:Integer)#2:Integer:, (i) => NthSlice(xs, i, size)#:(Function1, $1176:, $1177:):)#1::, (xs) => Vertices(g, xs)#:(Function1, $1284:, $1285:):)#1::, (xs) => New(Quad2D, At(xs, 0), At(xs, 1), At(xs, 2), At(xs, 3))#:(Function1, $1234:, $1235:):)#0::$869:constraint=(IArray, Quad2D)
424. Quads
  Signature : IGeometry_18:Library.Quads(x: IQuadMesh3D): $870:constraint=(IArray, Quad3D)
  Body      : Map(AllFaceVertices(x), (xs) => New(Quad3D, At(xs, 0), At(xs, 1), At(xs, 2), At(xs, 3)))
  Inline    : Map(Map(MapRange(Divide(Count(Indices(x#:IQuadMesh3D:IIndexedGeometry3D)#1:$86:constraint=(IArray, Integer):(IArray, $631:))#1:Integer:, PrimitiveSize(x#:IQuadMesh3D:IIndexedGeometry3D)#1:Integer:Integer)#2:Integer:, (i) => NthSlice(xs, i, size)#:(Function1, $1176:, $1177:):)#1::, (xs) => Vertices(g, xs)#:(Function1, $1252:, $1253:):)#1::, (xs) => New(Quad3D, At(xs, 0), At(xs, 1), At(xs, 2), At(xs, 3))#:(Function1, $1236:, $1237:):)#0::$870:constraint=(IArray, Quad3D)
425. NumPrimitives
  Signature : IGeometry_18:Library.NumPrimitives(g: IIndexedGeometry): Integer
  Body      : Divide(Count(Indices(g)), PrimitiveSize(g))
  Inline    : Divide(Count(Indices(g#:IIndexedGeometry:)#1:$86:constraint=(IArray, Integer):)#10:Integer:, PrimitiveSize(g#:IIndexedGeometry:)#1:Integer:)#2:Integer:Integer
426. PrimitiveSize
  Signature : IGeometry_18:Library.PrimitiveSize(g: IPointPrimitives): Integer
  Body      : 1
  Inline    : 1#:Integer:Integer
427. PrimitiveSize
  Signature : IGeometry_18:Library.PrimitiveSize(g: ILinePrimitives): Integer
  Body      : 2
  Inline    : 2#:Integer:Integer
428. PrimitiveSize
  Signature : IGeometry_18:Library.PrimitiveSize(g: ITrianglePrimitives): Integer
  Body      : 3
  Inline    : 3#:Integer:Integer
429. PrimitiveSize
  Signature : IGeometry_18:Library.PrimitiveSize(g: IQuadPrimitives): Integer
  Body      : 4
  Inline    : 4#:Integer:Integer
430. Indices
  Signature : IGeometry_18:Library.Indices(x: IPointArray2D): $871:constraint=(IArray, Integer)
  Body      : Indices(Points(x))
  Inline    : Indices(Points(x#:IPointArray2D:)#2:$70:constraint=(IArray, Vector2D):)#14:$614:constraint=(IArray, Integer):$871:constraint=(IArray, Integer)
431. Indices
  Signature : IGeometry_18:Library.Indices(x: IPointArray3D): $872:constraint=(IArray, Integer)
  Body      : Indices(Points(x))
  Inline    : Indices(Points(x#:IPointArray3D:)#2:$70:constraint=(IArray, Vector2D):)#14:$614:constraint=(IArray, Integer):$872:constraint=(IArray, Integer)
432. Indices
  Signature : IGeometry_18:Library.Indices(x: ILineArray2D): $873:constraint=(IArray, Integer)
  Body      : Indices(Points(x))
  Inline    : Indices(Points(x#:ILineArray2D:)#3:$926:constraint=(IArray, Vector2D):)#14:$614:constraint=(IArray, Integer):$873:constraint=(IArray, Integer)
433. Indices
  Signature : IGeometry_18:Library.Indices(x: ILineArray3D): $874:constraint=(IArray, Integer)
  Body      : Indices(Points(x))
  Inline    : Indices(Points(x#:ILineArray3D:)#3:$927:constraint=(IArray, Vector3D):)#14:$614:constraint=(IArray, Integer):$874:constraint=(IArray, Integer)
434. Indices
  Signature : IGeometry_18:Library.Indices(x: ITriangleArray2D): $875:constraint=(IArray, Integer)
  Body      : Indices(Points(x))
  Inline    : Indices(Points(x#:ITriangleArray2D:)#3:$928:constraint=(IArray, Vector2D):)#14:$614:constraint=(IArray, Integer):$875:constraint=(IArray, Integer)
435. Indices
  Signature : IGeometry_18:Library.Indices(x: ITriangleArray3D): $876:constraint=(IArray, Integer)
  Body      : Indices(Points(x))
  Inline    : Indices(Points(x#:ITriangleArray3D:)#3:$929:constraint=(IArray, Vector3D):)#14:$614:constraint=(IArray, Integer):$876:constraint=(IArray, Integer)
436. Indices
  Signature : IGeometry_18:Library.Indices(x: IQuadArray2D): $877:constraint=(IArray, Integer)
  Body      : Indices(Points(x))
  Inline    : Indices(Points(x#:IQuadArray2D:)#3:$930:constraint=(IArray, Vector2D):)#14:$614:constraint=(IArray, Integer):$877:constraint=(IArray, Integer)
437. Indices
  Signature : IGeometry_18:Library.Indices(x: IQuadArray3D): $878:constraint=(IArray, Integer)
  Body      : Indices(Points(x))
  Inline    : Indices(Points(x#:IQuadArray3D:)#3:$931:constraint=(IArray, Vector3D):)#14:$614:constraint=(IArray, Integer):$878:constraint=(IArray, Integer)
438. LineMesh3D
  Signature : IGeometry_18:Library.LineMesh3D(g: ITriangleMesh3D): LineMesh3D
  Body      : Tuple2(Points(g), FlatMap(AllFaceIndices(g), (a) => [At(a, 0), At(a, 1), At(a, 2), At(a, 0)]))
  Inline    : Tuple2(Points(g#:ITriangleMesh3D:)#2:$70:constraint=(IArray, Vector2D):, FlatMap(MapRange(Divide(Count(Indices(g#:ITriangleMesh3D:IIndexedGeometry)#1:$86:constraint=(IArray, Integer):(IArray, $631:))#1:Integer:, PrimitiveSize(g#:ITriangleMesh3D:IIndexedGeometry)#1:Integer:Integer)#2:Integer:, (i) => NthSlice(xs, i, size)#:(Function1, $1176:, $1177:):)#1::, (a) => [At(a, 0), At(a, 1), At(a, 2), At(a, 0)]#:(Function1, $1554:, $1555:):)#0::)#:(Tuple2, $1556:, $1557:):LineMesh3D
439. LineMesh3D
  Signature : IGeometry_18:Library.LineMesh3D(g: IQuadMesh3D): LineMesh3D
  Body      : Tuple2(Points(g), FlatMap(AllFaceIndices(g), (a) => [At(a, 0), At(a, 1), At(a, 2), At(a, 3), At(a, 0)]))
  Inline    : Tuple2(Points(g#:IQuadMesh3D:)#2:$70:constraint=(IArray, Vector2D):, FlatMap(MapRange(Divide(Count(Indices(g#:IQuadMesh3D:IIndexedGeometry)#1:$86:constraint=(IArray, Integer):(IArray, $631:))#1:Integer:, PrimitiveSize(g#:IQuadMesh3D:IIndexedGeometry)#1:Integer:Integer)#2:Integer:, (i) => NthSlice(xs, i, size)#:(Function1, $1176:, $1177:):)#1::, (a) => [At(a, 0), At(a, 1), At(a, 2), At(a, 3), At(a, 0)]#:(Function1, $1558:, $1559:):)#0::)#:(Tuple2, $1560:, $1561:):LineMesh3D
440. LineArray2D
  Signature : IGeometry_18:Library.LineArray2D(t: Triangle2D): LineArray2D
  Body      : New(LineArray2D, Lines(t))
  Inline    : New(LineArray2D#:Type:, Lines(t#:Triangle2D:)#3:$904:constraint=(IArray, Line2D):)#1:Dynamic:LineArray2D
441. LineArray2D
  Signature : IGeometry_18:Library.LineArray2D(q: Quad2D): LineArray2D
  Body      : New(LineArray2D, Lines(q))
  Inline    : New(LineArray2D#:Type:, Lines(q#:Quad2D:)#3:$906:constraint=(IArray, Line2D):)#1:Dynamic:LineArray2D
442. LineArray3D
  Signature : IGeometry_18:Library.LineArray3D(t: Triangle3D): LineArray3D
  Body      : New(LineArray3D, Lines(t))
  Inline    : New(LineArray3D#:Type:, Lines(t#:Triangle3D:)#3:$905:constraint=(IArray, Line3D):)#1:Dynamic:LineArray3D
443. LineArray3D
  Signature : IGeometry_18:Library.LineArray3D(q: Quad3D): LineArray3D
  Body      : New(LineArray3D, Lines(q))
  Inline    : New(LineArray3D#:Type:, Lines(q#:Quad3D:)#3:$907:constraint=(IArray, Line3D):)#1:Dynamic:LineArray3D
444. TriangleArray2D
  Signature : IGeometry_18:Library.TriangleArray2D(t: Triangle2D): TriangleArray2D
  Body      : New(TriangleArray2D, [t])
  Inline    : New(TriangleArray2D#:Type:, [t#::]#:(IArray, $1562:):)#1:Dynamic:TriangleArray2D
445. TriangleArray3D
  Signature : IGeometry_18:Library.TriangleArray3D(t: Triangle3D): TriangleArray3D
  Body      : New(TriangleArray3D, [t])
  Inline    : New(TriangleArray3D#:Type:, [t#::]#:(IArray, $1563:):)#1:Dynamic:TriangleArray3D
446. TriangleArray2D
  Signature : IGeometry_18:Library.TriangleArray2D(q: Quad2D): TriangleArray2D
  Body      : New(TriangleArray2D, Triangles(q))
  Inline    : New(TriangleArray2D#:Type:, Triangles(q#:Quad2D:)#3:$908:constraint=(IArray, Triangle2D):)#1:Dynamic:TriangleArray2D
447. TriangleArray3D
  Signature : IGeometry_18:Library.TriangleArray3D(q: Quad3D): TriangleArray3D
  Body      : New(TriangleArray3D, Triangles(q))
  Inline    : New(TriangleArray3D#:Type:, Triangles(q#:Quad3D:)#3:$909:constraint=(IArray, Triangle3D):)#1:Dynamic:TriangleArray3D
448. TriangleArray3D
  Signature : IGeometry_18:Library.TriangleArray3D(q: IQuadArray3D): TriangleArray3D
  Body      : New(TriangleArray3D, Triangles(q))
  Inline    : New(TriangleArray3D#:Type:, Triangles(q#:IQuadArray3D:)#3:$937:constraint=(IArray, Triangle3D):)#1:Dynamic:TriangleArray3D
449. QuadArray3D
  Signature : IGeometry_18:Library.QuadArray3D(q: Quad3D): QuadArray3D
  Body      : New(QuadArray3D, [q])
  Inline    : New(QuadArray3D#:Type:, [q#::]#:(IArray, $1564:):)#1:Dynamic:QuadArray3D
450. QuadMesh3D
  Signature : IGeometry_18:Library.QuadMesh3D(self: IQuadArray3D): QuadMesh3D
  Body      : Tuple2(Points(self), Indices(Points(self)))
  Inline    : Tuple2(Points(self#:IQuadArray3D:)#3:$931:constraint=(IArray, Vector3D):, Indices(Points(self#:IQuadArray3D:)#3:$931:constraint=(IArray, Vector3D):)#14:$614:constraint=(IArray, Integer):)#:(Tuple2, $1565:, $1566:):QuadMesh3D
451. TriangleMesh3D
  Signature : IGeometry_18:Library.TriangleMesh3D(g: Triangle3D): TriangleMesh3D
  Body      : TriangleArray3D(g)
  Inline    : New(TriangleArray3D#:Type:, [g#:Triangle3D:Triangle3D]#:(IArray, $1563:):)#1:Dynamic:
452. TriangleMesh3D
  Signature : IGeometry_18:Library.TriangleMesh3D(g: Quad3D): TriangleMesh3D
  Body      : TriangleArray3D(g)
  Inline    : New(TriangleArray3D#:Type:, Triangles(g#:Quad3D:Quad3D)#3:$909:constraint=(IArray, Triangle3D):)#1:Dynamic:
453. TriangleMesh3D
  Signature : IGeometry_18:Library.TriangleMesh3D(g: ITriangleArray3D): TriangleMesh3D
  Body      : Tuple2(Points(g), Indices(Points(g)))
  Inline    : Tuple2(Points(g#:ITriangleArray3D:)#3:$929:constraint=(IArray, Vector3D):, Indices(Points(g#:ITriangleArray3D:)#3:$929:constraint=(IArray, Vector3D):)#14:$614:constraint=(IArray, Integer):)#:(Tuple2, $1567:, $1568:):TriangleMesh3D
454. TriangleMesh3D
  Signature : IGeometry_18:Library.TriangleMesh3D(g: IQuadArray3D): TriangleMesh3D
  Body      : TriangleArray3D(g)
  Inline    : New(TriangleArray3D#:Type:, Triangles(g#:IQuadArray3D:IQuadArray3D)#3:$937:constraint=(IArray, Triangle3D):)#1:Dynamic:
455. TriangleMesh3D
  Signature : IGeometry_18:Library.TriangleMesh3D(g: IQuadMesh3D): TriangleMesh3D
  Body      : Tuple2(Points(g), FlatMap(AllFaceIndices(g), (a) => [At(a, 0), At(a, 1), At(a, 2), At(a, 2), At(a, 3), At(a, 0)]))
  Inline    : Tuple2(Points(g#:IQuadMesh3D:)#2:$70:constraint=(IArray, Vector2D):, FlatMap(MapRange(Divide(Count(Indices(g#:IQuadMesh3D:IIndexedGeometry)#1:$86:constraint=(IArray, Integer):(IArray, $631:))#1:Integer:, PrimitiveSize(g#:IQuadMesh3D:IIndexedGeometry)#1:Integer:Integer)#2:Integer:, (i) => NthSlice(xs, i, size)#:(Function1, $1176:, $1177:):)#1::, (a) => [At(a, 0), At(a, 1), At(a, 2), At(a, 2), At(a, 3), At(a, 0)]#:(Function1, $1569:, $1570:):)#0::)#:(Tuple2, $1571:, $1572:):TriangleMesh3D
456. To3D
  Signature : IGeometry_18:Library.To3D(x: Vector2D): Vector3D
  Body      : x
  Inline    : x#:Vector2D:Vector3D
457. To3D
  Signature : IGeometry_18:Library.To3D(x: Line2D): Line3D
  Body      : Tuple2(To3D(A(x)), To3D(B(x)))
  Inline    : Tuple2(A(x#:Line2D:)#1:Vector2D:Vector2D, B(x#:Line2D:)#1:Vector2D:Vector2D)#:(Tuple2, $1588:, $1589:):Line3D
458. To3D
  Signature : IGeometry_18:Library.To3D(x: Triangle2D): Triangle3D
  Body      : Tuple3(To3D(A(x)), To3D(B(x)), To3D(C(x)))
  Inline    : Tuple3(A(x#:Triangle2D:)#1:Vector2D:Vector2D, B(x#:Triangle2D:)#1:Vector2D:Vector2D, C(x#:Triangle2D:)#1:Vector2D:Vector2D)#:(Tuple3, $1585:, $1586:, $1587:):Triangle3D
459. To3D
  Signature : IGeometry_18:Library.To3D(x: Quad2D): Quad3D
  Body      : Tuple4(To3D(A(x)), To3D(B(x)), To3D(C(x)), To3D(D(x)))
  Inline    : Tuple4(A(x#:Quad2D:)#1:Vector2D:Vector2D, B(x#:Quad2D:)#1:Vector2D:Vector2D, C(x#:Quad2D:)#1:Vector2D:Vector2D, D(x#:Quad2D:)#1:Vector2D:Vector2D)#:(Tuple4, $1581:, $1582:, $1583:, $1584:):Quad3D
460. To3D
  Signature : IGeometry_18:Library.To3D(x: Bounds2D): Bounds3D
  Body      : Tuple2(To3D(Min(x)), To3D(Max(x)))
  Inline    : Tuple2(To3D(Min(x#:Bounds2D:)#2:$47::)#7:Vector3D:, To3D(Max(x#:Bounds2D:)#2:$49::)#7:Vector3D:)#:(Tuple2, $1579:, $1580:):Bounds3D
461. To3D
  Signature : IGeometry_18:Library.To3D(x: Ray2D): Ray3D
  Body      : Tuple2(To3D(Origin(x)), To3D(Direction(x)))
  Inline    : Tuple2(Origin(x#:Ray2D:)#1:Vector2D:Vector2D, Direction(x#:Ray2D:)#1:Vector2D:Vector2D)#:(Tuple2, $1577:, $1578:):Ray3D
462. To3D
  Signature : IGeometry_18:Library.To3D(x: PolyLine2D): PolyLine3D
  Body      : Tuple2(Map(Points(x), (p) => To3D(p)), Closed(x))
  Inline    : Tuple2(Map(Points(x#:PolyLine2D:)#3:$70:constraint=(IArray, Vector2D):, (p) => To3D(p)#:(Function1, $1573:, $1574:):)#0::, Closed(x#:PolyLine2D:)#2:Boolean:)#:(Tuple2, $1575:, $1576:):PolyLine3D
463. Line3D
  Signature : IGeometry_18:Library.Line3D(x: Line2D): Line3D
  Body      : To3D(x)
  Inline    : Tuple2(A(x#:Line2D:Line2D)#1:Vector2D:Vector2D, B(x#:Line2D:Line2D)#1:Vector2D:Vector2D)#1:(Tuple2, $1588:, $1589:):
464. Triangle3D
  Signature : IGeometry_18:Library.Triangle3D(x: Triangle2D): Triangle3D
  Body      : To3D(x)
  Inline    : Tuple3(A(x#:Triangle2D:Triangle2D)#1:Vector2D:Vector2D, B(x#:Triangle2D:Triangle2D)#1:Vector2D:Vector2D, C(x#:Triangle2D:Triangle2D)#1:Vector2D:Vector2D)#1:(Tuple3, $1585:, $1586:, $1587:):
465. Quad3D
  Signature : IGeometry_18:Library.Quad3D(x: Quad2D): Quad3D
  Body      : To3D(x)
  Inline    : Tuple4(A(x#:Quad2D:Quad2D)#1:Vector2D:Vector2D, B(x#:Quad2D:Quad2D)#1:Vector2D:Vector2D, C(x#:Quad2D:Quad2D)#1:Vector2D:Vector2D, D(x#:Quad2D:Quad2D)#1:Vector2D:Vector2D)#1:(Tuple4, $1581:, $1582:, $1583:, $1584:):
466. Bounds3D
  Signature : IGeometry_18:Library.Bounds3D(x: Bounds2D): Bounds3D
  Body      : To3D(x)
  Inline    : Tuple2(To3D(Min(x#:Bounds2D:Bounds2D)#2:$47::)#7:Vector3D:, To3D(Max(x#:Bounds2D:Bounds2D)#2:$49::)#7:Vector3D:)#1:(Tuple2, $1579:, $1580:):
467. Ray3D
  Signature : IGeometry_18:Library.Ray3D(x: Ray2D): Ray3D
  Body      : To3D(x)
  Inline    : Tuple2(Origin(x#:Ray2D:Ray2D)#1:Vector2D:Vector2D, Direction(x#:Ray2D:Ray2D)#1:Vector2D:Vector2D)#1:(Tuple2, $1577:, $1578:):
468. PolyLine3D
  Signature : IGeometry_18:Library.PolyLine3D(x: PolyLine2D): PolyLine3D
  Body      : To3D(x)
  Inline    : Tuple2(Map(Points(x#:PolyLine2D:PolyLine2D)#3:$70:constraint=(IArray, Vector2D):, (p) => To3D(p)#:(Function1, $1573:, $1574:):)#0::, Closed(x#:PolyLine2D:PolyLine2D)#2:Boolean:)#1:(Tuple2, $1575:, $1576:):
469. Deform
  Signature : IGeometry_18:Library.Deform(x: IDeformable3D, t: ITransform3D): $879:constraint=IDeformable3D
  Body      : Deform(x, (v) => Transform(t, v))
  Inline    : Deform(x#:IDeformable3D:, (v) => Transform(t, v)#:(Function1, $1590:, $1591:):)#0::$879:constraint=IDeformable3D
470. Translate
  Signature : IGeometry_18:Library.Translate(x: IDeformable3D, v: Vector3D): $880:constraint=IDeformable3D
  Body      : Deform(x, (p) => Add(p, v))
  Inline    : Deform(x#:IDeformable3D:, (p) => Add(p, v)#:(Function1, $1606:, $1607:):)#0::$880:constraint=IDeformable3D
471. Rotate
  Signature : IGeometry_18:Library.Rotate(x: IDeformable3D, q: Quaternion): $881:constraint=IDeformable3D
  Body      : Deform(x, q)
  Inline    : Deform(x#:IDeformable3D:, q#:Quaternion:)#0::$881:constraint=IDeformable3D
472. Scale
  Signature : IGeometry_18:Library.Scale(x: IDeformable3D, v: Vector3D): $882:constraint=IDeformable3D
  Body      : Deform(x, (p) => Multiply(p, v))
  Inline    : Deform(x#:IDeformable3D:, (p) => Multiply(p, v)#:(Function1, $1608:, $1609:):)#0::$882:constraint=IDeformable3D
473. Scale
  Signature : IGeometry_18:Library.Scale(x: IDeformable3D, s: Number): $883:constraint=IDeformable3D
  Body      : Deform(x, (p) => Multiply(p, s))
  Inline    : Deform(x#:IDeformable3D:, (p) => Multiply(p, s)#:(Function1, $1610:, $1611:):)#0::$883:constraint=IDeformable3D
474. RotateX
  Signature : IGeometry_18:Library.RotateX(x: IDeformable3D, a: Angle): $884:constraint=IDeformable3D
  Body      : Rotate(x, XRotation(a))
  Inline    : Deform(x#:IDeformable3D:IDeformable3D, Rotation(XAxis3D#:IAny:, a#:Angle:Angle)#1::)#1::
475. RotateY
  Signature : IGeometry_18:Library.RotateY(x: IDeformable3D, a: Angle): $885:constraint=IDeformable3D
  Body      : Rotate(x, YRotation(a))
  Inline    : Deform(x#:IDeformable3D:IDeformable3D, Rotation(YAxis3D#:IAny:, a#:Angle:Angle)#1::)#1::
476. RotateZ
  Signature : IGeometry_18:Library.RotateZ(x: IDeformable3D, a: Angle): $886:constraint=IDeformable3D
  Body      : Rotate(x, ZRotation(a))
  Inline    : Deform(x#:IDeformable3D:IDeformable3D, Rotation(ZAxis3D#:IAny:, a#:Angle:Angle)#1::)#1::
477. TranslateX
  Signature : IGeometry_18:Library.TranslateX(x: IDeformable3D, s: Number): $887:constraint=IDeformable3D
  Body      : Deform(x, (p) => Add(p, Tuple3(s, 0, 0)))
  Inline    : Deform(x#:IDeformable3D:, (p) => Add(p, Tuple3(s, 0, 0))#:(Function1, $1614:, $1615:):)#0::$887:constraint=IDeformable3D
478. TranslateY
  Signature : IGeometry_18:Library.TranslateY(x: IDeformable3D, s: Number): $888:constraint=IDeformable3D
  Body      : Deform(x, (p) => Add(p, Tuple3(0, s, 0)))
  Inline    : Deform(x#:IDeformable3D:, (p) => Add(p, Tuple3(0, s, 0))#:(Function1, $1616:, $1617:):)#0::$888:constraint=IDeformable3D
479. TranslateZ
  Signature : IGeometry_18:Library.TranslateZ(x: IDeformable3D, s: Number): $889:constraint=IDeformable3D
  Body      : Deform(x, (p) => Add(p, Tuple3(0, 0, s)))
  Inline    : Deform(x#:IDeformable3D:, (p) => Add(p, Tuple3(0, 0, s))#:(Function1, $1618:, $1619:):)#0::$889:constraint=IDeformable3D
480. ScaleX
  Signature : IGeometry_18:Library.ScaleX(x: IDeformable3D, s: Number): $890:constraint=IDeformable3D
  Body      : Deform(x, (p) => Multiply(p, Tuple3(s, 1, 1)))
  Inline    : Deform(x#:IDeformable3D:, (p) => Multiply(p, Tuple3(s, 1, 1))#:(Function1, $1620:, $1621:):)#0::$890:constraint=IDeformable3D
481. ScaleY
  Signature : IGeometry_18:Library.ScaleY(x: IDeformable3D, s: Number): $891:constraint=IDeformable3D
  Body      : Deform(x, (p) => Multiply(p, Tuple3(1, s, 1)))
  Inline    : Deform(x#:IDeformable3D:, (p) => Multiply(p, Tuple3(1, s, 1))#:(Function1, $1622:, $1623:):)#0::$891:constraint=IDeformable3D
482. ScaleZ
  Signature : IGeometry_18:Library.ScaleZ(x: IDeformable3D, s: Number): $892:constraint=IDeformable3D
  Body      : Deform(x, (p) => Multiply(p, Tuple3(1, 1, s)))
  Inline    : Deform(x#:IDeformable3D:, (p) => Multiply(p, Tuple3(1, 1, s))#:(Function1, $1624:, $1625:):)#0::$892:constraint=IDeformable3D
483. Unit
  Signature : IGeometry_18:Library.Unit(_: Triangle2D): Triangle2D
  Body      : Tuple3(Tuple2(Negative(0.5), Negative(Half(Sqrt(3)))), Tuple2(Negative(0.5), Half(Sqrt(3))), Tuple2(0, 1))
  Inline    : Tuple3(Tuple2(Negative(0.5#:Number:)#2:Number:, Negative(Half(Pow(3#:Number:Number, 0.5#:Number:)#1:Number:)#0::)#0::)#:(Tuple2, $1626:, $1627:):, Tuple2(Negative(0.5#:Number:)#2:Number:, Half(Pow(3#:Number:Number, 0.5#:Number:)#1:Number:)#0::)#:(Tuple2, $1628:, $1629:):, Tuple2(0#:Integer:, 1#:Integer:)#:(Tuple2, $1630:, $1631:):)#:(Tuple3, $1632:, $1633:, $1634:):Triangle2D
484. Unit
  Signature : IGeometry_18:Library.Unit(_: Quad2D): Quad2D
  Body      : Tuple4(Tuple2(0, 0), Tuple2(1, 0), Tuple2(1, 1), Tuple2(0, 1))
  Inline    : Tuple4(Tuple2(0#:Integer:, 0#:Integer:)#:(Tuple2, $1635:, $1636:):, Tuple2(1#:Integer:, 0#:Integer:)#:(Tuple2, $1637:, $1638:):, Tuple2(1#:Integer:, 1#:Integer:)#:(Tuple2, $1639:, $1640:):, Tuple2(0#:Integer:, 1#:Integer:)#:(Tuple2, $1641:, $1642:):)#:(Tuple4, $1643:, $1644:, $1645:, $1646:):Quad2D
485. UnitX
  Signature : IGeometry_18:Library.UnitX(_: Vector2D): Vector2D
  Body      : Tuple2(1, 0)
  Inline    : Tuple2(1#:Integer:, 0#:Integer:)#:(Tuple2, $1647:, $1648:):Vector2D
486. UnitY
  Signature : IGeometry_18:Library.UnitY(_: Vector2D): Vector2D
  Body      : Tuple2(0, 1)
  Inline    : Tuple2(0#:Integer:, 1#:Integer:)#:(Tuple2, $1649:, $1650:):Vector2D
487. UnitX
  Signature : IGeometry_18:Library.UnitX(_: Vector3D): Vector3D
  Body      : Tuple3(1, 0, 0)
  Inline    : Tuple3(1#:Integer:, 0#:Integer:, 0#:Integer:)#:(Tuple3, $1651:, $1652:, $1653:):Vector3D
488. UnitY
  Signature : IGeometry_18:Library.UnitY(_: Vector3D): Vector3D
  Body      : Tuple3(0, 1, 0)
  Inline    : Tuple3(0#:Integer:, 1#:Integer:, 0#:Integer:)#:(Tuple3, $1654:, $1655:, $1656:):Vector3D
489. UnitZ
  Signature : IGeometry_18:Library.UnitZ(_: Vector3D): Vector3D
  Body      : Tuple3(0, 0, 1)
  Inline    : Tuple3(0#:Integer:, 0#:Integer:, 1#:Integer:)#:(Tuple3, $1657:, $1658:, $1659:):Vector3D
490. MinValue
  Signature : IGeometry_18:Library.MinValue(_: Vector3D): Vector3D
  Body      : Tuple3(MinNumber, MinNumber, MinNumber)
  Inline    : Tuple3(MinNumber#:IAny:, MinNumber#:IAny:, MinNumber#:IAny:)#:(Tuple3, $1538:, $1539:, $1540:):Vector3D
491. MaxValue
  Signature : IGeometry_18:Library.MaxValue(_: Vector3D): Vector3D
  Body      : Tuple3(MaxNumber, MaxNumber, MaxNumber)
  Inline    : Tuple3(MaxNumber#:IAny:, MaxNumber#:IAny:, MaxNumber#:IAny:)#:(Tuple3, $1535:, $1536:, $1537:):Vector3D
492. UnitX
  Signature : IGeometry_18:Library.UnitX(_: Vector4D): Vector4D
  Body      : Tuple4(1, 0, 0, 0)
  Inline    : Tuple4(1#:Integer:, 0#:Integer:, 0#:Integer:, 0#:Integer:)#:(Tuple4, $1660:, $1661:, $1662:, $1663:):Vector4D
493. UnitY
  Signature : IGeometry_18:Library.UnitY(_: Vector4D): Vector4D
  Body      : Tuple4(0, 1, 0, 0)
  Inline    : Tuple4(0#:Integer:, 1#:Integer:, 0#:Integer:, 0#:Integer:)#:(Tuple4, $1664:, $1665:, $1666:, $1667:):Vector4D
494. UnitZ
  Signature : IGeometry_18:Library.UnitZ(_: Vector4D): Vector4D
  Body      : Tuple4(0, 0, 1, 0)
  Inline    : Tuple4(0#:Integer:, 0#:Integer:, 1#:Integer:, 0#:Integer:)#:(Tuple4, $1668:, $1669:, $1670:, $1671:):Vector4D
495. UnitW
  Signature : IGeometry_18:Library.UnitW(_: Vector4D): Vector4D
  Body      : Tuple4(0, 0, 0, 1)
  Inline    : Tuple4(0#:Integer:, 0#:Integer:, 0#:Integer:, 1#:Integer:)#:(Tuple4, $1672:, $1673:, $1674:, $1675:):Vector4D
496. Identity
  Signature : IGeometry_18:Library.Identity(_: Matrix3x3): Matrix3x3
  Body      : Tuple3(Tuple3(1, 0, 0), Tuple3(0, 1, 0), Tuple3(0, 0, 1))
  Inline    : Tuple3(Tuple3(1#:Integer:, 0#:Integer:, 0#:Integer:)#:(Tuple3, $1676:, $1677:, $1678:):, Tuple3(0#:Integer:, 1#:Integer:, 0#:Integer:)#:(Tuple3, $1679:, $1680:, $1681:):, Tuple3(0#:Integer:, 0#:Integer:, 1#:Integer:)#:(Tuple3, $1682:, $1683:, $1684:):)#:(Tuple3, $1685:, $1686:, $1687:):Matrix3x3
497. Identity
  Signature : IGeometry_18:Library.Identity(_: Matrix4x4): Matrix4x4
  Body      : Tuple4(Tuple4(1, 0, 0, 0), Tuple4(0, 1, 0, 0), Tuple4(0, 0, 1, 0), Tuple4(0, 0, 0, 1))
  Inline    : Tuple4(Tuple4(1#:Integer:, 0#:Integer:, 0#:Integer:, 0#:Integer:)#:(Tuple4, $1688:, $1689:, $1690:, $1691:):, Tuple4(0#:Integer:, 1#:Integer:, 0#:Integer:, 0#:Integer:)#:(Tuple4, $1692:, $1693:, $1694:, $1695:):, Tuple4(0#:Integer:, 0#:Integer:, 1#:Integer:, 0#:Integer:)#:(Tuple4, $1696:, $1697:, $1698:, $1699:):, Tuple4(0#:Integer:, 0#:Integer:, 0#:Integer:, 1#:Integer:)#:(Tuple4, $1700:, $1701:, $1702:, $1703:):)#:(Tuple4, $1704:, $1705:, $1706:, $1707:):Matrix4x4
498. Identity
  Signature : IGeometry_18:Library.Identity(_: Quaternion): Quaternion
  Body      : Tuple4(0, 0, 0, 1)
  Inline    : Tuple4(0#:Integer:, 0#:Integer:, 0#:Integer:, 1#:Integer:)#:(Tuple4, $1708:, $1709:, $1710:, $1711:):Quaternion
499. Deform
  Signature : IGeometry_18:Library.Deform(x: LineMesh3D, f: (Function1, Vector3D, Vector3D)): LineMesh3D
  Body      : Tuple2(Map(Points(x), f), Indices(x))
  Inline    : Tuple2(Map(Points(x#:LineMesh3D:)#3:$70:constraint=(IArray, Vector2D):, f#:(Function1, Vector3D, Vector3D):)#0::, Indices(x#:LineMesh3D:)#2:$86:constraint=(IArray, Integer):)#:(Tuple2, $1592:, $1593:):LineMesh3D
500. Deform
  Signature : IGeometry_18:Library.Deform(x: TriangleMesh3D, f: (Function1, Vector3D, Vector3D)): TriangleMesh3D
  Body      : Tuple2(Map(Points(x), f), Indices(x))
  Inline    : Tuple2(Map(Points(x#:TriangleMesh3D:)#3:$70:constraint=(IArray, Vector2D):, f#:(Function1, Vector3D, Vector3D):)#0::, Indices(x#:TriangleMesh3D:)#2:$86:constraint=(IArray, Integer):)#:(Tuple2, $1594:, $1595:):TriangleMesh3D
501. Deform
  Signature : IGeometry_18:Library.Deform(x: QuadMesh3D, f: (Function1, Vector3D, Vector3D)): QuadMesh3D
  Body      : Tuple2(Map(Points(x), f), Indices(x))
  Inline    : Tuple2(Map(Points(x#:QuadMesh3D:)#3:$70:constraint=(IArray, Vector2D):, f#:(Function1, Vector3D, Vector3D):)#0::, Indices(x#:QuadMesh3D:)#2:$86:constraint=(IArray, Integer):)#:(Tuple2, $1596:, $1597:):QuadMesh3D
502. Deform
  Signature : IGeometry_18:Library.Deform(x: PolyLine3D, f: (Function1, Vector3D, Vector3D)): PolyLine3D
  Body      : Tuple2(Map(Points(x), f), Closed(x))
  Inline    : Tuple2(Map(Points(x#:PolyLine3D:)#3:$70:constraint=(IArray, Vector2D):, f#:(Function1, Vector3D, Vector3D):)#0::, Closed(x#:PolyLine3D:)#2:Boolean:)#:(Tuple2, $1598:, $1599:):PolyLine3D
503. Deform
  Signature : IGeometry_18:Library.Deform(x: LineArray3D, f: (Function1, Vector3D, Vector3D)): LineArray3D
  Body      : New(LineArray3D, Map(Lines(x), (l) => Deform(l, f)))
  Inline    : New(LineArray3D#:Type:, Map(Lines(x#:LineArray3D:)#3:$74:constraint=(IArray, Line2D):, (l) => Deform(l, f)#:(Function1, $1600:, $1601:):)#0::)#0::LineArray3D
504. Deform
  Signature : IGeometry_18:Library.Deform(x: TriangleArray3D, f: (Function1, Vector3D, Vector3D)): TriangleArray3D
  Body      : New(TriangleArray3D, Map(Triangles(x), (t) => Deform(t, f)))
  Inline    : New(TriangleArray3D#:Type:, Map(Triangles(x#:TriangleArray3D:)#3:$78:constraint=(IArray, Triangle2D):, (t) => Deform(t, f)#:(Function1, $1602:, $1603:):)#0::)#0::TriangleArray3D
505. Deform
  Signature : IGeometry_18:Library.Deform(x: PointArray3D, f: (Function1, Vector3D, Vector3D)): PointArray3D
  Body      : New(PointArray3D, Map(Points(x), f))
  Inline    : New(PointArray3D#:Type:, Map(Points(x#:PointArray3D:)#3:$70:constraint=(IArray, Vector2D):, f#:(Function1, Vector3D, Vector3D):)#0::)#0::PointArray3D
506. Deform
  Signature : IGeometry_18:Library.Deform(x: QuadArray3D, f: (Function1, Vector3D, Vector3D)): QuadArray3D
  Body      : New(QuadArray3D, Map(Quads(x), (q) => Deform(q, f)))
  Inline    : New(QuadArray3D#:Type:, Map(Quads(x#:QuadArray3D:)#3:$82:constraint=(IArray, Quad2D):, (q) => Deform(q, f)#:(Function1, $1604:, $1605:):)#0::)#0::QuadArray3D
507. Deform
  Signature : IGeometry_18:Library.Deform(x: QuadGrid3D, f: (Function1, Vector3D, Vector3D)): QuadGrid3D
  Body      : New(QuadGrid3D, Map(PointGrid(x), f), ClosedX(x), ClosedY(x))
  Inline    : New(QuadGrid3D#:Type:, Map(PointGrid(x#:QuadGrid3D:)#2:$88:constraint=(IArray2D, Vector3D):, f#:(Function1, Vector3D, Vector3D):)#0::, ClosedX(x#:QuadGrid3D:)#3:Boolean:, ClosedY(x#:QuadGrid3D:)#3:Boolean:)#0::QuadGrid3D
508. Deform
  Signature : IGeometry_18:Library.Deform(x: Bounds3D, f: (Function1, Vector3D, Vector3D)): Bounds3D
  Body      : Bounds(Map(Corners(x), f))
  Inline    : Bounds(Map([Tuple3(X(Min(x#:Bounds3D:Bounds3D)#0::)#0::, Y(Min(x#:Bounds3D:Bounds3D)#0::)#0::, Z(Min(x#:Bounds3D:Bounds3D)#0::)#0::)#::, Tuple3(X(Max(x#:Bounds3D:Bounds3D)#0::)#0::, Y(Min(x#:Bounds3D:Bounds3D)#0::)#0::, Z(Min(x#:Bounds3D:Bounds3D)#0::)#0::)#::, Tuple3(X(Min(x#:Bounds3D:Bounds3D)#0::)#0::, Y(Max(x#:Bounds3D:Bounds3D)#0::)#0::, Z(Min(x#:Bounds3D:Bounds3D)#0::)#0::)#::, Tuple3(X(Max(x#:Bounds3D:Bounds3D)#0::)#0::, Y(Max(x#:Bounds3D:Bounds3D)#0::)#0::, Z(Min(x#:Bounds3D:Bounds3D)#0::)#0::)#::, Tuple3(X(Min(x#:Bounds3D:Bounds3D)#0::)#0::, Y(Min(x#:Bounds3D:Bounds3D)#0::)#0::, Z(Max(x#:Bounds3D:Bounds3D)#0::)#0::)#::, Tuple3(X(Max(x#:Bounds3D:Bounds3D)#0::)#0::, Y(Min(x#:Bounds3D:Bounds3D)#0::)#0::, Z(Max(x#:Bounds3D:Bounds3D)#0::)#0::)#::, Tuple3(X(Min(x#:Bounds3D:Bounds3D)#0::)#0::, Y(Max(x#:Bounds3D:Bounds3D)#0::)#0::, Z(Max(x#:Bounds3D:Bounds3D)#0::)#0::)#::, Tuple3(X(Max(x#:Bounds3D:Bounds3D)#0::)#0::, Y(Max(x#:Bounds3D:Bounds3D)#0::)#0::, Z(Max(x#:Bounds3D:Bounds3D)#0::)#0::)#::]#1:(IArray, $1534:):, f#:(Function1, Vector3D, Vector3D):)#0::)#0::Bounds3D
509. NumColumns
  Signature : IGeometry_18:Library.NumColumns(x: QuadGrid3D): Integer
  Body      : NumColumns(PointGrid(x))
  Inline    : NumColumns(PointGrid(x#:QuadGrid3D:)#2:$88:constraint=(IArray2D, Vector3D):)#5:Integer:Integer
510. NumRows
  Signature : IGeometry_18:Library.NumRows(x: QuadGrid3D): Integer
  Body      : NumRows(PointGrid(x))
  Inline    : NumRows(PointGrid(x#:QuadGrid3D:)#2:$88:constraint=(IArray2D, Vector3D):)#5:Integer:Integer
511. Points
  Signature : IGeometry_18:Library.Points(x: QuadGrid3D): $893:constraint=(IArray, Vector3D)
  Body      : PointGrid(x)
  Inline    : PointGrid(x#:QuadGrid3D:)#2:$88:constraint=(IArray2D, Vector3D):$893:constraint=(IArray, Vector3D)
512. Indices
  Signature : IGeometry_18:Library.Indices(x: QuadGrid3D): $894:constraint=(IArray, Integer)
  Body      : FlatMap(AllQuadFaceIndices(PointGrid(x), ClosedX(x), ClosedY(x)), (x) => x)
  Inline    : FlatMap(AllQuadFaceIndices(NumColumns(PointGrid(x#:QuadGrid3D:)#2:$88:constraint=(IArray2D, Vector3D):(IArray2D, $895:))#2:Integer:, NumRows(PointGrid(x#:QuadGrid3D:)#2:$88:constraint=(IArray2D, Vector3D):(IArray2D, $895:))#2:Integer:, ClosedX(x#:QuadGrid3D:)#3:Boolean:Boolean, ClosedY(x#:QuadGrid3D:)#3:Boolean:Boolean)#1:$897:constraint=(IArray2D, Integer4):, (x) => x#:(Function1, $1250:, $1251:):)#0::$894:constraint=(IArray, Integer)
513. AllQuadFaceIndices
  Signature : IGeometry_18:Library.AllQuadFaceIndices(xs: (IArray2D, $895:), closedX: Boolean, closedY: Boolean): $896:constraint=(IArray2D, Integer4)
  Body      : AllQuadFaceIndices(NumColumns(xs), NumRows(xs), closedX, closedY)
  Inline    : AllQuadFaceIndices(NumColumns(xs#:(IArray2D, $895:):)#2:Integer:, NumRows(xs#:(IArray2D, $895:):)#2:Integer:, closedX#:Boolean:, closedY#:Boolean:)#1:$897:constraint=(IArray2D, Integer4):$896:constraint=(IArray2D, Integer4)
514. Points
  Signature : IGeometry_18:Library.Points(x: Line2D): $898:constraint=(IArray, Vector2D)
  Body      : [A(x), B(x)]
  Inline    : [A(x#::)#0::, B(x#::)#0::]#:(IArray, $1206:):$898:constraint=(IArray, Vector2D)
515. Points
  Signature : IGeometry_18:Library.Points(x: Line3D): $899:constraint=(IArray, Vector3D)
  Body      : [A(x), B(x)]
  Inline    : [A(x#::)#0::, B(x#::)#0::]#:(IArray, $1207:):$899:constraint=(IArray, Vector3D)
516. Points
  Signature : IGeometry_18:Library.Points(x: Triangle2D): $900:constraint=(IArray, Vector2D)
  Body      : [A(x), B(x), C(x)]
  Inline    : [A(x#::)#0::, B(x#::)#0::, C(x#::)#0::]#:(IArray, $1208:):$900:constraint=(IArray, Vector2D)
517. Points
  Signature : IGeometry_18:Library.Points(x: Triangle3D): $901:constraint=(IArray, Vector3D)
  Body      : [A(x), B(x), C(x)]
  Inline    : [A(x#::)#0::, B(x#::)#0::, C(x#::)#0::]#:(IArray, $1209:):$901:constraint=(IArray, Vector3D)
518. Points
  Signature : IGeometry_18:Library.Points(x: Quad2D): $902:constraint=(IArray, Vector2D)
  Body      : [A(x), B(x), C(x), D(x)]
  Inline    : [A(x#::)#0::, B(x#::)#0::, C(x#::)#0::, D(x#::)#0::]#:(IArray, $1210:):$902:constraint=(IArray, Vector2D)
519. Points
  Signature : IGeometry_18:Library.Points(x: Quad3D): $903:constraint=(IArray, Vector3D)
  Body      : [A(x), B(x), C(x), D(x)]
  Inline    : [A(x#::)#0::, B(x#::)#0::, C(x#::)#0::, D(x#::)#0::]#:(IArray, $1211:):$903:constraint=(IArray, Vector3D)
520. Lines
  Signature : IGeometry_18:Library.Lines(x: Triangle2D): $904:constraint=(IArray, Line2D)
  Body      : [New(Line2D, A(x), B(x)), New(Line2D, B(x), C(x)), New(Line2D, C(x), A(x))]
  Inline    : [New(Line2D#::, A(x#::)#0::, B(x#::)#0::)#0::, New(Line2D#::, B(x#::)#0::, C(x#::)#0::)#0::, New(Line2D#::, C(x#::)#0::, A(x#::)#0::)#0::]#:(IArray, $1256:):$904:constraint=(IArray, Line2D)
521. Lines
  Signature : IGeometry_18:Library.Lines(x: Triangle3D): $905:constraint=(IArray, Line3D)
  Body      : [New(Line3D, A(x), B(x)), New(Line3D, B(x), C(x)), New(Line3D, C(x), A(x))]
  Inline    : [New(Line3D#::, A(x#::)#0::, B(x#::)#0::)#0::, New(Line3D#::, B(x#::)#0::, C(x#::)#0::)#0::, New(Line3D#::, C(x#::)#0::, A(x#::)#0::)#0::]#:(IArray, $1257:):$905:constraint=(IArray, Line3D)
522. Lines
  Signature : IGeometry_18:Library.Lines(x: Quad2D): $906:constraint=(IArray, Line2D)
  Body      : [New(Line2D, A(x), B(x)), New(Line2D, B(x), C(x)), New(Line2D, C(x), D(x)), New(Line2D, D(x), A(x))]
  Inline    : [New(Line2D#::, A(x#::)#0::, B(x#::)#0::)#0::, New(Line2D#::, B(x#::)#0::, C(x#::)#0::)#0::, New(Line2D#::, C(x#::)#0::, D(x#::)#0::)#0::, New(Line2D#::, D(x#::)#0::, A(x#::)#0::)#0::]#:(IArray, $1258:):$906:constraint=(IArray, Line2D)
523. Lines
  Signature : IGeometry_18:Library.Lines(x: Quad3D): $907:constraint=(IArray, Line3D)
  Body      : [New(Line3D, A(x), B(x)), New(Line3D, B(x), C(x)), New(Line3D, C(x), D(x)), New(Line3D, D(x), A(x))]
  Inline    : [New(Line3D#::, A(x#::)#0::, B(x#::)#0::)#0::, New(Line3D#::, B(x#::)#0::, C(x#::)#0::)#0::, New(Line3D#::, C(x#::)#0::, D(x#::)#0::)#0::, New(Line3D#::, D(x#::)#0::, A(x#::)#0::)#0::]#:(IArray, $1259:):$907:constraint=(IArray, Line3D)
524. Triangles
  Signature : IGeometry_18:Library.Triangles(q: Quad2D): $908:constraint=(IArray, Triangle2D)
  Body      : [New(Triangle2D, A(q), B(q), C(q)), New(Triangle2D, C(q), D(q), A(q))]
  Inline    : [New(Triangle2D#::, A(q#::)#0::, B(q#::)#0::, C(q#::)#0::)#0::, New(Triangle2D#::, C(q#::)#0::, D(q#::)#0::, A(q#::)#0::)#0::]#:(IArray, $1228:):$908:constraint=(IArray, Triangle2D)
525. Triangles
  Signature : IGeometry_18:Library.Triangles(q: Quad3D): $909:constraint=(IArray, Triangle3D)
  Body      : [New(Triangle3D, A(q), B(q), C(q)), New(Triangle3D, C(q), D(q), A(q))]
  Inline    : [New(Triangle3D#::, A(q#::)#0::, B(q#::)#0::, C(q#::)#0::)#0::, New(Triangle3D#::, C(q#::)#0::, D(q#::)#0::, A(q#::)#0::)#0::]#:(IArray, $1229:):$909:constraint=(IArray, Triangle3D)
526. Points
  Signature : IGeometry_18:Library.Points(xs: (IArray, Line2D)): $910:constraint=(IArray, Vector2D)
  Body      : FlatMap(xs, (x) => x)
  Inline    : FlatMap(xs#:(IArray, Line2D):, (x) => x#:(Function1, $1212:, $1213:):)#0::$910:constraint=(IArray, Vector2D)
527. Points
  Signature : IGeometry_18:Library.Points(xs: (IArray, Line3D)): $911:constraint=(IArray, Vector3D)
  Body      : FlatMap(xs, (x) => x)
  Inline    : FlatMap(xs#:(IArray, Line3D):, (x) => x#:(Function1, $1214:, $1215:):)#0::$911:constraint=(IArray, Vector3D)
528. Points
  Signature : IGeometry_18:Library.Points(xs: (IArray, Triangle2D)): $912:constraint=(IArray, Vector2D)
  Body      : FlatMap(xs, (x) => x)
  Inline    : FlatMap(xs#:(IArray, Triangle2D):, (x) => x#:(Function1, $1216:, $1217:):)#0::$912:constraint=(IArray, Vector2D)
529. Points
  Signature : IGeometry_18:Library.Points(xs: (IArray, Triangle3D)): $913:constraint=(IArray, Vector3D)
  Body      : FlatMap(xs, (x) => x)
  Inline    : FlatMap(xs#:(IArray, Triangle3D):, (x) => x#:(Function1, $1218:, $1219:):)#0::$913:constraint=(IArray, Vector3D)
530. Points
  Signature : IGeometry_18:Library.Points(xs: (IArray, Quad2D)): $914:constraint=(IArray, Vector2D)
  Body      : FlatMap(xs, (x) => x)
  Inline    : FlatMap(xs#:(IArray, Quad2D):, (x) => x#:(Function1, $1220:, $1221:):)#0::$914:constraint=(IArray, Vector2D)
531. Points
  Signature : IGeometry_18:Library.Points(xs: (IArray, Quad3D)): $915:constraint=(IArray, Vector3D)
  Body      : FlatMap(xs, (x) => x)
  Inline    : FlatMap(xs#:(IArray, Quad3D):, (x) => x#:(Function1, $1222:, $1223:):)#0::$915:constraint=(IArray, Vector3D)
532. Lines
  Signature : IGeometry_18:Library.Lines(xs: (IArray, Line2D)): $916:constraint=(IArray, Line2D)
  Body      : xs
  Inline    : xs#:(IArray, Line2D):$916:constraint=(IArray, Line2D)
533. Lines
  Signature : IGeometry_18:Library.Lines(xs: (IArray, Line3D)): $917:constraint=(IArray, Line3D)
  Body      : xs
  Inline    : xs#:(IArray, Line3D):$917:constraint=(IArray, Line3D)
534. Lines
  Signature : IGeometry_18:Library.Lines(xs: (IArray, Triangle2D)): $918:constraint=(IArray, Line2D)
  Body      : FlatMap(xs, (x) => Lines(x))
  Inline    : FlatMap(xs#:(IArray, Triangle2D):, (x) => Lines(x)#:(Function1, $1260:, $1261:):)#0::$918:constraint=(IArray, Line2D)
535. Lines
  Signature : IGeometry_18:Library.Lines(xs: (IArray, Triangle3D)): $919:constraint=(IArray, Line3D)
  Body      : FlatMap(xs, (x) => Lines(x))
  Inline    : FlatMap(xs#:(IArray, Triangle3D):, (x) => Lines(x)#:(Function1, $1262:, $1263:):)#0::$919:constraint=(IArray, Line3D)
536. Lines
  Signature : IGeometry_18:Library.Lines(xs: (IArray, Quad2D)): $920:constraint=(IArray, Line2D)
  Body      : FlatMap(xs, (x) => Lines(x))
  Inline    : FlatMap(xs#:(IArray, Quad2D):, (x) => Lines(x)#:(Function1, $1264:, $1265:):)#0::$920:constraint=(IArray, Line2D)
537. Lines
  Signature : IGeometry_18:Library.Lines(xs: (IArray, Quad3D)): $921:constraint=(IArray, Line3D)
  Body      : FlatMap(xs, (x) => Lines(x))
  Inline    : FlatMap(xs#:(IArray, Quad3D):, (x) => Lines(x)#:(Function1, $1266:, $1267:):)#0::$921:constraint=(IArray, Line3D)
538. Triangles
  Signature : IGeometry_18:Library.Triangles(xs: (IArray, Triangle2D)): $922:constraint=(IArray, Triangle2D)
  Body      : xs
  Inline    : xs#:(IArray, Triangle2D):$922:constraint=(IArray, Triangle2D)
539. Triangles
  Signature : IGeometry_18:Library.Triangles(xs: (IArray, Triangle3D)): $923:constraint=(IArray, Triangle3D)
  Body      : xs
  Inline    : xs#:(IArray, Triangle3D):$923:constraint=(IArray, Triangle3D)
540. Triangles
  Signature : IGeometry_18:Library.Triangles(xs: (IArray, Quad2D)): $924:constraint=(IArray, Triangle2D)
  Body      : FlatMap(xs, (x) => Triangles(x))
  Inline    : FlatMap(xs#:(IArray, Quad2D):, (x) => Triangles(x)#:(Function1, $1230:, $1231:):)#0::$924:constraint=(IArray, Triangle2D)
541. Triangles
  Signature : IGeometry_18:Library.Triangles(xs: (IArray, Quad3D)): $925:constraint=(IArray, Triangle3D)
  Body      : FlatMap(xs, (x) => Triangles(x))
  Inline    : FlatMap(xs#:(IArray, Quad3D):, (x) => Triangles(x)#:(Function1, $1232:, $1233:):)#0::$925:constraint=(IArray, Triangle3D)
542. Points
  Signature : IGeometry_18:Library.Points(xs: ILineArray2D): $926:constraint=(IArray, Vector2D)
  Body      : FlatMap(Lines(xs), (x) => Points(x))
  Inline    : FlatMap(Lines(xs#:ILineArray2D:)#3:$865:constraint=(IArray, Line2D):, (x) => Points(x)#:(Function1, $1288:, $1289:):)#0::$926:constraint=(IArray, Vector2D)
543. Points
  Signature : IGeometry_18:Library.Points(xs: ILineArray3D): $927:constraint=(IArray, Vector3D)
  Body      : FlatMap(Lines(xs), (x) => Points(x))
  Inline    : FlatMap(Lines(xs#:ILineArray3D:)#3:$866:constraint=(IArray, Line3D):, (x) => Points(x)#:(Function1, $1282:, $1283:):)#0::$927:constraint=(IArray, Vector3D)
544. Points
  Signature : IGeometry_18:Library.Points(xs: ITriangleArray2D): $928:constraint=(IArray, Vector2D)
  Body      : FlatMap(Triangles(xs), (x) => Points(x))
  Inline    : FlatMap(Triangles(xs#:ITriangleArray2D:)#3:$867:constraint=(IArray, Triangle2D):, (x) => Points(x)#:(Function1, $1242:, $1243:):)#0::$928:constraint=(IArray, Vector2D)
545. Points
  Signature : IGeometry_18:Library.Points(xs: ITriangleArray3D): $929:constraint=(IArray, Vector3D)
  Body      : FlatMap(Triangles(xs), (x) => Points(x))
  Inline    : FlatMap(Triangles(xs#:ITriangleArray3D:)#3:$868:constraint=(IArray, Triangle3D):, (x) => Points(x)#:(Function1, $1244:, $1245:):)#0::$929:constraint=(IArray, Vector3D)
546. Points
  Signature : IGeometry_18:Library.Points(xs: IQuadArray2D): $930:constraint=(IArray, Vector2D)
  Body      : FlatMap(Quads(xs), (x) => Points(x))
  Inline    : FlatMap(Quads(xs#:IQuadArray2D:)#3:$869:constraint=(IArray, Quad2D):, (x) => Points(x)#:(Function1, $1246:, $1247:):)#0::$930:constraint=(IArray, Vector2D)
547. Points
  Signature : IGeometry_18:Library.Points(xs: IQuadArray3D): $931:constraint=(IArray, Vector3D)
  Body      : FlatMap(Quads(xs), (x) => Points(x))
  Inline    : FlatMap(Quads(xs#:IQuadArray3D:)#3:$870:constraint=(IArray, Quad3D):, (x) => Points(x)#:(Function1, $1248:, $1249:):)#0::$931:constraint=(IArray, Vector3D)
548. Lines
  Signature : IGeometry_18:Library.Lines(xs: ITriangleArray2D): $932:constraint=(IArray, Line2D)
  Body      : FlatMap(Triangles(xs), (x) => Lines(x))
  Inline    : FlatMap(Triangles(xs#:ITriangleArray2D:)#3:$867:constraint=(IArray, Triangle2D):, (x) => Lines(x)#:(Function1, $1268:, $1269:):)#0::$932:constraint=(IArray, Line2D)
549. Lines
  Signature : IGeometry_18:Library.Lines(xs: ITriangleArray3D): $933:constraint=(IArray, Line3D)
  Body      : FlatMap(Triangles(xs), (x) => Lines(x))
  Inline    : FlatMap(Triangles(xs#:ITriangleArray3D:)#3:$868:constraint=(IArray, Triangle3D):, (x) => Lines(x)#:(Function1, $1270:, $1271:):)#0::$933:constraint=(IArray, Line3D)
550. Lines
  Signature : IGeometry_18:Library.Lines(xs: IQuadArray2D): $934:constraint=(IArray, Line2D)
  Body      : FlatMap(Quads(xs), (x) => Lines(x))
  Inline    : FlatMap(Quads(xs#:IQuadArray2D:)#3:$869:constraint=(IArray, Quad2D):, (x) => Lines(x)#:(Function1, $1272:, $1273:):)#0::$934:constraint=(IArray, Line2D)
551. Lines
  Signature : IGeometry_18:Library.Lines(xs: IQuadArray3D): $935:constraint=(IArray, Line3D)
  Body      : FlatMap(Quads(xs), (x) => Lines(x))
  Inline    : FlatMap(Quads(xs#:IQuadArray3D:)#3:$870:constraint=(IArray, Quad3D):, (x) => Lines(x)#:(Function1, $1274:, $1275:):)#0::$935:constraint=(IArray, Line3D)
552. Triangles
  Signature : IGeometry_18:Library.Triangles(xs: IQuadArray2D): $936:constraint=(IArray, Triangle2D)
  Body      : FlatMap(Quads(xs), (x) => Triangles(x))
  Inline    : FlatMap(Quads(xs#:IQuadArray2D:)#3:$869:constraint=(IArray, Quad2D):, (x) => Triangles(x)#:(Function1, $1238:, $1239:):)#0::$936:constraint=(IArray, Triangle2D)
553. Triangles
  Signature : IGeometry_18:Library.Triangles(xs: IQuadArray3D): $937:constraint=(IArray, Triangle3D)
  Body      : FlatMap(Quads(xs), (x) => Triangles(x))
  Inline    : FlatMap(Quads(xs#:IQuadArray3D:)#3:$870:constraint=(IArray, Quad3D):, (x) => Triangles(x)#:(Function1, $1240:, $1241:):)#0::$937:constraint=(IArray, Triangle3D)
554. Lines
  Signature : IGeometry_18:Library.Lines(xs: IPolyLine2D): $938:constraint=(IArray, Line2D)
  Body      : WithNext(Points(xs), (a, b) => New(Line2D, a, b), Closed(xs))
  Inline    : WithNext(Points(xs#:IPolyLine2D:)#2:$70:constraint=(IArray, Vector2D):, (a, b) => New(Line2D, a, b)#:(Function2, $1276:, $1277:, $1278:):, Closed(xs#:IPolyLine2D:)#2:Boolean:)#0::$938:constraint=(IArray, Line2D)
555. Lines
  Signature : IGeometry_18:Library.Lines(xs: IPolyLine3D): $939:constraint=(IArray, Line3D)
  Body      : WithNext(Points(xs), (a, b) => New(Line3D, a, b), Closed(xs))
  Inline    : WithNext(Points(xs#:IPolyLine3D:)#2:$70:constraint=(IArray, Vector2D):, (a, b) => New(Line3D, a, b)#:(Function2, $1279:, $1280:, $1281:):, Closed(xs#:IPolyLine3D:)#2:Boolean:)#0::$939:constraint=(IArray, Line3D)
556. ToLines
  Signature : IGeometry_18:Library.ToLines(xs: (IArray, Vector2D), ys: (IArray, Vector2D)): $940:constraint=(IArray, Line2D)
  Body      : Zip(xs, ys, (a, b) => New(Line2D, a, b))
  Inline    : Zip(xs#:(IArray, Vector2D):, ys#:(IArray, Vector2D):, (a, b) => New(Line2D, a, b)#:(Function2, $1712:, $1713:, $1714:):)#0::$940:constraint=(IArray, Line2D)
557. ToLines
  Signature : IGeometry_18:Library.ToLines(xs: (IArray, Vector3D), ys: (IArray, Vector3D)): $941:constraint=(IArray, Line3D)
  Body      : Zip(xs, ys, (a, b) => New(Line3D, a, b))
  Inline    : Zip(xs#:(IArray, Vector3D):, ys#:(IArray, Vector3D):, (a, b) => New(Line3D, a, b)#:(Function2, $1715:, $1716:, $1717:):)#0::$941:constraint=(IArray, Line3D)
558. ClosedX
  Signature : IGeometry_18:Library.ClosedX(xs: ISolid): Boolean
  Body      : True
  Inline    : True#:Boolean:Boolean
559. ClosedY
  Signature : IGeometry_18:Library.ClosedY(xs: ISolid): Boolean
  Body      : True
  Inline    : True#:Boolean:Boolean

Group IInterval_20:Library

560. Size
  Signature : IInterval_20:Library.Size(x: (IInterval, $942:)): $943:
  Body      : Subtract(End(x), Start(x))
  Inline    : Subtract(End(x#:(IInterval, $942:):)#1:$45::, Start(x#:(IInterval, $942:):)#1:$43::)#5:$828:constraint=INumerical:$943:
561. Lerp
  Signature : IInterval_20:Library.Lerp(x: (IInterval, $944:), amount: Number): $945:
  Body      : Lerp(Start(x), End(x), amount)
  Inline    : Add(Multiply(Start(x#:(IInterval, $944:):)#1:$43::IInterpolatable, FromOne(amount#:Number:Number)#0::)#0::, Multiply(End(x#:(IInterval, $944:):)#1:$45::IInterpolatable, amount#:Number:Number)#2:$35:constraint=IScalarArithmetic:)#1::
562. Reverse
  Signature : IInterval_20:Library.Reverse(x: (IInterval, $946:)): $948:constraint=(IInterval, $947:)
  Body      : Tuple2(End(x), Start(x))
  Inline    : Tuple2(End(x#:(IInterval, $946:):)#1:$45::, Start(x#:(IInterval, $946:):)#1:$43::)#:(Tuple2, $1718:, $1719:):$948:constraint=(IInterval, $947:)
563. Center
  Signature : IInterval_20:Library.Center(x: (IInterval, $949:)): $950:
  Body      : Lerp(x, 0.5)
  Inline    : Add(Multiply(Start(x#:(IInterval, $949:):(IInterval, $944:))#1:$43::IInterpolatable, FromOne(0.5#:Number:Number)#0::)#0::, Multiply(End(x#:(IInterval, $949:):(IInterval, $944:))#1:$45::IInterpolatable, 0.5#:Number:Number)#2:$35:constraint=IScalarArithmetic:)#1::
564. Contains
  Signature : IInterval_20:Library.Contains(x: (IInterval, $951:), value: $952:): Boolean
  Body      : Between(value, Start(x), End(x))
  Inline    : Between(value#:$952::, Start(x#:(IInterval, $951:):)#1:$43::, End(x#:(IInterval, $951:):)#1:$45::)#2:Boolean:Boolean
565. Contains
  Signature : IInterval_20:Library.Contains(x: (IInterval, $953:), y: (IInterval, $954:)): Boolean
  Body      : And(Contains(x, Start(y)), Contains(x, End(y)))
  Inline    : And(Contains(x#:(IInterval, $953:):, Start(y#:(IInterval, $954:):)#1:$43::)#2:Boolean:, Contains(x#:(IInterval, $953:):, End(y#:(IInterval, $954:):)#1:$45::)#2:Boolean:)#2:Boolean:Boolean
566. Overlaps
  Signature : IInterval_20:Library.Overlaps(x: (IInterval, $955:), y: (IInterval, $956:)): Boolean
  Body      : Or(Contains(x, Start(y)), Or(Contains(x, End(y)), Or(Contains(y, Start(x)), Contains(y, End(x)))))
  Inline    : Or(Contains(x#:(IInterval, $955:):, Start(y#:(IInterval, $956:):)#1:$43::)#2:Boolean:, Or(Contains(x#:(IInterval, $955:):, End(y#:(IInterval, $956:):)#1:$45::)#2:Boolean:, Or(Contains(y#:(IInterval, $956:):, Start(x#:(IInterval, $955:):)#1:$43::)#2:Boolean:, Contains(y#:(IInterval, $956:):, End(x#:(IInterval, $955:):)#1:$45::)#2:Boolean:)#2:Boolean:)#2:Boolean:)#2:Boolean:Boolean
567. SplitAt
  Signature : IInterval_20:Library.SplitAt(x: (IInterval, $957:), t: Number): (Tuple2, (IInterval, $958:), (IInterval, $959:))
  Body      : Tuple2(Left(x, t), Right(x, t))
  Inline    : Tuple2(Tuple2(Start(x#:(IInterval, $957:):(IInterval, $963:))#1:$43::, Add(Multiply(Start(x#:(IInterval, $957:):(IInterval, $963:))#1:$43::IInterpolatable, FromOne(t#:Number:Number)#0::)#0::, Multiply(End(x#:(IInterval, $957:):(IInterval, $963:))#1:$45::IInterpolatable, t#:Number:Number)#2:$35:constraint=IScalarArithmetic:)#1::)#1:(Tuple2, $1186:, $1187:):, Tuple2(Add(Multiply(Start(x#:(IInterval, $957:):(IInterval, $966:))#1:$43::IInterpolatable, FromOne(t#:Number:Number)#0::)#0::, Multiply(End(x#:(IInterval, $957:):(IInterval, $966:))#1:$45::IInterpolatable, t#:Number:Number)#2:$35:constraint=IScalarArithmetic:)#1::, End(x#:(IInterval, $957:):(IInterval, $966:))#1:$45::)#1:(Tuple2, $1190:, $1191:):)#:(Tuple2, $1720:, $1721:):(Tuple2, (IInterval, $958:), (IInterval, $959:))
568. Split
  Signature : IInterval_20:Library.Split(x: (IInterval, $960:)): (Tuple2, (IInterval, $961:), (IInterval, $962:))
  Body      : SplitAt(x, 0.5)
  Inline    : Tuple2(Tuple2(Start(x#:(IInterval, $960:):(IInterval, $957:))#1:$43::, Add(Multiply(Start(x#:(IInterval, $960:):(IInterval, $957:))#1:$43::IInterpolatable, FromOne(0.5#:Number:Number)#0::)#0::, Multiply(End(x#:(IInterval, $960:):(IInterval, $957:))#1:$45::IInterpolatable, 0.5#:Number:Number)#2:$35:constraint=IScalarArithmetic:)#1::)#1:(Tuple2, $1186:, $1187:):, Tuple2(Add(Multiply(Start(x#:(IInterval, $960:):(IInterval, $957:))#1:$43::IInterpolatable, FromOne(0.5#:Number:Number)#0::)#0::, Multiply(End(x#:(IInterval, $960:):(IInterval, $957:))#1:$45::IInterpolatable, 0.5#:Number:Number)#2:$35:constraint=IScalarArithmetic:)#1::, End(x#:(IInterval, $960:):(IInterval, $957:))#1:$45::)#1:(Tuple2, $1190:, $1191:):)#1:(Tuple2, $1720:, $1721:):
569. Left
  Signature : IInterval_20:Library.Left(x: (IInterval, $963:), t: Number): $965:constraint=(IInterval, $964:)
  Body      : Tuple2(Start(x), Lerp(x, t))
  Inline    : Tuple2(Start(x#:(IInterval, $963:):)#1:$43::, Add(Multiply(Start(x#:(IInterval, $963:):(IInterval, $944:))#1:$43::IInterpolatable, FromOne(t#:Number:Number)#0::)#0::, Multiply(End(x#:(IInterval, $963:):(IInterval, $944:))#1:$45::IInterpolatable, t#:Number:Number)#2:$35:constraint=IScalarArithmetic:)#1::)#:(Tuple2, $1186:, $1187:):$965:constraint=(IInterval, $964:)
570. Right
  Signature : IInterval_20:Library.Right(x: (IInterval, $966:), t: Number): $968:constraint=(IInterval, $967:)
  Body      : Tuple2(Lerp(x, t), End(x))
  Inline    : Tuple2(Add(Multiply(Start(x#:(IInterval, $966:):(IInterval, $944:))#1:$43::IInterpolatable, FromOne(t#:Number:Number)#0::)#0::, Multiply(End(x#:(IInterval, $966:):(IInterval, $944:))#1:$45::IInterpolatable, t#:Number:Number)#2:$35:constraint=IScalarArithmetic:)#1::, End(x#:(IInterval, $966:):)#1:$45::)#:(Tuple2, $1190:, $1191:):$968:constraint=(IInterval, $967:)
571. MoveTo
  Signature : IInterval_20:Library.MoveTo(x: (IInterval, $969:), v: $970:): $972:constraint=(IInterval, $971:)
  Body      : Tuple2(v, Add(v, Size(x)))
  Inline    : Tuple2(v#:$970::, Add(v#:$970::, Subtract(End(x#:(IInterval, $969:):(IInterval, $942:))#1:$45::, Start(x#:(IInterval, $969:):(IInterval, $942:))#1:$43::)#1:$828:constraint=INumerical:)#6:$822:constraint=INumberLike:)#:(Tuple2, $1722:, $1723:):$972:constraint=(IInterval, $971:)
572. LeftHalf
  Signature : IInterval_20:Library.LeftHalf(x: (IInterval, $973:)): $975:constraint=(IInterval, $974:)
  Body      : Left(x, 0.5)
  Inline    : Tuple2(Start(x#:(IInterval, $973:):(IInterval, $963:))#1:$43::, Add(Multiply(Start(x#:(IInterval, $973:):(IInterval, $963:))#1:$43::IInterpolatable, FromOne(0.5#:Number:Number)#0::)#0::, Multiply(End(x#:(IInterval, $973:):(IInterval, $963:))#1:$45::IInterpolatable, 0.5#:Number:Number)#2:$35:constraint=IScalarArithmetic:)#1::)#1:(Tuple2, $1186:, $1187:):
573. RightHalf
  Signature : IInterval_20:Library.RightHalf(x: (IInterval, $976:)): $978:constraint=(IInterval, $977:)
  Body      : Right(x, 0.5)
  Inline    : Tuple2(Add(Multiply(Start(x#:(IInterval, $976:):(IInterval, $966:))#1:$43::IInterpolatable, FromOne(0.5#:Number:Number)#0::)#0::, Multiply(End(x#:(IInterval, $976:):(IInterval, $966:))#1:$45::IInterpolatable, 0.5#:Number:Number)#2:$35:constraint=IScalarArithmetic:)#1::, End(x#:(IInterval, $976:):(IInterval, $966:))#1:$45::)#1:(Tuple2, $1190:, $1191:):
574. Recenter
  Signature : IInterval_20:Library.Recenter(x: (IInterval, $979:), c: $980:): $982:constraint=(IInterval, $981:)
  Body      : Tuple2(Subtract(c, Half(Size(x))), Add(c, Half(Size(x))))
  Inline    : Tuple2(Subtract(c#:$980::, Divide(Subtract(End(x#:(IInterval, $979:):(IInterval, $942:))#1:$45::, Start(x#:(IInterval, $979:):(IInterval, $942:))#1:$43::)#1:$828:constraint=INumerical:, 2#:Number:)#1:$34:constraint=IScalarArithmetic:)#5:$828:constraint=INumerical:, Add(c#:$980::, Divide(Subtract(End(x#:(IInterval, $979:):(IInterval, $942:))#1:$45::, Start(x#:(IInterval, $979:):(IInterval, $942:))#1:$43::)#1:$828:constraint=INumerical:, 2#:Number:)#1:$34:constraint=IScalarArithmetic:)#6:$822:constraint=INumberLike:)#:(Tuple2, $1724:, $1725:):$982:constraint=(IInterval, $981:)
575. Clamp
  Signature : IInterval_20:Library.Clamp(x: (IInterval, $983:), y: (IInterval, $984:)): $986:constraint=(IInterval, $985:)
  Body      : Tuple2(Clamp(x, Start(y)), Clamp(x, End(y)))
  Inline    : Tuple2(Clamp(x#:(IInterval, $983:):, Start(y#:(IInterval, $984:):)#1:$43::)#2:$986:constraint=(IInterval, $985:):, Clamp(x#:(IInterval, $983:):, End(y#:(IInterval, $984:):)#1:$45::)#2:$986:constraint=(IInterval, $985:):)#:(Tuple2, $1315:, $1316:):$986:constraint=(IInterval, $985:)
576. Clamp
  Signature : IInterval_20:Library.Clamp(x: (IInterval, $987:), value: $988:): $989:
  Body      : Clamp(value, Start(x), End(x))
  Inline    : FromComponents(value#:$988::INumerical, Zip(Components(value#:$988::INumerical)#1:$24:constraint=(IArray, Number):, Components(Start(x#:(IInterval, $987:):)#1:$43::INumerical)#1:$24:constraint=(IArray, Number):, Components(End(x#:(IInterval, $987:):)#1:$45::INumerical)#1:$24:constraint=(IArray, Number):, (x0, a0, b0) => Clamp(x0, a0, b0)#:(Function3, $1311:, $1312:, $1313:, $1314:):)#0::)#1::
577. LinearSpace
  Signature : IInterval_20:Library.LinearSpace(count: Integer): $990:constraint=(IArray, Number)
  Body      : Fractions(count)
  Inline    : Map(MapRange(count#:Integer:Integer, (i) => i#:(Function1, $1071:, $1072:):)#1::, (i) => FloatDivision(i, Subtract(x, 1))#:(Function1, $1202:, $1203:):)#1::
578. LinearSpaceExclusive
  Signature : IInterval_20:Library.LinearSpaceExclusive(count: Integer): $991:constraint=(IArray, Number)
  Body      : FractionsExclusive(count)
  Inline    : Map(MapRange(count#:Integer:Integer, (i) => i#:(Function1, $1071:, $1072:):)#1::, (i) => FloatDivision(i, x)#:(Function1, $1353:, $1354:):)#1::
579. LinearSpace
  Signature : IInterval_20:Library.LinearSpace(interval: (IInterval, $992:), count: Integer): $994:constraint=(IArray, $993:)
  Body      : Map(LinearSpace(count), (x) => Lerp(interval, x))
  Inline    : Map(Map(MapRange(count#:Integer:Integer, (i) => i#:(Function1, $1071:, $1072:):)#1::, (i) => FloatDivision(i, Subtract(x, 1))#:(Function1, $1202:, $1203:):)#1::, (x) => Lerp(interval, x)#:(Function1, $1361:, $1362:):)#0::$994:constraint=(IArray, $993:)
580. LinearSpaceExclusive
  Signature : IInterval_20:Library.LinearSpaceExclusive(interval: (IInterval, $995:), count: Integer): $997:constraint=(IArray, $996:)
  Body      : Map(LinearSpaceExclusive(count), (x) => Lerp(interval, x))
  Inline    : Map(Map(MapRange(count#:Integer:Integer, (i) => i#:(Function1, $1071:, $1072:):)#1::, (i) => FloatDivision(i, x)#:(Function1, $1353:, $1354:):)#1::, (x) => Lerp(interval, x)#:(Function1, $1726:, $1727:):)#0::$997:constraint=(IArray, $996:)
581. GeometricSpace
  Signature : IInterval_20:Library.GeometricSpace(count: Integer): $998:constraint=(IArray, Number)
  Body      : Map(LinearSpace(count), (x) => Pow(1, x))
  Inline    : Map(Map(MapRange(count#:Integer:Integer, (i) => i#:(Function1, $1071:, $1072:):)#1::, (i) => FloatDivision(i, Subtract(x, 1))#:(Function1, $1202:, $1203:):)#1::, (x) => Pow(1, x)#:(Function1, $1728:, $1729:):)#0::$998:constraint=(IArray, Number)
582. GeometricSpaceExclusive
  Signature : IInterval_20:Library.GeometricSpaceExclusive(count: Integer): $999:constraint=(IArray, Number)
  Body      : Map(LinearSpaceExclusive(count), (x) => Pow(1, x))
  Inline    : Map(Map(MapRange(count#:Integer:Integer, (i) => i#:(Function1, $1071:, $1072:):)#1::, (i) => FloatDivision(i, x)#:(Function1, $1353:, $1354:):)#1::, (x) => Pow(1, x)#:(Function1, $1730:, $1731:):)#0::$999:constraint=(IArray, Number)
583. GeometricSpace
  Signature : IInterval_20:Library.GeometricSpace(interval: (IInterval, $1000:), count: Integer): $1002:constraint=(IArray, $1001:)
  Body      : Map(GeometricSpace(count), (x) => Lerp(interval, x))
  Inline    : Map(Map(Map(MapRange(count#:Integer:Integer, (i) => i#:(Function1, $1071:, $1072:):)#1::, (i) => FloatDivision(i, Subtract(x, 1))#:(Function1, $1202:, $1203:):)#1::, (x) => Pow(1, x)#:(Function1, $1728:, $1729:):)#1::, (x) => Lerp(interval, x)#:(Function1, $1732:, $1733:):)#0::$1002:constraint=(IArray, $1001:)
584. GeometricSpaceExclusive
  Signature : IInterval_20:Library.GeometricSpaceExclusive(interval: (IInterval, $1003:), count: Integer): $1005:constraint=(IArray, $1004:)
  Body      : Map(GeometricSpaceExclusive(count), (x) => Lerp(interval, x))
  Inline    : Map(Map(Map(MapRange(count#:Integer:Integer, (i) => i#:(Function1, $1071:, $1072:):)#1::, (i) => FloatDivision(i, x)#:(Function1, $1353:, $1354:):)#1::, (x) => Pow(1, x)#:(Function1, $1730:, $1731:):)#1::, (x) => Lerp(interval, x)#:(Function1, $1734:, $1735:):)#0::$1005:constraint=(IArray, $1004:)
585. Intervals
  Signature : IInterval_20:Library.Intervals(count: Integer): $1006:constraint=(IArray, NumberInterval)
  Body      : WithNext(LinearSpace(Add(count, 1)), (a, b) => New(NumberInterval, a, b))
  Inline    : WithNext(Map(MapRange(Add(count#:Integer:, 1#:Integer:)#2:Integer:Integer, (i) => i#:(Function1, $1071:, $1072:):)#1::, (i) => FloatDivision(i, Subtract(x, 1))#:(Function1, $1202:, $1203:):)#1::, (a, b) => New(NumberInterval, a, b)#:(Function2, $1736:, $1737:, $1738:):)#0::$1006:constraint=(IArray, NumberInterval)
586. Subdivide
  Signature : IInterval_20:Library.Subdivide(interval: (IInterval, $1007:), start: Number, end: Number): $1009:constraint=(IInterval, $1008:)
  Body      : Tuple2(Lerp(interval, start), Lerp(interval, end))
  Inline    : Tuple2(Add(Multiply(Start(interval#:(IInterval, $1007:):(IInterval, $944:))#1:$43::IInterpolatable, FromOne(start#:Number:Number)#0::)#0::, Multiply(End(interval#:(IInterval, $1007:):(IInterval, $944:))#1:$45::IInterpolatable, start#:Number:Number)#2:$35:constraint=IScalarArithmetic:)#1::, Add(Multiply(Start(interval#:(IInterval, $1007:):(IInterval, $944:))#1:$43::IInterpolatable, FromOne(end#:Number:Number)#0::)#0::, Multiply(End(interval#:(IInterval, $1007:):(IInterval, $944:))#1:$45::IInterpolatable, end#:Number:Number)#2:$35:constraint=IScalarArithmetic:)#1::)#:(Tuple2, $1739:, $1740:):$1009:constraint=(IInterval, $1008:)
587. Subdivide
  Signature : IInterval_20:Library.Subdivide(interval: (IInterval, $1010:), subInterval: NumberInterval): $1012:constraint=(IInterval, $1011:)
  Body      : Subdivide(interval, Start(subInterval), End(subInterval))
  Inline    : Tuple2(Add(Multiply(Start(interval#:(IInterval, $1010:):(IInterval, $1007:))#1:$43::IInterpolatable, FromOne(Start(subInterval#:NumberInterval:)#2:$43::Number)#0::)#0::, Multiply(End(interval#:(IInterval, $1010:):(IInterval, $1007:))#1:$45::IInterpolatable, Start(subInterval#:NumberInterval:)#2:$43::Number)#2:$35:constraint=IScalarArithmetic:)#1::, Add(Multiply(Start(interval#:(IInterval, $1010:):(IInterval, $1007:))#1:$43::IInterpolatable, FromOne(End(subInterval#:NumberInterval:)#2:$45::Number)#0::)#0::, Multiply(End(interval#:(IInterval, $1010:):(IInterval, $1007:))#1:$45::IInterpolatable, End(subInterval#:NumberInterval:)#2:$45::Number)#2:$35:constraint=IScalarArithmetic:)#1::)#1:(Tuple2, $1739:, $1740:):
588. Subdivide
  Signature : IInterval_20:Library.Subdivide(interval: (IInterval, $1013:), count: Integer): $1015:constraint=(IArray, (IInterval, $1014:))
  Body      : Map(Intervals(count), (i) => Subdivide(interval, i))
  Inline    : Map(WithNext(Map(MapRange(Add(count#:Integer:Integer, 1#:Integer:)#2:Integer:Integer, (i) => i#:(Function1, $1071:, $1072:):)#1::, (i) => FloatDivision(i, Subtract(x, 1))#:(Function1, $1202:, $1203:):)#1::, (a, b) => New(NumberInterval, a, b)#:(Function2, $1736:, $1737:, $1738:):)#1::, (i) => Subdivide(interval, i)#:(Function1, $1741:, $1742:):)#0::$1015:constraint=(IArray, (IInterval, $1014:))

Group Intrinsics_22:Library


Group Transforms_26:Library

589. Matrix
  Signature : Transforms_26:Library.Matrix(v: Vector3D): Matrix4x4
  Body      : CreateTranslation(Matrix4x4, v)
  Inline    : CreateTranslation(Matrix4x4#:IAny:, v#:Vector3D:)#0::Matrix4x4
590. Matrix
  Signature : Transforms_26:Library.Matrix(t: Translation3D): Matrix4x4
  Body      : Matrix(Translation(t))
  Inline    : Matrix(Translation(t#:Translation3D:)#1:Vector3D:)#2:Matrix4x4:Matrix4x4
591. Transform
  Signature : Transforms_26:Library.Transform(t: Translation3D, v: Vector3D): Vector3D
  Body      : Add(v, Translation(t))
  Inline    : Add(v#:Vector3D:, Translation(t#:Translation3D:)#1:Vector3D:)#1:$30:constraint=IAdditive:Vector3D
592. TransformNormal
  Signature : Transforms_26:Library.TransformNormal(t: Translation3D, v: Vector3D): Vector3D
  Body      : v
  Inline    : v#:Vector3D:Vector3D
593. Matrix4x4
  Signature : Transforms_26:Library.Matrix4x4(t: ITransform3D): Matrix4x4
  Body      : Matrix(t)
  Inline    : Matrix(t#:ITransform3D:)#1:Matrix4x4:Matrix4x4
594. M11
  Signature : Transforms_26:Library.M11(m: Matrix4x4): Number
  Body      : X(Column1(m))
  Inline    : X(Column1(m#:Matrix4x4:)#1:Vector4D:)#1:Number:Number
595. M12
  Signature : Transforms_26:Library.M12(m: Matrix4x4): Number
  Body      : X(Column2(m))
  Inline    : X(Column2(m#:Matrix4x4:)#1:Vector4D:)#1:Number:Number
596. M13
  Signature : Transforms_26:Library.M13(m: Matrix4x4): Number
  Body      : X(Column3(m))
  Inline    : X(Column3(m#:Matrix4x4:)#1:Vector4D:)#1:Number:Number
597. M14
  Signature : Transforms_26:Library.M14(m: Matrix4x4): Number
  Body      : X(Column4(m))
  Inline    : X(Column4(m#:Matrix4x4:)#1:Vector4D:)#1:Number:Number
598. M21
  Signature : Transforms_26:Library.M21(m: Matrix4x4): Number
  Body      : Y(Column1(m))
  Inline    : Y(Column1(m#:Matrix4x4:)#1:Vector4D:)#1:Number:Number
599. M22
  Signature : Transforms_26:Library.M22(m: Matrix4x4): Number
  Body      : Y(Column2(m))
  Inline    : Y(Column2(m#:Matrix4x4:)#1:Vector4D:)#1:Number:Number
600. M23
  Signature : Transforms_26:Library.M23(m: Matrix4x4): Number
  Body      : Y(Column3(m))
  Inline    : Y(Column3(m#:Matrix4x4:)#1:Vector4D:)#1:Number:Number
601. M24
  Signature : Transforms_26:Library.M24(m: Matrix4x4): Number
  Body      : Y(Column4(m))
  Inline    : Y(Column4(m#:Matrix4x4:)#1:Vector4D:)#1:Number:Number
602. M31
  Signature : Transforms_26:Library.M31(m: Matrix4x4): Number
  Body      : Z(Column1(m))
  Inline    : Z(Column1(m#:Matrix4x4:)#1:Vector4D:)#1:Number:Number
603. M32
  Signature : Transforms_26:Library.M32(m: Matrix4x4): Number
  Body      : Z(Column2(m))
  Inline    : Z(Column2(m#:Matrix4x4:)#1:Vector4D:)#1:Number:Number
604. M33
  Signature : Transforms_26:Library.M33(m: Matrix4x4): Number
  Body      : Z(Column3(m))
  Inline    : Z(Column3(m#:Matrix4x4:)#1:Vector4D:)#1:Number:Number
605. M34
  Signature : Transforms_26:Library.M34(m: Matrix4x4): Number
  Body      : Z(Column4(m))
  Inline    : Z(Column4(m#:Matrix4x4:)#1:Vector4D:)#1:Number:Number
606. M41
  Signature : Transforms_26:Library.M41(m: Matrix4x4): Number
  Body      : W(Column1(m))
  Inline    : W(Column1(m#:Matrix4x4:)#1:Vector4D:)#1:Number:Number
607. M42
  Signature : Transforms_26:Library.M42(m: Matrix4x4): Number
  Body      : W(Column2(m))
  Inline    : W(Column2(m#:Matrix4x4:)#1:Vector4D:)#1:Number:Number
608. M43
  Signature : Transforms_26:Library.M43(m: Matrix4x4): Number
  Body      : W(Column3(m))
  Inline    : W(Column3(m#:Matrix4x4:)#1:Vector4D:)#1:Number:Number
609. M44
  Signature : Transforms_26:Library.M44(m: Matrix4x4): Number
  Body      : W(Column4(m))
  Inline    : W(Column4(m#:Matrix4x4:)#1:Vector4D:)#1:Number:Number
610. Row1
  Signature : Transforms_26:Library.Row1(m: Matrix4x4): Vector4D
  Body      : Tuple4(M11, M12, M13, M14)
  Inline    : Tuple4(M11#:IAny:, M12#:IAny:, M13#:IAny:, M14#:IAny:)#:(Tuple4, $1743:, $1744:, $1745:, $1746:):Vector4D
611. Row2
  Signature : Transforms_26:Library.Row2(m: Matrix4x4): Vector4D
  Body      : Tuple4(M21, M22, M23, M24)
  Inline    : Tuple4(M21#:IAny:, M22#:IAny:, M23#:IAny:, M24#:IAny:)#:(Tuple4, $1750:, $1751:, $1752:, $1753:):Vector4D
612. Row3
  Signature : Transforms_26:Library.Row3(m: Matrix4x4): Vector4D
  Body      : Tuple4(M31, M32, M33, M34)
  Inline    : Tuple4(M31#:IAny:, M32#:IAny:, M33#:IAny:, M34#:IAny:)#:(Tuple4, $1757:, $1758:, $1759:, $1760:):Vector4D
613. Row4
  Signature : Transforms_26:Library.Row4(m: Matrix4x4): Vector4D
  Body      : Tuple4(M41, M42, M43, M44)
  Inline    : Tuple4(M41#:IAny:, M42#:IAny:, M43#:IAny:, M44#:IAny:)#:(Tuple4, $1781:, $1782:, $1783:, $1784:):Vector4D
614. GetRow
  Signature : Transforms_26:Library.GetRow(m: Matrix4x4, row: Integer): Vector4D
  Body      : (Equals(row, 0)?Row1:(Equals(row, 1)?Row2:(Equals(row, 2)?Row3:Row4)))
  Inline    : (Equals(row#:Integer:, 0#:Integer:)#2:Boolean:Boolean?Row1#:IAny::(Equals(row#:Integer:, 1#:Integer:)#2:Boolean:Boolean?Row2#:IAny::(Equals(row#:Integer:, 2#:Integer:)#2:Boolean:Boolean?Row3#:IAny::Row4#:IAny:)#:IAny:)#:IAny:)#:IAny:Vector4D
615. Multiply
  Signature : Transforms_26:Library.Multiply(m: Matrix4x4, v: Vector3D): Vector3D
  Body      : Tuple3(Add(Multiply(X(v), M11(m)), Add(Multiply(Y(v), M21(m)), Add(Multiply(Z(v), M31(m)), M41(m)))), Add(Multiply(X(v), M12(m)), Add(Multiply(Y(v), M22(m)), Add(Multiply(Z(v), M32(m)), M42(m)))), Add(Multiply(X(v), M13(m)), Add(Multiply(Y(v), M23(m)), Add(Multiply(Z(v), M33(m)), M43(m)))))
  Inline    : Tuple3(Add(Multiply(X(v#:Vector3D:)#1:Number:, X(Column1(m#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Add(Multiply(Y(v#:Vector3D:)#1:Number:, Y(Column1(m#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Add(Multiply(Z(v#:Vector3D:)#1:Number:, Z(Column1(m#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, W(Column1(m#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#2:Number:)#2:Number:)#2:Number:, Add(Multiply(X(v#:Vector3D:)#1:Number:, X(Column2(m#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Add(Multiply(Y(v#:Vector3D:)#1:Number:, Y(Column2(m#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Add(Multiply(Z(v#:Vector3D:)#1:Number:, Z(Column2(m#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, W(Column2(m#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#2:Number:)#2:Number:)#2:Number:, Add(Multiply(X(v#:Vector3D:)#1:Number:, X(Column3(m#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Add(Multiply(Y(v#:Vector3D:)#1:Number:, Y(Column3(m#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Add(Multiply(Z(v#:Vector3D:)#1:Number:, Z(Column3(m#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, W(Column3(m#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#2:Number:)#2:Number:)#2:Number:)#:(Tuple3, $1140:, $1141:, $1142:):Vector3D
616. CreateFromRows
  Signature : Transforms_26:Library.CreateFromRows(_: Matrix4x4, row1: Vector4D, row2: Vector4D, row3: Vector4D, row4: Vector4D): Matrix4x4
  Body      : Tuple4(Tuple4(X(row1), X(row2), X(row3), X(row4)), Tuple4(Y(row1), Y(row2), Y(row3), Y(row4)), Tuple4(Z(row1), Z(row2), Z(row3), Z(row4)), Tuple4(W(row1), W(row2), W(row3), W(row4)))
  Inline    : Tuple4(Tuple4(X(row1#:Vector4D:)#1:Number:, X(row2#:Vector4D:)#1:Number:, X(row3#:Vector4D:)#1:Number:, X(row4#:Vector4D:)#1:Number:)#:(Tuple4, $1112:, $1113:, $1114:, $1115:):, Tuple4(Y(row1#:Vector4D:)#1:Number:, Y(row2#:Vector4D:)#1:Number:, Y(row3#:Vector4D:)#1:Number:, Y(row4#:Vector4D:)#1:Number:)#:(Tuple4, $1116:, $1117:, $1118:, $1119:):, Tuple4(Z(row1#:Vector4D:)#1:Number:, Z(row2#:Vector4D:)#1:Number:, Z(row3#:Vector4D:)#1:Number:, Z(row4#:Vector4D:)#1:Number:)#:(Tuple4, $1120:, $1121:, $1122:, $1123:):, Tuple4(W(row1#:Vector4D:)#1:Number:, W(row2#:Vector4D:)#1:Number:, W(row3#:Vector4D:)#1:Number:, W(row4#:Vector4D:)#1:Number:)#:(Tuple4, $1124:, $1125:, $1126:, $1127:):)#:(Tuple4, $1128:, $1129:, $1130:, $1131:):Matrix4x4
617. CreateFromRows
  Signature : Transforms_26:Library.CreateFromRows(_: Matrix4x4, row1: Vector3D, row2: Vector3D, row3: Vector3D): Matrix4x4
  Body      : CreateFromRows(Matrix4x4, row1, row2, row3, Tuple4(0, 0, 0, 1))
  Inline    : CreateFromRows(Matrix4x4#:IAny:, row1#:Vector3D:, row2#:Vector3D:, row3#:Vector3D:, Tuple4(0#:Integer:, 0#:Integer:, 0#:Integer:, 1#:Integer:)#:(Tuple4, $1132:, $1133:, $1134:, $1135:):)#0::Matrix4x4
618. WithTranslation
  Signature : Transforms_26:Library.WithTranslation(m: Matrix4x4, v: Vector3D): Matrix4x4
  Body      : CreateFromRows(Matrix4x4, Row1(m), Row2(m), Row3(m), Tuple4(X(v), Y(v), Z(v), 1))
  Inline    : CreateFromRows(Matrix4x4#:IAny:, Tuple4(M11#:IAny:, M12#:IAny:, M13#:IAny:, M14#:IAny:)#1:(Tuple4, $1743:, $1744:, $1745:, $1746:):, Tuple4(M21#:IAny:, M22#:IAny:, M23#:IAny:, M24#:IAny:)#1:(Tuple4, $1750:, $1751:, $1752:, $1753:):, Tuple4(M31#:IAny:, M32#:IAny:, M33#:IAny:, M34#:IAny:)#1:(Tuple4, $1757:, $1758:, $1759:, $1760:):, Tuple4(X(v#:Vector3D:)#1:Number:, Y(v#:Vector3D:)#1:Number:, Z(v#:Vector3D:)#1:Number:, 1#:Integer:)#:(Tuple4, $1764:, $1765:, $1766:, $1767:):)#0::Matrix4x4
619. Translation
  Signature : Transforms_26:Library.Translation(m: Matrix4x4): Vector3D
  Body      : Tuple3(M14(m), M24(m), M34(m))
  Inline    : Tuple3(X(Column4(m#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, Y(Column4(m#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, Z(Column4(m#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#:(Tuple3, $1768:, $1769:, $1770:):Vector3D
620. CreateTranslation
  Signature : Transforms_26:Library.CreateTranslation(_: Matrix4x4, v: Vector3D): Matrix4x4
  Body      : WithTranslation(Identity, v)
  Inline    : WithTranslation(Identity#:IAny:, v#:Vector3D:)#0::Matrix4x4
621. CreateScale
  Signature : Transforms_26:Library.CreateScale(_: Matrix4x4, v: Vector3D): Matrix4x4
  Body      : Tuple4(Tuple4(X(v), 0, 0, 0), Tuple4(0, Y(v), 0, 0), Tuple4(0, 0, Z(v), 0), Tuple4(0, 0, 0, 1))
  Inline    : Tuple4(Tuple4(X(v#:Vector3D:)#1:Number:, 0#:Integer:, 0#:Integer:, 0#:Integer:)#:(Tuple4, $1785:, $1786:, $1787:, $1788:):, Tuple4(0#:Integer:, Y(v#:Vector3D:)#1:Number:, 0#:Integer:, 0#:Integer:)#:(Tuple4, $1789:, $1790:, $1791:, $1792:):, Tuple4(0#:Integer:, 0#:Integer:, Z(v#:Vector3D:)#1:Number:, 0#:Integer:)#:(Tuple4, $1793:, $1794:, $1795:, $1796:):, Tuple4(0#:Integer:, 0#:Integer:, 0#:Integer:, 1#:Integer:)#:(Tuple4, $1797:, $1798:, $1799:, $1800:):)#:(Tuple4, $1801:, $1802:, $1803:, $1804:):Matrix4x4
622. Transform
  Signature : Transforms_26:Library.Transform(m: Matrix4x4, v: Vector3D): Vector3D
  Body      : Multiply(m, v)
  Inline    : Multiply(m#:Matrix4x4:, v#:Vector3D:)#2:Vector3D:Vector3D
623. TransformNormal
  Signature : Transforms_26:Library.TransformNormal(m: Matrix4x4, v: Vector3D): Vector3D
  Body      : Tuple3(Add(Multiply(X(v), M11(m)), Add(Multiply(Y(v), M21(m)), Multiply(Z(v), M31(m)))), Add(Multiply(X(v), M12(m)), Add(Multiply(Y(v), M22(m)), Multiply(Z(v), M32(m)))), Add(Multiply(X(v), M13(m)), Add(Multiply(Y(v), M23(m)), Multiply(Z(v), M33(m)))))
  Inline    : Tuple3(Add(Multiply(X(v#:Vector3D:)#1:Number:, X(Column1(m#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Add(Multiply(Y(v#:Vector3D:)#1:Number:, Y(Column1(m#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Multiply(Z(v#:Vector3D:)#1:Number:, Z(Column1(m#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:)#2:Number:)#2:Number:, Add(Multiply(X(v#:Vector3D:)#1:Number:, X(Column2(m#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Add(Multiply(Y(v#:Vector3D:)#1:Number:, Y(Column2(m#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Multiply(Z(v#:Vector3D:)#1:Number:, Z(Column2(m#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:)#2:Number:)#2:Number:, Add(Multiply(X(v#:Vector3D:)#1:Number:, X(Column3(m#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Add(Multiply(Y(v#:Vector3D:)#1:Number:, Y(Column3(m#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Multiply(Z(v#:Vector3D:)#1:Number:, Z(Column3(m#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:)#2:Number:)#2:Number:)#:(Tuple3, $1805:, $1806:, $1807:):Vector3D
624. Transpose
  Signature : Transforms_26:Library.Transpose(m: Matrix4x4): Matrix4x4
  Body      : Tuple4(Row1(m), Row2(m), Row3(m), Row4(m))
  Inline    : Tuple4(Tuple4(M11#:IAny:, M12#:IAny:, M13#:IAny:, M14#:IAny:)#1:(Tuple4, $1743:, $1744:, $1745:, $1746:):, Tuple4(M21#:IAny:, M22#:IAny:, M23#:IAny:, M24#:IAny:)#1:(Tuple4, $1750:, $1751:, $1752:, $1753:):, Tuple4(M31#:IAny:, M32#:IAny:, M33#:IAny:, M34#:IAny:)#1:(Tuple4, $1757:, $1758:, $1759:, $1760:):, Tuple4(M41#:IAny:, M42#:IAny:, M43#:IAny:, M44#:IAny:)#1:(Tuple4, $1781:, $1782:, $1783:, $1784:):)#:(Tuple4, $1808:, $1809:, $1810:, $1811:):Matrix4x4
625. Multiply
  Signature : Transforms_26:Library.Multiply(m: Matrix4x4, s: Number): Matrix4x4
  Body      : Tuple4(Multiply(Column1(m), s), Multiply(Column2(m), s), Multiply(Column3(m), s), Multiply(Column4(m), s))
  Inline    : Tuple4(Multiply(Column1(m#:Matrix4x4:)#1:Vector4D:, s#:Number:)#2:$35:constraint=IScalarArithmetic:, Multiply(Column2(m#:Matrix4x4:)#1:Vector4D:, s#:Number:)#2:$35:constraint=IScalarArithmetic:, Multiply(Column3(m#:Matrix4x4:)#1:Vector4D:, s#:Number:)#2:$35:constraint=IScalarArithmetic:, Multiply(Column4(m#:Matrix4x4:)#1:Vector4D:, s#:Number:)#2:$35:constraint=IScalarArithmetic:)#:(Tuple4, $1136:, $1137:, $1138:, $1139:):Matrix4x4
626. Divide
  Signature : Transforms_26:Library.Divide(m: Matrix4x4, s: Number): Matrix4x4
  Body      : Tuple4(Divide(Column1(m), s), Divide(Column2(m), s), Divide(Column3(m), s), Divide(Column4(m), s))
  Inline    : Tuple4(Divide(Column1(m#:Matrix4x4:)#1:Vector4D:, s#:Number:)#2:$34:constraint=IScalarArithmetic:, Divide(Column2(m#:Matrix4x4:)#1:Vector4D:, s#:Number:)#2:$34:constraint=IScalarArithmetic:, Divide(Column3(m#:Matrix4x4:)#1:Vector4D:, s#:Number:)#2:$34:constraint=IScalarArithmetic:, Divide(Column4(m#:Matrix4x4:)#1:Vector4D:, s#:Number:)#2:$34:constraint=IScalarArithmetic:)#:(Tuple4, $1156:, $1157:, $1158:, $1159:):Matrix4x4
627. Multiply
  Signature : Transforms_26:Library.Multiply(a: Matrix4x4, b: Matrix4x4): Matrix4x4
  Body      : CreateFromRows(Matrix4x4, Tuple4(Add(Multiply(M11(a), M11(b)), Add(Multiply(M12(a), M21(b)), Add(Multiply(M13(a), M31(b)), Multiply(M14(a), M41(b))))), Add(Multiply(M11(a), M12(b)), Add(Multiply(M12(a), M22(b)), Add(Multiply(M13(a), M32(b)), Multiply(M14(a), M42(b))))), Add(Multiply(M11(a), M13(b)), Add(Multiply(M12(a), M23(b)), Add(Multiply(M13(a), M33(b)), Multiply(M14(a), M43(b))))), Add(Multiply(M11(a), M14(b)), Add(Multiply(M12(a), M24(b)), Add(Multiply(M13(a), M34(b)), Multiply(M14(a), M44(b)))))), Tuple4(Add(Multiply(M21(a), M11(b)), Add(Multiply(M22(a), M21(b)), Add(Multiply(M23(a), M31(b)), Multiply(M24(a), M41(b))))), Add(Multiply(M21(a), M12(b)), Add(Multiply(M22(a), M22(b)), Add(Multiply(M23(a), M32(b)), Multiply(M24(a), M42(b))))), Add(Multiply(M21(a), M13(b)), Add(Multiply(M22(a), M23(b)), Add(Multiply(M23(a), M33(b)), Multiply(M24(a), M43(b))))), Add(Multiply(M21(a), M14(b)), Add(Multiply(M22(a), M24(b)), Add(Multiply(M23(a), M34(b)), Multiply(M24(a), M44(b)))))), Tuple4(Add(Multiply(M31(a), M11(b)), Add(Multiply(M32(a), M21(b)), Add(Multiply(M33(a), M31(b)), Multiply(M34(a), M41(b))))), Add(Multiply(M31(a), M12(b)), Add(Multiply(M32(a), M22(b)), Add(Multiply(M33(a), M32(b)), Multiply(M34(a), M42(b))))), Add(Multiply(M31(a), M13(b)), Add(Multiply(M32(a), M23(b)), Add(Multiply(M33(a), M33(b)), Multiply(M34(a), M43(b))))), Add(Multiply(M31(a), M14(b)), Add(Multiply(M32(a), M24(b)), Add(Multiply(M33(a), M34(b)), Multiply(M34(a), M44(b)))))), Tuple4(Add(Multiply(M41(a), M11(b)), Add(Multiply(M42(a), M21(b)), Add(Multiply(M43(a), M31(b)), Multiply(M44(a), M41(b))))), Add(Multiply(M41(a), M12(b)), Add(Multiply(M42(a), M22(b)), Add(Multiply(M43(a), M32(b)), Multiply(M44(a), M42(b))))), Add(Multiply(M41(a), M13(b)), Add(Multiply(M42(a), M23(b)), Add(Multiply(M43(a), M33(b)), Multiply(M44(a), M43(b))))), Add(Multiply(M41(a), M14(b)), Add(Multiply(M42(a), M24(b)), Add(Multiply(M43(a), M34(b)), Multiply(M44(a), M44(b)))))))
  Inline    : CreateFromRows(Matrix4x4#:IAny:, Tuple4(Add(Multiply(X(Column1(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, X(Column1(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Add(Multiply(X(Column2(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, Y(Column1(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Add(Multiply(X(Column3(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, Z(Column1(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Multiply(X(Column4(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, W(Column1(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:)#2:Number:)#2:Number:)#2:Number:, Add(Multiply(X(Column1(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, X(Column2(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Add(Multiply(X(Column2(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, Y(Column2(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Add(Multiply(X(Column3(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, Z(Column2(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Multiply(X(Column4(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, W(Column2(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:)#2:Number:)#2:Number:)#2:Number:, Add(Multiply(X(Column1(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, X(Column3(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Add(Multiply(X(Column2(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, Y(Column3(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Add(Multiply(X(Column3(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, Z(Column3(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Multiply(X(Column4(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, W(Column3(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:)#2:Number:)#2:Number:)#2:Number:, Add(Multiply(X(Column1(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, X(Column4(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Add(Multiply(X(Column2(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, Y(Column4(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Add(Multiply(X(Column3(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, Z(Column4(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Multiply(X(Column4(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, W(Column4(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:)#2:Number:)#2:Number:)#2:Number:)#:(Tuple4, $1096:, $1097:, $1098:, $1099:):, Tuple4(Add(Multiply(Y(Column1(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, X(Column1(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Add(Multiply(Y(Column2(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, Y(Column1(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Add(Multiply(Y(Column3(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, Z(Column1(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Multiply(Y(Column4(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, W(Column1(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:)#2:Number:)#2:Number:)#2:Number:, Add(Multiply(Y(Column1(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, X(Column2(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Add(Multiply(Y(Column2(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, Y(Column2(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Add(Multiply(Y(Column3(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, Z(Column2(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Multiply(Y(Column4(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, W(Column2(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:)#2:Number:)#2:Number:)#2:Number:, Add(Multiply(Y(Column1(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, X(Column3(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Add(Multiply(Y(Column2(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, Y(Column3(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Add(Multiply(Y(Column3(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, Z(Column3(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Multiply(Y(Column4(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, W(Column3(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:)#2:Number:)#2:Number:)#2:Number:, Add(Multiply(Y(Column1(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, X(Column4(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Add(Multiply(Y(Column2(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, Y(Column4(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Add(Multiply(Y(Column3(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, Z(Column4(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Multiply(Y(Column4(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, W(Column4(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:)#2:Number:)#2:Number:)#2:Number:)#:(Tuple4, $1100:, $1101:, $1102:, $1103:):, Tuple4(Add(Multiply(Z(Column1(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, X(Column1(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Add(Multiply(Z(Column2(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, Y(Column1(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Add(Multiply(Z(Column3(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, Z(Column1(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Multiply(Z(Column4(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, W(Column1(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:)#2:Number:)#2:Number:)#2:Number:, Add(Multiply(Z(Column1(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, X(Column2(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Add(Multiply(Z(Column2(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, Y(Column2(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Add(Multiply(Z(Column3(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, Z(Column2(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Multiply(Z(Column4(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, W(Column2(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:)#2:Number:)#2:Number:)#2:Number:, Add(Multiply(Z(Column1(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, X(Column3(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Add(Multiply(Z(Column2(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, Y(Column3(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Add(Multiply(Z(Column3(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, Z(Column3(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Multiply(Z(Column4(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, W(Column3(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:)#2:Number:)#2:Number:)#2:Number:, Add(Multiply(Z(Column1(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, X(Column4(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Add(Multiply(Z(Column2(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, Y(Column4(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Add(Multiply(Z(Column3(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, Z(Column4(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Multiply(Z(Column4(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, W(Column4(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:)#2:Number:)#2:Number:)#2:Number:)#:(Tuple4, $1104:, $1105:, $1106:, $1107:):, Tuple4(Add(Multiply(W(Column1(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, X(Column1(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Add(Multiply(W(Column2(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, Y(Column1(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Add(Multiply(W(Column3(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, Z(Column1(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Multiply(W(Column4(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, W(Column1(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:)#2:Number:)#2:Number:)#2:Number:, Add(Multiply(W(Column1(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, X(Column2(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Add(Multiply(W(Column2(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, Y(Column2(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Add(Multiply(W(Column3(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, Z(Column2(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Multiply(W(Column4(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, W(Column2(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:)#2:Number:)#2:Number:)#2:Number:, Add(Multiply(W(Column1(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, X(Column3(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Add(Multiply(W(Column2(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, Y(Column3(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Add(Multiply(W(Column3(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, Z(Column3(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Multiply(W(Column4(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, W(Column3(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:)#2:Number:)#2:Number:)#2:Number:, Add(Multiply(W(Column1(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, X(Column4(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Add(Multiply(W(Column2(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, Y(Column4(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Add(Multiply(W(Column3(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, Z(Column4(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:, Multiply(W(Column4(a#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:, W(Column4(b#:Matrix4x4:Matrix4x4)#1:Vector4D:)#1:Number:)#3:Number:)#2:Number:)#2:Number:)#2:Number:)#:(Tuple4, $1108:, $1109:, $1110:, $1111:):)#0::Matrix4x4
628. Matrix
  Signature : Transforms_26:Library.Matrix(m: Matrix3x3): Matrix4x4
  Body      : CreateFromRows(Matrix4x4, Row1(m), Row2(m), Row3(m), Tuple4(0, 0, 0, 1))
  Inline    : CreateFromRows(Matrix4x4#:IAny:, Tuple3(X(Column1(m#:Matrix3x3:Matrix3x3)#1:Vector3D:)#1:Number:, X(Column2(m#:Matrix3x3:Matrix3x3)#1:Vector3D:)#1:Number:, X(Column3(m#:Matrix3x3:Matrix3x3)#1:Vector3D:)#1:Number:)#1:(Tuple3, $1747:, $1748:, $1749:):, Tuple3(Y(Column1(m#:Matrix3x3:Matrix3x3)#1:Vector3D:)#1:Number:, Y(Column2(m#:Matrix3x3:Matrix3x3)#1:Vector3D:)#1:Number:, Y(Column3(m#:Matrix3x3:Matrix3x3)#1:Vector3D:)#1:Number:)#1:(Tuple3, $1754:, $1755:, $1756:):, Tuple3(Z(Column1(m#:Matrix3x3:Matrix3x3)#1:Vector3D:)#1:Number:, Z(Column2(m#:Matrix3x3:Matrix3x3)#1:Vector3D:)#1:Number:, Z(Column3(m#:Matrix3x3:Matrix3x3)#1:Vector3D:)#1:Number:)#1:(Tuple3, $1761:, $1762:, $1763:):, Tuple4(0#:Integer:, 0#:Integer:, 0#:Integer:, 1#:Integer:)#:(Tuple4, $1771:, $1772:, $1773:, $1774:):)#0::Matrix4x4
629. Matrix
  Signature : Transforms_26:Library.Matrix(m: Matrix4x4): Matrix4x4
  Body      : m
  Inline    : m#:Matrix4x4:Matrix4x4
630. Row1
  Signature : Transforms_26:Library.Row1(m: Matrix3x3): Vector3D
  Body      : Tuple3(X(Column1(m)), X(Column2(m)), X(Column3(m)))
  Inline    : Tuple3(X(Column1(m#:Matrix3x3:)#1:Vector3D:)#1:Number:, X(Column2(m#:Matrix3x3:)#1:Vector3D:)#1:Number:, X(Column3(m#:Matrix3x3:)#1:Vector3D:)#1:Number:)#:(Tuple3, $1747:, $1748:, $1749:):Vector3D
631. Row2
  Signature : Transforms_26:Library.Row2(m: Matrix3x3): Vector3D
  Body      : Tuple3(Y(Column1(m)), Y(Column2(m)), Y(Column3(m)))
  Inline    : Tuple3(Y(Column1(m#:Matrix3x3:)#1:Vector3D:)#1:Number:, Y(Column2(m#:Matrix3x3:)#1:Vector3D:)#1:Number:, Y(Column3(m#:Matrix3x3:)#1:Vector3D:)#1:Number:)#:(Tuple3, $1754:, $1755:, $1756:):Vector3D
632. Row3
  Signature : Transforms_26:Library.Row3(m: Matrix3x3): Vector3D
  Body      : Tuple3(Z(Column1(m)), Z(Column2(m)), Z(Column3(m)))
  Inline    : Tuple3(Z(Column1(m#:Matrix3x3:)#1:Vector3D:)#1:Number:, Z(Column2(m#:Matrix3x3:)#1:Vector3D:)#1:Number:, Z(Column3(m#:Matrix3x3:)#1:Vector3D:)#1:Number:)#:(Tuple3, $1761:, $1762:, $1763:):Vector3D
633. M11
  Signature : Transforms_26:Library.M11(m: Matrix3x3): Number
  Body      : X(Column1)
  Inline    : X(Column1#:IAny:)#0::Number
634. M12
  Signature : Transforms_26:Library.M12(m: Matrix3x3): Number
  Body      : X(Column2)
  Inline    : X(Column2#:IAny:)#0::Number
635. M13
  Signature : Transforms_26:Library.M13(m: Matrix3x3): Number
  Body      : X(Column3)
  Inline    : X(Column3#:IAny:)#0::Number
636. M21
  Signature : Transforms_26:Library.M21(m: Matrix3x3): Number
  Body      : Y(Column1)
  Inline    : Y(Column1#:IAny:)#0::Number
637. M22
  Signature : Transforms_26:Library.M22(m: Matrix3x3): Number
  Body      : Y(Column2)
  Inline    : Y(Column2#:IAny:)#0::Number
638. M23
  Signature : Transforms_26:Library.M23(m: Matrix3x3): Number
  Body      : Y(Column3)
  Inline    : Y(Column3#:IAny:)#0::Number
639. M31
  Signature : Transforms_26:Library.M31(m: Matrix3x3): Number
  Body      : Z(Column1)
  Inline    : Z(Column1#:IAny:)#0::Number
640. M32
  Signature : Transforms_26:Library.M32(m: Matrix3x3): Number
  Body      : Z(Column2)
  Inline    : Z(Column2#:IAny:)#0::Number
641. M33
  Signature : Transforms_26:Library.M33(m: Matrix3x3): Number
  Body      : Z(Column3)
  Inline    : Z(Column3#:IAny:)#0::Number
642. Determinant
  Signature : Transforms_26:Library.Determinant(m: Matrix3x3): Number
  Body      : Subtract(Multiply(M11, Subtract(Multiply(M22, M33), Multiply(M23, M32))), Add(Multiply(M12, Subtract(Multiply(M21, M33), Multiply(M23, M31))), Multiply(M13, Subtract(Multiply(M21, M32), Multiply(M22, M31)))))
  Inline    : Subtract(Multiply(M11#:IAny:, Subtract(Multiply(M22#:IAny:, M33#:IAny:)#1:$36:constraint=IMultiplicative:, Multiply(M23#:IAny:, M32#:IAny:)#1:$36:constraint=IMultiplicative:)#5:$828:constraint=INumerical:)#2:$35:constraint=IScalarArithmetic:, Add(Multiply(M12#:IAny:, Subtract(Multiply(M21#:IAny:, M33#:IAny:)#1:$36:constraint=IMultiplicative:, Multiply(M23#:IAny:, M31#:IAny:)#1:$36:constraint=IMultiplicative:)#5:$828:constraint=INumerical:)#2:$35:constraint=IScalarArithmetic:, Multiply(M13#:IAny:, Subtract(Multiply(M21#:IAny:, M32#:IAny:)#1:$36:constraint=IMultiplicative:, Multiply(M22#:IAny:, M31#:IAny:)#1:$36:constraint=IMultiplicative:)#5:$828:constraint=INumerical:)#2:$35:constraint=IScalarArithmetic:)#6:$822:constraint=INumberLike:)#5:$828:constraint=INumerical:Number
643. Transform
  Signature : Transforms_26:Library.Transform(t: IdentityTransform3D, v: Vector3D): Vector3D
  Body      : v
  Inline    : v#:Vector3D:Vector3D
644. TransformNormal
  Signature : Transforms_26:Library.TransformNormal(t: IdentityTransform3D, v: Vector3D): Vector3D
  Body      : v
  Inline    : v#:Vector3D:Vector3D
645. Matrix
  Signature : Transforms_26:Library.Matrix(t: IdentityTransform3D): Matrix4x4
  Body      : Identity(Matrix4x4)
  Inline    : Identity(Matrix4x4#:IAny:)#0::Matrix4x4
646. Transform
  Signature : Transforms_26:Library.Transform(t: Transform3D, v: Vector3D): Vector3D
  Body      : Multiply(Add(Transform(Rotation(t), v), Translation(t)), Scale(t))
  Inline    : Multiply(Add(Transform(Rotation(t#:Transform3D:)#1:Quaternion:, v#:Vector3D:)#2:Vector3D:, Translation(t#:Transform3D:)#1:Vector3D:)#1:$30:constraint=IAdditive:, Scale(t#:Transform3D:)#1:Vector3D:)#2:Vector3D:Vector3D
647. TransformNormal
  Signature : Transforms_26:Library.TransformNormal(t: Transform3D, v: Vector3D): Vector3D
  Body      : TransformNormal(Rotation(t), v)
  Inline    : TransformNormal(Rotation(t#:Transform3D:)#1:Quaternion:, v#:Vector3D:)#2:Vector3D:Vector3D
648. Matrix
  Signature : Transforms_26:Library.Matrix(t: Transform3D): Matrix4x4
  Body      : Multiply(Matrix(Scale(t)), Multiply(Matrix(Rotation(t)), Matrix(Translation(t))))
  Inline    : Multiply(Matrix(Scale(t#:Transform3D:)#1:Vector3D:)#2:Matrix4x4:, Multiply(Matrix(Rotation(t#:Transform3D:)#1:Quaternion:)#2:Matrix4x4:, Matrix(Translation(t#:Transform3D:)#1:Vector3D:)#2:Matrix4x4:)#2:Matrix4x4:)#2:Matrix4x4:Matrix4x4
649. Transform
  Signature : Transforms_26:Library.Transform(p: Pose3D, v: Vector3D): Vector3D
  Body      : Add(Transform(Rotation(p), v), Position(p))
  Inline    : Add(Transform(Rotation(p#:Pose3D:)#1:Rotation3D:, v#:Vector3D:)#2:Vector3D:, Position(p#:Pose3D:)#1:Vector3D:)#1:$30:constraint=IAdditive:Vector3D
650. TransformNormal
  Signature : Transforms_26:Library.TransformNormal(p: Pose3D, v: Vector3D): Vector3D
  Body      : TransformNormal(Rotation(p), v)
  Inline    : TransformNormal(Rotation(p#:Pose3D:)#1:Rotation3D:, v#:Vector3D:)#2:Vector3D:Vector3D
651. Matrix
  Signature : Transforms_26:Library.Matrix(p: Pose3D): Matrix4x4
  Body      : Multiply(Matrix(Rotation(p)), Matrix(Position(p)))
  Inline    : Multiply(Matrix(Rotation(p#:Pose3D:)#1:Rotation3D:)#2:Matrix4x4:, Matrix(Position(p#:Pose3D:)#1:Vector3D:)#2:Matrix4x4:)#2:Matrix4x4:Matrix4x4
652. Transform
  Signature : Transforms_26:Library.Transform(aa: AxisAngle, v: Vector3D): Vector3D
  Body      : Transform(Quaternion(aa), v)
  Inline    : Transform(Quaternion(aa#:AxisAngle:)#1:Quaternion:, v#:Vector3D:)#2:Vector3D:Vector3D
653. TransformNormal
  Signature : Transforms_26:Library.TransformNormal(aa: AxisAngle, v: Vector3D): Vector3D
  Body      : Transform(aa, v)
  Inline    : Transform(aa#:AxisAngle:, v#:Vector3D:)#2:Vector3D:Vector3D
654. Matrix
  Signature : Transforms_26:Library.Matrix(aa: AxisAngle): Matrix4x4
  Body      : Matrix(Quaternion(aa))
  Inline    : Matrix(Quaternion(aa#:AxisAngle:)#1:Quaternion:)#2:Matrix4x4:Matrix4x4
655. Transform
  Signature : Transforms_26:Library.Transform(e: EulerAngles, v: Vector3D): Vector3D
  Body      : Transform(Quaternion(e), v)
  Inline    : Transform(Quaternion(e#:EulerAngles:)#1:Quaternion:, v#:Vector3D:)#2:Vector3D:Vector3D
656. TransformNormal
  Signature : Transforms_26:Library.TransformNormal(e: EulerAngles, v: Vector3D): Vector3D
  Body      : TransformNormal(Quaternion(e), v)
  Inline    : TransformNormal(Quaternion(e#:EulerAngles:)#1:Quaternion:, v#:Vector3D:)#2:Vector3D:Vector3D
657. Matrix
  Signature : Transforms_26:Library.Matrix(e: EulerAngles): Matrix4x4
  Body      : Matrix(Quaternion(e))
  Inline    : Matrix(Quaternion(e#:EulerAngles:)#1:Quaternion:)#2:Matrix4x4:Matrix4x4
658. Pose3D
  Signature : Transforms_26:Library.Pose3D(f: Frame3D): Pose3D
  Body      : Tuple2(Position(f), LookRotation(Forward(f), Up(f)))
  Inline    : Tuple2(Position(f#:Frame3D:)#1:Vector3D:, LookRotation(Forward(f#:Frame3D:)#1:Vector3D:, Up(f#:Frame3D:)#1:Vector3D:)#1:Quaternion:)#:(Tuple2, $1779:, $1780:):Pose3D
659. Transform
  Signature : Transforms_26:Library.Transform(f: Frame3D, v: Vector3D): Vector3D
  Body      : Transform(Pose3D(f), v)
  Inline    : Transform(Tuple2(Position(f#:Frame3D:Frame3D)#1:Vector3D:, LookRotation(Forward(f#:Frame3D:Frame3D)#1:Vector3D:, Up(f#:Frame3D:Frame3D)#1:Vector3D:)#1:Quaternion:)#1:(Tuple2, $1779:, $1780:):, v#:Vector3D:)#2:Vector3D:Vector3D
660. TransformNormal
  Signature : Transforms_26:Library.TransformNormal(f: Frame3D, v: Vector3D): Vector3D
  Body      : TransformNormal(Pose3D(f), v)
  Inline    : TransformNormal(Tuple2(Position(f#:Frame3D:Frame3D)#1:Vector3D:, LookRotation(Forward(f#:Frame3D:Frame3D)#1:Vector3D:, Up(f#:Frame3D:Frame3D)#1:Vector3D:)#1:Quaternion:)#1:(Tuple2, $1779:, $1780:):, v#:Vector3D:)#2:Vector3D:Vector3D
661. Matrix
  Signature : Transforms_26:Library.Matrix(f: Frame3D): Matrix4x4
  Body      : Matrix(Pose3D(f))
  Inline    : Matrix(Tuple2(Position(f#:Frame3D:Frame3D)#1:Vector3D:, LookRotation(Forward(f#:Frame3D:Frame3D)#1:Vector3D:, Up(f#:Frame3D:Frame3D)#1:Vector3D:)#1:Quaternion:)#1:(Tuple2, $1779:, $1780:):)#2:Matrix4x4:Matrix4x4
662. Transform
  Signature : Transforms_26:Library.Transform(r: Rotation3D, v: Vector3D): Vector3D
  Body      : Transform(Quaternion(r), v)
  Inline    : Transform(Quaternion(r#:Rotation3D:)#2:Quaternion:, v#:Vector3D:)#2:Vector3D:Vector3D
663. TransformNormal
  Signature : Transforms_26:Library.TransformNormal(r: Rotation3D, v: Vector3D): Vector3D
  Body      : TransformNormal(Quaternion(r), v)
  Inline    : TransformNormal(Quaternion(r#:Rotation3D:)#2:Quaternion:, v#:Vector3D:)#2:Vector3D:Vector3D
664. Matrix
  Signature : Transforms_26:Library.Matrix(r: Rotation3D): Matrix4x4
  Body      : Matrix(Quaternion(r))
  Inline    : Matrix(Quaternion(r#:Rotation3D:)#2:Quaternion:)#2:Matrix4x4:Matrix4x4
665. Quaternion
  Signature : Transforms_26:Library.Quaternion(v: Vector4D): Quaternion
  Body      : Tuple4(X(v), Y(v), Z(v), W(v))
  Inline    : Tuple4(X(v#:Vector4D:)#1:Number:, Y(v#:Vector4D:)#1:Number:, Z(v#:Vector4D:)#1:Number:, W(v#:Vector4D:)#1:Number:)#:(Tuple4, $1775:, $1776:, $1777:, $1778:):Quaternion
666. Vector4D
  Signature : Transforms_26:Library.Vector4D(q: Quaternion): Vector4D
  Body      : Tuple4(X(q), Y(q), Z(q), W(q))
  Inline    : Tuple4(X(q#:Quaternion:)#1:Number:, Y(q#:Quaternion:)#1:Number:, Z(q#:Quaternion:)#1:Number:, W(q#:Quaternion:)#1:Number:)#:(Tuple4, $1088:, $1089:, $1090:, $1091:):Vector4D
667. Magnitude
  Signature : Transforms_26:Library.Magnitude(q: Quaternion): Number
  Body      : Magnitude(Vector4D(q))
  Inline    : Magnitude(Tuple4(X(q#:Quaternion:Quaternion)#1:Number:, Y(q#:Quaternion:Quaternion)#1:Number:, Z(q#:Quaternion:Quaternion)#1:Number:, W(q#:Quaternion:Quaternion)#1:Number:)#1:(Tuple4, $1088:, $1089:, $1090:, $1091:):)#0::Number
668. MagnitudeSquared
  Signature : Transforms_26:Library.MagnitudeSquared(q: Quaternion): Number
  Body      : MagnitudeSquared(Vector4D(q))
  Inline    : MagnitudeSquared(Tuple4(X(q#:Quaternion:Quaternion)#1:Number:, Y(q#:Quaternion:Quaternion)#1:Number:, Z(q#:Quaternion:Quaternion)#1:Number:, W(q#:Quaternion:Quaternion)#1:Number:)#1:(Tuple4, $1088:, $1089:, $1090:, $1091:):)#0::Number
669. TransformNormal
  Signature : Transforms_26:Library.TransformNormal(q: Quaternion, v: Vector3D): Vector3D
  Body      : Transform(q, v)
  Inline    : Transform(q#:Quaternion:, v#:Vector3D:)#2:Vector3D:Vector3D
670. Concatenate
  Signature : Transforms_26:Library.Concatenate(q1: Quaternion, q2: Quaternion): Quaternion
  Body      : ReverseConcatenate(q1, q2)
  Inline    : ReverseConcatenate(q1#:Quaternion:, q2#:Quaternion:)#1:Quaternion:Quaternion
671. Conjugate
  Signature : Transforms_26:Library.Conjugate(q: Quaternion): Quaternion
  Body      : Tuple4(Negative(X(q)), Negative(Y(q)), Negative(Z(q)), W(q))
  Inline    : Tuple4(Negative(X(q#:Quaternion:)#1:Number:)#2:Number:, Negative(Y(q#:Quaternion:)#1:Number:)#2:Number:, Negative(Z(q#:Quaternion:)#1:Number:)#2:Number:, W(q#:Quaternion:)#1:Number:)#:(Tuple4, $1340:, $1341:, $1342:, $1343:):Quaternion
672. Inverse
  Signature : Transforms_26:Library.Inverse(q: Quaternion): Quaternion
  Body      : Multiply(Conjugate(q), Inverse(MagnitudeSquared(q)))
  Inline    : Multiply(Tuple4(Negative(X(q#:Quaternion:Quaternion)#1:Number:)#2:Number:, Negative(Y(q#:Quaternion:Quaternion)#1:Number:)#2:Number:, Negative(Z(q#:Quaternion:Quaternion)#1:Number:)#2:Number:, W(q#:Quaternion:Quaternion)#1:Number:)#1:(Tuple4, $1340:, $1341:, $1342:, $1343:):, Inverse(MagnitudeSquared(Tuple4(X(q#:Quaternion:Quaternion)#1:Number:, Y(q#:Quaternion:Quaternion)#1:Number:, Z(q#:Quaternion:Quaternion)#1:Number:, W(q#:Quaternion:Quaternion)#1:Number:)#1:(Tuple4, $1088:, $1089:, $1090:, $1091:):)#1::)#2:Number:)#3:Quaternion:Quaternion
673. Normalize
  Signature : Transforms_26:Library.Normalize(q: Quaternion): Quaternion
  Body      : Normalize(Vector4D(q))
  Inline    : Normalize(Tuple4(X(q#:Quaternion:Quaternion)#1:Number:, Y(q#:Quaternion:Quaternion)#1:Number:, Z(q#:Quaternion:Quaternion)#1:Number:, W(q#:Quaternion:Quaternion)#1:Number:)#1:(Tuple4, $1088:, $1089:, $1090:, $1091:):)#0::Quaternion
674. XYZ
  Signature : Transforms_26:Library.XYZ(q: Quaternion): Vector3D
  Body      : Tuple3(X, Y, Z)
  Inline    : Tuple3(X#:IAny:, Y#:IAny:, Z#:IAny:)#:(Tuple3, $1812:, $1813:, $1814:):Vector3D
675. AxisAngle
  Signature : Transforms_26:Library.AxisAngle(v: Vector3D, a: Angle): AxisAngle
  Body      : Tuple2(v, a)
  Inline    : Tuple2(v#:Vector3D:, a#:Angle:)#:(Tuple2, $1612:, $1613:):AxisAngle
676. Multiply
  Signature : Transforms_26:Library.Multiply(q: Quaternion, scalar: Number): Quaternion
  Body      : Multiply(Vector4D(q), scalar)
  Inline    : Multiply(Tuple4(X(q#:Quaternion:Quaternion)#1:Number:, Y(q#:Quaternion:Quaternion)#1:Number:, Z(q#:Quaternion:Quaternion)#1:Number:, W(q#:Quaternion:Quaternion)#1:Number:)#1:(Tuple4, $1088:, $1089:, $1090:, $1091:):, scalar#:Number:)#2:$35:constraint=IScalarArithmetic:Quaternion
677. Divide
  Signature : Transforms_26:Library.Divide(q: Quaternion, scalar: Number): Quaternion
  Body      : Divide(Vector4D(q), scalar)
  Inline    : Divide(Tuple4(X(q#:Quaternion:Quaternion)#1:Number:, Y(q#:Quaternion:Quaternion)#1:Number:, Z(q#:Quaternion:Quaternion)#1:Number:, W(q#:Quaternion:Quaternion)#1:Number:)#1:(Tuple4, $1088:, $1089:, $1090:, $1091:):, scalar#:Number:)#2:$34:constraint=IScalarArithmetic:Quaternion
678. Rotation
  Signature : Transforms_26:Library.Rotation(v: Vector3D, theta: Angle): Quaternion
  Body      : AxisAngle(v, theta)
  Inline    : AxisAngle(v#:Vector3D:, theta#:Angle:)#2:AxisAngle:Quaternion
679. XRotation
  Signature : Transforms_26:Library.XRotation(theta: Angle): Quaternion
  Body      : Rotation(XAxis3D, theta)
  Inline    : Rotation(XAxis3D#:IAny:, theta#:Angle:)#0::Quaternion
680. YRotation
  Signature : Transforms_26:Library.YRotation(theta: Angle): Quaternion
  Body      : Rotation(YAxis3D, theta)
  Inline    : Rotation(YAxis3D#:IAny:, theta#:Angle:)#0::Quaternion
681. ZRotation
  Signature : Transforms_26:Library.ZRotation(theta: Angle): Quaternion
  Body      : Rotation(ZAxis3D, theta)
  Inline    : Rotation(ZAxis3D#:IAny:, theta#:Angle:)#0::Quaternion
682. Add
  Signature : Transforms_26:Library.Add(q1: Quaternion, q2: Quaternion): Quaternion
  Body      : Add(Vector4D(q1), Vector4D(q2))
  Inline    : Add(Tuple4(X(q1#:Quaternion:Quaternion)#1:Number:, Y(q1#:Quaternion:Quaternion)#1:Number:, Z(q1#:Quaternion:Quaternion)#1:Number:, W(q1#:Quaternion:Quaternion)#1:Number:)#1:(Tuple4, $1088:, $1089:, $1090:, $1091:):, Tuple4(X(q2#:Quaternion:Quaternion)#1:Number:, Y(q2#:Quaternion:Quaternion)#1:Number:, Z(q2#:Quaternion:Quaternion)#1:Number:, W(q2#:Quaternion:Quaternion)#1:Number:)#1:(Tuple4, $1088:, $1089:, $1090:, $1091:):)#1:$30:constraint=IAdditive:Quaternion
683. Negate
  Signature : Transforms_26:Library.Negate(q: Quaternion): Quaternion
  Body      : Negative(Vector4D(q))
  Inline    : Negative(Tuple4(X(q#:Quaternion:Quaternion)#1:Number:, Y(q#:Quaternion:Quaternion)#1:Number:, Z(q#:Quaternion:Quaternion)#1:Number:, W(q#:Quaternion:Quaternion)#1:Number:)#1:(Tuple4, $1088:, $1089:, $1090:, $1091:):)#1:$32:constraint=IAdditive:Quaternion
684. Subtract
  Signature : Transforms_26:Library.Subtract(q1: Quaternion, q2: Quaternion): Quaternion
  Body      : Subtract(Vector4D(q1), Vector4D(q2))
  Inline    : Subtract(Tuple4(X(q1#:Quaternion:Quaternion)#1:Number:, Y(q1#:Quaternion:Quaternion)#1:Number:, Z(q1#:Quaternion:Quaternion)#1:Number:, W(q1#:Quaternion:Quaternion)#1:Number:)#1:(Tuple4, $1088:, $1089:, $1090:, $1091:):, Tuple4(X(q2#:Quaternion:Quaternion)#1:Number:, Y(q2#:Quaternion:Quaternion)#1:Number:, Z(q2#:Quaternion:Quaternion)#1:Number:, W(q2#:Quaternion:Quaternion)#1:Number:)#1:(Tuple4, $1088:, $1089:, $1090:, $1091:):)#1:$31:constraint=IAdditive:Quaternion
685. Dot
  Signature : Transforms_26:Library.Dot(q1: Quaternion, q2: Quaternion): Number
  Body      : Dot(Vector4D(q1), Vector4D(q2))
  Inline    : Dot(Tuple4(X(q1#:Quaternion:Quaternion)#1:Number:, Y(q1#:Quaternion:Quaternion)#1:Number:, Z(q1#:Quaternion:Quaternion)#1:Number:, W(q1#:Quaternion:Quaternion)#1:Number:)#1:(Tuple4, $1088:, $1089:, $1090:, $1091:):, Tuple4(X(q2#:Quaternion:Quaternion)#1:Number:, Y(q2#:Quaternion:Quaternion)#1:Number:, Z(q2#:Quaternion:Quaternion)#1:Number:, W(q2#:Quaternion:Quaternion)#1:Number:)#1:(Tuple4, $1088:, $1089:, $1090:, $1091:):)#0::Number
