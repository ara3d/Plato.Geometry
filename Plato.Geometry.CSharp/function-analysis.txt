0. Count
  Type: ($1:constraint=(IArray, $0:)) => Integer
  Sig: IArray_28:Concept.Count(xs: $1:constraint=(IArray, $0:)): Integer
  Body: 
1. At
  Type: ($3:constraint=(IArray, $2:), Integer) => $2:
  Sig: IArray_28:Concept.At(xs: $3:constraint=(IArray, $2:), n: Integer): $2:
  Body: 
2. NumRows
  Type: ($5:constraint=(IArray2D, $4:)) => Integer
  Sig: IArray2D_30:Concept.NumRows(xs: $5:constraint=(IArray2D, $4:)): Integer
  Body: 
3. NumColumns
  Type: ($7:constraint=(IArray2D, $6:)) => Integer
  Sig: IArray2D_30:Concept.NumColumns(xs: $7:constraint=(IArray2D, $6:)): Integer
  Body: 
4. At
  Type: ($9:constraint=(IArray2D, $8:), Integer, Integer) => $8:
  Sig: IArray2D_30:Concept.At(xs: $9:constraint=(IArray2D, $8:), column: Integer, row: Integer): $8:
  Body: 
5. NumRows
  Type: ($11:constraint=(IArray3D, $10:)) => Integer
  Sig: IArray3D_32:Concept.NumRows(xs: $11:constraint=(IArray3D, $10:)): Integer
  Body: 
6. NumColumns
  Type: ($13:constraint=(IArray3D, $12:)) => Integer
  Sig: IArray3D_32:Concept.NumColumns(xs: $13:constraint=(IArray3D, $12:)): Integer
  Body: 
7. NumLayers
  Type: ($15:constraint=(IArray3D, $14:)) => Integer
  Sig: IArray3D_32:Concept.NumLayers(xs: $15:constraint=(IArray3D, $14:)): Integer
  Body: 
8. At
  Type: ($17:constraint=(IArray3D, $16:), Integer, Integer, Integer) => $16:
  Sig: IArray3D_32:Concept.At(xs: $17:constraint=(IArray3D, $16:), column: Integer, row: Integer, layer: Integer): $16:
  Body: 
9. FieldNames
  Type: ($18:constraint=IAny) => $19:constraint=(IArray, String)
  Sig: IAny_34:Concept.FieldNames(x: $18:constraint=IAny): $19:constraint=(IArray, String)
  Body: 
10. FieldValues
  Type: ($20:constraint=IAny) => $21:constraint=(IArray, Dynamic)
  Sig: IAny_34:Concept.FieldValues(x: $20:constraint=IAny): $21:constraint=(IArray, Dynamic)
  Body: 
11. TypeName
  Type: ($22:constraint=IAny) => String
  Sig: IAny_34:Concept.TypeName(x: $22:constraint=IAny): String
  Body: 
12. Components
  Type: ($23:constraint=INumerical) => $24:constraint=(IArray, Number)
  Sig: INumerical_38:Concept.Components(x: $23:constraint=INumerical): $24:constraint=(IArray, Number)
  Body: 
13. FromComponents
  Type: ($25:constraint=INumerical, (IArray, Number)) => $25:constraint=INumerical
  Sig: INumerical_38:Concept.FromComponents(x: $25:constraint=INumerical, xs: (IArray, Number)): $25:constraint=INumerical
  Body: 
14. ToNumber
  Type: ($26:constraint=INumberLike) => Number
  Sig: INumberLike_40:Concept.ToNumber(x: $26:constraint=INumberLike): Number
  Body: 
15. FromNumber
  Type: ($27:constraint=INumberLike, Number) => $27:constraint=INumberLike
  Sig: INumberLike_40:Concept.FromNumber(x: $27:constraint=INumberLike, n: Number): $27:constraint=INumberLike
  Body: 
16. LessThanOrEquals
  Type: ($28:constraint=IOrderable, $28:constraint=IOrderable) => Boolean
  Sig: IOrderable_52:Concept.LessThanOrEquals(x: $28:constraint=IOrderable, y: $28:constraint=IOrderable): Boolean
  Body: 
17. Equals
  Type: ($29:constraint=IEquatable, $29:constraint=IEquatable) => Boolean
  Sig: IEquatable_54:Concept.Equals(a: $29:constraint=IEquatable, b: $29:constraint=IEquatable): Boolean
  Body: 
18. Add
  Type: ($30:constraint=IAdditive, $30:constraint=IAdditive) => $30:constraint=IAdditive
  Sig: IAdditive_56:Concept.Add(a: $30:constraint=IAdditive, b: $30:constraint=IAdditive): $30:constraint=IAdditive
  Body: 
19. Subtract
  Type: ($31:constraint=IAdditive, $31:constraint=IAdditive) => $31:constraint=IAdditive
  Sig: IAdditive_56:Concept.Subtract(a: $31:constraint=IAdditive, b: $31:constraint=IAdditive): $31:constraint=IAdditive
  Body: 
20. Negative
  Type: ($32:constraint=IAdditive) => $32:constraint=IAdditive
  Sig: IAdditive_56:Concept.Negative(self: $32:constraint=IAdditive): $32:constraint=IAdditive
  Body: 
21. Modulo
  Type: ($33:constraint=IScalarArithmetic, Number) => $33:constraint=IScalarArithmetic
  Sig: IScalarArithmetic_58:Concept.Modulo(self: $33:constraint=IScalarArithmetic, other: Number): $33:constraint=IScalarArithmetic
  Body: 
22. Divide
  Type: ($34:constraint=IScalarArithmetic, Number) => $34:constraint=IScalarArithmetic
  Sig: IScalarArithmetic_58:Concept.Divide(self: $34:constraint=IScalarArithmetic, other: Number): $34:constraint=IScalarArithmetic
  Body: 
23. Multiply
  Type: ($35:constraint=IScalarArithmetic, Number) => $35:constraint=IScalarArithmetic
  Sig: IScalarArithmetic_58:Concept.Multiply(self: $35:constraint=IScalarArithmetic, other: Number): $35:constraint=IScalarArithmetic
  Body: 
24. Multiply
  Type: ($36:constraint=IMultiplicative, $36:constraint=IMultiplicative) => $36:constraint=IMultiplicative
  Sig: IMultiplicative_60:Concept.Multiply(a: $36:constraint=IMultiplicative, b: $36:constraint=IMultiplicative): $36:constraint=IMultiplicative
  Body: 
25. Inverse
  Type: ($37:constraint=IInvertible) => $37:constraint=IInvertible
  Sig: IInvertible_62:Concept.Inverse(self: $37:constraint=IInvertible): $37:constraint=IInvertible
  Body: 
26. Divide
  Type: ($38:constraint=IDivisible, $38:constraint=IDivisible) => $38:constraint=IDivisible
  Sig: IDivisible_70:Concept.Divide(a: $38:constraint=IDivisible, b: $38:constraint=IDivisible): $38:constraint=IDivisible
  Body: 
27. Modulo
  Type: ($39:constraint=IModulo, $39:constraint=IModulo) => $39:constraint=IModulo
  Sig: IModulo_72:Concept.Modulo(a: $39:constraint=IModulo, b: $39:constraint=IModulo): $39:constraint=IModulo
  Body: 
28. And
  Type: ($40:constraint=IBoolean, $40:constraint=IBoolean) => $40:constraint=IBoolean
  Sig: IBoolean_76:Concept.And(a: $40:constraint=IBoolean, b: $40:constraint=IBoolean): $40:constraint=IBoolean
  Body: 
29. Or
  Type: ($41:constraint=IBoolean, $41:constraint=IBoolean) => $41:constraint=IBoolean
  Sig: IBoolean_76:Concept.Or(a: $41:constraint=IBoolean, b: $41:constraint=IBoolean): $41:constraint=IBoolean
  Body: 
30. Not
  Type: ($42:constraint=IBoolean) => $42:constraint=IBoolean
  Sig: IBoolean_76:Concept.Not(a: $42:constraint=IBoolean): $42:constraint=IBoolean
  Body: 
31. Start
  Type: ($44:constraint=(IInterval, $43:)) => $43:
  Sig: IInterval_78:Concept.Start(x: $44:constraint=(IInterval, $43:)): $43:
  Body: 
32. End
  Type: ($46:constraint=(IInterval, $45:)) => $45:
  Sig: IInterval_78:Concept.End(x: $46:constraint=(IInterval, $45:)): $45:
  Body: 
33. Min
  Type: ($48:constraint=(IBounds, $47:)) => $47:
  Sig: IBounds_80:Concept.Min(x: $48:constraint=(IBounds, $47:)): $47:
  Body: 
34. Max
  Type: ($50:constraint=(IBounds, $49:)) => $49:
  Sig: IBounds_80:Concept.Max(x: $50:constraint=(IBounds, $49:)): $49:
  Body: 
35. Value
  Type: (Unit) => Number
  Sig: Unit_82:ConcreteType.Value(self: Unit): Number
  Body: 
36. Unit
  Type: (Number) => Unit
  Sig: Unit_82:ConcreteType.Unit(Value: Number): Unit
  Body: 
37. Number
  Type: (Unit) => Number
  Sig: Unit_82:ConcreteType.Number(arg: Unit): Number
  Body: 
38. Value
  Type: (Probability) => Number
  Sig: Probability_84:ConcreteType.Value(self: Probability): Number
  Body: 
39. Probability
  Type: (Number) => Probability
  Sig: Probability_84:ConcreteType.Probability(Value: Number): Probability
  Body: 
40. Number
  Type: (Probability) => Number
  Sig: Probability_84:ConcreteType.Number(arg: Probability): Number
  Body: 
41. IReal
  Type: (Complex) => Number
  Sig: Complex_86:ConcreteType.IReal(self: Complex): Number
  Body: 
42. Imaginary
  Type: (Complex) => Number
  Sig: Complex_86:ConcreteType.Imaginary(self: Complex): Number
  Body: 
43. Complex
  Type: (Number, Number) => Complex
  Sig: Complex_86:ConcreteType.Complex(IReal: Number, Imaginary: Number): Complex
  Body: 
44. Complex
  Type: ((Tuple2, Number, Number)) => Complex
  Sig: Complex_86:ConcreteType.Complex(arg: (Tuple2, Number, Number)): Complex
  Body: 
45. A
  Type: (Integer2) => Integer
  Sig: Integer2_88:ConcreteType.A(self: Integer2): Integer
  Body: 
46. B
  Type: (Integer2) => Integer
  Sig: Integer2_88:ConcreteType.B(self: Integer2): Integer
  Body: 
47. Integer2
  Type: (Integer, Integer) => Integer2
  Sig: Integer2_88:ConcreteType.Integer2(A: Integer, B: Integer): Integer2
  Body: 
48. Integer2
  Type: ((Tuple2, Integer, Integer)) => Integer2
  Sig: Integer2_88:ConcreteType.Integer2(arg: (Tuple2, Integer, Integer)): Integer2
  Body: 
49. A
  Type: (Integer3) => Integer
  Sig: Integer3_90:ConcreteType.A(self: Integer3): Integer
  Body: 
50. B
  Type: (Integer3) => Integer
  Sig: Integer3_90:ConcreteType.B(self: Integer3): Integer
  Body: 
51. C
  Type: (Integer3) => Integer
  Sig: Integer3_90:ConcreteType.C(self: Integer3): Integer
  Body: 
52. Integer3
  Type: (Integer, Integer, Integer) => Integer3
  Sig: Integer3_90:ConcreteType.Integer3(A: Integer, B: Integer, C: Integer): Integer3
  Body: 
53. Integer3
  Type: ((Tuple3, Integer, Integer, Integer)) => Integer3
  Sig: Integer3_90:ConcreteType.Integer3(arg: (Tuple3, Integer, Integer, Integer)): Integer3
  Body: 
54. A
  Type: (Integer4) => Integer
  Sig: Integer4_92:ConcreteType.A(self: Integer4): Integer
  Body: 
55. B
  Type: (Integer4) => Integer
  Sig: Integer4_92:ConcreteType.B(self: Integer4): Integer
  Body: 
56. C
  Type: (Integer4) => Integer
  Sig: Integer4_92:ConcreteType.C(self: Integer4): Integer
  Body: 
57. D
  Type: (Integer4) => Integer
  Sig: Integer4_92:ConcreteType.D(self: Integer4): Integer
  Body: 
58. Integer4
  Type: (Integer, Integer, Integer, Integer) => Integer4
  Sig: Integer4_92:ConcreteType.Integer4(A: Integer, B: Integer, C: Integer, D: Integer): Integer4
  Body: 
59. Integer4
  Type: ((Tuple4, Integer, Integer, Integer, Integer)) => Integer4
  Sig: Integer4_92:ConcreteType.Integer4(arg: (Tuple4, Integer, Integer, Integer, Integer)): Integer4
  Body: 
60. R
  Type: (Color) => Unit
  Sig: Color_94:ConcreteType.R(self: Color): Unit
  Body: 
61. G
  Type: (Color) => Unit
  Sig: Color_94:ConcreteType.G(self: Color): Unit
  Body: 
62. B
  Type: (Color) => Unit
  Sig: Color_94:ConcreteType.B(self: Color): Unit
  Body: 
63. A
  Type: (Color) => Unit
  Sig: Color_94:ConcreteType.A(self: Color): Unit
  Body: 
64. Color
  Type: (Unit, Unit, Unit, Unit) => Color
  Sig: Color_94:ConcreteType.Color(R: Unit, G: Unit, B: Unit, A: Unit): Color
  Body: 
65. Color
  Type: ((Tuple4, Unit, Unit, Unit, Unit)) => Color
  Sig: Color_94:ConcreteType.Color(arg: (Tuple4, Unit, Unit, Unit, Unit)): Color
  Body: 
66. Lightness
  Type: (ColorLUV) => Unit
  Sig: ColorLUV_96:ConcreteType.Lightness(self: ColorLUV): Unit
  Body: 
67. U
  Type: (ColorLUV) => Unit
  Sig: ColorLUV_96:ConcreteType.U(self: ColorLUV): Unit
  Body: 
68. V
  Type: (ColorLUV) => Unit
  Sig: ColorLUV_96:ConcreteType.V(self: ColorLUV): Unit
  Body: 
69. ColorLUV
  Type: (Unit, Unit, Unit) => ColorLUV
  Sig: ColorLUV_96:ConcreteType.ColorLUV(Lightness: Unit, U: Unit, V: Unit): ColorLUV
  Body: 
70. ColorLUV
  Type: ((Tuple3, Unit, Unit, Unit)) => ColorLUV
  Sig: ColorLUV_96:ConcreteType.ColorLUV(arg: (Tuple3, Unit, Unit, Unit)): ColorLUV
  Body: 
71. Lightness
  Type: (ColorLAB) => Unit
  Sig: ColorLAB_98:ConcreteType.Lightness(self: ColorLAB): Unit
  Body: 
72. A
  Type: (ColorLAB) => Number
  Sig: ColorLAB_98:ConcreteType.A(self: ColorLAB): Number
  Body: 
73. B
  Type: (ColorLAB) => Number
  Sig: ColorLAB_98:ConcreteType.B(self: ColorLAB): Number
  Body: 
74. ColorLAB
  Type: (Unit, Number, Number) => ColorLAB
  Sig: ColorLAB_98:ConcreteType.ColorLAB(Lightness: Unit, A: Number, B: Number): ColorLAB
  Body: 
75. ColorLAB
  Type: ((Tuple3, Unit, Number, Number)) => ColorLAB
  Sig: ColorLAB_98:ConcreteType.ColorLAB(arg: (Tuple3, Unit, Number, Number)): ColorLAB
  Body: 
76. Lightness
  Type: (ColorLCh) => Unit
  Sig: ColorLCh_100:ConcreteType.Lightness(self: ColorLCh): Unit
  Body: 
77. ChromaHue
  Type: (ColorLCh) => PolarCoordinate
  Sig: ColorLCh_100:ConcreteType.ChromaHue(self: ColorLCh): PolarCoordinate
  Body: 
78. ColorLCh
  Type: (Unit, PolarCoordinate) => ColorLCh
  Sig: ColorLCh_100:ConcreteType.ColorLCh(Lightness: Unit, ChromaHue: PolarCoordinate): ColorLCh
  Body: 
79. ColorLCh
  Type: ((Tuple2, Unit, PolarCoordinate)) => ColorLCh
  Sig: ColorLCh_100:ConcreteType.ColorLCh(arg: (Tuple2, Unit, PolarCoordinate)): ColorLCh
  Body: 
80. Hue
  Type: (ColorHSV) => Angle
  Sig: ColorHSV_102:ConcreteType.Hue(self: ColorHSV): Angle
  Body: 
81. S
  Type: (ColorHSV) => Unit
  Sig: ColorHSV_102:ConcreteType.S(self: ColorHSV): Unit
  Body: 
82. V
  Type: (ColorHSV) => Unit
  Sig: ColorHSV_102:ConcreteType.V(self: ColorHSV): Unit
  Body: 
83. ColorHSV
  Type: (Angle, Unit, Unit) => ColorHSV
  Sig: ColorHSV_102:ConcreteType.ColorHSV(Hue: Angle, S: Unit, V: Unit): ColorHSV
  Body: 
84. ColorHSV
  Type: ((Tuple3, Angle, Unit, Unit)) => ColorHSV
  Sig: ColorHSV_102:ConcreteType.ColorHSV(arg: (Tuple3, Angle, Unit, Unit)): ColorHSV
  Body: 
85. Hue
  Type: (ColorHSL) => Angle
  Sig: ColorHSL_104:ConcreteType.Hue(self: ColorHSL): Angle
  Body: 
86. Saturation
  Type: (ColorHSL) => Unit
  Sig: ColorHSL_104:ConcreteType.Saturation(self: ColorHSL): Unit
  Body: 
87. Luminance
  Type: (ColorHSL) => Unit
  Sig: ColorHSL_104:ConcreteType.Luminance(self: ColorHSL): Unit
  Body: 
88. ColorHSL
  Type: (Angle, Unit, Unit) => ColorHSL
  Sig: ColorHSL_104:ConcreteType.ColorHSL(Hue: Angle, Saturation: Unit, Luminance: Unit): ColorHSL
  Body: 
89. ColorHSL
  Type: ((Tuple3, Angle, Unit, Unit)) => ColorHSL
  Sig: ColorHSL_104:ConcreteType.ColorHSL(arg: (Tuple3, Angle, Unit, Unit)): ColorHSL
  Body: 
90. Y
  Type: (ColorYCbCr) => Unit
  Sig: ColorYCbCr_106:ConcreteType.Y(self: ColorYCbCr): Unit
  Body: 
91. Cb
  Type: (ColorYCbCr) => Unit
  Sig: ColorYCbCr_106:ConcreteType.Cb(self: ColorYCbCr): Unit
  Body: 
92. Cr
  Type: (ColorYCbCr) => Unit
  Sig: ColorYCbCr_106:ConcreteType.Cr(self: ColorYCbCr): Unit
  Body: 
93. ColorYCbCr
  Type: (Unit, Unit, Unit) => ColorYCbCr
  Sig: ColorYCbCr_106:ConcreteType.ColorYCbCr(Y: Unit, Cb: Unit, Cr: Unit): ColorYCbCr
  Body: 
94. ColorYCbCr
  Type: ((Tuple3, Unit, Unit, Unit)) => ColorYCbCr
  Sig: ColorYCbCr_106:ConcreteType.ColorYCbCr(arg: (Tuple3, Unit, Unit, Unit)): ColorYCbCr
  Body: 
95. RadialDistance
  Type: (SphericalCoordinate) => Number
  Sig: SphericalCoordinate_108:ConcreteType.RadialDistance(self: SphericalCoordinate): Number
  Body: 
96. Azimuth
  Type: (SphericalCoordinate) => Angle
  Sig: SphericalCoordinate_108:ConcreteType.Azimuth(self: SphericalCoordinate): Angle
  Body: 
97. Polar
  Type: (SphericalCoordinate) => Angle
  Sig: SphericalCoordinate_108:ConcreteType.Polar(self: SphericalCoordinate): Angle
  Body: 
98. SphericalCoordinate
  Type: (Number, Angle, Angle) => SphericalCoordinate
  Sig: SphericalCoordinate_108:ConcreteType.SphericalCoordinate(RadialDistance: Number, Azimuth: Angle, Polar: Angle): SphericalCoordinate
  Body: 
99. SphericalCoordinate
  Type: ((Tuple3, Number, Angle, Angle)) => SphericalCoordinate
  Sig: SphericalCoordinate_108:ConcreteType.SphericalCoordinate(arg: (Tuple3, Number, Angle, Angle)): SphericalCoordinate
  Body: 
100. Radius
  Type: (PolarCoordinate) => Number
  Sig: PolarCoordinate_110:ConcreteType.Radius(self: PolarCoordinate): Number
  Body: 
101. Angle
  Type: (PolarCoordinate) => Angle
  Sig: PolarCoordinate_110:ConcreteType.Angle(self: PolarCoordinate): Angle
  Body: 
102. PolarCoordinate
  Type: (Number, Angle) => PolarCoordinate
  Sig: PolarCoordinate_110:ConcreteType.PolarCoordinate(Radius: Number, Angle: Angle): PolarCoordinate
  Body: 
103. PolarCoordinate
  Type: ((Tuple2, Number, Angle)) => PolarCoordinate
  Sig: PolarCoordinate_110:ConcreteType.PolarCoordinate(arg: (Tuple2, Number, Angle)): PolarCoordinate
  Body: 
104. Rho
  Type: (LogPolarCoordinate) => Number
  Sig: LogPolarCoordinate_112:ConcreteType.Rho(self: LogPolarCoordinate): Number
  Body: 
105. Azimuth
  Type: (LogPolarCoordinate) => Angle
  Sig: LogPolarCoordinate_112:ConcreteType.Azimuth(self: LogPolarCoordinate): Angle
  Body: 
106. LogPolarCoordinate
  Type: (Number, Angle) => LogPolarCoordinate
  Sig: LogPolarCoordinate_112:ConcreteType.LogPolarCoordinate(Rho: Number, Azimuth: Angle): LogPolarCoordinate
  Body: 
107. LogPolarCoordinate
  Type: ((Tuple2, Number, Angle)) => LogPolarCoordinate
  Sig: LogPolarCoordinate_112:ConcreteType.LogPolarCoordinate(arg: (Tuple2, Number, Angle)): LogPolarCoordinate
  Body: 
108. RadialDistance
  Type: (CylindricalCoordinate) => Number
  Sig: CylindricalCoordinate_114:ConcreteType.RadialDistance(self: CylindricalCoordinate): Number
  Body: 
109. Azimuth
  Type: (CylindricalCoordinate) => Angle
  Sig: CylindricalCoordinate_114:ConcreteType.Azimuth(self: CylindricalCoordinate): Angle
  Body: 
110. Height
  Type: (CylindricalCoordinate) => Number
  Sig: CylindricalCoordinate_114:ConcreteType.Height(self: CylindricalCoordinate): Number
  Body: 
111. CylindricalCoordinate
  Type: (Number, Angle, Number) => CylindricalCoordinate
  Sig: CylindricalCoordinate_114:ConcreteType.CylindricalCoordinate(RadialDistance: Number, Azimuth: Angle, Height: Number): CylindricalCoordinate
  Body: 
112. CylindricalCoordinate
  Type: ((Tuple3, Number, Angle, Number)) => CylindricalCoordinate
  Sig: CylindricalCoordinate_114:ConcreteType.CylindricalCoordinate(arg: (Tuple3, Number, Angle, Number)): CylindricalCoordinate
  Body: 
113. Altitude
  Type: (HorizontalCoordinate) => Angle
  Sig: HorizontalCoordinate_116:ConcreteType.Altitude(self: HorizontalCoordinate): Angle
  Body: 
114. Azimuth
  Type: (HorizontalCoordinate) => Angle
  Sig: HorizontalCoordinate_116:ConcreteType.Azimuth(self: HorizontalCoordinate): Angle
  Body: 
115. HorizontalCoordinate
  Type: (Angle, Angle) => HorizontalCoordinate
  Sig: HorizontalCoordinate_116:ConcreteType.HorizontalCoordinate(Altitude: Angle, Azimuth: Angle): HorizontalCoordinate
  Body: 
116. HorizontalCoordinate
  Type: ((Tuple2, Angle, Angle)) => HorizontalCoordinate
  Sig: HorizontalCoordinate_116:ConcreteType.HorizontalCoordinate(arg: (Tuple2, Angle, Angle)): HorizontalCoordinate
  Body: 
117. Latitude
  Type: (GeoCoordinate) => Angle
  Sig: GeoCoordinate_118:ConcreteType.Latitude(self: GeoCoordinate): Angle
  Body: 
118. Longitude
  Type: (GeoCoordinate) => Angle
  Sig: GeoCoordinate_118:ConcreteType.Longitude(self: GeoCoordinate): Angle
  Body: 
119. GeoCoordinate
  Type: (Angle, Angle) => GeoCoordinate
  Sig: GeoCoordinate_118:ConcreteType.GeoCoordinate(Latitude: Angle, Longitude: Angle): GeoCoordinate
  Body: 
120. GeoCoordinate
  Type: ((Tuple2, Angle, Angle)) => GeoCoordinate
  Sig: GeoCoordinate_118:ConcreteType.GeoCoordinate(arg: (Tuple2, Angle, Angle)): GeoCoordinate
  Body: 
121. ICoordinate
  Type: (GeoCoordinateWithAltitude) => GeoCoordinate
  Sig: GeoCoordinateWithAltitude_120:ConcreteType.ICoordinate(self: GeoCoordinateWithAltitude): GeoCoordinate
  Body: 
122. Altitude
  Type: (GeoCoordinateWithAltitude) => Number
  Sig: GeoCoordinateWithAltitude_120:ConcreteType.Altitude(self: GeoCoordinateWithAltitude): Number
  Body: 
123. GeoCoordinateWithAltitude
  Type: (GeoCoordinate, Number) => GeoCoordinateWithAltitude
  Sig: GeoCoordinateWithAltitude_120:ConcreteType.GeoCoordinateWithAltitude(ICoordinate: GeoCoordinate, Altitude: Number): GeoCoordinateWithAltitude
  Body: 
124. GeoCoordinateWithAltitude
  Type: ((Tuple2, GeoCoordinate, Number)) => GeoCoordinateWithAltitude
  Sig: GeoCoordinateWithAltitude_120:ConcreteType.GeoCoordinateWithAltitude(arg: (Tuple2, GeoCoordinate, Number)): GeoCoordinateWithAltitude
  Body: 
125. Numerator
  Type: (Rational) => Integer
  Sig: Rational_122:ConcreteType.Numerator(self: Rational): Integer
  Body: 
126. Denominator
  Type: (Rational) => Integer
  Sig: Rational_122:ConcreteType.Denominator(self: Rational): Integer
  Body: 
127. Rational
  Type: (Integer, Integer) => Rational
  Sig: Rational_122:ConcreteType.Rational(Numerator: Integer, Denominator: Integer): Rational
  Body: 
128. Rational
  Type: ((Tuple2, Integer, Integer)) => Rational
  Sig: Rational_122:ConcreteType.Rational(arg: (Tuple2, Integer, Integer)): Rational
  Body: 
129. Numerator
  Type: (Fraction) => Number
  Sig: Fraction_124:ConcreteType.Numerator(self: Fraction): Number
  Body: 
130. Denominator
  Type: (Fraction) => Number
  Sig: Fraction_124:ConcreteType.Denominator(self: Fraction): Number
  Body: 
131. Fraction
  Type: (Number, Number) => Fraction
  Sig: Fraction_124:ConcreteType.Fraction(Numerator: Number, Denominator: Number): Fraction
  Body: 
132. Fraction
  Type: ((Tuple2, Number, Number)) => Fraction
  Sig: Fraction_124:ConcreteType.Fraction(arg: (Tuple2, Number, Number)): Fraction
  Body: 
133. Radians
  Type: (Angle) => Number
  Sig: Angle_126:ConcreteType.Radians(self: Angle): Number
  Body: 
134. Angle
  Type: (Number) => Angle
  Sig: Angle_126:ConcreteType.Angle(Radians: Number): Angle
  Body: 
135. Number
  Type: (Angle) => Number
  Sig: Angle_126:ConcreteType.Number(arg: Angle): Number
  Body: 
136. Meters
  Type: (Length) => Number
  Sig: Length_128:ConcreteType.Meters(self: Length): Number
  Body: 
137. Length
  Type: (Number) => Length
  Sig: Length_128:ConcreteType.Length(Meters: Number): Length
  Body: 
138. Number
  Type: (Length) => Number
  Sig: Length_128:ConcreteType.Number(arg: Length): Number
  Body: 
139. Kilograms
  Type: (Mass) => Number
  Sig: Mass_130:ConcreteType.Kilograms(self: Mass): Number
  Body: 
140. Mass
  Type: (Number) => Mass
  Sig: Mass_130:ConcreteType.Mass(Kilograms: Number): Mass
  Body: 
141. Number
  Type: (Mass) => Number
  Sig: Mass_130:ConcreteType.Number(arg: Mass): Number
  Body: 
142. Celsius
  Type: (Temperature) => Number
  Sig: Temperature_132:ConcreteType.Celsius(self: Temperature): Number
  Body: 
143. Temperature
  Type: (Number) => Temperature
  Sig: Temperature_132:ConcreteType.Temperature(Celsius: Number): Temperature
  Body: 
144. Number
  Type: (Temperature) => Number
  Sig: Temperature_132:ConcreteType.Number(arg: Temperature): Number
  Body: 
145. Seconds
  Type: (Time) => Number
  Sig: Time_134:ConcreteType.Seconds(self: Time): Number
  Body: 
146. Time
  Type: (Number) => Time
  Sig: Time_134:ConcreteType.Time(Seconds: Number): Time
  Body: 
147. Number
  Type: (Time) => Number
  Sig: Time_134:ConcreteType.Number(arg: Time): Number
  Body: 
148. Value
  Type: (DateTime) => Number
  Sig: DateTime_136:ConcreteType.Value(self: DateTime): Number
  Body: 
149. DateTime
  Type: (Number) => DateTime
  Sig: DateTime_136:ConcreteType.DateTime(Value: Number): DateTime
  Body: 
150. Number
  Type: (DateTime) => Number
  Sig: DateTime_136:ConcreteType.Number(arg: DateTime): Number
  Body: 
151. Start
  Type: (AnglePair) => Angle
  Sig: AnglePair_138:ConcreteType.Start(self: AnglePair): Angle
  Body: 
152. End
  Type: (AnglePair) => Angle
  Sig: AnglePair_138:ConcreteType.End(self: AnglePair): Angle
  Body: 
153. AnglePair
  Type: (Angle, Angle) => AnglePair
  Sig: AnglePair_138:ConcreteType.AnglePair(Start: Angle, End: Angle): AnglePair
  Body: 
154. AnglePair
  Type: ((Tuple2, Angle, Angle)) => AnglePair
  Sig: AnglePair_138:ConcreteType.AnglePair(arg: (Tuple2, Angle, Angle)): AnglePair
  Body: 
155. Start
  Type: (NumberInterval) => Number
  Sig: NumberInterval_140:ConcreteType.Start(self: NumberInterval): Number
  Body: 
156. End
  Type: (NumberInterval) => Number
  Sig: NumberInterval_140:ConcreteType.End(self: NumberInterval): Number
  Body: 
157. NumberInterval
  Type: (Number, Number) => NumberInterval
  Sig: NumberInterval_140:ConcreteType.NumberInterval(Start: Number, End: Number): NumberInterval
  Body: 
158. NumberInterval
  Type: ((Tuple2, Number, Number)) => NumberInterval
  Sig: NumberInterval_140:ConcreteType.NumberInterval(arg: (Tuple2, Number, Number)): NumberInterval
  Body: 
159. Eval
  Type: ($51:constraint=IRealFunction, Number) => Number
  Sig: IRealFunction_142:Concept.Eval(f: $51:constraint=IRealFunction, x: Number): Number
  Body: 
160. Slope
  Type: (LinearEquation) => Number
  Sig: LinearEquation_144:ConcreteType.Slope(self: LinearEquation): Number
  Body: 
161. YIntercept
  Type: (LinearEquation) => Number
  Sig: LinearEquation_144:ConcreteType.YIntercept(self: LinearEquation): Number
  Body: 
162. LinearEquation
  Type: (Number, Number) => LinearEquation
  Sig: LinearEquation_144:ConcreteType.LinearEquation(Slope: Number, YIntercept: Number): LinearEquation
  Body: 
163. LinearEquation
  Type: ((Tuple2, Number, Number)) => LinearEquation
  Sig: LinearEquation_144:ConcreteType.LinearEquation(arg: (Tuple2, Number, Number)): LinearEquation
  Body: 
164. A
  Type: (Quadratic) => Number
  Sig: Quadratic_146:ConcreteType.A(self: Quadratic): Number
  Body: 
165. B
  Type: (Quadratic) => Number
  Sig: Quadratic_146:ConcreteType.B(self: Quadratic): Number
  Body: 
166. C
  Type: (Quadratic) => Number
  Sig: Quadratic_146:ConcreteType.C(self: Quadratic): Number
  Body: 
167. Quadratic
  Type: (Number, Number, Number) => Quadratic
  Sig: Quadratic_146:ConcreteType.Quadratic(A: Number, B: Number, C: Number): Quadratic
  Body: 
168. Quadratic
  Type: ((Tuple3, Number, Number, Number)) => Quadratic
  Sig: Quadratic_146:ConcreteType.Quadratic(arg: (Tuple3, Number, Number, Number)): Quadratic
  Body: 
169. A
  Type: (Cubic) => Number
  Sig: Cubic_148:ConcreteType.A(self: Cubic): Number
  Body: 
170. B
  Type: (Cubic) => Number
  Sig: Cubic_148:ConcreteType.B(self: Cubic): Number
  Body: 
171. C
  Type: (Cubic) => Number
  Sig: Cubic_148:ConcreteType.C(self: Cubic): Number
  Body: 
172. D
  Type: (Cubic) => Number
  Sig: Cubic_148:ConcreteType.D(self: Cubic): Number
  Body: 
173. Cubic
  Type: (Number, Number, Number, Number) => Cubic
  Sig: Cubic_148:ConcreteType.Cubic(A: Number, B: Number, C: Number, D: Number): Cubic
  Body: 
174. Cubic
  Type: ((Tuple4, Number, Number, Number, Number)) => Cubic
  Sig: Cubic_148:ConcreteType.Cubic(arg: (Tuple4, Number, Number, Number, Number)): Cubic
  Body: 
175. Amplitude
  Type: (SineWave) => Number
  Sig: SineWave_152:ConcreteType.Amplitude(self: SineWave): Number
  Body: 
176. Frequency
  Type: (SineWave) => Number
  Sig: SineWave_152:ConcreteType.Frequency(self: SineWave): Number
  Body: 
177. Phase
  Type: (SineWave) => Number
  Sig: SineWave_152:ConcreteType.Phase(self: SineWave): Number
  Body: 
178. SineWave
  Type: (Number, Number, Number) => SineWave
  Sig: SineWave_152:ConcreteType.SineWave(Amplitude: Number, Frequency: Number, Phase: Number): SineWave
  Body: 
179. SineWave
  Type: ((Tuple3, Number, Number, Number)) => SineWave
  Sig: SineWave_152:ConcreteType.SineWave(arg: (Tuple3, Number, Number, Number)): SineWave
  Body: 
180. Radius1
  Type: (Spiral) => Number
  Sig: Spiral_154:ConcreteType.Radius1(self: Spiral): Number
  Body: 
181. Radius2
  Type: (Spiral) => Number
  Sig: Spiral_154:ConcreteType.Radius2(self: Spiral): Number
  Body: 
182. NumTurns
  Type: (Spiral) => Number
  Sig: Spiral_154:ConcreteType.NumTurns(self: Spiral): Number
  Body: 
183. Spiral
  Type: (Number, Number, Number) => Spiral
  Sig: Spiral_154:ConcreteType.Spiral(Radius1: Number, Radius2: Number, NumTurns: Number): Spiral
  Body: 
184. Spiral
  Type: ((Tuple3, Number, Number, Number)) => Spiral
  Sig: Spiral_154:ConcreteType.Spiral(arg: (Tuple3, Number, Number, Number)): Spiral
  Body: 
185. A
  Type: (QuadraticBezier2D) => Vector2D
  Sig: QuadraticBezier2D_156:ConcreteType.A(self: QuadraticBezier2D): Vector2D
  Body: 
186. B
  Type: (QuadraticBezier2D) => Vector2D
  Sig: QuadraticBezier2D_156:ConcreteType.B(self: QuadraticBezier2D): Vector2D
  Body: 
187. C
  Type: (QuadraticBezier2D) => Vector2D
  Sig: QuadraticBezier2D_156:ConcreteType.C(self: QuadraticBezier2D): Vector2D
  Body: 
188. QuadraticBezier2D
  Type: (Vector2D, Vector2D, Vector2D) => QuadraticBezier2D
  Sig: QuadraticBezier2D_156:ConcreteType.QuadraticBezier2D(A: Vector2D, B: Vector2D, C: Vector2D): QuadraticBezier2D
  Body: 
189. QuadraticBezier2D
  Type: ((Tuple3, Vector2D, Vector2D, Vector2D)) => QuadraticBezier2D
  Sig: QuadraticBezier2D_156:ConcreteType.QuadraticBezier2D(arg: (Tuple3, Vector2D, Vector2D, Vector2D)): QuadraticBezier2D
  Body: 
190. A
  Type: (CubicBezier2D) => Vector2D
  Sig: CubicBezier2D_158:ConcreteType.A(self: CubicBezier2D): Vector2D
  Body: 
191. B
  Type: (CubicBezier2D) => Vector2D
  Sig: CubicBezier2D_158:ConcreteType.B(self: CubicBezier2D): Vector2D
  Body: 
192. C
  Type: (CubicBezier2D) => Vector2D
  Sig: CubicBezier2D_158:ConcreteType.C(self: CubicBezier2D): Vector2D
  Body: 
193. D
  Type: (CubicBezier2D) => Vector2D
  Sig: CubicBezier2D_158:ConcreteType.D(self: CubicBezier2D): Vector2D
  Body: 
194. CubicBezier2D
  Type: (Vector2D, Vector2D, Vector2D, Vector2D) => CubicBezier2D
  Sig: CubicBezier2D_158:ConcreteType.CubicBezier2D(A: Vector2D, B: Vector2D, C: Vector2D, D: Vector2D): CubicBezier2D
  Body: 
195. CubicBezier2D
  Type: ((Tuple4, Vector2D, Vector2D, Vector2D, Vector2D)) => CubicBezier2D
  Sig: CubicBezier2D_158:ConcreteType.CubicBezier2D(arg: (Tuple4, Vector2D, Vector2D, Vector2D, Vector2D)): CubicBezier2D
  Body: 
196. GetPoint
  Type: ($52:constraint=IAngularCurve2D, Angle) => Vector2D
  Sig: IAngularCurve2D_160:Concept.GetPoint(curve: $52:constraint=IAngularCurve2D, t: Angle): Vector2D
  Body: 
197. Center
  Type: (Circle) => Vector2D
  Sig: Circle_162:ConcreteType.Center(self: Circle): Vector2D
  Body: 
198. Radius
  Type: (Circle) => Number
  Sig: Circle_162:ConcreteType.Radius(self: Circle): Number
  Body: 
199. Circle
  Type: (Vector2D, Number) => Circle
  Sig: Circle_162:ConcreteType.Circle(Center: Vector2D, Radius: Number): Circle
  Body: 
200. Circle
  Type: ((Tuple2, Vector2D, Number)) => Circle
  Sig: Circle_162:ConcreteType.Circle(arg: (Tuple2, Vector2D, Number)): Circle
  Body: 
201. Center
  Type: (Ellipse) => Vector2D
  Sig: Ellipse_164:ConcreteType.Center(self: Ellipse): Vector2D
  Body: 
202. Size
  Type: (Ellipse) => Vector2D
  Sig: Ellipse_164:ConcreteType.Size(self: Ellipse): Vector2D
  Body: 
203. Ellipse
  Type: (Vector2D, Vector2D) => Ellipse
  Sig: Ellipse_164:ConcreteType.Ellipse(Center: Vector2D, Size: Vector2D): Ellipse
  Body: 
204. Ellipse
  Type: ((Tuple2, Vector2D, Vector2D)) => Ellipse
  Sig: Ellipse_164:ConcreteType.Ellipse(arg: (Tuple2, Vector2D, Vector2D)): Ellipse
  Body: 
205. Radius1
  Type: (Epicycloid) => Number
  Sig: Epicycloid_166:ConcreteType.Radius1(self: Epicycloid): Number
  Body: 
206. Radius2
  Type: (Epicycloid) => Number
  Sig: Epicycloid_166:ConcreteType.Radius2(self: Epicycloid): Number
  Body: 
207. Epicycloid
  Type: (Number, Number) => Epicycloid
  Sig: Epicycloid_166:ConcreteType.Epicycloid(Radius1: Number, Radius2: Number): Epicycloid
  Body: 
208. Epicycloid
  Type: ((Tuple2, Number, Number)) => Epicycloid
  Sig: Epicycloid_166:ConcreteType.Epicycloid(arg: (Tuple2, Number, Number)): Epicycloid
  Body: 
209. Radius1
  Type: (Hypocycloid) => Number
  Sig: Hypocycloid_168:ConcreteType.Radius1(self: Hypocycloid): Number
  Body: 
210. Radius2
  Type: (Hypocycloid) => Number
  Sig: Hypocycloid_168:ConcreteType.Radius2(self: Hypocycloid): Number
  Body: 
211. Hypocycloid
  Type: (Number, Number) => Hypocycloid
  Sig: Hypocycloid_168:ConcreteType.Hypocycloid(Radius1: Number, Radius2: Number): Hypocycloid
  Body: 
212. Hypocycloid
  Type: ((Tuple2, Number, Number)) => Hypocycloid
  Sig: Hypocycloid_168:ConcreteType.Hypocycloid(arg: (Tuple2, Number, Number)): Hypocycloid
  Body: 
213. Radius1
  Type: (Epitrochoid) => Number
  Sig: Epitrochoid_170:ConcreteType.Radius1(self: Epitrochoid): Number
  Body: 
214. Radius2
  Type: (Epitrochoid) => Number
  Sig: Epitrochoid_170:ConcreteType.Radius2(self: Epitrochoid): Number
  Body: 
215. Dist
  Type: (Epitrochoid) => Number
  Sig: Epitrochoid_170:ConcreteType.Dist(self: Epitrochoid): Number
  Body: 
216. Epitrochoid
  Type: (Number, Number, Number) => Epitrochoid
  Sig: Epitrochoid_170:ConcreteType.Epitrochoid(Radius1: Number, Radius2: Number, Dist: Number): Epitrochoid
  Body: 
217. Epitrochoid
  Type: ((Tuple3, Number, Number, Number)) => Epitrochoid
  Sig: Epitrochoid_170:ConcreteType.Epitrochoid(arg: (Tuple3, Number, Number, Number)): Epitrochoid
  Body: 
218. Radius1
  Type: (Hypotrochoid) => Number
  Sig: Hypotrochoid_172:ConcreteType.Radius1(self: Hypotrochoid): Number
  Body: 
219. Radius2
  Type: (Hypotrochoid) => Number
  Sig: Hypotrochoid_172:ConcreteType.Radius2(self: Hypotrochoid): Number
  Body: 
220. Dist
  Type: (Hypotrochoid) => Number
  Sig: Hypotrochoid_172:ConcreteType.Dist(self: Hypotrochoid): Number
  Body: 
221. Hypotrochoid
  Type: (Number, Number, Number) => Hypotrochoid
  Sig: Hypotrochoid_172:ConcreteType.Hypotrochoid(Radius1: Number, Radius2: Number, Dist: Number): Hypotrochoid
  Body: 
222. Hypotrochoid
  Type: ((Tuple3, Number, Number, Number)) => Hypotrochoid
  Sig: Hypotrochoid_172:ConcreteType.Hypotrochoid(arg: (Tuple3, Number, Number, Number)): Hypotrochoid
  Body: 
223. Delta
  Type: (Lissajous) => Angle
  Sig: Lissajous_176:ConcreteType.Delta(self: Lissajous): Angle
  Body: 
224. A
  Type: (Lissajous) => Number
  Sig: Lissajous_176:ConcreteType.A(self: Lissajous): Number
  Body: 
225. B
  Type: (Lissajous) => Number
  Sig: Lissajous_176:ConcreteType.B(self: Lissajous): Number
  Body: 
226. Lissajous
  Type: (Angle, Number, Number) => Lissajous
  Sig: Lissajous_176:ConcreteType.Lissajous(Delta: Angle, A: Number, B: Number): Lissajous
  Body: 
227. Lissajous
  Type: ((Tuple3, Angle, Number, Number)) => Lissajous
  Sig: Lissajous_176:ConcreteType.Lissajous(arg: (Tuple3, Angle, Number, Number)): Lissajous
  Body: 
228. GetRadius
  Type: ($53:constraint=IPolarCurve, Angle) => Number
  Sig: IPolarCurve_178:Concept.GetRadius(curve: $53:constraint=IPolarCurve, t: Angle): Number
  Body: 
229. A
  Type: (Limacon) => Number
  Sig: Limacon_182:ConcreteType.A(self: Limacon): Number
  Body: 
230. B
  Type: (Limacon) => Number
  Sig: Limacon_182:ConcreteType.B(self: Limacon): Number
  Body: 
231. Limacon
  Type: (Number, Number) => Limacon
  Sig: Limacon_182:ConcreteType.Limacon(A: Number, B: Number): Limacon
  Body: 
232. Limacon
  Type: ((Tuple2, Number, Number)) => Limacon
  Sig: Limacon_182:ConcreteType.Limacon(arg: (Tuple2, Number, Number)): Limacon
  Body: 
233. K
  Type: (Rose) => Integer
  Sig: Rose_186:ConcreteType.K(self: Rose): Integer
  Body: 
234. Rose
  Type: (Integer) => Rose
  Sig: Rose_186:ConcreteType.Rose(K: Integer): Rose
  Body: 
235. Integer
  Type: (Rose) => Integer
  Sig: Rose_186:ConcreteType.Integer(arg: Rose): Integer
  Body: 
236. A
  Type: (ArchimedeanSpiral) => Number
  Sig: ArchimedeanSpiral_188:ConcreteType.A(self: ArchimedeanSpiral): Number
  Body: 
237. B
  Type: (ArchimedeanSpiral) => Number
  Sig: ArchimedeanSpiral_188:ConcreteType.B(self: ArchimedeanSpiral): Number
  Body: 
238. ArchimedeanSpiral
  Type: (Number, Number) => ArchimedeanSpiral
  Sig: ArchimedeanSpiral_188:ConcreteType.ArchimedeanSpiral(A: Number, B: Number): ArchimedeanSpiral
  Body: 
239. ArchimedeanSpiral
  Type: ((Tuple2, Number, Number)) => ArchimedeanSpiral
  Sig: ArchimedeanSpiral_188:ConcreteType.ArchimedeanSpiral(arg: (Tuple2, Number, Number)): ArchimedeanSpiral
  Body: 
240. Eccentricity
  Type: (ConicSection) => Number
  Sig: ConicSection_190:ConcreteType.Eccentricity(self: ConicSection): Number
  Body: 
241. SemiLatusRectum
  Type: (ConicSection) => Number
  Sig: ConicSection_190:ConcreteType.SemiLatusRectum(self: ConicSection): Number
  Body: 
242. ConicSection
  Type: (Number, Number) => ConicSection
  Sig: ConicSection_190:ConcreteType.ConicSection(Eccentricity: Number, SemiLatusRectum: Number): ConicSection
  Body: 
243. ConicSection
  Type: ((Tuple2, Number, Number)) => ConicSection
  Sig: ConicSection_190:ConcreteType.ConicSection(arg: (Tuple2, Number, Number)): ConicSection
  Body: 
244. A
  Type: (LemniscateOfBernoulli) => Number
  Sig: LemniscateOfBernoulli_192:ConcreteType.A(self: LemniscateOfBernoulli): Number
  Body: 
245. LemniscateOfBernoulli
  Type: (Number) => LemniscateOfBernoulli
  Sig: LemniscateOfBernoulli_192:ConcreteType.LemniscateOfBernoulli(A: Number): LemniscateOfBernoulli
  Body: 
246. Number
  Type: (LemniscateOfBernoulli) => Number
  Sig: LemniscateOfBernoulli_192:ConcreteType.Number(arg: LemniscateOfBernoulli): Number
  Body: 
247. A
  Type: (TrisectrixOfMaclaurin) => Number
  Sig: TrisectrixOfMaclaurin_194:ConcreteType.A(self: TrisectrixOfMaclaurin): Number
  Body: 
248. TrisectrixOfMaclaurin
  Type: (Number) => TrisectrixOfMaclaurin
  Sig: TrisectrixOfMaclaurin_194:ConcreteType.TrisectrixOfMaclaurin(A: Number): TrisectrixOfMaclaurin
  Body: 
249. Number
  Type: (TrisectrixOfMaclaurin) => Number
  Sig: TrisectrixOfMaclaurin_194:ConcreteType.Number(arg: TrisectrixOfMaclaurin): Number
  Body: 
250. A
  Type: (ConchoidOfDeSluze) => Number
  Sig: ConchoidOfDeSluze_196:ConcreteType.A(self: ConchoidOfDeSluze): Number
  Body: 
251. ConchoidOfDeSluze
  Type: (Number) => ConchoidOfDeSluze
  Sig: ConchoidOfDeSluze_196:ConcreteType.ConchoidOfDeSluze(A: Number): ConchoidOfDeSluze
  Body: 
252. Number
  Type: (ConchoidOfDeSluze) => Number
  Sig: ConchoidOfDeSluze_196:ConcreteType.Number(arg: ConchoidOfDeSluze): Number
  Body: 
253. A
  Type: (TschirnhausenCubic) => Number
  Sig: TschirnhausenCubic_198:ConcreteType.A(self: TschirnhausenCubic): Number
  Body: 
254. TschirnhausenCubic
  Type: (Number) => TschirnhausenCubic
  Sig: TschirnhausenCubic_198:ConcreteType.TschirnhausenCubic(A: Number): TschirnhausenCubic
  Body: 
255. Number
  Type: (TschirnhausenCubic) => Number
  Sig: TschirnhausenCubic_198:ConcreteType.Number(arg: TschirnhausenCubic): Number
  Body: 
256. A
  Type: (SinusoidalSpiral) => Number
  Sig: SinusoidalSpiral_200:ConcreteType.A(self: SinusoidalSpiral): Number
  Body: 
257. N
  Type: (SinusoidalSpiral) => Number
  Sig: SinusoidalSpiral_200:ConcreteType.N(self: SinusoidalSpiral): Number
  Body: 
258. SinusoidalSpiral
  Type: (Number, Number) => SinusoidalSpiral
  Sig: SinusoidalSpiral_200:ConcreteType.SinusoidalSpiral(A: Number, N: Number): SinusoidalSpiral
  Body: 
259. SinusoidalSpiral
  Type: ((Tuple2, Number, Number)) => SinusoidalSpiral
  Sig: SinusoidalSpiral_200:ConcreteType.SinusoidalSpiral(arg: (Tuple2, Number, Number)): SinusoidalSpiral
  Body: 
260. A
  Type: (FermatsSpiral) => Number
  Sig: FermatsSpiral_202:ConcreteType.A(self: FermatsSpiral): Number
  Body: 
261. FermatsSpiral
  Type: (Number) => FermatsSpiral
  Sig: FermatsSpiral_202:ConcreteType.FermatsSpiral(A: Number): FermatsSpiral
  Body: 
262. Number
  Type: (FermatsSpiral) => Number
  Sig: FermatsSpiral_202:ConcreteType.Number(arg: FermatsSpiral): Number
  Body: 
263. A
  Type: (LogarithmicSpiral) => Number
  Sig: LogarithmicSpiral_204:ConcreteType.A(self: LogarithmicSpiral): Number
  Body: 
264. K
  Type: (LogarithmicSpiral) => Number
  Sig: LogarithmicSpiral_204:ConcreteType.K(self: LogarithmicSpiral): Number
  Body: 
265. LogarithmicSpiral
  Type: (Number, Number) => LogarithmicSpiral
  Sig: LogarithmicSpiral_204:ConcreteType.LogarithmicSpiral(A: Number, K: Number): LogarithmicSpiral
  Body: 
266. LogarithmicSpiral
  Type: ((Tuple2, Number, Number)) => LogarithmicSpiral
  Sig: LogarithmicSpiral_204:ConcreteType.LogarithmicSpiral(arg: (Tuple2, Number, Number)): LogarithmicSpiral
  Body: 
267. A
  Type: (CubicBezier3D) => Vector3D
  Sig: CubicBezier3D_206:ConcreteType.A(self: CubicBezier3D): Vector3D
  Body: 
268. B
  Type: (CubicBezier3D) => Vector3D
  Sig: CubicBezier3D_206:ConcreteType.B(self: CubicBezier3D): Vector3D
  Body: 
269. C
  Type: (CubicBezier3D) => Vector3D
  Sig: CubicBezier3D_206:ConcreteType.C(self: CubicBezier3D): Vector3D
  Body: 
270. D
  Type: (CubicBezier3D) => Vector3D
  Sig: CubicBezier3D_206:ConcreteType.D(self: CubicBezier3D): Vector3D
  Body: 
271. CubicBezier3D
  Type: (Vector3D, Vector3D, Vector3D, Vector3D) => CubicBezier3D
  Sig: CubicBezier3D_206:ConcreteType.CubicBezier3D(A: Vector3D, B: Vector3D, C: Vector3D, D: Vector3D): CubicBezier3D
  Body: 
272. CubicBezier3D
  Type: ((Tuple4, Vector3D, Vector3D, Vector3D, Vector3D)) => CubicBezier3D
  Sig: CubicBezier3D_206:ConcreteType.CubicBezier3D(arg: (Tuple4, Vector3D, Vector3D, Vector3D, Vector3D)): CubicBezier3D
  Body: 
273. A
  Type: (QuadraticBezier3D) => Vector3D
  Sig: QuadraticBezier3D_208:ConcreteType.A(self: QuadraticBezier3D): Vector3D
  Body: 
274. B
  Type: (QuadraticBezier3D) => Vector3D
  Sig: QuadraticBezier3D_208:ConcreteType.B(self: QuadraticBezier3D): Vector3D
  Body: 
275. C
  Type: (QuadraticBezier3D) => Vector3D
  Sig: QuadraticBezier3D_208:ConcreteType.C(self: QuadraticBezier3D): Vector3D
  Body: 
276. QuadraticBezier3D
  Type: (Vector3D, Vector3D, Vector3D) => QuadraticBezier3D
  Sig: QuadraticBezier3D_208:ConcreteType.QuadraticBezier3D(A: Vector3D, B: Vector3D, C: Vector3D): QuadraticBezier3D
  Body: 
277. QuadraticBezier3D
  Type: ((Tuple3, Vector3D, Vector3D, Vector3D)) => QuadraticBezier3D
  Sig: QuadraticBezier3D_208:ConcreteType.QuadraticBezier3D(arg: (Tuple3, Vector3D, Vector3D, Vector3D)): QuadraticBezier3D
  Body: 
278. GetPoint
  Type: ($54:constraint=IAngularCurve3D, Angle) => Vector3D
  Sig: IAngularCurve3D_210:Concept.GetPoint(curve: $54:constraint=IAngularCurve3D, t: Angle): Vector3D
  Body: 
279. P
  Type: (TorusKnot) => Integer
  Sig: TorusKnot_212:ConcreteType.P(self: TorusKnot): Integer
  Body: 
280. Q
  Type: (TorusKnot) => Integer
  Sig: TorusKnot_212:ConcreteType.Q(self: TorusKnot): Integer
  Body: 
281. Radius
  Type: (TorusKnot) => Number
  Sig: TorusKnot_212:ConcreteType.Radius(self: TorusKnot): Number
  Body: 
282. TorusKnot
  Type: (Integer, Integer, Number) => TorusKnot
  Sig: TorusKnot_212:ConcreteType.TorusKnot(P: Integer, Q: Integer, Radius: Number): TorusKnot
  Body: 
283. TorusKnot
  Type: ((Tuple3, Integer, Integer, Number)) => TorusKnot
  Sig: TorusKnot_212:ConcreteType.TorusKnot(arg: (Tuple3, Integer, Integer, Number)): TorusKnot
  Body: 
284. Radius
  Type: (Helix) => Number
  Sig: Helix_218:ConcreteType.Radius(self: Helix): Number
  Body: 
285. Height
  Type: (Helix) => Number
  Sig: Helix_218:ConcreteType.Height(self: Helix): Number
  Body: 
286. NumTurns
  Type: (Helix) => Number
  Sig: Helix_218:ConcreteType.NumTurns(self: Helix): Number
  Body: 
287. Helix
  Type: (Number, Number, Number) => Helix
  Sig: Helix_218:ConcreteType.Helix(Radius: Number, Height: Number, NumTurns: Number): Helix
  Body: 
288. Helix
  Type: ((Tuple3, Number, Number, Number)) => Helix
  Sig: Helix_218:ConcreteType.Helix(arg: (Tuple3, Number, Number, Number)): Helix
  Body: 
289. Bounds
  Type: ($55:constraint=IBounded2D) => Bounds2D
  Sig: IBounded2D_220:Concept.Bounds(x: $55:constraint=IBounded2D): Bounds2D
  Body: 
290. Bounds
  Type: ($56:constraint=IBounded3D) => Bounds3D
  Sig: IBounded3D_222:Concept.Bounds(x: $56:constraint=IBounded3D): Bounds3D
  Body: 
291. Deform
  Type: ($57:constraint=IDeformable2D, (Function1, Vector2D, Vector2D)) => $57:constraint=IDeformable2D
  Sig: IDeformable2D_224:Concept.Deform(x: $57:constraint=IDeformable2D, f: (Function1, Vector2D, Vector2D)): $57:constraint=IDeformable2D
  Body: 
292. Closed
  Type: ($58:constraint=IOpenClosedShape) => Boolean
  Sig: IOpenClosedShape_226:Concept.Closed(x: $58:constraint=IOpenClosedShape): Boolean
  Body: 
293. Deform
  Type: ($59:constraint=IDeformable3D, (Function1, Vector3D, Vector3D)) => $59:constraint=IDeformable3D
  Sig: IDeformable3D_228:Concept.Deform(x: $59:constraint=IDeformable3D, f: (Function1, Vector3D, Vector3D)): $59:constraint=IDeformable3D
  Body: 
294. Eval
  Type: ($62:constraint=(IProcedural, $60:, $61:), $60:) => $61:
  Sig: IProcedural_252:Concept.Eval(x: $62:constraint=(IProcedural, $60:, $61:), t: $60:): $61:
  Body: 
295. Distance
  Type: ($63:constraint=IDistanceField2D, Vector2D) => Number
  Sig: IDistanceField2D_256:Concept.Distance(x: $63:constraint=IDistanceField2D, p: Vector2D): Number
  Body: 
296. Distance
  Type: ($64:constraint=IDistanceField3D, Vector3D) => Number
  Sig: IDistanceField3D_258:Concept.Distance(x: $64:constraint=IDistanceField3D, p: Vector3D): Number
  Body: 
297. ClosedX
  Type: ($65:constraint=IProceduralSurface) => Boolean
  Sig: IProceduralSurface_276:Concept.ClosedX(x: $65:constraint=IProceduralSurface): Boolean
  Body: 
298. ClosedY
  Type: ($66:constraint=IProceduralSurface) => Boolean
  Sig: IProceduralSurface_276:Concept.ClosedY(x: $66:constraint=IProceduralSurface): Boolean
  Body: 
299. PrimitiveSize
  Type: ($67:constraint=IPrimitiveGeometry) => Integer
  Sig: IPrimitiveGeometry_302:Concept.PrimitiveSize(x: $67:constraint=IPrimitiveGeometry): Integer
  Body: 
300. NumPrimitives
  Type: ($68:constraint=IPrimitiveGeometry) => Integer
  Sig: IPrimitiveGeometry_302:Concept.NumPrimitives(x: $68:constraint=IPrimitiveGeometry): Integer
  Body: 
301. Points
  Type: ($69:constraint=IPointGeometry2D) => $70:constraint=(IArray, Vector2D)
  Sig: IPointGeometry2D_312:Concept.Points(x: $69:constraint=IPointGeometry2D): $70:constraint=(IArray, Vector2D)
  Body: 
302. Points
  Type: ($71:constraint=IPointGeometry3D) => $72:constraint=(IArray, Vector3D)
  Sig: IPointGeometry3D_314:Concept.Points(x: $71:constraint=IPointGeometry3D): $72:constraint=(IArray, Vector3D)
  Body: 
303. Lines
  Type: ($73:constraint=ILineGeometry2D) => $74:constraint=(IArray, Line2D)
  Sig: ILineGeometry2D_320:Concept.Lines(x: $73:constraint=ILineGeometry2D): $74:constraint=(IArray, Line2D)
  Body: 
304. Lines
  Type: ($75:constraint=ILineGeometry3D) => $76:constraint=(IArray, Line3D)
  Sig: ILineGeometry3D_322:Concept.Lines(x: $75:constraint=ILineGeometry3D): $76:constraint=(IArray, Line3D)
  Body: 
305. Triangles
  Type: ($77:constraint=ITriangleGeometry2D) => $78:constraint=(IArray, Triangle2D)
  Sig: ITriangleGeometry2D_324:Concept.Triangles(x: $77:constraint=ITriangleGeometry2D): $78:constraint=(IArray, Triangle2D)
  Body: 
306. Triangles
  Type: ($79:constraint=ITriangleGeometry3D) => $80:constraint=(IArray, Triangle3D)
  Sig: ITriangleGeometry3D_326:Concept.Triangles(x: $79:constraint=ITriangleGeometry3D): $80:constraint=(IArray, Triangle3D)
  Body: 
307. Quads
  Type: ($81:constraint=IQuadGeometry2D) => $82:constraint=(IArray, Quad2D)
  Sig: IQuadGeometry2D_328:Concept.Quads(x: $81:constraint=IQuadGeometry2D): $82:constraint=(IArray, Quad2D)
  Body: 
308. Quads
  Type: ($83:constraint=IQuadGeometry3D) => $84:constraint=(IArray, Quad3D)
  Sig: IQuadGeometry3D_330:Concept.Quads(x: $83:constraint=IQuadGeometry3D): $84:constraint=(IArray, Quad3D)
  Body: 
309. Indices
  Type: ($85:constraint=IIndexedGeometry) => $86:constraint=(IArray, Integer)
  Sig: IIndexedGeometry_332:Concept.Indices(x: $85:constraint=IIndexedGeometry): $86:constraint=(IArray, Integer)
  Body: 
310. PointGrid
  Type: ($87:constraint=IQuadGrid3D) => $88:constraint=(IArray2D, Vector3D)
  Sig: IQuadGrid3D_366:Concept.PointGrid(x: $87:constraint=IQuadGrid3D): $88:constraint=(IArray2D, Vector3D)
  Body: 
311. ClosedX
  Type: ($89:constraint=IQuadGrid3D) => Boolean
  Sig: IQuadGrid3D_366:Concept.ClosedX(x: $89:constraint=IQuadGrid3D): Boolean
  Body: 
312. ClosedY
  Type: ($90:constraint=IQuadGrid3D) => Boolean
  Sig: IQuadGrid3D_366:Concept.ClosedY(x: $90:constraint=IQuadGrid3D): Boolean
  Body: 
313. Translation
  Type: (Transform2D) => Vector2D
  Sig: Transform2D_368:ConcreteType.Translation(self: Transform2D): Vector2D
  Body: 
314. Rotation
  Type: (Transform2D) => Angle
  Sig: Transform2D_368:ConcreteType.Rotation(self: Transform2D): Angle
  Body: 
315. Scale
  Type: (Transform2D) => Vector2D
  Sig: Transform2D_368:ConcreteType.Scale(self: Transform2D): Vector2D
  Body: 
316. Transform2D
  Type: (Vector2D, Angle, Vector2D) => Transform2D
  Sig: Transform2D_368:ConcreteType.Transform2D(Translation: Vector2D, Rotation: Angle, Scale: Vector2D): Transform2D
  Body: 
317. Transform2D
  Type: ((Tuple3, Vector2D, Angle, Vector2D)) => Transform2D
  Sig: Transform2D_368:ConcreteType.Transform2D(arg: (Tuple3, Vector2D, Angle, Vector2D)): Transform2D
  Body: 
318. Position
  Type: (Pose2D) => Vector2D
  Sig: Pose2D_370:ConcreteType.Position(self: Pose2D): Vector2D
  Body: 
319. Rotation
  Type: (Pose2D) => Angle
  Sig: Pose2D_370:ConcreteType.Rotation(self: Pose2D): Angle
  Body: 
320. Pose2D
  Type: (Vector2D, Angle) => Pose2D
  Sig: Pose2D_370:ConcreteType.Pose2D(Position: Vector2D, Rotation: Angle): Pose2D
  Body: 
321. Pose2D
  Type: ((Tuple2, Vector2D, Angle)) => Pose2D
  Sig: Pose2D_370:ConcreteType.Pose2D(arg: (Tuple2, Vector2D, Angle)): Pose2D
  Body: 
322. Min
  Type: (Bounds2D) => Vector2D
  Sig: Bounds2D_372:ConcreteType.Min(self: Bounds2D): Vector2D
  Body: 
323. Max
  Type: (Bounds2D) => Vector2D
  Sig: Bounds2D_372:ConcreteType.Max(self: Bounds2D): Vector2D
  Body: 
324. Bounds2D
  Type: (Vector2D, Vector2D) => Bounds2D
  Sig: Bounds2D_372:ConcreteType.Bounds2D(Min: Vector2D, Max: Vector2D): Bounds2D
  Body: 
325. Bounds2D
  Type: ((Tuple2, Vector2D, Vector2D)) => Bounds2D
  Sig: Bounds2D_372:ConcreteType.Bounds2D(arg: (Tuple2, Vector2D, Vector2D)): Bounds2D
  Body: 
326. Origin
  Type: (Ray2D) => Vector2D
  Sig: Ray2D_374:ConcreteType.Origin(self: Ray2D): Vector2D
  Body: 
327. Direction
  Type: (Ray2D) => Vector2D
  Sig: Ray2D_374:ConcreteType.Direction(self: Ray2D): Vector2D
  Body: 
328. Ray2D
  Type: (Vector2D, Vector2D) => Ray2D
  Sig: Ray2D_374:ConcreteType.Ray2D(Origin: Vector2D, Direction: Vector2D): Ray2D
  Body: 
329. Ray2D
  Type: ((Tuple2, Vector2D, Vector2D)) => Ray2D
  Sig: Ray2D_374:ConcreteType.Ray2D(arg: (Tuple2, Vector2D, Vector2D)): Ray2D
  Body: 
330. A
  Type: (Triangle2D) => Vector2D
  Sig: Triangle2D_376:ConcreteType.A(self: Triangle2D): Vector2D
  Body: 
331. B
  Type: (Triangle2D) => Vector2D
  Sig: Triangle2D_376:ConcreteType.B(self: Triangle2D): Vector2D
  Body: 
332. C
  Type: (Triangle2D) => Vector2D
  Sig: Triangle2D_376:ConcreteType.C(self: Triangle2D): Vector2D
  Body: 
333. Triangle2D
  Type: (Vector2D, Vector2D, Vector2D) => Triangle2D
  Sig: Triangle2D_376:ConcreteType.Triangle2D(A: Vector2D, B: Vector2D, C: Vector2D): Triangle2D
  Body: 
334. Triangle2D
  Type: ((Tuple3, Vector2D, Vector2D, Vector2D)) => Triangle2D
  Sig: Triangle2D_376:ConcreteType.Triangle2D(arg: (Tuple3, Vector2D, Vector2D, Vector2D)): Triangle2D
  Body: 
335. A
  Type: (Quad2D) => Vector2D
  Sig: Quad2D_378:ConcreteType.A(self: Quad2D): Vector2D
  Body: 
336. B
  Type: (Quad2D) => Vector2D
  Sig: Quad2D_378:ConcreteType.B(self: Quad2D): Vector2D
  Body: 
337. C
  Type: (Quad2D) => Vector2D
  Sig: Quad2D_378:ConcreteType.C(self: Quad2D): Vector2D
  Body: 
338. D
  Type: (Quad2D) => Vector2D
  Sig: Quad2D_378:ConcreteType.D(self: Quad2D): Vector2D
  Body: 
339. Quad2D
  Type: (Vector2D, Vector2D, Vector2D, Vector2D) => Quad2D
  Sig: Quad2D_378:ConcreteType.Quad2D(A: Vector2D, B: Vector2D, C: Vector2D, D: Vector2D): Quad2D
  Body: 
340. Quad2D
  Type: ((Tuple4, Vector2D, Vector2D, Vector2D, Vector2D)) => Quad2D
  Sig: Quad2D_378:ConcreteType.Quad2D(arg: (Tuple4, Vector2D, Vector2D, Vector2D, Vector2D)): Quad2D
  Body: 
341. A
  Type: (Line2D) => Vector2D
  Sig: Line2D_380:ConcreteType.A(self: Line2D): Vector2D
  Body: 
342. B
  Type: (Line2D) => Vector2D
  Sig: Line2D_380:ConcreteType.B(self: Line2D): Vector2D
  Body: 
343. Line2D
  Type: (Vector2D, Vector2D) => Line2D
  Sig: Line2D_380:ConcreteType.Line2D(A: Vector2D, B: Vector2D): Line2D
  Body: 
344. Line2D
  Type: ((Tuple2, Vector2D, Vector2D)) => Line2D
  Sig: Line2D_380:ConcreteType.Line2D(arg: (Tuple2, Vector2D, Vector2D)): Line2D
  Body: 
345. A
  Type: (Lens) => Circle
  Sig: Lens_382:ConcreteType.A(self: Lens): Circle
  Body: 
346. B
  Type: (Lens) => Circle
  Sig: Lens_382:ConcreteType.B(self: Lens): Circle
  Body: 
347. Lens
  Type: (Circle, Circle) => Lens
  Sig: Lens_382:ConcreteType.Lens(A: Circle, B: Circle): Lens
  Body: 
348. Lens
  Type: ((Tuple2, Circle, Circle)) => Lens
  Sig: Lens_382:ConcreteType.Lens(arg: (Tuple2, Circle, Circle)): Lens
  Body: 
349. Center
  Type: (Rect2D) => Vector2D
  Sig: Rect2D_384:ConcreteType.Center(self: Rect2D): Vector2D
  Body: 
350. Size
  Type: (Rect2D) => Vector2D
  Sig: Rect2D_384:ConcreteType.Size(self: Rect2D): Vector2D
  Body: 
351. Rect2D
  Type: (Vector2D, Vector2D) => Rect2D
  Sig: Rect2D_384:ConcreteType.Rect2D(Center: Vector2D, Size: Vector2D): Rect2D
  Body: 
352. Rect2D
  Type: ((Tuple2, Vector2D, Vector2D)) => Rect2D
  Sig: Rect2D_384:ConcreteType.Rect2D(arg: (Tuple2, Vector2D, Vector2D)): Rect2D
  Body: 
353. Center
  Type: (Ring) => Vector2D
  Sig: Ring_386:ConcreteType.Center(self: Ring): Vector2D
  Body: 
354. InnerRadius
  Type: (Ring) => Number
  Sig: Ring_386:ConcreteType.InnerRadius(self: Ring): Number
  Body: 
355. OuterRadius
  Type: (Ring) => Number
  Sig: Ring_386:ConcreteType.OuterRadius(self: Ring): Number
  Body: 
356. Ring
  Type: (Vector2D, Number, Number) => Ring
  Sig: Ring_386:ConcreteType.Ring(Center: Vector2D, InnerRadius: Number, OuterRadius: Number): Ring
  Body: 
357. Ring
  Type: ((Tuple3, Vector2D, Number, Number)) => Ring
  Sig: Ring_386:ConcreteType.Ring(arg: (Tuple3, Vector2D, Number, Number)): Ring
  Body: 
358. Angles
  Type: (Arc) => AnglePair
  Sig: Arc_388:ConcreteType.Angles(self: Arc): AnglePair
  Body: 
359. Circle
  Type: (Arc) => Circle
  Sig: Arc_388:ConcreteType.Circle(self: Arc): Circle
  Body: 
360. Arc
  Type: (AnglePair, Circle) => Arc
  Sig: Arc_388:ConcreteType.Arc(Angles: AnglePair, Circle: Circle): Arc
  Body: 
361. Arc
  Type: ((Tuple2, AnglePair, Circle)) => Arc
  Sig: Arc_388:ConcreteType.Arc(arg: (Tuple2, AnglePair, Circle)): Arc
  Body: 
362. Arc
  Type: (Sector) => Arc
  Sig: Sector_390:ConcreteType.Arc(self: Sector): Arc
  Body: 
363. Sector
  Type: (Arc) => Sector
  Sig: Sector_390:ConcreteType.Sector(Arc: Arc): Sector
  Body: 
364. Arc
  Type: (Sector) => Arc
  Sig: Sector_390:ConcreteType.Arc(arg: Sector): Arc
  Body: 
365. Arc
  Type: (Chord) => Arc
  Sig: Chord_392:ConcreteType.Arc(self: Chord): Arc
  Body: 
366. Chord
  Type: (Arc) => Chord
  Sig: Chord_392:ConcreteType.Chord(Arc: Arc): Chord
  Body: 
367. Arc
  Type: (Chord) => Arc
  Sig: Chord_392:ConcreteType.Arc(arg: Chord): Arc
  Body: 
368. Arc
  Type: (Segment) => Arc
  Sig: Segment_394:ConcreteType.Arc(self: Segment): Arc
  Body: 
369. Segment
  Type: (Arc) => Segment
  Sig: Segment_394:ConcreteType.Segment(Arc: Arc): Segment
  Body: 
370. Arc
  Type: (Segment) => Arc
  Sig: Segment_394:ConcreteType.Arc(arg: Segment): Arc
  Body: 
371. NumPoints
  Type: (RegularPolygon) => Integer
  Sig: RegularPolygon_396:ConcreteType.NumPoints(self: RegularPolygon): Integer
  Body: 
372. RegularPolygon
  Type: (Integer) => RegularPolygon
  Sig: RegularPolygon_396:ConcreteType.RegularPolygon(NumPoints: Integer): RegularPolygon
  Body: 
373. Integer
  Type: (RegularPolygon) => Integer
  Sig: RegularPolygon_396:ConcreteType.Integer(arg: RegularPolygon): Integer
  Body: 
374. Center
  Type: (Box2D) => Vector2D
  Sig: Box2D_398:ConcreteType.Center(self: Box2D): Vector2D
  Body: 
375. Rotation
  Type: (Box2D) => Angle
  Sig: Box2D_398:ConcreteType.Rotation(self: Box2D): Angle
  Body: 
376. Extent
  Type: (Box2D) => Vector2D
  Sig: Box2D_398:ConcreteType.Extent(self: Box2D): Vector2D
  Body: 
377. Box2D
  Type: (Vector2D, Angle, Vector2D) => Box2D
  Sig: Box2D_398:ConcreteType.Box2D(Center: Vector2D, Rotation: Angle, Extent: Vector2D): Box2D
  Body: 
378. Box2D
  Type: ((Tuple3, Vector2D, Angle, Vector2D)) => Box2D
  Sig: Box2D_398:ConcreteType.Box2D(arg: (Tuple3, Vector2D, Angle, Vector2D)): Box2D
  Body: 
379. Normal
  Type: (Plane) => Vector3D
  Sig: Plane_400:ConcreteType.Normal(self: Plane): Vector3D
  Body: 
380. D
  Type: (Plane) => Number
  Sig: Plane_400:ConcreteType.D(self: Plane): Number
  Body: 
381. Plane
  Type: (Vector3D, Number) => Plane
  Sig: Plane_400:ConcreteType.Plane(Normal: Vector3D, D: Number): Plane
  Body: 
382. Plane
  Type: ((Tuple2, Vector3D, Number)) => Plane
  Sig: Plane_400:ConcreteType.Plane(arg: (Tuple2, Vector3D, Number)): Plane
  Body: 
383. Min
  Type: (Bounds3D) => Vector3D
  Sig: Bounds3D_402:ConcreteType.Min(self: Bounds3D): Vector3D
  Body: 
384. Max
  Type: (Bounds3D) => Vector3D
  Sig: Bounds3D_402:ConcreteType.Max(self: Bounds3D): Vector3D
  Body: 
385. Bounds3D
  Type: (Vector3D, Vector3D) => Bounds3D
  Sig: Bounds3D_402:ConcreteType.Bounds3D(Min: Vector3D, Max: Vector3D): Bounds3D
  Body: 
386. Bounds3D
  Type: ((Tuple2, Vector3D, Vector3D)) => Bounds3D
  Sig: Bounds3D_402:ConcreteType.Bounds3D(arg: (Tuple2, Vector3D, Vector3D)): Bounds3D
  Body: 
387. A
  Type: (Line3D) => Vector3D
  Sig: Line3D_404:ConcreteType.A(self: Line3D): Vector3D
  Body: 
388. B
  Type: (Line3D) => Vector3D
  Sig: Line3D_404:ConcreteType.B(self: Line3D): Vector3D
  Body: 
389. Line3D
  Type: (Vector3D, Vector3D) => Line3D
  Sig: Line3D_404:ConcreteType.Line3D(A: Vector3D, B: Vector3D): Line3D
  Body: 
390. Line3D
  Type: ((Tuple2, Vector3D, Vector3D)) => Line3D
  Sig: Line3D_404:ConcreteType.Line3D(arg: (Tuple2, Vector3D, Vector3D)): Line3D
  Body: 
391. Origin
  Type: (Ray3D) => Vector3D
  Sig: Ray3D_406:ConcreteType.Origin(self: Ray3D): Vector3D
  Body: 
392. Direction
  Type: (Ray3D) => Vector3D
  Sig: Ray3D_406:ConcreteType.Direction(self: Ray3D): Vector3D
  Body: 
393. Ray3D
  Type: (Vector3D, Vector3D) => Ray3D
  Sig: Ray3D_406:ConcreteType.Ray3D(Origin: Vector3D, Direction: Vector3D): Ray3D
  Body: 
394. Ray3D
  Type: ((Tuple2, Vector3D, Vector3D)) => Ray3D
  Sig: Ray3D_406:ConcreteType.Ray3D(arg: (Tuple2, Vector3D, Vector3D)): Ray3D
  Body: 
395. A
  Type: (Triangle3D) => Vector3D
  Sig: Triangle3D_408:ConcreteType.A(self: Triangle3D): Vector3D
  Body: 
396. B
  Type: (Triangle3D) => Vector3D
  Sig: Triangle3D_408:ConcreteType.B(self: Triangle3D): Vector3D
  Body: 
397. C
  Type: (Triangle3D) => Vector3D
  Sig: Triangle3D_408:ConcreteType.C(self: Triangle3D): Vector3D
  Body: 
398. Triangle3D
  Type: (Vector3D, Vector3D, Vector3D) => Triangle3D
  Sig: Triangle3D_408:ConcreteType.Triangle3D(A: Vector3D, B: Vector3D, C: Vector3D): Triangle3D
  Body: 
399. Triangle3D
  Type: ((Tuple3, Vector3D, Vector3D, Vector3D)) => Triangle3D
  Sig: Triangle3D_408:ConcreteType.Triangle3D(arg: (Tuple3, Vector3D, Vector3D, Vector3D)): Triangle3D
  Body: 
400. A
  Type: (Quad3D) => Vector3D
  Sig: Quad3D_410:ConcreteType.A(self: Quad3D): Vector3D
  Body: 
401. B
  Type: (Quad3D) => Vector3D
  Sig: Quad3D_410:ConcreteType.B(self: Quad3D): Vector3D
  Body: 
402. C
  Type: (Quad3D) => Vector3D
  Sig: Quad3D_410:ConcreteType.C(self: Quad3D): Vector3D
  Body: 
403. D
  Type: (Quad3D) => Vector3D
  Sig: Quad3D_410:ConcreteType.D(self: Quad3D): Vector3D
  Body: 
404. Quad3D
  Type: (Vector3D, Vector3D, Vector3D, Vector3D) => Quad3D
  Sig: Quad3D_410:ConcreteType.Quad3D(A: Vector3D, B: Vector3D, C: Vector3D, D: Vector3D): Quad3D
  Body: 
405. Quad3D
  Type: ((Tuple4, Vector3D, Vector3D, Vector3D, Vector3D)) => Quad3D
  Sig: Quad3D_410:ConcreteType.Quad3D(arg: (Tuple4, Vector3D, Vector3D, Vector3D, Vector3D)): Quad3D
  Body: 
406. Points
  Type: (LineMesh3D) => $91:constraint=(IArray, Vector3D)
  Sig: LineMesh3D_412:ConcreteType.Points(self: LineMesh3D): $91:constraint=(IArray, Vector3D)
  Body: 
407. Indices
  Type: (LineMesh3D) => $92:constraint=(IArray, Integer)
  Sig: LineMesh3D_412:ConcreteType.Indices(self: LineMesh3D): $92:constraint=(IArray, Integer)
  Body: 
408. LineMesh3D
  Type: ((IArray, Vector3D), (IArray, Integer)) => LineMesh3D
  Sig: LineMesh3D_412:ConcreteType.LineMesh3D(Points: (IArray, Vector3D), Indices: (IArray, Integer)): LineMesh3D
  Body: 
409. LineMesh3D
  Type: ((Tuple2, (IArray, Vector3D), (IArray, Integer))) => LineMesh3D
  Sig: LineMesh3D_412:ConcreteType.LineMesh3D(arg: (Tuple2, (IArray, Vector3D), (IArray, Integer))): LineMesh3D
  Body: 
410. Points
  Type: (TriangleMesh3D) => $93:constraint=(IArray, Vector3D)
  Sig: TriangleMesh3D_414:ConcreteType.Points(self: TriangleMesh3D): $93:constraint=(IArray, Vector3D)
  Body: 
411. Indices
  Type: (TriangleMesh3D) => $94:constraint=(IArray, Integer)
  Sig: TriangleMesh3D_414:ConcreteType.Indices(self: TriangleMesh3D): $94:constraint=(IArray, Integer)
  Body: 
412. TriangleMesh3D
  Type: ((IArray, Vector3D), (IArray, Integer)) => TriangleMesh3D
  Sig: TriangleMesh3D_414:ConcreteType.TriangleMesh3D(Points: (IArray, Vector3D), Indices: (IArray, Integer)): TriangleMesh3D
  Body: 
413. TriangleMesh3D
  Type: ((Tuple2, (IArray, Vector3D), (IArray, Integer))) => TriangleMesh3D
  Sig: TriangleMesh3D_414:ConcreteType.TriangleMesh3D(arg: (Tuple2, (IArray, Vector3D), (IArray, Integer))): TriangleMesh3D
  Body: 
414. Points
  Type: (QuadMesh3D) => $95:constraint=(IArray, Vector3D)
  Sig: QuadMesh3D_416:ConcreteType.Points(self: QuadMesh3D): $95:constraint=(IArray, Vector3D)
  Body: 
415. Indices
  Type: (QuadMesh3D) => $96:constraint=(IArray, Integer)
  Sig: QuadMesh3D_416:ConcreteType.Indices(self: QuadMesh3D): $96:constraint=(IArray, Integer)
  Body: 
416. QuadMesh3D
  Type: ((IArray, Vector3D), (IArray, Integer)) => QuadMesh3D
  Sig: QuadMesh3D_416:ConcreteType.QuadMesh3D(Points: (IArray, Vector3D), Indices: (IArray, Integer)): QuadMesh3D
  Body: 
417. QuadMesh3D
  Type: ((Tuple2, (IArray, Vector3D), (IArray, Integer))) => QuadMesh3D
  Sig: QuadMesh3D_416:ConcreteType.QuadMesh3D(arg: (Tuple2, (IArray, Vector3D), (IArray, Integer))): QuadMesh3D
  Body: 
418. Points
  Type: (PolyLine2D) => $97:constraint=(IArray, Vector2D)
  Sig: PolyLine2D_418:ConcreteType.Points(self: PolyLine2D): $97:constraint=(IArray, Vector2D)
  Body: 
419. Closed
  Type: (PolyLine2D) => Boolean
  Sig: PolyLine2D_418:ConcreteType.Closed(self: PolyLine2D): Boolean
  Body: 
420. PolyLine2D
  Type: ((IArray, Vector2D), Boolean) => PolyLine2D
  Sig: PolyLine2D_418:ConcreteType.PolyLine2D(Points: (IArray, Vector2D), Closed: Boolean): PolyLine2D
  Body: 
421. PolyLine2D
  Type: ((Tuple2, (IArray, Vector2D), Boolean)) => PolyLine2D
  Sig: PolyLine2D_418:ConcreteType.PolyLine2D(arg: (Tuple2, (IArray, Vector2D), Boolean)): PolyLine2D
  Body: 
422. Points
  Type: (PolyLine3D) => $98:constraint=(IArray, Vector3D)
  Sig: PolyLine3D_420:ConcreteType.Points(self: PolyLine3D): $98:constraint=(IArray, Vector3D)
  Body: 
423. Closed
  Type: (PolyLine3D) => Boolean
  Sig: PolyLine3D_420:ConcreteType.Closed(self: PolyLine3D): Boolean
  Body: 
424. PolyLine3D
  Type: ((IArray, Vector3D), Boolean) => PolyLine3D
  Sig: PolyLine3D_420:ConcreteType.PolyLine3D(Points: (IArray, Vector3D), Closed: Boolean): PolyLine3D
  Body: 
425. PolyLine3D
  Type: ((Tuple2, (IArray, Vector3D), Boolean)) => PolyLine3D
  Sig: PolyLine3D_420:ConcreteType.PolyLine3D(arg: (Tuple2, (IArray, Vector3D), Boolean)): PolyLine3D
  Body: 
426. Points
  Type: (PointArray2D) => $99:constraint=(IArray, Vector2D)
  Sig: PointArray2D_422:ConcreteType.Points(self: PointArray2D): $99:constraint=(IArray, Vector2D)
  Body: 
427. PointArray2D
  Type: ((IArray, Vector2D)) => PointArray2D
  Sig: PointArray2D_422:ConcreteType.PointArray2D(Points: (IArray, Vector2D)): PointArray2D
  Body: 
428. IArray
  Type: (PointArray2D) => $100:constraint=(IArray, Vector2D)
  Sig: PointArray2D_422:ConcreteType.IArray(arg: PointArray2D): $100:constraint=(IArray, Vector2D)
  Body: 
429. Points
  Type: (PointArray3D) => $101:constraint=(IArray, Vector3D)
  Sig: PointArray3D_424:ConcreteType.Points(self: PointArray3D): $101:constraint=(IArray, Vector3D)
  Body: 
430. PointArray3D
  Type: ((IArray, Vector3D)) => PointArray3D
  Sig: PointArray3D_424:ConcreteType.PointArray3D(Points: (IArray, Vector3D)): PointArray3D
  Body: 
431. IArray
  Type: (PointArray3D) => $102:constraint=(IArray, Vector3D)
  Sig: PointArray3D_424:ConcreteType.IArray(arg: PointArray3D): $102:constraint=(IArray, Vector3D)
  Body: 
432. Lines
  Type: (LineArray2D) => $103:constraint=(IArray, Line2D)
  Sig: LineArray2D_426:ConcreteType.Lines(self: LineArray2D): $103:constraint=(IArray, Line2D)
  Body: 
433. LineArray2D
  Type: ((IArray, Line2D)) => LineArray2D
  Sig: LineArray2D_426:ConcreteType.LineArray2D(Lines: (IArray, Line2D)): LineArray2D
  Body: 
434. IArray
  Type: (LineArray2D) => $104:constraint=(IArray, Line2D)
  Sig: LineArray2D_426:ConcreteType.IArray(arg: LineArray2D): $104:constraint=(IArray, Line2D)
  Body: 
435. Lines
  Type: (LineArray3D) => $105:constraint=(IArray, Line3D)
  Sig: LineArray3D_428:ConcreteType.Lines(self: LineArray3D): $105:constraint=(IArray, Line3D)
  Body: 
436. LineArray3D
  Type: ((IArray, Line3D)) => LineArray3D
  Sig: LineArray3D_428:ConcreteType.LineArray3D(Lines: (IArray, Line3D)): LineArray3D
  Body: 
437. IArray
  Type: (LineArray3D) => $106:constraint=(IArray, Line3D)
  Sig: LineArray3D_428:ConcreteType.IArray(arg: LineArray3D): $106:constraint=(IArray, Line3D)
  Body: 
438. Triangles
  Type: (TriangleArray2D) => $107:constraint=(IArray, Triangle2D)
  Sig: TriangleArray2D_430:ConcreteType.Triangles(self: TriangleArray2D): $107:constraint=(IArray, Triangle2D)
  Body: 
439. TriangleArray2D
  Type: ((IArray, Triangle2D)) => TriangleArray2D
  Sig: TriangleArray2D_430:ConcreteType.TriangleArray2D(Triangles: (IArray, Triangle2D)): TriangleArray2D
  Body: 
440. IArray
  Type: (TriangleArray2D) => $108:constraint=(IArray, Triangle2D)
  Sig: TriangleArray2D_430:ConcreteType.IArray(arg: TriangleArray2D): $108:constraint=(IArray, Triangle2D)
  Body: 
441. Triangles
  Type: (TriangleArray3D) => $109:constraint=(IArray, Triangle3D)
  Sig: TriangleArray3D_432:ConcreteType.Triangles(self: TriangleArray3D): $109:constraint=(IArray, Triangle3D)
  Body: 
442. TriangleArray3D
  Type: ((IArray, Triangle3D)) => TriangleArray3D
  Sig: TriangleArray3D_432:ConcreteType.TriangleArray3D(Triangles: (IArray, Triangle3D)): TriangleArray3D
  Body: 
443. IArray
  Type: (TriangleArray3D) => $110:constraint=(IArray, Triangle3D)
  Sig: TriangleArray3D_432:ConcreteType.IArray(arg: TriangleArray3D): $110:constraint=(IArray, Triangle3D)
  Body: 
444. Quads
  Type: (QuadArray2D) => $111:constraint=(IArray, Quad2D)
  Sig: QuadArray2D_434:ConcreteType.Quads(self: QuadArray2D): $111:constraint=(IArray, Quad2D)
  Body: 
445. QuadArray2D
  Type: ((IArray, Quad2D)) => QuadArray2D
  Sig: QuadArray2D_434:ConcreteType.QuadArray2D(Quads: (IArray, Quad2D)): QuadArray2D
  Body: 
446. IArray
  Type: (QuadArray2D) => $112:constraint=(IArray, Quad2D)
  Sig: QuadArray2D_434:ConcreteType.IArray(arg: QuadArray2D): $112:constraint=(IArray, Quad2D)
  Body: 
447. Quads
  Type: (QuadArray3D) => $113:constraint=(IArray, Quad3D)
  Sig: QuadArray3D_436:ConcreteType.Quads(self: QuadArray3D): $113:constraint=(IArray, Quad3D)
  Body: 
448. QuadArray3D
  Type: ((IArray, Quad3D)) => QuadArray3D
  Sig: QuadArray3D_436:ConcreteType.QuadArray3D(Quads: (IArray, Quad3D)): QuadArray3D
  Body: 
449. IArray
  Type: (QuadArray3D) => $114:constraint=(IArray, Quad3D)
  Sig: QuadArray3D_436:ConcreteType.IArray(arg: QuadArray3D): $114:constraint=(IArray, Quad3D)
  Body: 
450. PointGrid
  Type: (QuadGrid3D) => $115:constraint=(IArray2D, Vector3D)
  Sig: QuadGrid3D_438:ConcreteType.PointGrid(self: QuadGrid3D): $115:constraint=(IArray2D, Vector3D)
  Body: 
451. ClosedX
  Type: (QuadGrid3D) => Boolean
  Sig: QuadGrid3D_438:ConcreteType.ClosedX(self: QuadGrid3D): Boolean
  Body: 
452. ClosedY
  Type: (QuadGrid3D) => Boolean
  Sig: QuadGrid3D_438:ConcreteType.ClosedY(self: QuadGrid3D): Boolean
  Body: 
453. QuadGrid3D
  Type: ((IArray2D, Vector3D), Boolean, Boolean) => QuadGrid3D
  Sig: QuadGrid3D_438:ConcreteType.QuadGrid3D(PointGrid: (IArray2D, Vector3D), ClosedX: Boolean, ClosedY: Boolean): QuadGrid3D
  Body: 
454. QuadGrid3D
  Type: ((Tuple3, (IArray2D, Vector3D), Boolean, Boolean)) => QuadGrid3D
  Sig: QuadGrid3D_438:ConcreteType.QuadGrid3D(arg: (Tuple3, (IArray2D, Vector3D), Boolean, Boolean)): QuadGrid3D
  Body: 
455. X0
  Type: ((Tuple2, $116:, $117:)) => $116:
  Sig: Tuple2_456:ConcreteType.X0(self: (Tuple2, $116:, $117:)): $116:
  Body: 
456. X1
  Type: ((Tuple2, $118:, $119:)) => $119:
  Sig: Tuple2_456:ConcreteType.X1(self: (Tuple2, $118:, $119:)): $119:
  Body: 
457. Tuple2
  Type: ($120:, $121:) => (Tuple2, $120:, $121:)
  Sig: Tuple2_456:ConcreteType.Tuple2(X0: $120:, X1: $121:): (Tuple2, $120:, $121:)
  Body: 
458. Tuple2
  Type: ((Tuple2, $122:, $123:)) => (Tuple2, $122:, $123:)
  Sig: Tuple2_456:ConcreteType.Tuple2(arg: (Tuple2, $122:, $123:)): (Tuple2, $122:, $123:)
  Body: 
459. X0
  Type: ((Tuple3, $124:, $125:, $126:)) => $124:
  Sig: Tuple3_458:ConcreteType.X0(self: (Tuple3, $124:, $125:, $126:)): $124:
  Body: 
460. X1
  Type: ((Tuple3, $127:, $128:, $129:)) => $128:
  Sig: Tuple3_458:ConcreteType.X1(self: (Tuple3, $127:, $128:, $129:)): $128:
  Body: 
461. X2
  Type: ((Tuple3, $130:, $131:, $132:)) => $132:
  Sig: Tuple3_458:ConcreteType.X2(self: (Tuple3, $130:, $131:, $132:)): $132:
  Body: 
462. Tuple3
  Type: ($133:, $134:, $135:) => (Tuple3, $133:, $134:, $135:)
  Sig: Tuple3_458:ConcreteType.Tuple3(X0: $133:, X1: $134:, X2: $135:): (Tuple3, $133:, $134:, $135:)
  Body: 
463. Tuple3
  Type: ((Tuple3, $136:, $137:, $138:)) => (Tuple3, $136:, $137:, $138:)
  Sig: Tuple3_458:ConcreteType.Tuple3(arg: (Tuple3, $136:, $137:, $138:)): (Tuple3, $136:, $137:, $138:)
  Body: 
464. X0
  Type: ((Tuple4, $139:, $140:, $141:, $142:)) => $139:
  Sig: Tuple4_460:ConcreteType.X0(self: (Tuple4, $139:, $140:, $141:, $142:)): $139:
  Body: 
465. X1
  Type: ((Tuple4, $143:, $144:, $145:, $146:)) => $144:
  Sig: Tuple4_460:ConcreteType.X1(self: (Tuple4, $143:, $144:, $145:, $146:)): $144:
  Body: 
466. X2
  Type: ((Tuple4, $147:, $148:, $149:, $150:)) => $149:
  Sig: Tuple4_460:ConcreteType.X2(self: (Tuple4, $147:, $148:, $149:, $150:)): $149:
  Body: 
467. X3
  Type: ((Tuple4, $151:, $152:, $153:, $154:)) => $154:
  Sig: Tuple4_460:ConcreteType.X3(self: (Tuple4, $151:, $152:, $153:, $154:)): $154:
  Body: 
468. Tuple4
  Type: ($155:, $156:, $157:, $158:) => (Tuple4, $155:, $156:, $157:, $158:)
  Sig: Tuple4_460:ConcreteType.Tuple4(X0: $155:, X1: $156:, X2: $157:, X3: $158:): (Tuple4, $155:, $156:, $157:, $158:)
  Body: 
469. Tuple4
  Type: ((Tuple4, $159:, $160:, $161:, $162:)) => (Tuple4, $159:, $160:, $161:, $162:)
  Sig: Tuple4_460:ConcreteType.Tuple4(arg: (Tuple4, $159:, $160:, $161:, $162:)): (Tuple4, $159:, $160:, $161:, $162:)
  Body: 
470. X0
  Type: ((Tuple5, $163:, $164:, $165:, $166:, $167:)) => $163:
  Sig: Tuple5_462:ConcreteType.X0(self: (Tuple5, $163:, $164:, $165:, $166:, $167:)): $163:
  Body: 
471. X1
  Type: ((Tuple5, $168:, $169:, $170:, $171:, $172:)) => $169:
  Sig: Tuple5_462:ConcreteType.X1(self: (Tuple5, $168:, $169:, $170:, $171:, $172:)): $169:
  Body: 
472. X2
  Type: ((Tuple5, $173:, $174:, $175:, $176:, $177:)) => $175:
  Sig: Tuple5_462:ConcreteType.X2(self: (Tuple5, $173:, $174:, $175:, $176:, $177:)): $175:
  Body: 
473. X3
  Type: ((Tuple5, $178:, $179:, $180:, $181:, $182:)) => $181:
  Sig: Tuple5_462:ConcreteType.X3(self: (Tuple5, $178:, $179:, $180:, $181:, $182:)): $181:
  Body: 
474. X4
  Type: ((Tuple5, $183:, $184:, $185:, $186:, $187:)) => $187:
  Sig: Tuple5_462:ConcreteType.X4(self: (Tuple5, $183:, $184:, $185:, $186:, $187:)): $187:
  Body: 
475. Tuple5
  Type: ($188:, $189:, $190:, $191:, $192:) => (Tuple5, $188:, $189:, $190:, $191:, $192:)
  Sig: Tuple5_462:ConcreteType.Tuple5(X0: $188:, X1: $189:, X2: $190:, X3: $191:, X4: $192:): (Tuple5, $188:, $189:, $190:, $191:, $192:)
  Body: 
476. Tuple5
  Type: ((Tuple5, $193:, $194:, $195:, $196:, $197:)) => (Tuple5, $193:, $194:, $195:, $196:, $197:)
  Sig: Tuple5_462:ConcreteType.Tuple5(arg: (Tuple5, $193:, $194:, $195:, $196:, $197:)): (Tuple5, $193:, $194:, $195:, $196:, $197:)
  Body: 
477. X0
  Type: ((Tuple6, $198:, $199:, $200:, $201:, $202:, $203:)) => $198:
  Sig: Tuple6_464:ConcreteType.X0(self: (Tuple6, $198:, $199:, $200:, $201:, $202:, $203:)): $198:
  Body: 
478. X1
  Type: ((Tuple6, $204:, $205:, $206:, $207:, $208:, $209:)) => $205:
  Sig: Tuple6_464:ConcreteType.X1(self: (Tuple6, $204:, $205:, $206:, $207:, $208:, $209:)): $205:
  Body: 
479. X2
  Type: ((Tuple6, $210:, $211:, $212:, $213:, $214:, $215:)) => $212:
  Sig: Tuple6_464:ConcreteType.X2(self: (Tuple6, $210:, $211:, $212:, $213:, $214:, $215:)): $212:
  Body: 
480. X3
  Type: ((Tuple6, $216:, $217:, $218:, $219:, $220:, $221:)) => $219:
  Sig: Tuple6_464:ConcreteType.X3(self: (Tuple6, $216:, $217:, $218:, $219:, $220:, $221:)): $219:
  Body: 
481. X4
  Type: ((Tuple6, $222:, $223:, $224:, $225:, $226:, $227:)) => $226:
  Sig: Tuple6_464:ConcreteType.X4(self: (Tuple6, $222:, $223:, $224:, $225:, $226:, $227:)): $226:
  Body: 
482. X5
  Type: ((Tuple6, $228:, $229:, $230:, $231:, $232:, $233:)) => $233:
  Sig: Tuple6_464:ConcreteType.X5(self: (Tuple6, $228:, $229:, $230:, $231:, $232:, $233:)): $233:
  Body: 
483. Tuple6
  Type: ($234:, $235:, $236:, $237:, $238:, $239:) => (Tuple6, $234:, $235:, $236:, $237:, $238:, $239:)
  Sig: Tuple6_464:ConcreteType.Tuple6(X0: $234:, X1: $235:, X2: $236:, X3: $237:, X4: $238:, X5: $239:): (Tuple6, $234:, $235:, $236:, $237:, $238:, $239:)
  Body: 
484. Tuple6
  Type: ((Tuple6, $240:, $241:, $242:, $243:, $244:, $245:)) => (Tuple6, $240:, $241:, $242:, $243:, $244:, $245:)
  Sig: Tuple6_464:ConcreteType.Tuple6(arg: (Tuple6, $240:, $241:, $242:, $243:, $244:, $245:)): (Tuple6, $240:, $241:, $242:, $243:, $244:, $245:)
  Body: 
485. X0
  Type: ((Tuple7, $246:, $247:, $248:, $249:, $250:, $251:, $252:)) => $246:
  Sig: Tuple7_466:ConcreteType.X0(self: (Tuple7, $246:, $247:, $248:, $249:, $250:, $251:, $252:)): $246:
  Body: 
486. X1
  Type: ((Tuple7, $253:, $254:, $255:, $256:, $257:, $258:, $259:)) => $254:
  Sig: Tuple7_466:ConcreteType.X1(self: (Tuple7, $253:, $254:, $255:, $256:, $257:, $258:, $259:)): $254:
  Body: 
487. X2
  Type: ((Tuple7, $260:, $261:, $262:, $263:, $264:, $265:, $266:)) => $262:
  Sig: Tuple7_466:ConcreteType.X2(self: (Tuple7, $260:, $261:, $262:, $263:, $264:, $265:, $266:)): $262:
  Body: 
488. X3
  Type: ((Tuple7, $267:, $268:, $269:, $270:, $271:, $272:, $273:)) => $270:
  Sig: Tuple7_466:ConcreteType.X3(self: (Tuple7, $267:, $268:, $269:, $270:, $271:, $272:, $273:)): $270:
  Body: 
489. X4
  Type: ((Tuple7, $274:, $275:, $276:, $277:, $278:, $279:, $280:)) => $278:
  Sig: Tuple7_466:ConcreteType.X4(self: (Tuple7, $274:, $275:, $276:, $277:, $278:, $279:, $280:)): $278:
  Body: 
490. X5
  Type: ((Tuple7, $281:, $282:, $283:, $284:, $285:, $286:, $287:)) => $286:
  Sig: Tuple7_466:ConcreteType.X5(self: (Tuple7, $281:, $282:, $283:, $284:, $285:, $286:, $287:)): $286:
  Body: 
491. X6
  Type: ((Tuple7, $288:, $289:, $290:, $291:, $292:, $293:, $294:)) => $294:
  Sig: Tuple7_466:ConcreteType.X6(self: (Tuple7, $288:, $289:, $290:, $291:, $292:, $293:, $294:)): $294:
  Body: 
492. Tuple7
  Type: ($295:, $296:, $297:, $298:, $299:, $300:, $301:) => (Tuple7, $295:, $296:, $297:, $298:, $299:, $300:, $301:)
  Sig: Tuple7_466:ConcreteType.Tuple7(X0: $295:, X1: $296:, X2: $297:, X3: $298:, X4: $299:, X5: $300:, X6: $301:): (Tuple7, $295:, $296:, $297:, $298:, $299:, $300:, $301:)
  Body: 
493. Tuple7
  Type: ((Tuple7, $302:, $303:, $304:, $305:, $306:, $307:, $308:)) => (Tuple7, $302:, $303:, $304:, $305:, $306:, $307:, $308:)
  Sig: Tuple7_466:ConcreteType.Tuple7(arg: (Tuple7, $302:, $303:, $304:, $305:, $306:, $307:, $308:)): (Tuple7, $302:, $303:, $304:, $305:, $306:, $307:, $308:)
  Body: 
494. X0
  Type: ((Tuple8, $309:, $310:, $311:, $312:, $313:, $314:, $315:, $316:)) => $309:
  Sig: Tuple8_468:ConcreteType.X0(self: (Tuple8, $309:, $310:, $311:, $312:, $313:, $314:, $315:, $316:)): $309:
  Body: 
495. X1
  Type: ((Tuple8, $317:, $318:, $319:, $320:, $321:, $322:, $323:, $324:)) => $318:
  Sig: Tuple8_468:ConcreteType.X1(self: (Tuple8, $317:, $318:, $319:, $320:, $321:, $322:, $323:, $324:)): $318:
  Body: 
496. X2
  Type: ((Tuple8, $325:, $326:, $327:, $328:, $329:, $330:, $331:, $332:)) => $327:
  Sig: Tuple8_468:ConcreteType.X2(self: (Tuple8, $325:, $326:, $327:, $328:, $329:, $330:, $331:, $332:)): $327:
  Body: 
497. X3
  Type: ((Tuple8, $333:, $334:, $335:, $336:, $337:, $338:, $339:, $340:)) => $336:
  Sig: Tuple8_468:ConcreteType.X3(self: (Tuple8, $333:, $334:, $335:, $336:, $337:, $338:, $339:, $340:)): $336:
  Body: 
498. X4
  Type: ((Tuple8, $341:, $342:, $343:, $344:, $345:, $346:, $347:, $348:)) => $345:
  Sig: Tuple8_468:ConcreteType.X4(self: (Tuple8, $341:, $342:, $343:, $344:, $345:, $346:, $347:, $348:)): $345:
  Body: 
499. X5
  Type: ((Tuple8, $349:, $350:, $351:, $352:, $353:, $354:, $355:, $356:)) => $354:
  Sig: Tuple8_468:ConcreteType.X5(self: (Tuple8, $349:, $350:, $351:, $352:, $353:, $354:, $355:, $356:)): $354:
  Body: 
500. X6
  Type: ((Tuple8, $357:, $358:, $359:, $360:, $361:, $362:, $363:, $364:)) => $363:
  Sig: Tuple8_468:ConcreteType.X6(self: (Tuple8, $357:, $358:, $359:, $360:, $361:, $362:, $363:, $364:)): $363:
  Body: 
501. X7
  Type: ((Tuple8, $365:, $366:, $367:, $368:, $369:, $370:, $371:, $372:)) => $372:
  Sig: Tuple8_468:ConcreteType.X7(self: (Tuple8, $365:, $366:, $367:, $368:, $369:, $370:, $371:, $372:)): $372:
  Body: 
502. Tuple8
  Type: ($373:, $374:, $375:, $376:, $377:, $378:, $379:, $380:) => (Tuple8, $373:, $374:, $375:, $376:, $377:, $378:, $379:, $380:)
  Sig: Tuple8_468:ConcreteType.Tuple8(X0: $373:, X1: $374:, X2: $375:, X3: $376:, X4: $377:, X5: $378:, X6: $379:, X7: $380:): (Tuple8, $373:, $374:, $375:, $376:, $377:, $378:, $379:, $380:)
  Body: 
503. Tuple8
  Type: ((Tuple8, $381:, $382:, $383:, $384:, $385:, $386:, $387:, $388:)) => (Tuple8, $381:, $382:, $383:, $384:, $385:, $386:, $387:, $388:)
  Sig: Tuple8_468:ConcreteType.Tuple8(arg: (Tuple8, $381:, $382:, $383:, $384:, $385:, $386:, $387:, $388:)): (Tuple8, $381:, $382:, $383:, $384:, $385:, $386:, $387:, $388:)
  Body: 
504. X0
  Type: ((Tuple9, $389:, $390:, $391:, $392:, $393:, $394:, $395:, $396:, $397:)) => $389:
  Sig: Tuple9_470:ConcreteType.X0(self: (Tuple9, $389:, $390:, $391:, $392:, $393:, $394:, $395:, $396:, $397:)): $389:
  Body: 
505. X1
  Type: ((Tuple9, $398:, $399:, $400:, $401:, $402:, $403:, $404:, $405:, $406:)) => $399:
  Sig: Tuple9_470:ConcreteType.X1(self: (Tuple9, $398:, $399:, $400:, $401:, $402:, $403:, $404:, $405:, $406:)): $399:
  Body: 
506. X2
  Type: ((Tuple9, $407:, $408:, $409:, $410:, $411:, $412:, $413:, $414:, $415:)) => $409:
  Sig: Tuple9_470:ConcreteType.X2(self: (Tuple9, $407:, $408:, $409:, $410:, $411:, $412:, $413:, $414:, $415:)): $409:
  Body: 
507. X3
  Type: ((Tuple9, $416:, $417:, $418:, $419:, $420:, $421:, $422:, $423:, $424:)) => $419:
  Sig: Tuple9_470:ConcreteType.X3(self: (Tuple9, $416:, $417:, $418:, $419:, $420:, $421:, $422:, $423:, $424:)): $419:
  Body: 
508. X4
  Type: ((Tuple9, $425:, $426:, $427:, $428:, $429:, $430:, $431:, $432:, $433:)) => $429:
  Sig: Tuple9_470:ConcreteType.X4(self: (Tuple9, $425:, $426:, $427:, $428:, $429:, $430:, $431:, $432:, $433:)): $429:
  Body: 
509. X5
  Type: ((Tuple9, $434:, $435:, $436:, $437:, $438:, $439:, $440:, $441:, $442:)) => $439:
  Sig: Tuple9_470:ConcreteType.X5(self: (Tuple9, $434:, $435:, $436:, $437:, $438:, $439:, $440:, $441:, $442:)): $439:
  Body: 
510. X6
  Type: ((Tuple9, $443:, $444:, $445:, $446:, $447:, $448:, $449:, $450:, $451:)) => $449:
  Sig: Tuple9_470:ConcreteType.X6(self: (Tuple9, $443:, $444:, $445:, $446:, $447:, $448:, $449:, $450:, $451:)): $449:
  Body: 
511. X7
  Type: ((Tuple9, $452:, $453:, $454:, $455:, $456:, $457:, $458:, $459:, $460:)) => $459:
  Sig: Tuple9_470:ConcreteType.X7(self: (Tuple9, $452:, $453:, $454:, $455:, $456:, $457:, $458:, $459:, $460:)): $459:
  Body: 
512. X8
  Type: ((Tuple9, $461:, $462:, $463:, $464:, $465:, $466:, $467:, $468:, $469:)) => $469:
  Sig: Tuple9_470:ConcreteType.X8(self: (Tuple9, $461:, $462:, $463:, $464:, $465:, $466:, $467:, $468:, $469:)): $469:
  Body: 
513. Tuple9
  Type: ($470:, $471:, $472:, $473:, $474:, $475:, $476:, $477:, $478:) => (Tuple9, $470:, $471:, $472:, $473:, $474:, $475:, $476:, $477:, $478:)
  Sig: Tuple9_470:ConcreteType.Tuple9(X0: $470:, X1: $471:, X2: $472:, X3: $473:, X4: $474:, X5: $475:, X6: $476:, X7: $477:, X8: $478:): (Tuple9, $470:, $471:, $472:, $473:, $474:, $475:, $476:, $477:, $478:)
  Body: 
514. Tuple9
  Type: ((Tuple9, $479:, $480:, $481:, $482:, $483:, $484:, $485:, $486:, $487:)) => (Tuple9, $479:, $480:, $481:, $482:, $483:, $484:, $485:, $486:, $487:)
  Sig: Tuple9_470:ConcreteType.Tuple9(arg: (Tuple9, $479:, $480:, $481:, $482:, $483:, $484:, $485:, $486:, $487:)): (Tuple9, $479:, $480:, $481:, $482:, $483:, $484:, $485:, $486:, $487:)
  Body: 
515. X0
  Type: ((Tuple10, $488:, $489:, $490:, $491:, $492:, $493:, $494:, $495:, $496:, $497:)) => $488:
  Sig: Tuple10_472:ConcreteType.X0(self: (Tuple10, $488:, $489:, $490:, $491:, $492:, $493:, $494:, $495:, $496:, $497:)): $488:
  Body: 
516. X1
  Type: ((Tuple10, $498:, $499:, $500:, $501:, $502:, $503:, $504:, $505:, $506:, $507:)) => $499:
  Sig: Tuple10_472:ConcreteType.X1(self: (Tuple10, $498:, $499:, $500:, $501:, $502:, $503:, $504:, $505:, $506:, $507:)): $499:
  Body: 
517. X2
  Type: ((Tuple10, $508:, $509:, $510:, $511:, $512:, $513:, $514:, $515:, $516:, $517:)) => $510:
  Sig: Tuple10_472:ConcreteType.X2(self: (Tuple10, $508:, $509:, $510:, $511:, $512:, $513:, $514:, $515:, $516:, $517:)): $510:
  Body: 
518. X3
  Type: ((Tuple10, $518:, $519:, $520:, $521:, $522:, $523:, $524:, $525:, $526:, $527:)) => $521:
  Sig: Tuple10_472:ConcreteType.X3(self: (Tuple10, $518:, $519:, $520:, $521:, $522:, $523:, $524:, $525:, $526:, $527:)): $521:
  Body: 
519. X4
  Type: ((Tuple10, $528:, $529:, $530:, $531:, $532:, $533:, $534:, $535:, $536:, $537:)) => $532:
  Sig: Tuple10_472:ConcreteType.X4(self: (Tuple10, $528:, $529:, $530:, $531:, $532:, $533:, $534:, $535:, $536:, $537:)): $532:
  Body: 
520. X5
  Type: ((Tuple10, $538:, $539:, $540:, $541:, $542:, $543:, $544:, $545:, $546:, $547:)) => $543:
  Sig: Tuple10_472:ConcreteType.X5(self: (Tuple10, $538:, $539:, $540:, $541:, $542:, $543:, $544:, $545:, $546:, $547:)): $543:
  Body: 
521. X6
  Type: ((Tuple10, $548:, $549:, $550:, $551:, $552:, $553:, $554:, $555:, $556:, $557:)) => $554:
  Sig: Tuple10_472:ConcreteType.X6(self: (Tuple10, $548:, $549:, $550:, $551:, $552:, $553:, $554:, $555:, $556:, $557:)): $554:
  Body: 
522. X7
  Type: ((Tuple10, $558:, $559:, $560:, $561:, $562:, $563:, $564:, $565:, $566:, $567:)) => $565:
  Sig: Tuple10_472:ConcreteType.X7(self: (Tuple10, $558:, $559:, $560:, $561:, $562:, $563:, $564:, $565:, $566:, $567:)): $565:
  Body: 
523. X8
  Type: ((Tuple10, $568:, $569:, $570:, $571:, $572:, $573:, $574:, $575:, $576:, $577:)) => $576:
  Sig: Tuple10_472:ConcreteType.X8(self: (Tuple10, $568:, $569:, $570:, $571:, $572:, $573:, $574:, $575:, $576:, $577:)): $576:
  Body: 
524. X9
  Type: ((Tuple10, $578:, $579:, $580:, $581:, $582:, $583:, $584:, $585:, $586:, $587:)) => $587:
  Sig: Tuple10_472:ConcreteType.X9(self: (Tuple10, $578:, $579:, $580:, $581:, $582:, $583:, $584:, $585:, $586:, $587:)): $587:
  Body: 
525. Tuple10
  Type: ($588:, $589:, $590:, $591:, $592:, $593:, $594:, $595:, $596:, $597:) => (Tuple10, $588:, $589:, $590:, $591:, $592:, $593:, $594:, $595:, $596:, $597:)
  Sig: Tuple10_472:ConcreteType.Tuple10(X0: $588:, X1: $589:, X2: $590:, X3: $591:, X4: $592:, X5: $593:, X6: $594:, X7: $595:, X8: $596:, X9: $597:): (Tuple10, $588:, $589:, $590:, $591:, $592:, $593:, $594:, $595:, $596:, $597:)
  Body: 
526. Tuple10
  Type: ((Tuple10, $598:, $599:, $600:, $601:, $602:, $603:, $604:, $605:, $606:, $607:)) => (Tuple10, $598:, $599:, $600:, $601:, $602:, $603:, $604:, $605:, $606:, $607:)
  Sig: Tuple10_472:ConcreteType.Tuple10(arg: (Tuple10, $598:, $599:, $600:, $601:, $602:, $603:, $604:, $605:, $606:, $607:)): (Tuple10, $598:, $599:, $600:, $601:, $602:, $603:, $604:, $605:, $606:, $607:)
  Body: 
527. Radius
  Type: (Sphere) => Number
  Sig: Sphere_502:ConcreteType.Radius(self: Sphere): Number
  Body: 
528. Sphere
  Type: (Number) => Sphere
  Sig: Sphere_502:ConcreteType.Sphere(Radius: Number): Sphere
  Body: 
529. Number
  Type: (Sphere) => Number
  Sig: Sphere_502:ConcreteType.Number(arg: Sphere): Number
  Body: 
530. Height
  Type: (Cylinder) => Number
  Sig: Cylinder_504:ConcreteType.Height(self: Cylinder): Number
  Body: 
531. Radius
  Type: (Cylinder) => Number
  Sig: Cylinder_504:ConcreteType.Radius(self: Cylinder): Number
  Body: 
532. Cylinder
  Type: (Number, Number) => Cylinder
  Sig: Cylinder_504:ConcreteType.Cylinder(Height: Number, Radius: Number): Cylinder
  Body: 
533. Cylinder
  Type: ((Tuple2, Number, Number)) => Cylinder
  Sig: Cylinder_504:ConcreteType.Cylinder(arg: (Tuple2, Number, Number)): Cylinder
  Body: 
534. Height
  Type: (Capsule) => Number
  Sig: Capsule_506:ConcreteType.Height(self: Capsule): Number
  Body: 
535. Radius
  Type: (Capsule) => Number
  Sig: Capsule_506:ConcreteType.Radius(self: Capsule): Number
  Body: 
536. Capsule
  Type: (Number, Number) => Capsule
  Sig: Capsule_506:ConcreteType.Capsule(Height: Number, Radius: Number): Capsule
  Body: 
537. Capsule
  Type: ((Tuple2, Number, Number)) => Capsule
  Sig: Capsule_506:ConcreteType.Capsule(arg: (Tuple2, Number, Number)): Capsule
  Body: 
538. Height
  Type: (Cone) => Number
  Sig: Cone_508:ConcreteType.Height(self: Cone): Number
  Body: 
539. Radius
  Type: (Cone) => Number
  Sig: Cone_508:ConcreteType.Radius(self: Cone): Number
  Body: 
540. Cone
  Type: (Number, Number) => Cone
  Sig: Cone_508:ConcreteType.Cone(Height: Number, Radius: Number): Cone
  Body: 
541. Cone
  Type: ((Tuple2, Number, Number)) => Cone
  Sig: Cone_508:ConcreteType.Cone(arg: (Tuple2, Number, Number)): Cone
  Body: 
542. Height
  Type: (ConeSegment) => Number
  Sig: ConeSegment_510:ConcreteType.Height(self: ConeSegment): Number
  Body: 
543. Radius1
  Type: (ConeSegment) => Number
  Sig: ConeSegment_510:ConcreteType.Radius1(self: ConeSegment): Number
  Body: 
544. Radius2
  Type: (ConeSegment) => Number
  Sig: ConeSegment_510:ConcreteType.Radius2(self: ConeSegment): Number
  Body: 
545. ConeSegment
  Type: (Number, Number, Number) => ConeSegment
  Sig: ConeSegment_510:ConcreteType.ConeSegment(Height: Number, Radius1: Number, Radius2: Number): ConeSegment
  Body: 
546. ConeSegment
  Type: ((Tuple3, Number, Number, Number)) => ConeSegment
  Sig: ConeSegment_510:ConcreteType.ConeSegment(arg: (Tuple3, Number, Number, Number)): ConeSegment
  Body: 
547. Extent
  Type: (Box) => Vector3D
  Sig: Box_512:ConcreteType.Extent(self: Box): Vector3D
  Body: 
548. Box
  Type: (Vector3D) => Box
  Sig: Box_512:ConcreteType.Box(Extent: Vector3D): Box
  Body: 
549. Vector3D
  Type: (Box) => Vector3D
  Sig: Box_512:ConcreteType.Vector3D(arg: Box): Vector3D
  Body: 
550. Height
  Type: (Pyramid) => Number
  Sig: Pyramid_514:ConcreteType.Height(self: Pyramid): Number
  Body: 
551. BaseLength
  Type: (Pyramid) => Number
  Sig: Pyramid_514:ConcreteType.BaseLength(self: Pyramid): Number
  Body: 
552. Pyramid
  Type: (Number, Number) => Pyramid
  Sig: Pyramid_514:ConcreteType.Pyramid(Height: Number, BaseLength: Number): Pyramid
  Body: 
553. Pyramid
  Type: ((Tuple2, Number, Number)) => Pyramid
  Sig: Pyramid_514:ConcreteType.Pyramid(arg: (Tuple2, Number, Number)): Pyramid
  Body: 
554. MajorRadius
  Type: (Torus) => Number
  Sig: Torus_516:ConcreteType.MajorRadius(self: Torus): Number
  Body: 
555. MinorRadius
  Type: (Torus) => Number
  Sig: Torus_516:ConcreteType.MinorRadius(self: Torus): Number
  Body: 
556. Torus
  Type: (Number, Number) => Torus
  Sig: Torus_516:ConcreteType.Torus(MajorRadius: Number, MinorRadius: Number): Torus
  Body: 
557. Torus
  Type: ((Tuple2, Number, Number)) => Torus
  Sig: Torus_516:ConcreteType.Torus(arg: (Tuple2, Number, Number)): Torus
  Body: 
558. Height
  Type: (NPrism) => Number
  Sig: NPrism_518:ConcreteType.Height(self: NPrism): Number
  Body: 
559. Radius
  Type: (NPrism) => Number
  Sig: NPrism_518:ConcreteType.Radius(self: NPrism): Number
  Body: 
560. NumSides
  Type: (NPrism) => Integer
  Sig: NPrism_518:ConcreteType.NumSides(self: NPrism): Integer
  Body: 
561. NPrism
  Type: (Number, Number, Integer) => NPrism
  Sig: NPrism_518:ConcreteType.NPrism(Height: Number, Radius: Number, NumSides: Integer): NPrism
  Body: 
562. NPrism
  Type: ((Tuple3, Number, Number, Integer)) => NPrism
  Sig: NPrism_518:ConcreteType.NPrism(arg: (Tuple3, Number, Number, Integer)): NPrism
  Body: 
563. Height
  Type: (Tube) => Number
  Sig: Tube_520:ConcreteType.Height(self: Tube): Number
  Body: 
564. InnerRadius
  Type: (Tube) => Number
  Sig: Tube_520:ConcreteType.InnerRadius(self: Tube): Number
  Body: 
565. OuterRadius
  Type: (Tube) => Number
  Sig: Tube_520:ConcreteType.OuterRadius(self: Tube): Number
  Body: 
566. Tube
  Type: (Number, Number, Number) => Tube
  Sig: Tube_520:ConcreteType.Tube(Height: Number, InnerRadius: Number, OuterRadius: Number): Tube
  Body: 
567. Tube
  Type: ((Tuple3, Number, Number, Number)) => Tube
  Sig: Tube_520:ConcreteType.Tube(arg: (Tuple3, Number, Number, Number)): Tube
  Body: 
568. Height
  Type: (NPyramid) => Number
  Sig: NPyramid_522:ConcreteType.Height(self: NPyramid): Number
  Body: 
569. Radius
  Type: (NPyramid) => Number
  Sig: NPyramid_522:ConcreteType.Radius(self: NPyramid): Number
  Body: 
570. NumSides
  Type: (NPyramid) => Integer
  Sig: NPyramid_522:ConcreteType.NumSides(self: NPyramid): Integer
  Body: 
571. NPyramid
  Type: (Number, Number, Integer) => NPyramid
  Sig: NPyramid_522:ConcreteType.NPyramid(Height: Number, Radius: Number, NumSides: Integer): NPyramid
  Body: 
572. NPyramid
  Type: ((Tuple3, Number, Number, Integer)) => NPyramid
  Sig: NPyramid_522:ConcreteType.NPyramid(arg: (Tuple3, Number, Number, Integer)): NPyramid
  Body: 
573. Radii
  Type: (Ellipsoid) => Vector3D
  Sig: Ellipsoid_524:ConcreteType.Radii(self: Ellipsoid): Vector3D
  Body: 
574. Ellipsoid
  Type: (Vector3D) => Ellipsoid
  Sig: Ellipsoid_524:ConcreteType.Ellipsoid(Radii: Vector3D): Ellipsoid
  Body: 
575. Vector3D
  Type: (Ellipsoid) => Vector3D
  Sig: Ellipsoid_524:ConcreteType.Vector3D(arg: Ellipsoid): Vector3D
  Body: 
576. Transform
  Type: ($608:constraint=ITransform3D, Vector3D) => Vector3D
  Sig: ITransform3D_526:Concept.Transform(x: $608:constraint=ITransform3D, v: Vector3D): Vector3D
  Body: 
577. TransformNormal
  Type: ($609:constraint=ITransform3D, Vector3D) => Vector3D
  Sig: ITransform3D_526:Concept.TransformNormal(x: $609:constraint=ITransform3D, v: Vector3D): Vector3D
  Body: 
578. Matrix
  Type: ($610:constraint=ITransform3D) => Matrix4x4
  Sig: ITransform3D_526:Concept.Matrix(x: $610:constraint=ITransform3D): Matrix4x4
  Body: 
579. X
  Type: (Vector2D) => Number
  Sig: Vector2D_528:ConcreteType.X(self: Vector2D): Number
  Body: 
580. Y
  Type: (Vector2D) => Number
  Sig: Vector2D_528:ConcreteType.Y(self: Vector2D): Number
  Body: 
581. Vector2D
  Type: (Number, Number) => Vector2D
  Sig: Vector2D_528:ConcreteType.Vector2D(X: Number, Y: Number): Vector2D
  Body: 
582. Vector2D
  Type: ((Tuple2, Number, Number)) => Vector2D
  Sig: Vector2D_528:ConcreteType.Vector2D(arg: (Tuple2, Number, Number)): Vector2D
  Body: 
583. X
  Type: (Vector3D) => Number
  Sig: Vector3D_530:ConcreteType.X(self: Vector3D): Number
  Body: 
584. Y
  Type: (Vector3D) => Number
  Sig: Vector3D_530:ConcreteType.Y(self: Vector3D): Number
  Body: 
585. Z
  Type: (Vector3D) => Number
  Sig: Vector3D_530:ConcreteType.Z(self: Vector3D): Number
  Body: 
586. Vector3D
  Type: (Number, Number, Number) => Vector3D
  Sig: Vector3D_530:ConcreteType.Vector3D(X: Number, Y: Number, Z: Number): Vector3D
  Body: 
587. Vector3D
  Type: ((Tuple3, Number, Number, Number)) => Vector3D
  Sig: Vector3D_530:ConcreteType.Vector3D(arg: (Tuple3, Number, Number, Number)): Vector3D
  Body: 
588. X
  Type: (Vector4D) => Number
  Sig: Vector4D_532:ConcreteType.X(self: Vector4D): Number
  Body: 
589. Y
  Type: (Vector4D) => Number
  Sig: Vector4D_532:ConcreteType.Y(self: Vector4D): Number
  Body: 
590. Z
  Type: (Vector4D) => Number
  Sig: Vector4D_532:ConcreteType.Z(self: Vector4D): Number
  Body: 
591. W
  Type: (Vector4D) => Number
  Sig: Vector4D_532:ConcreteType.W(self: Vector4D): Number
  Body: 
592. Vector4D
  Type: (Number, Number, Number, Number) => Vector4D
  Sig: Vector4D_532:ConcreteType.Vector4D(X: Number, Y: Number, Z: Number, W: Number): Vector4D
  Body: 
593. Vector4D
  Type: ((Tuple4, Number, Number, Number, Number)) => Vector4D
  Sig: Vector4D_532:ConcreteType.Vector4D(arg: (Tuple4, Number, Number, Number, Number)): Vector4D
  Body: 
594. Column1
  Type: (Matrix3x3) => Vector3D
  Sig: Matrix3x3_534:ConcreteType.Column1(self: Matrix3x3): Vector3D
  Body: 
595. Column2
  Type: (Matrix3x3) => Vector3D
  Sig: Matrix3x3_534:ConcreteType.Column2(self: Matrix3x3): Vector3D
  Body: 
596. Column3
  Type: (Matrix3x3) => Vector3D
  Sig: Matrix3x3_534:ConcreteType.Column3(self: Matrix3x3): Vector3D
  Body: 
597. Matrix3x3
  Type: (Vector3D, Vector3D, Vector3D) => Matrix3x3
  Sig: Matrix3x3_534:ConcreteType.Matrix3x3(Column1: Vector3D, Column2: Vector3D, Column3: Vector3D): Matrix3x3
  Body: 
598. Matrix3x3
  Type: ((Tuple3, Vector3D, Vector3D, Vector3D)) => Matrix3x3
  Sig: Matrix3x3_534:ConcreteType.Matrix3x3(arg: (Tuple3, Vector3D, Vector3D, Vector3D)): Matrix3x3
  Body: 
599. Column1
  Type: (Matrix4x4) => Vector4D
  Sig: Matrix4x4_536:ConcreteType.Column1(self: Matrix4x4): Vector4D
  Body: 
600. Column2
  Type: (Matrix4x4) => Vector4D
  Sig: Matrix4x4_536:ConcreteType.Column2(self: Matrix4x4): Vector4D
  Body: 
601. Column3
  Type: (Matrix4x4) => Vector4D
  Sig: Matrix4x4_536:ConcreteType.Column3(self: Matrix4x4): Vector4D
  Body: 
602. Column4
  Type: (Matrix4x4) => Vector4D
  Sig: Matrix4x4_536:ConcreteType.Column4(self: Matrix4x4): Vector4D
  Body: 
603. Matrix4x4
  Type: (Vector4D, Vector4D, Vector4D, Vector4D) => Matrix4x4
  Sig: Matrix4x4_536:ConcreteType.Matrix4x4(Column1: Vector4D, Column2: Vector4D, Column3: Vector4D, Column4: Vector4D): Matrix4x4
  Body: 
604. Matrix4x4
  Type: ((Tuple4, Vector4D, Vector4D, Vector4D, Vector4D)) => Matrix4x4
  Sig: Matrix4x4_536:ConcreteType.Matrix4x4(arg: (Tuple4, Vector4D, Vector4D, Vector4D, Vector4D)): Matrix4x4
  Body: 
605. Translation
  Type: (Translation3D) => Vector3D
  Sig: Translation3D_540:ConcreteType.Translation(self: Translation3D): Vector3D
  Body: 
606. Translation3D
  Type: (Vector3D) => Translation3D
  Sig: Translation3D_540:ConcreteType.Translation3D(Translation: Vector3D): Translation3D
  Body: 
607. Vector3D
  Type: (Translation3D) => Vector3D
  Sig: Translation3D_540:ConcreteType.Vector3D(arg: Translation3D): Vector3D
  Body: 
608. Translation
  Type: (Transform3D) => Vector3D
  Sig: Transform3D_542:ConcreteType.Translation(self: Transform3D): Vector3D
  Body: 
609. Rotation
  Type: (Transform3D) => Quaternion
  Sig: Transform3D_542:ConcreteType.Rotation(self: Transform3D): Quaternion
  Body: 
610. Scale
  Type: (Transform3D) => Vector3D
  Sig: Transform3D_542:ConcreteType.Scale(self: Transform3D): Vector3D
  Body: 
611. Transform3D
  Type: (Vector3D, Quaternion, Vector3D) => Transform3D
  Sig: Transform3D_542:ConcreteType.Transform3D(Translation: Vector3D, Rotation: Quaternion, Scale: Vector3D): Transform3D
  Body: 
612. Transform3D
  Type: ((Tuple3, Vector3D, Quaternion, Vector3D)) => Transform3D
  Sig: Transform3D_542:ConcreteType.Transform3D(arg: (Tuple3, Vector3D, Quaternion, Vector3D)): Transform3D
  Body: 
613. Position
  Type: (Pose3D) => Vector3D
  Sig: Pose3D_544:ConcreteType.Position(self: Pose3D): Vector3D
  Body: 
614. Rotation
  Type: (Pose3D) => Rotation3D
  Sig: Pose3D_544:ConcreteType.Rotation(self: Pose3D): Rotation3D
  Body: 
615. Pose3D
  Type: (Vector3D, Rotation3D) => Pose3D
  Sig: Pose3D_544:ConcreteType.Pose3D(Position: Vector3D, Rotation: Rotation3D): Pose3D
  Body: 
616. Pose3D
  Type: ((Tuple2, Vector3D, Rotation3D)) => Pose3D
  Sig: Pose3D_544:ConcreteType.Pose3D(arg: (Tuple2, Vector3D, Rotation3D)): Pose3D
  Body: 
617. Forward
  Type: (Frame3D) => Vector3D
  Sig: Frame3D_546:ConcreteType.Forward(self: Frame3D): Vector3D
  Body: 
618. Up
  Type: (Frame3D) => Vector3D
  Sig: Frame3D_546:ConcreteType.Up(self: Frame3D): Vector3D
  Body: 
619. Position
  Type: (Frame3D) => Vector3D
  Sig: Frame3D_546:ConcreteType.Position(self: Frame3D): Vector3D
  Body: 
620. Frame3D
  Type: (Vector3D, Vector3D, Vector3D) => Frame3D
  Sig: Frame3D_546:ConcreteType.Frame3D(Forward: Vector3D, Up: Vector3D, Position: Vector3D): Frame3D
  Body: 
621. Frame3D
  Type: ((Tuple3, Vector3D, Vector3D, Vector3D)) => Frame3D
  Sig: Frame3D_546:ConcreteType.Frame3D(arg: (Tuple3, Vector3D, Vector3D, Vector3D)): Frame3D
  Body: 
622. X
  Type: (Quaternion) => Number
  Sig: Quaternion_548:ConcreteType.X(self: Quaternion): Number
  Body: 
623. Y
  Type: (Quaternion) => Number
  Sig: Quaternion_548:ConcreteType.Y(self: Quaternion): Number
  Body: 
624. Z
  Type: (Quaternion) => Number
  Sig: Quaternion_548:ConcreteType.Z(self: Quaternion): Number
  Body: 
625. W
  Type: (Quaternion) => Number
  Sig: Quaternion_548:ConcreteType.W(self: Quaternion): Number
  Body: 
626. Quaternion
  Type: (Number, Number, Number, Number) => Quaternion
  Sig: Quaternion_548:ConcreteType.Quaternion(X: Number, Y: Number, Z: Number, W: Number): Quaternion
  Body: 
627. Quaternion
  Type: ((Tuple4, Number, Number, Number, Number)) => Quaternion
  Sig: Quaternion_548:ConcreteType.Quaternion(arg: (Tuple4, Number, Number, Number, Number)): Quaternion
  Body: 
628. Axis
  Type: (AxisAngle) => Vector3D
  Sig: AxisAngle_550:ConcreteType.Axis(self: AxisAngle): Vector3D
  Body: 
629. Angle
  Type: (AxisAngle) => Angle
  Sig: AxisAngle_550:ConcreteType.Angle(self: AxisAngle): Angle
  Body: 
630. AxisAngle
  Type: (Vector3D, Angle) => AxisAngle
  Sig: AxisAngle_550:ConcreteType.AxisAngle(Axis: Vector3D, Angle: Angle): AxisAngle
  Body: 
631. AxisAngle
  Type: ((Tuple2, Vector3D, Angle)) => AxisAngle
  Sig: AxisAngle_550:ConcreteType.AxisAngle(arg: (Tuple2, Vector3D, Angle)): AxisAngle
  Body: 
632. Yaw
  Type: (EulerAngles) => Angle
  Sig: EulerAngles_552:ConcreteType.Yaw(self: EulerAngles): Angle
  Body: 
633. Pitch
  Type: (EulerAngles) => Angle
  Sig: EulerAngles_552:ConcreteType.Pitch(self: EulerAngles): Angle
  Body: 
634. Roll
  Type: (EulerAngles) => Angle
  Sig: EulerAngles_552:ConcreteType.Roll(self: EulerAngles): Angle
  Body: 
635. EulerAngles
  Type: (Angle, Angle, Angle) => EulerAngles
  Sig: EulerAngles_552:ConcreteType.EulerAngles(Yaw: Angle, Pitch: Angle, Roll: Angle): EulerAngles
  Body: 
636. EulerAngles
  Type: ((Tuple3, Angle, Angle, Angle)) => EulerAngles
  Sig: EulerAngles_552:ConcreteType.EulerAngles(arg: (Tuple3, Angle, Angle, Angle)): EulerAngles
  Body: 
637. Quaternion
  Type: (Rotation3D) => Quaternion
  Sig: Rotation3D_554:ConcreteType.Quaternion(self: Rotation3D): Quaternion
  Body: 
638. Rotation3D
  Type: (Quaternion) => Rotation3D
  Sig: Rotation3D_554:ConcreteType.Rotation3D(Quaternion: Quaternion): Rotation3D
  Body: 
639. Quaternion
  Type: (Rotation3D) => Quaternion
  Sig: Rotation3D_554:ConcreteType.Quaternion(arg: Rotation3D): Quaternion
  Body: 
640. Repeat
  Type: (IAny, Integer) => $611:constraint=(IArray, IAny)
  Sig: ArrayLibrary_0:Library.Repeat(x: IAny, n: Integer): $611:constraint=(IArray, IAny)
  Body: MapRange(n, (\(ParameterDef=i$5601:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
641. Range
  Type: (Integer) => $612:constraint=(IArray, Integer)
  Sig: ArrayLibrary_0:Library.Range(n: Integer): $612:constraint=(IArray, Integer)
  Body: MapRange(n, (\(ParameterDef=i$5619:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
642. Indices
  Type: ((IArray, $613:)) => $614:constraint=(IArray, Integer)
  Sig: ArrayLibrary_0:Library.Indices(xs: (IArray, $613:)): $614:constraint=(IArray, Integer)
  Body: Range(Count(xs))
643. Count
  Type: ((IArray2D, $615:)) => Integer
  Sig: ArrayLibrary_0:Library.Count(xs: (IArray2D, $615:)): Integer
  Body: Multiply(NumRows(xs), NumColumns(xs))
644. Count
  Type: ((IArray3D, $616:)) => Integer
  Sig: ArrayLibrary_0:Library.Count(xs: (IArray3D, $616:)): Integer
  Body: Multiply(NumRows(xs), Multiply(NumColumns(xs), NumLayers(xs)))
645. At
  Type: ((IArray2D, $617:), Integer) => $618:
  Sig: ArrayLibrary_0:Library.At(xs: (IArray2D, $617:), i: Integer): $618:
  Body: At(xs, Modulo(i, NumColumns(xs)), Divide(i, NumColumns(xs)))
646. At
  Type: ((IArray3D, $619:), Integer) => $620:
  Sig: ArrayLibrary_0:Library.At(xs: (IArray3D, $619:), i: Integer): $620:
  Body: At(xs, Modulo(i, NumColumns(xs)), Divide(i, NumColumns(xs)), Divide(i, NumLayers(xs)))
647. IsEmpty
  Type: ((IArray, $621:)) => Boolean
  Sig: ArrayLibrary_0:Library.IsEmpty(xs: (IArray, $621:)): Boolean
  Body: Equals(Count(xs), 0)
648. First
  Type: ((IArray, $622:)) => $623:
  Sig: ArrayLibrary_0:Library.First(xs: (IArray, $622:)): $623:
  Body: At(xs, 0)
649. Last
  Type: ((IArray, $624:)) => $625:
  Sig: ArrayLibrary_0:Library.Last(xs: (IArray, $624:)): $625:
  Body: At(xs, Subtract(Count(xs), 1))
650. Middle
  Type: ((IArray, $626:), Integer) => $627:
  Sig: ArrayLibrary_0:Library.Middle(xs: (IArray, $626:), n: Integer): $627:
  Body: At(xs, Divide(Count(xs), 2))
651. Slice
  Type: ((IArray, $628:), Integer, Integer) => $630:constraint=(IArray, $629:)
  Sig: ArrayLibrary_0:Library.Slice(xs: (IArray, $628:), from: Integer, to: Integer): $630:constraint=(IArray, $629:)
  Body: Subarray(xs, from, Subtract(to, from))
652. Slices
  Type: ((IArray, $631:), Integer) => $633:constraint=(IArray, (IArray, $632:))
  Sig: ArrayLibrary_0:Library.Slices(xs: (IArray, $631:), size: Integer): $633:constraint=(IArray, (IArray, $632:))
  Body: MapRange(Divide(Count(xs), size), (\(ParameterDef=i$5862:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
653. NthSlice
  Type: ((IArray, $634:), Integer, Integer) => $636:constraint=(IArray, $635:)
  Sig: ArrayLibrary_0:Library.NthSlice(xs: (IArray, $634:), n: Integer, size: Integer): $636:constraint=(IArray, $635:)
  Body: Subarray(xs, Multiply(n, size), size)
654. Subarray
  Type: ((IArray, $637:), Integer, Integer) => $639:constraint=(IArray, $638:)
  Sig: ArrayLibrary_0:Library.Subarray(xs: (IArray, $637:), from: Integer, count: Integer): $639:constraint=(IArray, $638:)
  Body: MapRange(count, (\(ParameterDef=i$5915:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
655. Skip
  Type: ((IArray, $640:), Integer) => $642:constraint=(IArray, $641:)
  Sig: ArrayLibrary_0:Library.Skip(xs: (IArray, $640:), n: Integer): $642:constraint=(IArray, $641:)
  Body: Subarray(xs, n, Subtract(Count(xs), n))
656. Take
  Type: ((IArray, $643:), Integer) => $645:constraint=(IArray, $644:)
  Sig: ArrayLibrary_0:Library.Take(xs: (IArray, $643:), n: Integer): $645:constraint=(IArray, $644:)
  Body: Subarray(xs, 0, n)
657. TakeLast
  Type: ((IArray, $646:), Integer) => $648:constraint=(IArray, $647:)
  Sig: ArrayLibrary_0:Library.TakeLast(xs: (IArray, $646:), n: Integer): $648:constraint=(IArray, $647:)
  Body: Skip(xs, Subtract(Count(xs), 1))
658. Drop
  Type: ((IArray, $649:), Integer) => $651:constraint=(IArray, $650:)
  Sig: ArrayLibrary_0:Library.Drop(xs: (IArray, $649:), n: Integer): $651:constraint=(IArray, $650:)
  Body: Take(xs, Subtract(Count(xs), n))
659. Trim
  Type: ((IArray, $652:), Integer, Integer) => $654:constraint=(IArray, $653:)
  Sig: ArrayLibrary_0:Library.Trim(xs: (IArray, $652:), first: Integer, last: Integer): $654:constraint=(IArray, $653:)
  Body: Drop(Skip(xs, first), last)
660. Rest
  Type: ((IArray, $655:)) => $657:constraint=(IArray, $656:)
  Sig: ArrayLibrary_0:Library.Rest(xs: (IArray, $655:)): $657:constraint=(IArray, $656:)
  Body: Skip(xs, 1)
661. Reduce
  Type: ((IArray, $658:), $659:, (Function2, $660:, $661:, $662:)) => $663:
  Sig: ArrayLibrary_0:Library.Reduce(xs: (IArray, $658:), acc: $659:, f: (Function2, $660:, $661:, $662:)): $663:
  Body: Plato.Compiler.Symbols.BlockStatement
662. All
  Type: ((IArray, $664:), (Function1, $665:, Boolean)) => Boolean
  Sig: ArrayLibrary_0:Library.All(xs: (IArray, $664:), f: (Function1, $665:, Boolean)): Boolean
  Body: Plato.Compiler.Symbols.BlockStatement
663. Any
  Type: ((IArray, $666:), (Function1, $667:, Boolean)) => Boolean
  Sig: ArrayLibrary_0:Library.Any(xs: (IArray, $666:), f: (Function1, $667:, Boolean)): Boolean
  Body: Plato.Compiler.Symbols.BlockStatement
664. Map
  Type: ((IArray, $668:), (Function1, $669:, $670:)) => $672:constraint=(IArray, $671:)
  Sig: ArrayLibrary_0:Library.Map(xs: (IArray, $668:), f: (Function1, $669:, $670:)): $672:constraint=(IArray, $671:)
  Body: MapRange(Count(xs), (\(ParameterDef=i$6222:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
665. Zip
  Type: ((IArray, $673:), (IArray, $674:), (Function2, $675:, $676:, $677:)) => $679:constraint=(IArray, $678:)
  Sig: ArrayLibrary_0:Library.Zip(xs: (IArray, $673:), ys: (IArray, $674:), f: (Function2, $675:, $676:, $677:)): $679:constraint=(IArray, $678:)
  Body: MapRange(Lesser(Count(xs), Count(ys)), (\(ParameterDef=i$6273:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
666. Zip
  Type: ((IArray, $680:), (IArray, $681:), (IArray, $682:), (Function3, $683:, $684:, $685:, $686:)) => $688:constraint=(IArray, $687:)
  Sig: ArrayLibrary_0:Library.Zip(xs: (IArray, $680:), ys: (IArray, $681:), zs: (IArray, $682:), f: (Function3, $683:, $684:, $685:, $686:)): $688:constraint=(IArray, $687:)
  Body: MapRange(Lesser(Lesser(Count(xs), Count(ys)), Count(zs)), (\(ParameterDef=i$6345:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
667. ModuloAt
  Type: ((IArray, $689:), Integer) => $690:
  Sig: ArrayLibrary_0:Library.ModuloAt(xs: (IArray, $689:), n: Integer): $690:
  Body: At(xs, Modulo(n, Count(xs)))
668. Shift
  Type: ((IArray, $691:), Integer) => $693:constraint=(IArray, $692:)
  Sig: ArrayLibrary_0:Library.Shift(xs: (IArray, $691:), n: Integer): $693:constraint=(IArray, $692:)
  Body: MapRange(Count(xs), (\(ParameterDef=i$6413:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
669. WithNext
  Type: ((IArray, $694:), (Function2, $695:, $696:, $697:)) => $699:constraint=(IArray, $698:)
  Sig: ArrayLibrary_0:Library.WithNext(xs: (IArray, $694:), f: (Function2, $695:, $696:, $697:)): $699:constraint=(IArray, $698:)
  Body: Zip(Drop(xs, 1), Skip(xs, 1), f)
670. WithNextAndBeginning
  Type: ((IArray, $700:), (Function2, $701:, $702:, $703:)) => $705:constraint=(IArray, $704:)
  Sig: ArrayLibrary_0:Library.WithNextAndBeginning(xs: (IArray, $700:), f: (Function2, $701:, $702:, $703:)): $705:constraint=(IArray, $704:)
  Body: Zip(xs, Shift(xs, 1), f)
671. WithNext
  Type: ((IArray, $706:), (Function2, $707:, $708:, $709:), Boolean) => $711:constraint=(IArray, $710:)
  Sig: ArrayLibrary_0:Library.WithNext(xs: (IArray, $706:), f: (Function2, $707:, $708:, $709:), connect: Boolean): $711:constraint=(IArray, $710:)
  Body: (connect?WithNextAndBeginning(xs, f):WithNext(xs, f))
672. EveryNth
  Type: ((IArray, $712:), Integer) => $714:constraint=(IArray, $713:)
  Sig: ArrayLibrary_0:Library.EveryNth(self: (IArray, $712:), n: Integer): $714:constraint=(IArray, $713:)
  Body: Map(Indices(self), (\(ParameterDef=i$6529:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
673. CartesianProduct
  Type: ((IArray, $715:), (IArray, $716:), (Function2, $717:, $718:, $719:)) => $721:constraint=(IArray2D, $720:)
  Sig: ArrayLibrary_0:Library.CartesianProduct(columns: (IArray, $715:), rows: (IArray, $716:), func: (Function2, $717:, $718:, $719:)): $721:constraint=(IArray2D, $720:)
  Body: MakeArray2D(Count(columns), Count(rows), (\(ParameterDef=i$6579:Concept:IAny, ParameterDef=j$6581:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
674. Reverse
  Type: ((IArray, $722:)) => $724:constraint=(IArray, $723:)
  Sig: ArrayLibrary_0:Library.Reverse(self: (IArray, $722:)): $724:constraint=(IArray, $723:)
  Body: Map(Indices(self), (\(ParameterDef=i$6621:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
675. Concat
  Type: ((IArray, $725:), (IArray, $726:)) => $728:constraint=(IArray, $727:)
  Sig: ArrayLibrary_0:Library.Concat(xs: (IArray, $725:), ys: (IArray, $726:)): $728:constraint=(IArray, $727:)
  Body: MapRange(Add(Count(xs), Count(ys)), (\(ParameterDef=i$6674:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
676. Prepend
  Type: ((IArray, $729:), $730:) => $732:constraint=(IArray, $731:)
  Sig: ArrayLibrary_0:Library.Prepend(self: (IArray, $729:), value: $730:): $732:constraint=(IArray, $731:)
  Body: MapRange(Add(Count(self), 1), (\(ParameterDef=i$6734:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
677. Append
  Type: ((IArray, $733:), $734:) => $736:constraint=(IArray, $735:)
  Sig: ArrayLibrary_0:Library.Append(self: (IArray, $733:), value: $734:): $736:constraint=(IArray, $735:)
  Body: MapRange(Add(Count(self), 1), (\(ParameterDef=i$6783:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
678. PrependAndAppend
  Type: ((IArray, $737:), $738:, $739:) => $741:constraint=(IArray, $740:)
  Sig: ArrayLibrary_0:Library.PrependAndAppend(self: (IArray, $737:), before: $738:, after: $739:): $741:constraint=(IArray, $740:)
  Body: Append(Prepend(self, before), after)
679. Map
  Type: ((IArray2D, $742:), (Function1, $743:, $744:)) => $746:constraint=(IArray2D, $745:)
  Sig: ArrayLibrary_0:Library.Map(xs: (IArray2D, $742:), f: (Function1, $743:, $744:)): $746:constraint=(IArray2D, $745:)
  Body: MakeArray2D(NumColumns(xs), NumRows(xs), (\(ParameterDef=a$6857:Concept:IAny, ParameterDef=b$6859:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
680. Size
  Type: ((IBounds, $747:)) => $748:
  Sig: IBounds_2:Library.Size(x: (IBounds, $747:)): $748:
  Body: Subtract(Max(x), Min(x))
681. Lerp
  Type: ((IBounds, $749:), Number) => $750:
  Sig: IBounds_2:Library.Lerp(x: (IBounds, $749:), amount: Number): $750:
  Body: Lerp(Min(x), Max(x), amount)
682. Center
  Type: ((IBounds, $751:)) => $752:
  Sig: IBounds_2:Library.Center(x: (IBounds, $751:)): $752:
  Body: Lerp(x, 0.5)
683. Contains
  Type: ((IBounds, $753:), $754:) => Boolean
  Sig: IBounds_2:Library.Contains(x: (IBounds, $753:), value: $754:): Boolean
  Body: Between(value, Min(x), Max(x))
684. Contains
  Type: ((IBounds, $755:), (IBounds, $756:)) => Boolean
  Sig: IBounds_2:Library.Contains(x: (IBounds, $755:), y: (IBounds, $756:)): Boolean
  Body: And(Contains(x, Min(y)), Contains(x, Max(y)))
685. Overlaps
  Type: ((IBounds, $757:), (IBounds, $758:)) => Boolean
  Sig: IBounds_2:Library.Overlaps(x: (IBounds, $757:), y: (IBounds, $758:)): Boolean
  Body: Or(Contains(x, Min(y)), Or(Contains(x, Max(y)), Or(Contains(y, Min(x)), Contains(y, Max(x)))))
686. Recenter
  Type: ((IBounds, $759:), $760:) => $762:constraint=(IBounds, $761:)
  Sig: IBounds_2:Library.Recenter(x: (IBounds, $759:), c: $760:): $762:constraint=(IBounds, $761:)
  Body: Tuple2(Subtract(c, Half(Size(x))), Add(c, Half(Size(x))))
687. Clamp
  Type: ((IBounds, $763:), (IBounds, $764:)) => $766:constraint=(IBounds, $765:)
  Sig: IBounds_2:Library.Clamp(x: (IBounds, $763:), y: (IBounds, $764:)): $766:constraint=(IBounds, $765:)
  Body: Tuple2(Clamp(x, Min(y)), Clamp(x, Max(y)))
688. Clamp
  Type: ((IBounds, $767:), $768:) => $769:
  Sig: IBounds_2:Library.Clamp(x: (IBounds, $767:), value: $768:): $769:
  Body: Clamp(value, Min(x), Max(x))
689. Include
  Type: ((IBounds, $770:), $771:) => $773:constraint=(IBounds, $772:)
  Sig: IBounds_2:Library.Include(x: (IBounds, $770:), value: $771:): $773:constraint=(IBounds, $772:)
  Body: Tuple2(Min(Min(x), value), Max(Max(x), value))
690. Include
  Type: ((IBounds, $774:), (IBounds, $775:)) => $777:constraint=(IBounds, $776:)
  Sig: IBounds_2:Library.Include(x: (IBounds, $774:), y: (IBounds, $775:)): $777:constraint=(IBounds, $776:)
  Body: Include(Include(x, Min(y)), Max(y))
691. XAxis2D
  Type: () => Vector2D
  Sig: INumerical_4:Library.XAxis2D(): Vector2D
  Body: Tuple2(1, 0)
692. YAxis2D
  Type: () => Vector2D
  Sig: INumerical_4:Library.YAxis2D(): Vector2D
  Body: Tuple2(0, 1)
693. XAxis3D
  Type: () => Vector3D
  Sig: INumerical_4:Library.XAxis3D(): Vector3D
  Body: Tuple3(1, 0, 0)
694. YAxis3D
  Type: () => Vector3D
  Sig: INumerical_4:Library.YAxis3D(): Vector3D
  Body: Tuple3(0, 1, 0)
695. ZAxis3D
  Type: () => Vector3D
  Sig: INumerical_4:Library.ZAxis3D(): Vector3D
  Body: Tuple3(0, 0, 1)
696. UnitInterval
  Type: () => NumberInterval
  Sig: INumerical_4:Library.UnitInterval(): NumberInterval
  Body: Tuple2(0, 1)
697. Pi
  Type: () => Number
  Sig: INumerical_4:Library.Pi(): Number
  Body: 3.1415926535897
698. E
  Type: () => Number
  Sig: INumerical_4:Library.E(): Number
  Body: 2.718281828459
699. TwoPi
  Type: () => Number
  Sig: INumerical_4:Library.TwoPi(): Number
  Body: Twice(Pi)
700. HalfPi
  Type: () => Number
  Sig: INumerical_4:Library.HalfPi(): Number
  Body: Half(Pi)
701. Epsilon
  Type: () => Number
  Sig: INumerical_4:Library.Epsilon(): Number
  Body: 1E-15
702. UnitCircle
  Type: () => Circle
  Sig: INumerical_4:Library.UnitCircle(): Circle
  Body: Tuple2(Tuple2(0, 0), 1)
703. FeetPerMeter
  Type: () => Number
  Sig: INumerical_4:Library.FeetPerMeter(): Number
  Body: 3.280839895
704. FeetPerMile
  Type: () => Number
  Sig: INumerical_4:Library.FeetPerMile(): Number
  Body: 5280
705. MetersPerLightyear
  Type: () => Number
  Sig: INumerical_4:Library.MetersPerLightyear(): Number
  Body: 9460730472580000
706. MetersPerAU
  Type: () => Number
  Sig: INumerical_4:Library.MetersPerAU(): Number
  Body: 149597870691
707. DaltonPerKilogram
  Type: () => Number
  Sig: INumerical_4:Library.DaltonPerKilogram(): Number
  Body: 1.66053E-27
708. PoundPerKilogram
  Type: () => Number
  Sig: INumerical_4:Library.PoundPerKilogram(): Number
  Body: 0.45359237
709. PoundPerTon
  Type: () => Number
  Sig: INumerical_4:Library.PoundPerTon(): Number
  Body: 2000
710. KilogramPerSolarMass
  Type: () => Number
  Sig: INumerical_4:Library.KilogramPerSolarMass(): Number
  Body: 1.9889200011446E+30
711. JulianYearSeconds
  Type: () => Number
  Sig: INumerical_4:Library.JulianYearSeconds(): Number
  Body: 31557600
712. GregorianYearDays
  Type: () => Number
  Sig: INumerical_4:Library.GregorianYearDays(): Number
  Body: 365.2425
713. RadiansPerDegree
  Type: () => Number
  Sig: INumerical_4:Library.RadiansPerDegree(): Number
  Body: Divide(Pi, 180)
714. DegreesPerRadian
  Type: () => Number
  Sig: INumerical_4:Library.DegreesPerRadian(): Number
  Body: Divide(180, Pi)
715. OunceToGram
  Type: (Number) => Number
  Sig: INumerical_4:Library.OunceToGram(x: Number): Number
  Body: Multiply(x, 28.349523125)
716. TroyOunceToGram
  Type: (Number) => Number
  Sig: INumerical_4:Library.TroyOunceToGram(x: Number): Number
  Body: Multiply(x, 31.1034768)
717. GrainToMilligram
  Type: (Number) => Number
  Sig: INumerical_4:Library.GrainToMilligram(x: Number): Number
  Body: Multiply(x, 64.79891)
718. Mole
  Type: (Number) => Number
  Sig: INumerical_4:Library.Mole(x: Number): Number
  Body: Multiply(x, 6.02214076E+23)
719. Min
  Type: (Number, Number) => Number
  Sig: INumerical_4:Library.Min(x: Number, y: Number): Number
  Body: (LessThanOrEquals(x, y)?x:y)
720. Max
  Type: (Number, Number) => Number
  Sig: INumerical_4:Library.Max(x: Number, y: Number): Number
  Body: (GreaterThanOrEquals(x, y)?x:y)
721. Inverse
  Type: (Number) => Number
  Sig: INumerical_4:Library.Inverse(x: Number): Number
  Body: Divide(1, x)
722. Reciprocal
  Type: (Number) => Number
  Sig: INumerical_4:Library.Reciprocal(x: Number): Number
  Body: Inverse(x)
723. SquareRoot
  Type: (Number) => Number
  Sig: INumerical_4:Library.SquareRoot(x: Number): Number
  Body: Pow(x, 0.5)
724. Sqrt
  Type: (Number) => Number
  Sig: INumerical_4:Library.Sqrt(x: Number): Number
  Body: SquareRoot(x)
725. InversePow
  Type: (Number, Number) => Number
  Sig: INumerical_4:Library.InversePow(x: Number, n: Number): Number
  Body: Pow(x, Reciprocal(n))
726. Exp
  Type: (Number) => Number
  Sig: INumerical_4:Library.Exp(x: Number): Number
  Body: Pow(E, x)
727. SmoothStep
  Type: (Number) => Number
  Sig: INumerical_4:Library.SmoothStep(x: Number): Number
  Body: Multiply(Square(x), Subtract(3, Twice(x)))
728. MultiplyEpsilon
  Type: (Number, Number) => Number
  Sig: INumerical_4:Library.MultiplyEpsilon(x: Number, y: Number): Number
  Body: Multiply(Greater(Abs(x), Abs(y)), Epsilon)
729. AlmostEqual
  Type: (Number, Number) => Boolean
  Sig: INumerical_4:Library.AlmostEqual(x: Number, y: Number): Boolean
  Body: LessThanOrEquals(Abs(Subtract(x, y)), MultiplyEpsilon(x, y))
730. AlmostZero
  Type: (Number) => Boolean
  Sig: INumerical_4:Library.AlmostZero(x: Number): Boolean
  Body: LessThan(Abs(x), Epsilon)
731. AlmostZeroOrOne
  Type: (Number) => Boolean
  Sig: INumerical_4:Library.AlmostZeroOrOne(x: Number): Boolean
  Body: Or(AlmostEqual(x, 0), AlmostEqual(x, 1))
732. Fract
  Type: (Number) => Number
  Sig: INumerical_4:Library.Fract(x: Number): Number
  Body: Subtract(x, Floor(x))
733. Pow2
  Type: (IArithmetic) => $778:constraint=IArithmetic
  Sig: INumerical_4:Library.Pow2(x: IArithmetic): $778:constraint=IArithmetic
  Body: Multiply(x, x)
734. Pow3
  Type: (IArithmetic) => $779:constraint=IArithmetic
  Sig: INumerical_4:Library.Pow3(x: IArithmetic): $779:constraint=IArithmetic
  Body: Multiply(Pow2(x), x)
735. Pow4
  Type: (IArithmetic) => $780:constraint=IArithmetic
  Sig: INumerical_4:Library.Pow4(x: IArithmetic): $780:constraint=IArithmetic
  Body: Multiply(Pow3(x), x)
736. Pow5
  Type: (IArithmetic) => $781:constraint=IArithmetic
  Sig: INumerical_4:Library.Pow5(x: IArithmetic): $781:constraint=IArithmetic
  Body: Multiply(Pow4(x), x)
737. Square
  Type: (IArithmetic) => $782:constraint=IArithmetic
  Sig: INumerical_4:Library.Square(x: IArithmetic): $782:constraint=IArithmetic
  Body: Pow2(x)
738. Sqr
  Type: (IArithmetic) => $783:constraint=IArithmetic
  Sig: INumerical_4:Library.Sqr(x: IArithmetic): $783:constraint=IArithmetic
  Body: Pow2(x)
739. Cube
  Type: (IArithmetic) => $784:constraint=IArithmetic
  Sig: INumerical_4:Library.Cube(x: IArithmetic): $784:constraint=IArithmetic
  Body: Pow3(x)
740. ToNumber
  Type: (Integer) => Number
  Sig: INumerical_4:Library.ToNumber(x: Integer): Number
  Body: Number(x)
741. PlusOne
  Type: (Integer) => Integer
  Sig: INumerical_4:Library.PlusOne(x: Integer): Integer
  Body: Add(x, 1)
742. MinusOne
  Type: (Integer) => Integer
  Sig: INumerical_4:Library.MinusOne(x: Integer): Integer
  Body: Subtract(x, 1)
743. FromOne
  Type: (Integer) => Integer
  Sig: INumerical_4:Library.FromOne(x: Integer): Integer
  Body: Subtract(1, x)
744. FloatDivision
  Type: (Integer, Integer) => Number
  Sig: INumerical_4:Library.FloatDivision(x: Integer, y: Integer): Number
  Body: Divide(ToNumber(x), ToNumber(y))
745. Fractions
  Type: (Integer) => $785:constraint=(IArray, Number)
  Sig: INumerical_4:Library.Fractions(x: Integer): $785:constraint=(IArray, Number)
  Body: Map(Range(x), (\(ParameterDef=i$7651:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
746. FractionsExclusive
  Type: (Integer) => $786:constraint=(IArray, Number)
  Sig: INumerical_4:Library.FractionsExclusive(x: Integer): $786:constraint=(IArray, Number)
  Body: Map(Range(x), (\(ParameterDef=i$7682:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
747. Multiply
  Type: (INumberLike, INumberLike) => $787:constraint=INumberLike
  Sig: INumerical_4:Library.Multiply(x: INumberLike, y: INumberLike): $787:constraint=INumberLike
  Body: FromNumber(x, Multiply(ToNumber(x), ToNumber(y)))
748. Divide
  Type: (INumberLike, INumberLike) => $788:constraint=INumberLike
  Sig: INumerical_4:Library.Divide(x: INumberLike, y: INumberLike): $788:constraint=INumberLike
  Body: FromNumber(x, Divide(ToNumber(x), ToNumber(y)))
749. Modulo
  Type: (INumberLike, INumberLike) => $789:constraint=INumberLike
  Sig: INumerical_4:Library.Modulo(x: INumberLike, y: INumberLike): $789:constraint=INumberLike
  Body: FromNumber(x, Modulo(ToNumber(x), ToNumber(y)))
750. Magnitude
  Type: (IReal) => Number
  Sig: INumerical_4:Library.Magnitude(x: IReal): Number
  Body: Value(x)
751. GtZ
  Type: (IReal) => Boolean
  Sig: INumerical_4:Library.GtZ(x: IReal): Boolean
  Body: GreaterThan(x, Zero(x))
752. LtZ
  Type: (IReal) => Boolean
  Sig: INumerical_4:Library.LtZ(x: IReal): Boolean
  Body: LessThan(x, Zero(x))
753. GtEqZ
  Type: (IReal) => Boolean
  Sig: INumerical_4:Library.GtEqZ(x: IReal): Boolean
  Body: GreaterThanOrEquals(x, Zero(x))
754. LtEqZ
  Type: (IReal) => Boolean
  Sig: INumerical_4:Library.LtEqZ(x: IReal): Boolean
  Body: LessThanOrEquals(x, Zero(x))
755. IsPositive
  Type: (IReal) => Boolean
  Sig: INumerical_4:Library.IsPositive(x: IReal): Boolean
  Body: GtEqZ(x)
756. IsNegative
  Type: (IReal) => Boolean
  Sig: INumerical_4:Library.IsNegative(x: IReal): Boolean
  Body: LtZ(x)
757. Sign
  Type: (IReal) => Integer
  Sig: INumerical_4:Library.Sign(x: IReal): Integer
  Body: (LtZ(x)?Negative(1):(GtZ(x)?1:0))
758. Abs
  Type: (IReal) => $790:constraint=IReal
  Sig: INumerical_4:Library.Abs(x: IReal): $790:constraint=IReal
  Body: (LtZ(x)?Negative(x):x)
759. Inverse
  Type: (IReal) => $791:constraint=IReal
  Sig: INumerical_4:Library.Inverse(x: IReal): $791:constraint=IReal
  Body: Divide(One(x), x)
760. Between
  Type: (IReal, IReal, IReal) => Boolean
  Sig: INumerical_4:Library.Between(self: IReal, min: IReal, max: IReal): Boolean
  Body: And(GreaterThanOrEquals(self, min), LessThanOrEquals(self, max))
761. Half
  Type: (IScalarArithmetic) => $792:constraint=IScalarArithmetic
  Sig: INumerical_4:Library.Half(x: IScalarArithmetic): $792:constraint=IScalarArithmetic
  Body: Divide(x, 2)
762. Quarter
  Type: (IScalarArithmetic) => $793:constraint=IScalarArithmetic
  Sig: INumerical_4:Library.Quarter(x: IScalarArithmetic): $793:constraint=IScalarArithmetic
  Body: Divide(x, 4)
763. Eight
  Type: (IScalarArithmetic) => $794:constraint=IScalarArithmetic
  Sig: INumerical_4:Library.Eight(x: IScalarArithmetic): $794:constraint=IScalarArithmetic
  Body: Divide(x, 8)
764. Sixteenth
  Type: (IScalarArithmetic) => $795:constraint=IScalarArithmetic
  Sig: INumerical_4:Library.Sixteenth(x: IScalarArithmetic): $795:constraint=IScalarArithmetic
  Body: Divide(x, 16)
765. Tenth
  Type: (IScalarArithmetic) => $796:constraint=IScalarArithmetic
  Sig: INumerical_4:Library.Tenth(x: IScalarArithmetic): $796:constraint=IScalarArithmetic
  Body: Divide(x, 10)
766. Twice
  Type: (IScalarArithmetic) => $797:constraint=IScalarArithmetic
  Sig: INumerical_4:Library.Twice(x: IScalarArithmetic): $797:constraint=IScalarArithmetic
  Body: Multiply(x, 2)
767. Hundred
  Type: (IScalarArithmetic) => $798:constraint=IScalarArithmetic
  Sig: INumerical_4:Library.Hundred(x: IScalarArithmetic): $798:constraint=IScalarArithmetic
  Body: Multiply(x, 100)
768. Thousand
  Type: (IScalarArithmetic) => $799:constraint=IScalarArithmetic
  Sig: INumerical_4:Library.Thousand(x: IScalarArithmetic): $799:constraint=IScalarArithmetic
  Body: Multiply(x, 1000)
769. Million
  Type: (IScalarArithmetic) => $800:constraint=IScalarArithmetic
  Sig: INumerical_4:Library.Million(x: IScalarArithmetic): $800:constraint=IScalarArithmetic
  Body: Thousand(Thousand(x))
770. Billion
  Type: (IScalarArithmetic) => $801:constraint=IScalarArithmetic
  Sig: INumerical_4:Library.Billion(x: IScalarArithmetic): $801:constraint=IScalarArithmetic
  Body: Million(Thousand(x))
771. Turns
  Type: (Number) => Angle
  Sig: INumerical_4:Library.Turns(x: Number): Angle
  Body: Radians(Multiply(x, TwoPi))
772. Degrees
  Type: (Number) => Angle
  Sig: INumerical_4:Library.Degrees(x: Number): Angle
  Body: Turns(Divide(x, 360))
773. Gradians
  Type: (Number) => Angle
  Sig: INumerical_4:Library.Gradians(x: Number): Angle
  Body: Turns(Divide(x, 400))
774. Radians
  Type: (Number) => Angle
  Sig: INumerical_4:Library.Radians(x: Number): Angle
  Body: x
775. Turns
  Type: (Angle) => Number
  Sig: INumerical_4:Library.Turns(x: Angle): Number
  Body: Divide(Radians(x), TwoPi)
776. Degrees
  Type: (Angle) => Number
  Sig: INumerical_4:Library.Degrees(x: Angle): Number
  Body: Multiply(Turns(x), 360)
777. Gradians
  Type: (Angle) => Number
  Sig: INumerical_4:Library.Gradians(x: Angle): Number
  Body: Multiply(Turns(x), 400)
778. Sin
  Type: (Number) => Number
  Sig: INumerical_4:Library.Sin(x: Number): Number
  Body: Sin(Turns(x))
779. Cos
  Type: (Number) => Number
  Sig: INumerical_4:Library.Cos(x: Number): Number
  Body: Cos(Turns(x))
780. Tan
  Type: (Number) => Number
  Sig: INumerical_4:Library.Tan(x: Number): Number
  Body: Tan(Turns(x))
781. Sec
  Type: (Angle) => Number
  Sig: INumerical_4:Library.Sec(x: Angle): Number
  Body: Reciprocal(Cos(x))
782. Csc
  Type: (Angle) => Number
  Sig: INumerical_4:Library.Csc(x: Angle): Number
  Body: Reciprocal(Sin(x))
783. Cot
  Type: (Angle) => Number
  Sig: INumerical_4:Library.Cot(x: Angle): Number
  Body: Reciprocal(Tan(x))
784. PlusOne
  Type: (INumerical) => $802:constraint=INumerical
  Sig: INumerical_4:Library.PlusOne(x: INumerical): $802:constraint=INumerical
  Body: Add(x, One)
785. MinusOne
  Type: (INumerical) => $803:constraint=INumerical
  Sig: INumerical_4:Library.MinusOne(x: INumerical): $803:constraint=INumerical
  Body: Subtract(x, One)
786. FromOne
  Type: (INumerical) => $804:constraint=INumerical
  Sig: INumerical_4:Library.FromOne(x: INumerical): $804:constraint=INumerical
  Body: Subtract(One, x)
787. Component
  Type: (INumerical, Integer) => Number
  Sig: INumerical_4:Library.Component(x: INumerical, n: Integer): Number
  Body: At(Components(x), n)
788. NumComponents
  Type: (INumerical) => Integer
  Sig: INumerical_4:Library.NumComponents(x: INumerical): Integer
  Body: Count(Components(x))
789. MapComponents
  Type: (INumerical, (Function1, Number, Number)) => $805:constraint=INumerical
  Sig: INumerical_4:Library.MapComponents(x: INumerical, f: (Function1, Number, Number)): $805:constraint=INumerical
  Body: FromComponents(x, Map(Components(x), f))
790. ZipComponents
  Type: (INumerical, INumerical, (Function2, Number, Number, Number)) => $806:constraint=INumerical
  Sig: INumerical_4:Library.ZipComponents(x: INumerical, y: INumerical, f: (Function2, Number, Number, Number)): $806:constraint=INumerical
  Body: FromComponents(x, Zip(Components(x), Components(y), f))
791. Zero
  Type: (INumerical) => $807:constraint=INumerical
  Sig: INumerical_4:Library.Zero(x: INumerical): $807:constraint=INumerical
  Body: MapComponents(x, (\(ParameterDef=i$8236:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
792. One
  Type: (INumerical) => $808:constraint=INumerical
  Sig: INumerical_4:Library.One(x: INumerical): $808:constraint=INumerical
  Body: MapComponents(x, (\(ParameterDef=i$8254:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
793. MaxComponent
  Type: (INumerical) => Number
  Sig: INumerical_4:Library.MaxComponent(x: INumerical): Number
  Body: Plato.Compiler.Symbols.BlockStatement
794. MinComponent
  Type: (INumerical) => Number
  Sig: INumerical_4:Library.MinComponent(x: INumerical): Number
  Body: Plato.Compiler.Symbols.BlockStatement
795. MinValue
  Type: (INumerical) => $809:constraint=INumerical
  Sig: INumerical_4:Library.MinValue(x: INumerical): $809:constraint=INumerical
  Body: MapComponents(x, (\(ParameterDef=x$8396:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
796. MaxValue
  Type: (INumerical) => $810:constraint=INumerical
  Sig: INumerical_4:Library.MaxValue(x: INumerical): $810:constraint=INumerical
  Body: MapComponents(x, (\(ParameterDef=x$8417:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
797. AllComponents
  Type: (INumerical, (Function1, Number, Boolean)) => Boolean
  Sig: INumerical_4:Library.AllComponents(x: INumerical, predicate: (Function1, Number, Boolean)): Boolean
  Body: All(Components(x), predicate)
798. AnyComponent
  Type: (INumerical, (Function1, Number, Boolean)) => Boolean
  Sig: INumerical_4:Library.AnyComponent(x: INumerical, predicate: (Function1, Number, Boolean)): Boolean
  Body: Any(Components(x), predicate)
799. Between
  Type: (INumerical, INumerical, INumerical) => Boolean
  Sig: INumerical_4:Library.Between(x: INumerical, a: INumerical, b: INumerical): Boolean
  Body: All(Zip(Components(x), Components(a), Components(b), (\(ParameterDef=x0$8487:Concept:IAny, ParameterDef=a0$8489:Concept:IAny, ParameterDef=b0$8491:Concept:IAny) -> ConcreteType:Function3<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2,TypeVariable:$T3>), (\(ParameterDef=x0$8516:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
800. BetweenZeroOne
  Type: (INumerical) => Boolean
  Sig: INumerical_4:Library.BetweenZeroOne(x: INumerical): Boolean
  Body: Between(x, Zero(x), One(x))
801. Clamp
  Type: (INumerical, INumerical, INumerical) => $811:constraint=INumerical
  Sig: INumerical_4:Library.Clamp(x: INumerical, a: INumerical, b: INumerical): $811:constraint=INumerical
  Body: FromComponents(x, Zip(Components(x), Components(a), Components(b), (\(ParameterDef=x0$8570:Concept:IAny, ParameterDef=a0$8572:Concept:IAny, ParameterDef=b0$8574:Concept:IAny) -> ConcreteType:Function3<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2,TypeVariable:$T3>))
802. ClampZeroOne
  Type: (INumerical) => $812:constraint=INumerical
  Sig: INumerical_4:Library.ClampZeroOne(x: INumerical): $812:constraint=INumerical
  Body: Clamp(x, Zero(x), One(x))
803. Clamp01
  Type: (INumerical) => $813:constraint=INumerical
  Sig: INumerical_4:Library.Clamp01(x: INumerical): $813:constraint=INumerical
  Body: ClampZeroOne(x)
804. Abs
  Type: (INumerical) => $814:constraint=INumerical
  Sig: INumerical_4:Library.Abs(x: INumerical): $814:constraint=INumerical
  Body: MapComponents(x, (\(ParameterDef=i$8630:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
805. Min
  Type: (INumerical, INumerical) => $815:constraint=INumerical
  Sig: INumerical_4:Library.Min(x: INumerical, y: INumerical): $815:constraint=INumerical
  Body: ZipComponents(x, y, (\(ParameterDef=a$8655:Concept:IAny, ParameterDef=b$8657:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
806. Max
  Type: (INumerical, INumerical) => $816:constraint=INumerical
  Sig: INumerical_4:Library.Max(x: INumerical, y: INumerical): $816:constraint=INumerical
  Body: ZipComponents(x, y, (\(ParameterDef=a$8686:Concept:IAny, ParameterDef=b$8688:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
807. Floor
  Type: (INumerical) => $817:constraint=INumerical
  Sig: INumerical_4:Library.Floor(n: INumerical): $817:constraint=INumerical
  Body: MapComponents(n, (\(ParameterDef=c$8713:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
808. Fract
  Type: (INumerical) => $818:constraint=INumerical
  Sig: INumerical_4:Library.Fract(n: INumerical): $818:constraint=INumerical
  Body: MapComponents(n, (\(ParameterDef=c$8734:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
809. Equals
  Type: (IEquatable, IEquatable) => Boolean
  Sig: INumerical_4:Library.Equals(a: IEquatable, b: IEquatable): Boolean
  Body: All(Zip(FieldValues(a), FieldValues(b), (\(ParameterDef=a0$8765:Concept:IAny, ParameterDef=b0$8767:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>), (\(ParameterDef=x$8788:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
810. NotEquals
  Type: (IEquatable, IEquatable) => Boolean
  Sig: INumerical_4:Library.NotEquals(a: IEquatable, b: IEquatable): Boolean
  Body: Not(Equals(a, b))
811. LessThan
  Type: (IOrderable, IOrderable) => Boolean
  Sig: INumerical_4:Library.LessThan(a: IOrderable, b: IOrderable): Boolean
  Body: And(LessThanOrEquals(a, b), NotEquals(a, b))
812. GreaterThan
  Type: (IOrderable, IOrderable) => Boolean
  Sig: INumerical_4:Library.GreaterThan(a: IOrderable, b: IOrderable): Boolean
  Body: LessThan(b, a)
813. GreaterThanOrEquals
  Type: (IOrderable, IOrderable) => Boolean
  Sig: INumerical_4:Library.GreaterThanOrEquals(a: IOrderable, b: IOrderable): Boolean
  Body: LessThanOrEquals(b, a)
814. Lesser
  Type: (IOrderable, IOrderable) => $819:constraint=IOrderable
  Sig: INumerical_4:Library.Lesser(a: IOrderable, b: IOrderable): $819:constraint=IOrderable
  Body: (LessThanOrEquals(a, b)?a:b)
815. Greater
  Type: (IOrderable, IOrderable) => $820:constraint=IOrderable
  Sig: INumerical_4:Library.Greater(a: IOrderable, b: IOrderable): $820:constraint=IOrderable
  Body: (GreaterThanOrEquals(a, b)?a:b)
816. CompareTo
  Type: (IOrderable, IOrderable) => Integer
  Sig: INumerical_4:Library.CompareTo(a: IOrderable, b: IOrderable): Integer
  Body: (LessThanOrEquals(a, b)?(Equals(a, b)?0:Negative(1)):1)
817. ToNumber
  Type: (Number) => Number
  Sig: INumerical_4:Library.ToNumber(x: Number): Number
  Body: x
818. Number
  Type: (INumberLike) => Number
  Sig: INumerical_4:Library.Number(x: INumberLike): Number
  Body: ToNumber(x)
819. ToNumber
  Type: (INumberLike) => Number
  Sig: INumerical_4:Library.ToNumber(x: INumberLike): Number
  Body: Component(x, 0)
820. FromNumber
  Type: (INumberLike, Number) => $821:constraint=INumberLike
  Sig: INumerical_4:Library.FromNumber(x: INumberLike, n: Number): $821:constraint=INumberLike
  Body: FromComponents(x, [n])
821. Compare
  Type: (INumberLike, INumberLike) => Integer
  Sig: INumerical_4:Library.Compare(a: INumberLike, b: INumberLike): Integer
  Body: Compare(ToNumber(a), ToNumber(b))
822. Add
  Type: (INumberLike, Number) => $822:constraint=INumberLike
  Sig: INumerical_4:Library.Add(x: INumberLike, y: Number): $822:constraint=INumberLike
  Body: FromNumber(x, Add(ToNumber(x), y))
823. Subract
  Type: (INumberLike, Number) => $823:constraint=INumberLike
  Sig: INumerical_4:Library.Subract(x: INumberLike, y: Number): $823:constraint=INumberLike
  Body: FromNumber(x, Subtract(ToNumber(x), y))
824. Multiply
  Type: (INumerical, Number) => $824:constraint=INumerical
  Sig: INumerical_4:Library.Multiply(x: INumerical, s: Number): $824:constraint=INumerical
  Body: MapComponents(x, (\(ParameterDef=i$9005:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
825. Divide
  Type: (INumerical, Number) => $825:constraint=INumerical
  Sig: INumerical_4:Library.Divide(x: INumerical, s: Number): $825:constraint=INumerical
  Body: MapComponents(x, (\(ParameterDef=i$9030:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
826. Modulo
  Type: (INumerical, Number) => $826:constraint=INumerical
  Sig: INumerical_4:Library.Modulo(x: INumerical, s: Number): $826:constraint=INumerical
  Body: MapComponents(x, (\(ParameterDef=i$9055:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
827. Add
  Type: (INumerical, INumerical) => $827:constraint=INumerical
  Sig: INumerical_4:Library.Add(x: INumerical, y: INumerical): $827:constraint=INumerical
  Body: ZipComponents(x, y, (\(ParameterDef=a$9082:Concept:IAny, ParameterDef=b$9084:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
828. Subtract
  Type: (INumerical, INumerical) => $828:constraint=INumerical
  Sig: INumerical_4:Library.Subtract(x: INumerical, y: INumerical): $828:constraint=INumerical
  Body: ZipComponents(x, y, (\(ParameterDef=a$9113:Concept:IAny, ParameterDef=b$9115:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
829. Negative
  Type: (INumerical) => $829:constraint=INumerical
  Sig: INumerical_4:Library.Negative(x: INumerical): $829:constraint=INumerical
  Body: MapComponents(x, (\(ParameterDef=a$9140:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
830. Multiply
  Type: (IVector, IVector) => $830:constraint=IVector
  Sig: INumerical_4:Library.Multiply(x: IVector, y: IVector): $830:constraint=IVector
  Body: ZipComponents(x, y, (\(ParameterDef=a$9165:Concept:IAny, ParameterDef=b$9167:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
831. Divide
  Type: (IVector, IVector) => $831:constraint=IVector
  Sig: INumerical_4:Library.Divide(x: IVector, y: IVector): $831:constraint=IVector
  Body: ZipComponents(x, y, (\(ParameterDef=a$9196:Concept:IAny, ParameterDef=b$9198:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
832. Modulo
  Type: (IVector, IVector) => $832:constraint=IVector
  Sig: INumerical_4:Library.Modulo(x: IVector, y: IVector): $832:constraint=IVector
  Body: ZipComponents(x, y, (\(ParameterDef=a$9227:Concept:IAny, ParameterDef=b$9229:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
833. Lerp
  Type: (IInterpolatable, IInterpolatable, Number) => $833:constraint=IInterpolatable
  Sig: INumerical_4:Library.Lerp(a: IInterpolatable, b: IInterpolatable, t: Number): $833:constraint=IInterpolatable
  Body: Add(Multiply(a, FromOne(t)), Multiply(b, t))
834. Barycentric
  Type: (IInterpolatable, IInterpolatable, IInterpolatable, Vector2D) => $834:constraint=IInterpolatable
  Sig: INumerical_4:Library.Barycentric(v1: IInterpolatable, v2: IInterpolatable, v3: IInterpolatable, uv: Vector2D): $834:constraint=IInterpolatable
  Body: Add(Multiply(Add(v1, Subtract(v2, v1)), X(uv)), Multiply(Subtract(v3, v1), Y(uv)))
835. Closed
  Type: (ICurve2D) => Boolean
  Sig: Curves_6:Library.Closed(curve: ICurve2D): Boolean
  Body: False
836. Closed
  Type: (ICurve3D) => Boolean
  Sig: Curves_6:Library.Closed(curve: ICurve3D): Boolean
  Body: False
837. Sample
  Type: (ICurve2D, Integer) => $835:constraint=(IArray, Vector2D)
  Sig: Curves_6:Library.Sample(curve: ICurve2D, numPoints: Integer): $835:constraint=(IArray, Vector2D)
  Body: Map(LinearSpace(numPoints), (\(ParameterDef=x$9339:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
838. Sample
  Type: (ICurve3D, Integer) => $836:constraint=(IArray, Vector3D)
  Sig: Curves_6:Library.Sample(curve: ICurve3D, numPoints: Integer): $836:constraint=(IArray, Vector3D)
  Body: Map(LinearSpace(numPoints), (\(ParameterDef=x$9367:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
839. ToPolyLine2D
  Type: (ICurve2D, Integer) => PolyLine2D
  Sig: Curves_6:Library.ToPolyLine2D(curve: ICurve2D, numPoints: Integer): PolyLine2D
  Body: Tuple2(Sample(curve, numPoints), Closed(curve))
840. ToPolyLine3D
  Type: (ICurve3D, Integer) => PolyLine3D
  Sig: Curves_6:Library.ToPolyLine3D(curve: ICurve3D, numPoints: Integer): PolyLine3D
  Body: Tuple2(Sample(curve, numPoints), Closed(curve))
841. Linear
  Type: (Number, Number, Number) => Number
  Sig: Curves_6:Library.Linear(x: Number, m: Number, b: Number): Number
  Body: Add(Multiply(m, x), b)
842. Eval
  Type: (LinearEquation, Number) => Number
  Sig: Curves_6:Library.Eval(f: LinearEquation, x: Number): Number
  Body: Linear(x, Slope(f), YIntercept(f))
843. Quadratic
  Type: (Number, Number, Number, Number) => Number
  Sig: Curves_6:Library.Quadratic(x: Number, a: Number, b: Number, c: Number): Number
  Body: Add(Multiply(a, Sqr(x)), Add(Multiply(b, x), c))
844. Eval
  Type: (Quadratic, Number) => Number
  Sig: Curves_6:Library.Eval(f: Quadratic, x: Number): Number
  Body: Quadratic(x, A(f), B(f), C(f))
845. Cubic
  Type: (Number, Number, Number, Number, Number) => Number
  Sig: Curves_6:Library.Cubic(x: Number, a: Number, b: Number, c: Number, d: Number): Number
  Body: Add(Multiply(a, Cube(x)), Add(Multiply(b, Sqr(x)), Add(Multiply(c, x), d)))
846. Eval
  Type: (Cubic, Number) => Number
  Sig: Curves_6:Library.Eval(f: Cubic, x: Number): Number
  Body: Cubic(x, A(f), B(f), C(f), D(f))
847. SineWave
  Type: (Number, Number, Number, Number) => Number
  Sig: Curves_6:Library.SineWave(x: Number, amplitude: Number, frequency: Number, phase: Number): Number
  Body: Multiply(amplitude, Add(Multiply(frequency, Sin(Turns(x))), phase))
848. Eval
  Type: (SineWave, Number) => Number
  Sig: Curves_6:Library.Eval(f: SineWave, x: Number): Number
  Body: SineWave(x, Amplitude(f), Frequency(f), Phase(f))
849. Parabola
  Type: (IMultiplicative) => $837:constraint=IMultiplicative
  Sig: Curves_6:Library.Parabola(x: IMultiplicative): $837:constraint=IMultiplicative
  Body: Sqr(x)
850. Eval
  Type: (Parabola, Number) => Number
  Sig: Curves_6:Library.Eval(f: Parabola, x: Number): Number
  Body: Parabola(x)
851. StaircaseFloor
  Type: (Number, Integer) => Number
  Sig: Curves_6:Library.StaircaseFloor(x: Number, steps: Integer): Number
  Body: Divide(Floor(Multiply(x, steps)), steps)
852. StaircaseCeiling
  Type: (Number, Integer) => Number
  Sig: Curves_6:Library.StaircaseCeiling(x: Number, steps: Integer): Number
  Body: Divide(Ceiling(Multiply(x, steps)), steps)
853. StaircaseRound
  Type: (Number, Integer) => Number
  Sig: Curves_6:Library.StaircaseRound(x: Number, steps: Integer): Number
  Body: Divide(Round(Multiply(x, steps)), steps)
854. CubicBezier
  Type: (IAlgebraic, IAlgebraic, IAlgebraic, IAlgebraic, Number) => $838:constraint=IAlgebraic
  Sig: Curves_6:Library.CubicBezier(a: IAlgebraic, b: IAlgebraic, c: IAlgebraic, d: IAlgebraic, t: Number): $838:constraint=IAlgebraic
  Body: Add(Multiply(a, Cube(Subtract(1, t))), Add(Multiply(b, Multiply(3, Multiply(Sqr(Subtract(1, t)), t))), Add(Multiply(c, Multiply(3, Multiply(Subtract(1, t), Sqr(t)))), Multiply(d, Cube(t)))))
855. CubicBezierDerivative
  Type: (IAlgebraic, IAlgebraic, IAlgebraic, IAlgebraic, Number) => $839:constraint=IAlgebraic
  Sig: Curves_6:Library.CubicBezierDerivative(a: IAlgebraic, b: IAlgebraic, c: IAlgebraic, d: IAlgebraic, t: Number): $839:constraint=IAlgebraic
  Body: Add(Multiply(Subtract(b, a), Multiply(3, Sqr(Subtract(1, t)))), Add(Multiply(Subtract(c, b), Multiply(6, Multiply(Subtract(1, t), t))), Multiply(Subtract(d, c), Multiply(3, Sqr(t)))))
856. CubicBezierSecondDerivative
  Type: (IAlgebraic, IAlgebraic, IAlgebraic, IAlgebraic, Number) => $840:constraint=IAlgebraic
  Sig: Curves_6:Library.CubicBezierSecondDerivative(a: IAlgebraic, b: IAlgebraic, c: IAlgebraic, d: IAlgebraic, t: Number): $840:constraint=IAlgebraic
  Body: Add(Multiply(Subtract(c, Add(Multiply(b, 2), a)), Multiply(6, Subtract(1, t))), Multiply(Subtract(d, Add(Multiply(c, 2), a)), Multiply(6, t)))
857. QuadraticBezier
  Type: (IAlgebraic, IAlgebraic, IAlgebraic, Number) => $841:constraint=IAlgebraic
  Sig: Curves_6:Library.QuadraticBezier(a: IAlgebraic, b: IAlgebraic, c: IAlgebraic, t: Number): $841:constraint=IAlgebraic
  Body: Add(Multiply(a, Sqr(Subtract(1, t))), Add(Multiply(b, Multiply(2, Multiply(Subtract(1, t), t))), Multiply(c, Sqr(t))))
858. QuadraticBezierDerivative
  Type: (IAlgebraic, IAlgebraic, IAlgebraic, Number) => $842:constraint=IAlgebraic
  Sig: Curves_6:Library.QuadraticBezierDerivative(a: IAlgebraic, b: IAlgebraic, c: IAlgebraic, t: Number): $842:constraint=IAlgebraic
  Body: Add(Multiply(Subtract(b, b), Multiply(2, Subtract(1, t))), Multiply(Subtract(c, b), Multiply(2, t)))
859. QuadraticBezierSecondDerivative
  Type: (IAlgebraic, IAlgebraic, IAlgebraic, Number) => $843:constraint=IAlgebraic
  Sig: Curves_6:Library.QuadraticBezierSecondDerivative(a: IAlgebraic, b: IAlgebraic, c: IAlgebraic, t: Number): $843:constraint=IAlgebraic
  Body: Subtract(c, Add(Multiply(b, 2), a))
860. Spiral
  Type: (Number, Number, Number, Number) => Vector2D
  Sig: Curves2D_8:Library.Spiral(t: Number, R: Number, r: Number, numTurns: Number): Vector2D
  Body: Multiply(New(Vector2D, Cos(Multiply(Turns(t), numTurns)), Sin(Multiply(Turns(t), numTurns))), Lerp(r, R, t))
861. Eval
  Type: (Spiral, Number) => Vector2D
  Sig: Curves2D_8:Library.Eval(curve: Spiral, t: Number): Vector2D
  Body: Spiral(t, Radius1(curve), Radius2(curve), NumTurns(curve))
862. Eval
  Type: (QuadraticBezier2D, Number) => Vector2D
  Sig: Curves2D_8:Library.Eval(curve: QuadraticBezier2D, t: Number): Vector2D
  Body: QuadraticBezier(A(curve), B(curve), C(curve), t)
863. Eval
  Type: (CubicBezier2D, Number) => Vector2D
  Sig: Curves2D_8:Library.Eval(curve: CubicBezier2D, t: Number): Vector2D
  Body: QuadraticBezier(A(curve), B(curve), C(curve), t)
864. Eval
  Type: (IAngularCurve2D, Number) => Vector2D
  Sig: AngularCurves2D_10:Library.Eval(curve: IAngularCurve2D, t: Number): Vector2D
  Body: GetPoint(curve, Turns(t))
865. UnitCircle
  Type: (Angle) => Vector2D
  Sig: AngularCurves2D_10:Library.UnitCircle(t: Angle): Vector2D
  Body: Tuple2(Cos(t), Sin(t))
866. Circle
  Type: (Angle, Vector2D, Number) => Vector2D
  Sig: AngularCurves2D_10:Library.Circle(t: Angle, center: Vector2D, radius: Number): Vector2D
  Body: Add(Multiply(UnitCircle(t), radius), center)
867. GetPoint
  Type: (Circle, Angle) => Vector2D
  Sig: AngularCurves2D_10:Library.GetPoint(curve: Circle, t: Angle): Vector2D
  Body: Circle(t, Center(curve), Radius(curve))
868. Ellipse
  Type: (Angle, Vector2D, Vector2D) => Vector2D
  Sig: AngularCurves2D_10:Library.Ellipse(t: Angle, center: Vector2D, size: Vector2D): Vector2D
  Body: Add(Multiply(UnitCircle(t), size), center)
869. GetPoint
  Type: (Ellipse, Angle) => Vector2D
  Sig: AngularCurves2D_10:Library.GetPoint(curve: Ellipse, t: Angle): Vector2D
  Body: Add(Multiply(UnitCircle(t), Size(curve)), Center(curve))
870. Epicycloid
  Type: (Angle, Number, Number) => Vector2D
  Sig: AngularCurves2D_10:Library.Epicycloid(t: Angle, R: Number, r: Number): Vector2D
  Body: Tuple2(Subtract(Multiply(Add(R, r), Cos(t)), Multiply(r, Multiply(Add(R, r), Cos(Divide(t, r))))), Subtract(Multiply(Add(R, r), Sin(t)), Multiply(r, Multiply(Add(R, r), Sin(Divide(t, r))))))
871. GetPoint
  Type: (Epicycloid, Angle) => Vector2D
  Sig: AngularCurves2D_10:Library.GetPoint(curve: Epicycloid, t: Angle): Vector2D
  Body: Epicycloid(t, Radius1(curve), Radius2(curve))
872. Hypocycloid
  Type: (Angle, Number, Number) => Vector2D
  Sig: AngularCurves2D_10:Library.Hypocycloid(t: Angle, R: Number, r: Number): Vector2D
  Body: Tuple2(Add(Multiply(Subtract(R, r), Cos(t)), Multiply(r, Multiply(Subtract(R, r), Cos(Divide(t, r))))), Subtract(Multiply(Subtract(R, r), Sin(t)), Multiply(r, Multiply(Subtract(R, r), Sin(Divide(t, r))))))
873. GetPoint
  Type: (Hypocycloid, Angle) => Vector2D
  Sig: AngularCurves2D_10:Library.GetPoint(curve: Hypocycloid, t: Angle): Vector2D
  Body: Hypocycloid(t, Radius1(curve), Radius2(curve))
874. Epitrochoid
  Type: (Angle, Number, Number, Number) => Vector2D
  Sig: AngularCurves2D_10:Library.Epitrochoid(t: Angle, R: Number, r: Number, d: Number): Vector2D
  Body: Tuple2(Subtract(Multiply(Add(R, r), Cos(t)), Multiply(d, Multiply(Add(R, r), Cos(Divide(t, r))))), Subtract(Multiply(Add(R, r), Sin(t)), Multiply(d, Multiply(Add(R, r), Sin(Divide(t, r))))))
875. GetPoint
  Type: (Epitrochoid, Angle) => Vector2D
  Sig: AngularCurves2D_10:Library.GetPoint(curve: Epitrochoid, t: Angle): Vector2D
  Body: Epitrochoid(t, Radius1(curve), Radius2(curve), Dist(curve))
876. Hypotrochoid
  Type: (Angle, Number, Number, Number) => Vector2D
  Sig: AngularCurves2D_10:Library.Hypotrochoid(t: Angle, R: Number, r: Number, d: Number): Vector2D
  Body: Tuple2(Add(Multiply(Subtract(R, r), Cos(t)), Multiply(d, Multiply(Subtract(R, r), Cos(Divide(t, r))))), Subtract(Multiply(Subtract(R, r), Sin(t)), Multiply(d, Multiply(Subtract(R, r), Sin(Divide(t, r))))))
877. GetPoint
  Type: (Hypotrochoid, Angle) => Vector2D
  Sig: AngularCurves2D_10:Library.GetPoint(curve: Hypotrochoid, t: Angle): Vector2D
  Body: Hypotrochoid(t, Radius1(curve), Radius2(curve), Dist(curve))
878. ButterflyCurve
  Type: (Angle) => Vector2D
  Sig: AngularCurves2D_10:Library.ButterflyCurve(t: Angle): Vector2D
  Body: ButterflyCurveSection(Divide(t, 6))
879. ButterflyCurveSection
  Type: (Angle) => Vector2D
  Sig: AngularCurves2D_10:Library.ButterflyCurveSection(t: Angle): Vector2D
  Body: Tuple2(Sin(Multiply(t, Subtract(Exp(Cos(t)), Subtract(Multiply(2, Cos(Multiply(t, 4))), Pow(Sin(Divide(t, 12)), 5))))), Cos(Multiply(t, Subtract(Exp(Cos(t)), Subtract(Multiply(2, Cos(Multiply(t, 4))), Pow(Sin(Divide(t, 12)), 5))))))
880. GetPoint
  Type: (ButterflyCurve, Angle) => Vector2D
  Sig: AngularCurves2D_10:Library.GetPoint(curve: ButterflyCurve, t: Angle): Vector2D
  Body: ButterflyCurve(t)
881. Lissajous
  Type: (Angle, Number, Number, Angle) => Vector2D
  Sig: AngularCurves2D_10:Library.Lissajous(t: Angle, a: Number, b: Number, d: Angle): Vector2D
  Body: Tuple2(Sin(Add(t, d)), Sin(b))
882. GetPoint
  Type: (Lissajous, Angle) => Vector2D
  Sig: AngularCurves2D_10:Library.GetPoint(curve: Lissajous, t: Angle): Vector2D
  Body: Lissajous(t, A(curve), B(curve), Delta(curve))
883. EvalPolar
  Type: (IPolarCurve, Angle) => PolarCoordinate
  Sig: PolarCurves_12:Library.EvalPolar(curve: IPolarCurve, t: Angle): PolarCoordinate
  Body: Tuple2(GetRadius(curve, t), t)
884. Vector2D
  Type: (PolarCoordinate) => Vector2D
  Sig: PolarCurves_12:Library.Vector2D(coord: PolarCoordinate): Vector2D
  Body: Multiply(New(Vector2D, Cos(Angle(coord)), Sin(Angle(coord))), Radius(coord))
885. GetPoint
  Type: (IPolarCurve, Angle) => Vector2D
  Sig: PolarCurves_12:Library.GetPoint(curve: IPolarCurve, t: Angle): Vector2D
  Body: EvalPolar(curve, t)
886. CycloidOfCeva
  Type: (Angle) => Number
  Sig: PolarCurves_12:Library.CycloidOfCeva(t: Angle): Number
  Body: Add(1, Multiply(Cos(Multiply(t, 2)), 2))
887. GetRadius
  Type: (CycloidOfCeva, Angle) => Number
  Sig: PolarCurves_12:Library.GetRadius(curve: CycloidOfCeva, t: Angle): Number
  Body: CycloidOfCeva(t)
888. Limacon
  Type: (Angle, Number, Number) => Number
  Sig: PolarCurves_12:Library.Limacon(t: Angle, a: Number, b: Number): Number
  Body: Add(Multiply(a, Cos(t)), b)
889. GetRadius
  Type: (Limacon, Angle) => Number
  Sig: PolarCurves_12:Library.GetRadius(curve: Limacon, t: Angle): Number
  Body: Limacon(t, A(curve), B(curve))
890. Cardoid
  Type: (Angle) => Number
  Sig: PolarCurves_12:Library.Cardoid(t: Angle): Number
  Body: Add(1, Cos(t))
891. GetRadius
  Type: (Cardoid, Angle) => Number
  Sig: PolarCurves_12:Library.GetRadius(curve: Cardoid, t: Angle): Number
  Body: Cardoid(t)
892. TschirnhausenCubic
  Type: (Angle, Number) => Number
  Sig: PolarCurves_12:Library.TschirnhausenCubic(t: Angle, a: Number): Number
  Body: Multiply(a, Cube(Sec(Divide(t, 3))))
893. GetRadius
  Type: (TschirnhausenCubic, Angle) => Number
  Sig: PolarCurves_12:Library.GetRadius(curve: TschirnhausenCubic, t: Angle): Number
  Body: TschirnhausenCubic(t, A(curve))
894. Rose
  Type: (Angle, Number) => Number
  Sig: PolarCurves_12:Library.Rose(t: Angle, k: Number): Number
  Body: Multiply(k, Cos(t))
895. GetRadius
  Type: (Rose, Angle) => Number
  Sig: PolarCurves_12:Library.GetRadius(curve: Rose, t: Angle): Number
  Body: Rose(t, K(curve))
896. ArchimedeanSpiral
  Type: (Angle, Number, Number) => Number
  Sig: PolarCurves_12:Library.ArchimedeanSpiral(t: Angle, a: Number, b: Number): Number
  Body: Add(a, Multiply(b, Turns(t)))
897. GetRadius
  Type: (ArchimedeanSpiral, Angle) => Number
  Sig: PolarCurves_12:Library.GetRadius(curve: ArchimedeanSpiral, t: Angle): Number
  Body: ArchimedeanSpiral(t, A(curve), B(curve))
898. ConicSection
  Type: (Angle, Number, Number) => Number
  Sig: PolarCurves_12:Library.ConicSection(t: Angle, semiLatusRectum: Number, eccentricity: Number): Number
  Body: Divide(semiLatusRectum, Subtract(1, Multiply(eccentricity, Cos(t))))
899. GetRadius
  Type: (ConicSection, Angle) => Number
  Sig: PolarCurves_12:Library.GetRadius(curve: ConicSection, t: Angle): Number
  Body: ConicSection(t, SemiLatusRectum(curve), Eccentricity(curve))
900. LemniscateOfBernoulli
  Type: (Angle, Number) => Number
  Sig: PolarCurves_12:Library.LemniscateOfBernoulli(t: Angle, a: Number): Number
  Body: Sqrt(Multiply(Sqr(a), Cos(Multiply(t, 2))))
901. GetRadius
  Type: (LemniscateOfBernoulli, Angle) => Number
  Sig: PolarCurves_12:Library.GetRadius(curve: LemniscateOfBernoulli, t: Angle): Number
  Body: LemniscateOfBernoulli(t, A(curve))
902. TrisectrixOfMaclaurin
  Type: (Angle, Number) => Number
  Sig: PolarCurves_12:Library.TrisectrixOfMaclaurin(t: Angle, a: Number): Number
  Body: Divide(Multiply(2, a), Cos(Divide(t, 3)))
903. GetRadius
  Type: (TrisectrixOfMaclaurin, Angle) => Number
  Sig: PolarCurves_12:Library.GetRadius(curve: TrisectrixOfMaclaurin, t: Angle): Number
  Body: TrisectrixOfMaclaurin(t, A(curve))
904. ConchoidOfDeSluze
  Type: (Angle, Number) => Number
  Sig: PolarCurves_12:Library.ConchoidOfDeSluze(t: Angle, a: Number): Number
  Body: Add(Sec(t), Multiply(a, Cos(t)))
905. GetRadius
  Type: (ConchoidOfDeSluze, Angle) => Number
  Sig: PolarCurves_12:Library.GetRadius(curve: ConchoidOfDeSluze, t: Angle): Number
  Body: ConchoidOfDeSluze(t, A(curve))
906. SinusoidalSpiral
  Type: (Angle, Number, Number) => Number
  Sig: PolarCurves_12:Library.SinusoidalSpiral(t: Angle, a: Number, n: Number): Number
  Body: InversePow(Multiply(Pow(a, n), Cos(Multiply(t, n))), a)
907. GetRadius
  Type: (SinusoidalSpiral, Angle) => Number
  Sig: PolarCurves_12:Library.GetRadius(curve: SinusoidalSpiral, t: Angle): Number
  Body: SinusoidalSpiral(t, A(curve), N(curve))
908. FermatsSpiral
  Type: (Angle, Number) => Number
  Sig: PolarCurves_12:Library.FermatsSpiral(t: Angle, a: Number): Number
  Body: Sqrt(Multiply(a, Sqr(Turns(t))))
909. GetRadius
  Type: (FermatsSpiral, Angle) => Number
  Sig: PolarCurves_12:Library.GetRadius(curve: FermatsSpiral, t: Angle): Number
  Body: FermatsSpiral(t, A(curve))
910. LogarithmicSpiral
  Type: (Angle, Number, Number) => Number
  Sig: PolarCurves_12:Library.LogarithmicSpiral(t: Angle, a: Number, k: Number): Number
  Body: Multiply(a, Exp(Multiply(Radians(t), k)))
911. GetRadius
  Type: (LogarithmicSpiral, Angle) => Number
  Sig: PolarCurves_12:Library.GetRadius(curve: LogarithmicSpiral, t: Angle): Number
  Body: LogarithmicSpiral(t, A(curve), K(curve))
912. Eval
  Type: (QuadraticBezier3D, Number) => Vector3D
  Sig: Curves3D_14:Library.Eval(curve: QuadraticBezier3D, t: Number): Vector3D
  Body: QuadraticBezier(A(curve), B(curve), C(curve), t)
913. Eval
  Type: (CubicBezier3D, Number) => Vector3D
  Sig: Curves3D_14:Library.Eval(curve: CubicBezier3D, t: Number): Vector3D
  Body: QuadraticBezier(A(curve), B(curve), C(curve), t)
914. Eval
  Type: (IAngularCurve3D, Number) => Vector3D
  Sig: AngularCurves3D_16:Library.Eval(curve: IAngularCurve3D, t: Number): Vector3D
  Body: GetPoint(curve, Turns(t))
915. TorusKnot
  Type: (Angle, Number, Number) => Vector3D
  Sig: AngularCurves3D_16:Library.TorusKnot(t: Angle, p: Number, q: Number): Vector3D
  Body: Plato.Compiler.Symbols.BlockStatement
916. GetPoint
  Type: (TorusKnot, Angle) => Vector3D
  Sig: AngularCurves3D_16:Library.GetPoint(curve: TorusKnot, t: Angle): Vector3D
  Body: Multiply(TorusKnot(t, P(curve), Q(curve)), Radius(curve))
917. TrefoilKnot
  Type: (Angle) => Vector3D
  Sig: AngularCurves3D_16:Library.TrefoilKnot(t: Angle): Vector3D
  Body: Tuple3(Add(Sin(t), Multiply(Sin(Multiply(t, 2)), 2)), Add(Cos(t), Multiply(Cos(Multiply(t, 2)), 2)), Negative(Sin(Multiply(t, 3))))
918. GetPoint
  Type: (TrefoilKnot, Angle) => Vector3D
  Sig: AngularCurves3D_16:Library.GetPoint(curve: TrefoilKnot, t: Angle): Vector3D
  Body: TrefoilKnot(t)
919. FigureEightKnot
  Type: (Angle) => Vector3D
  Sig: AngularCurves3D_16:Library.FigureEightKnot(t: Angle): Vector3D
  Body: Tuple3(Multiply(Add(2, Cos(Multiply(t, 2))), Cos(Multiply(t, 3))), Multiply(Add(2, Cos(Multiply(t, 2))), Sin(Multiply(t, 3))), Sin(Multiply(t, 4)))
920. GetPoint
  Type: (FigureEightKnot, Angle) => Vector3D
  Sig: AngularCurves3D_16:Library.GetPoint(curve: FigureEightKnot, t: Angle): Vector3D
  Body: FigureEightKnot(t)
921. Helix
  Type: (Angle, Number) => Vector3D
  Sig: AngularCurves3D_16:Library.Helix(t: Angle, revs: Number): Vector3D
  Body: Tuple3(Sin(Multiply(t, revs)), Cos(Multiply(t, revs)), Turns(t))
922. GetPoint
  Type: (Helix, Angle) => Vector3D
  Sig: AngularCurves3D_16:Library.GetPoint(curve: Helix, t: Angle): Vector3D
  Body: Multiply(Helix(t, NumTurns(curve)), Tuple3(Radius(curve), Radius(curve), Height(curve)))
923. Length
  Type: (Line2D) => Number
  Sig: IGeometry_18:Library.Length(x: Line2D): Number
  Body: Length(Subtract(B(x), A(x)))
924. Direction
  Type: (Line2D) => Vector2D
  Sig: IGeometry_18:Library.Direction(x: Line2D): Vector2D
  Body: Subtract(B(x), A(x))
925. Ray2D
  Type: (Line2D) => Ray2D
  Sig: IGeometry_18:Library.Ray2D(x: Line2D): Ray2D
  Body: Tuple2(A(x), Direction(x))
926. Reverse
  Type: (Line2D) => Line2D
  Sig: IGeometry_18:Library.Reverse(x: Line2D): Line2D
  Body: Tuple2(B(x), A(x))
927. Start
  Type: (Line2D) => Vector2D
  Sig: IGeometry_18:Library.Start(x: Line2D): Vector2D
  Body: A(x)
928. End
  Type: (Line2D) => Vector2D
  Sig: IGeometry_18:Library.End(x: Line2D): Vector2D
  Body: B(x)
929. Length
  Type: (Line3D) => Number
  Sig: IGeometry_18:Library.Length(x: Line3D): Number
  Body: Length(Subtract(B(x), A(x)))
930. Direction
  Type: (Line3D) => Vector3D
  Sig: IGeometry_18:Library.Direction(x: Line3D): Vector3D
  Body: Subtract(B(x), A(x))
931. Ray3D
  Type: (Line3D) => Ray3D
  Sig: IGeometry_18:Library.Ray3D(x: Line3D): Ray3D
  Body: Tuple2(A(x), Normalize(Direction(x)))
932. Reverse
  Type: (Line3D) => Line3D
  Sig: IGeometry_18:Library.Reverse(x: Line3D): Line3D
  Body: Tuple2(B(x), A(x))
933. Deform
  Type: (Line3D, (Function1, Vector3D, Vector3D)) => Line3D
  Sig: IGeometry_18:Library.Deform(x: Line3D, f: (Function1, Vector3D, Vector3D)): Line3D
  Body: Tuple2(f(A(x)), f(B(x)))
934. Bounds3D
  Type: (Line3D) => Bounds3D
  Sig: IGeometry_18:Library.Bounds3D(x: Line3D): Bounds3D
  Body: Tuple2(Min(A(x), B(x)), Max(A(x), B(x)))
935. Start
  Type: (Line3D) => Vector3D
  Sig: IGeometry_18:Library.Start(x: Line3D): Vector3D
  Body: A(x)
936. End
  Type: (Line3D) => Vector3D
  Sig: IGeometry_18:Library.End(x: Line3D): Vector3D
  Body: B(x)
937. Angle
  Type: (Ray3D, Ray3D) => Angle
  Sig: IGeometry_18:Library.Angle(a: Ray3D, b: Ray3D): Angle
  Body: Angle(Direction(a), Direction(b))
938. Deform
  Type: (Ray3D, (Function1, Vector3D, Vector3D)) => Ray3D
  Sig: IGeometry_18:Library.Deform(x: Ray3D, f: (Function1, Vector3D, Vector3D)): Ray3D
  Body: Tuple2(f(Origin(x)), Normalize(f(Add(Origin(x), Direction(x)))))
939. Line3D
  Type: (Ray3D) => Line3D
  Sig: IGeometry_18:Library.Line3D(r: Ray3D): Line3D
  Body: Tuple2(Origin(r), Add(Origin(r), Direction(r)))
940. Reverse
  Type: (Ray3D) => Ray3D
  Sig: IGeometry_18:Library.Reverse(r: Ray3D): Ray3D
  Body: Tuple2(Origin(r), Negative(Direction(r)))
941. Area
  Type: (Triangle2D) => Number
  Sig: IGeometry_18:Library.Area(t: Triangle2D): Number
  Body: Half(Add(Multiply(X(A(t)), Subtract(Y(C(t)), Y(B(t)))), Add(Multiply(X(B(t)), Subtract(Y(A(t)), Y(C(t)))), Multiply(X(C(t)), Subtract(Y(B(t)), Y(A(t)))))))
942. Flip
  Type: (Triangle2D) => Triangle2D
  Sig: IGeometry_18:Library.Flip(t: Triangle2D): Triangle2D
  Body: Tuple3(C(t), B(t), A(t))
943. Center
  Type: (Triangle2D) => Vector2D
  Sig: IGeometry_18:Library.Center(t: Triangle2D): Vector2D
  Body: Divide(Add(A(t), Add(B(t), C(t))), 3)
944. Barycentric
  Type: (Triangle2D, Vector2D) => Vector2D
  Sig: IGeometry_18:Library.Barycentric(t: Triangle2D, uv: Vector2D): Vector2D
  Body: Barycentric(A(t), B(t), C(t), uv)
945. Flip
  Type: (Triangle3D) => Triangle3D
  Sig: IGeometry_18:Library.Flip(t: Triangle3D): Triangle3D
  Body: Tuple3(C(t), B(t), A(t))
946. Normal
  Type: (Triangle3D) => Vector3D
  Sig: IGeometry_18:Library.Normal(t: Triangle3D): Vector3D
  Body: Normalize(Cross(Subtract(B(t), A(t)), Subtract(C(t), A(t))))
947. Center
  Type: (Triangle3D) => Vector3D
  Sig: IGeometry_18:Library.Center(t: Triangle3D): Vector3D
  Body: Divide(Add(A(t), Add(B(t), C(t))), 3)
948. Plane
  Type: (Triangle3D) => Plane
  Sig: IGeometry_18:Library.Plane(t: Triangle3D): Plane
  Body: Tuple2(Normal(t), Dot(Normal(t), A(t)))
949. Barycentric
  Type: (Triangle3D, Vector2D) => Vector3D
  Sig: IGeometry_18:Library.Barycentric(t: Triangle3D, uv: Vector2D): Vector3D
  Body: Barycentric(A(t), B(t), C(t), uv)
950. LineA
  Type: (Triangle3D) => Line3D
  Sig: IGeometry_18:Library.LineA(t: Triangle3D): Line3D
  Body: Tuple2(A(t), B(t))
951. LineB
  Type: (Triangle3D) => Line3D
  Sig: IGeometry_18:Library.LineB(t: Triangle3D): Line3D
  Body: Tuple2(B(t), C(t))
952. LineC
  Type: (Triangle3D) => Line3D
  Sig: IGeometry_18:Library.LineC(t: Triangle3D): Line3D
  Body: Tuple2(C(t), A(t))
953. Deform
  Type: (Triangle3D, (Function1, Vector3D, Vector3D)) => Triangle3D
  Sig: IGeometry_18:Library.Deform(t: Triangle3D, f: (Function1, Vector3D, Vector3D)): Triangle3D
  Body: Tuple3(f(A(t)), f(B(t)), f(C(t)))
954. Barycentric
  Type: (Triangle3D, Vector2D) => Vector3D
  Sig: IGeometry_18:Library.Barycentric(t: Triangle3D, uv: Vector2D): Vector3D
  Body: Barycentric(A(t), B(t), C(t), uv)
955. Width
  Type: (Rect2D) => Number
  Sig: IGeometry_18:Library.Width(x: Rect2D): Number
  Body: X(Size(x))
956. Height
  Type: (Rect2D) => Number
  Sig: IGeometry_18:Library.Height(x: Rect2D): Number
  Body: Y(Size(x))
957. Left
  Type: (Rect2D) => Number
  Sig: IGeometry_18:Library.Left(x: Rect2D): Number
  Body: Subtract(X(Center(x)), Half(Width(x)))
958. Right
  Type: (Rect2D) => Number
  Sig: IGeometry_18:Library.Right(x: Rect2D): Number
  Body: Add(Left(x), Width(x))
959. Bottom
  Type: (Rect2D) => Number
  Sig: IGeometry_18:Library.Bottom(x: Rect2D): Number
  Body: Subtract(Y(Center(x)), Half(Height(x)))
960. Top
  Type: (Rect2D) => Number
  Sig: IGeometry_18:Library.Top(x: Rect2D): Number
  Body: Add(Bottom(x), Height(x))
961. BottomLeft
  Type: (Rect2D) => Vector2D
  Sig: IGeometry_18:Library.BottomLeft(x: Rect2D): Vector2D
  Body: Tuple2(Left(x), Bottom(x))
962. BottomRight
  Type: (Rect2D) => Vector2D
  Sig: IGeometry_18:Library.BottomRight(x: Rect2D): Vector2D
  Body: Tuple2(Right(x), Bottom(x))
963. TopRight
  Type: (Rect2D) => Vector2D
  Sig: IGeometry_18:Library.TopRight(x: Rect2D): Vector2D
  Body: Tuple2(Right(x), Top(x))
964. TopLeft
  Type: (Rect2D) => Vector2D
  Sig: IGeometry_18:Library.TopLeft(x: Rect2D): Vector2D
  Body: Tuple2(Left(x), Top(x))
965. Quad2D
  Type: (Rect2D) => Quad2D
  Sig: IGeometry_18:Library.Quad2D(x: Rect2D): Quad2D
  Body: Tuple4(BottomLeft(x), BottomRight(x), TopRight(x), TopLeft(x))
966. Points
  Type: (Rect2D) => $844:constraint=(IArray, Vector2D)
  Sig: IGeometry_18:Library.Points(x: Rect2D): $844:constraint=(IArray, Vector2D)
  Body: Quad2D(x)
967. Flip
  Type: (Quad2D) => Quad2D
  Sig: IGeometry_18:Library.Flip(q: Quad2D): Quad2D
  Body: Tuple4(D(q), C(q), B(q), A(q))
968. Center
  Type: (Quad2D) => Vector2D
  Sig: IGeometry_18:Library.Center(q: Quad2D): Vector2D
  Body: Divide(Add(A(q), Add(B(q), Add(C(q), D(q)))), 4)
969. LineA
  Type: (Quad2D) => Line2D
  Sig: IGeometry_18:Library.LineA(q: Quad2D): Line2D
  Body: Tuple2(A(q), B(q))
970. LineB
  Type: (Quad2D) => Line2D
  Sig: IGeometry_18:Library.LineB(q: Quad2D): Line2D
  Body: Tuple2(B(q), C(q))
971. LineC
  Type: (Quad2D) => Line2D
  Sig: IGeometry_18:Library.LineC(q: Quad2D): Line2D
  Body: Tuple2(C(q), D(q))
972. LineD
  Type: (Quad2D) => Line2D
  Sig: IGeometry_18:Library.LineD(q: Quad2D): Line2D
  Body: Tuple2(D(q), A(q))
973. TriangleA
  Type: (Quad2D) => Triangle2D
  Sig: IGeometry_18:Library.TriangleA(q: Quad2D): Triangle2D
  Body: Tuple3(A(q), B(q), C(q))
974. TriangleB
  Type: (Quad2D) => Triangle2D
  Sig: IGeometry_18:Library.TriangleB(q: Quad2D): Triangle2D
  Body: Tuple3(C(q), D(q), A(q))
975. Flip
  Type: (Quad3D) => Quad3D
  Sig: IGeometry_18:Library.Flip(q: Quad3D): Quad3D
  Body: Tuple4(D(q), C(q), B(q), A(q))
976. Center
  Type: (Quad3D) => Vector3D
  Sig: IGeometry_18:Library.Center(q: Quad3D): Vector3D
  Body: Divide(Add(A(q), Add(B(q), Add(C(q), D(q)))), 4)
977. LineA
  Type: (Quad3D) => Line3D
  Sig: IGeometry_18:Library.LineA(q: Quad3D): Line3D
  Body: Tuple2(A(q), B(q))
978. LineB
  Type: (Quad3D) => Line3D
  Sig: IGeometry_18:Library.LineB(q: Quad3D): Line3D
  Body: Tuple2(B(q), C(q))
979. LineC
  Type: (Quad3D) => Line3D
  Sig: IGeometry_18:Library.LineC(q: Quad3D): Line3D
  Body: Tuple2(C(q), D(q))
980. LineD
  Type: (Quad3D) => Line3D
  Sig: IGeometry_18:Library.LineD(q: Quad3D): Line3D
  Body: Tuple2(D(q), A(q))
981. TriangleA
  Type: (Quad3D) => Triangle3D
  Sig: IGeometry_18:Library.TriangleA(q: Quad3D): Triangle3D
  Body: Tuple3(A(q), B(q), C(q))
982. TriangleB
  Type: (Quad3D) => Triangle3D
  Sig: IGeometry_18:Library.TriangleB(q: Quad3D): Triangle3D
  Body: Tuple3(C(q), D(q), A(q))
983. Deform
  Type: (Quad3D, (Function1, Vector3D, Vector3D)) => Quad3D
  Sig: IGeometry_18:Library.Deform(q: Quad3D, f: (Function1, Vector3D, Vector3D)): Quad3D
  Body: Tuple4(f(A(q)), f(B(q)), f(C(q)), f(D(q)))
984. Vector3D
  Type: (Vector2D) => Vector3D
  Sig: IGeometry_18:Library.Vector3D(v: Vector2D): Vector3D
  Body: Tuple3(X(v), Y(v), 0)
985. MidPoint
  Type: (Vector2D, Vector2D) => Vector2D
  Sig: IGeometry_18:Library.MidPoint(a: Vector2D, b: Vector2D): Vector2D
  Body: Divide(Add(a, b), 2)
986. Line
  Type: (Vector2D, Vector2D) => Line2D
  Sig: IGeometry_18:Library.Line(a: Vector2D, b: Vector2D): Line2D
  Body: Tuple2(a, b)
987. Ray
  Type: (Vector2D, Vector2D) => Ray2D
  Sig: IGeometry_18:Library.Ray(a: Vector2D, b: Vector2D): Ray2D
  Body: Tuple2(a, b)
988. RayTo
  Type: (Vector2D, Vector2D) => Ray2D
  Sig: IGeometry_18:Library.RayTo(a: Vector2D, b: Vector2D): Ray2D
  Body: Tuple2(a, Subtract(b, a))
989. Cross
  Type: (Vector2D, Vector2D) => Number
  Sig: IGeometry_18:Library.Cross(a: Vector2D, b: Vector2D): Number
  Body: Subtract(Multiply(X(a), Y(b)), Multiply(Y(a), X(b)))
990. Vector4D
  Type: (Vector3D) => Vector4D
  Sig: IGeometry_18:Library.Vector4D(v: Vector3D): Vector4D
  Body: ToVector4D(v, 0)
991. ToVector4D
  Type: (Vector3D, Number) => Vector4D
  Sig: IGeometry_18:Library.ToVector4D(v: Vector3D, w: Number): Vector4D
  Body: Tuple4(X(v), Y(v), Z(v), w)
992. XZY
  Type: (Vector3D) => Vector3D
  Sig: IGeometry_18:Library.XZY(v: Vector3D): Vector3D
  Body: Tuple3(X(v), Z(v), Y(v))
993. YXZ
  Type: (Vector3D) => Vector3D
  Sig: IGeometry_18:Library.YXZ(v: Vector3D): Vector3D
  Body: Tuple3(Y(v), X(v), Z(v))
994. YZX
  Type: (Vector3D) => Vector3D
  Sig: IGeometry_18:Library.YZX(v: Vector3D): Vector3D
  Body: Tuple3(Y(v), Z(v), X(v))
995. ZXY
  Type: (Vector3D) => Vector3D
  Sig: IGeometry_18:Library.ZXY(v: Vector3D): Vector3D
  Body: Tuple3(Z(v), X(v), Y(v))
996. ZYX
  Type: (Vector3D) => Vector3D
  Sig: IGeometry_18:Library.ZYX(v: Vector3D): Vector3D
  Body: Tuple3(Z(v), Y(v), X(v))
997. XY
  Type: (Vector3D) => Vector2D
  Sig: IGeometry_18:Library.XY(v: Vector3D): Vector2D
  Body: Tuple2(X(v), Y(v))
998. YX
  Type: (Vector3D) => Vector2D
  Sig: IGeometry_18:Library.YX(v: Vector3D): Vector2D
  Body: Tuple2(Y(v), X(v))
999. XZ
  Type: (Vector3D) => Vector2D
  Sig: IGeometry_18:Library.XZ(v: Vector3D): Vector2D
  Body: Tuple2(X(v), Z(v))
1000. ZX
  Type: (Vector3D) => Vector2D
  Sig: IGeometry_18:Library.ZX(v: Vector3D): Vector2D
  Body: Tuple2(Z(v), X(v))
1001. YZ
  Type: (Vector3D) => Vector2D
  Sig: IGeometry_18:Library.YZ(v: Vector3D): Vector2D
  Body: Tuple2(Y(v), Z(v))
1002. ZY
  Type: (Vector3D) => Vector2D
  Sig: IGeometry_18:Library.ZY(v: Vector3D): Vector2D
  Body: Tuple2(Z(v), Y(v))
1003. MidPoint
  Type: (Vector3D, Vector3D) => Vector3D
  Sig: IGeometry_18:Library.MidPoint(a: Vector3D, b: Vector3D): Vector3D
  Body: Divide(Add(a, b), 2)
1004. Line
  Type: (Vector3D, Vector3D) => Line3D
  Sig: IGeometry_18:Library.Line(a: Vector3D, b: Vector3D): Line3D
  Body: Tuple2(a, b)
1005. Ray
  Type: (Vector3D, Vector3D) => Ray3D
  Sig: IGeometry_18:Library.Ray(a: Vector3D, b: Vector3D): Ray3D
  Body: Tuple2(a, b)
1006. RayTo
  Type: (Vector3D, Vector3D) => Ray3D
  Sig: IGeometry_18:Library.RayTo(a: Vector3D, b: Vector3D): Ray3D
  Body: Tuple2(a, Subtract(b, a))
1007. Project
  Type: (Vector3D, Plane) => Vector3D
  Sig: IGeometry_18:Library.Project(v: Vector3D, p: Plane): Vector3D
  Body: Subtract(v, Multiply(Normal(p), Dot(Normal(p), v)))
1008. Deform
  Type: (Vector3D, (Function1, Vector3D, Vector3D)) => Vector3D
  Sig: IGeometry_18:Library.Deform(v: Vector3D, f: (Function1, Vector3D, Vector3D)): Vector3D
  Body: f(v)
1009. To2D
  Type: (Vector3D) => Vector2D
  Sig: IGeometry_18:Library.To2D(v: Vector3D): Vector2D
  Body: Tuple2(X(v), Y(v))
1010. Cross
  Type: (Vector3D, Vector3D) => Vector3D
  Sig: IGeometry_18:Library.Cross(a: Vector3D, b: Vector3D): Vector3D
  Body: Tuple3(Subtract(Multiply(Y(a), Z(b)), Multiply(Z(a), Y(b))), Subtract(Multiply(Z(a), X(b)), Multiply(X(a), Z(b))), Subtract(Multiply(X(a), Y(b)), Multiply(Y(a), X(b))))
1011. MixedProduct
  Type: (Vector3D, Vector3D, Vector3D) => Number
  Sig: IGeometry_18:Library.MixedProduct(a: Vector3D, b: Vector3D, c: Vector3D): Number
  Body: Dot(Cross(a, b), c)
1012. Count
  Type: (Complex) => Integer
  Sig: IGeometry_18:Library.Count(c: Complex): Integer
  Body: 2
1013. Count
  Type: (Vector2D) => Integer
  Sig: IGeometry_18:Library.Count(v: Vector2D): Integer
  Body: 2
1014. Count
  Type: (Vector3D) => Integer
  Sig: IGeometry_18:Library.Count(v: Vector3D): Integer
  Body: 3
1015. Count
  Type: (Vector4D) => Integer
  Sig: IGeometry_18:Library.Count(v: Vector4D): Integer
  Body: 4
1016. At
  Type: (Complex, Integer) => Number
  Sig: IGeometry_18:Library.At(c: Complex, n: Integer): Number
  Body: (Equals(n, 0)?IReal(c):Imaginary(c))
1017. At
  Type: (Vector2D, Integer) => Number
  Sig: IGeometry_18:Library.At(v: Vector2D, n: Integer): Number
  Body: (Equals(n, 0)?X(v):Y(v))
1018. At
  Type: (Vector3D, Integer) => Number
  Sig: IGeometry_18:Library.At(v: Vector3D, n: Integer): Number
  Body: (Equals(n, 0)?X(v):(Equals(n, 1)?Y(v):Z(v)))
1019. At
  Type: (Vector4D, Integer) => Number
  Sig: IGeometry_18:Library.At(v: Vector4D, n: Integer): Number
  Body: (Equals(n, 0)?X(v):(Equals(n, 1)?Y(v):(Equals(n, 2)?Z(v):W(v))))
1020. ToVector3D
  Type: (Vector4D) => Vector3D
  Sig: IGeometry_18:Library.ToVector3D(v: Vector4D): Vector3D
  Body: Tuple3(X(v), Y(v), Z(v))
1021. Length
  Type: (IVector) => Number
  Sig: IGeometry_18:Library.Length(a: IVector): Number
  Body: Magnitude(a)
1022. LengthSquared
  Type: (IVector) => Number
  Sig: IGeometry_18:Library.LengthSquared(a: IVector): Number
  Body: MagnitudeSquared(a)
1023. Sum
  Type: (IVector) => Number
  Sig: IGeometry_18:Library.Sum(v: IVector): Number
  Body: Reduce(v, 0, (\(ParameterDef=a$13903:Concept:IAny, ParameterDef=b$13905:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
1024. SumSquares
  Type: (IVector) => Number
  Sig: IGeometry_18:Library.SumSquares(v: IVector): Number
  Body: Sum(Square(v))
1025. MagnitudeSquared
  Type: (IVector) => Number
  Sig: IGeometry_18:Library.MagnitudeSquared(v: IVector): Number
  Body: SumSquares(v)
1026. Magnitude
  Type: (IVector) => Number
  Sig: IGeometry_18:Library.Magnitude(v: IVector): Number
  Body: SquareRoot(MagnitudeSquared(v))
1027. Dot
  Type: (IVector, IVector) => Number
  Sig: IGeometry_18:Library.Dot(v1: IVector, v2: IVector): Number
  Body: Sum(Multiply(v1, v2))
1028. Average
  Type: (IVector) => Number
  Sig: IGeometry_18:Library.Average(v: IVector): Number
  Body: Divide(Sum(v), Count(v))
1029. Normalize
  Type: (IVector) => $845:constraint=IVector
  Sig: IGeometry_18:Library.Normalize(x: IVector): $845:constraint=IVector
  Body: (GreaterThan(MagnitudeSquared(x), 0)?Divide(x, Magnitude(x)):Zero(x))
1030. Reflect
  Type: (IVector, IVector) => $846:constraint=IVector
  Sig: IGeometry_18:Library.Reflect(v: IVector, normal: IVector): $846:constraint=IVector
  Body: Subtract(v, Multiply(normal, Multiply(Dot(v, normal), 2)))
1031. Project
  Type: (IVector, IVector) => $847:constraint=IVector
  Sig: IGeometry_18:Library.Project(v: IVector, other: IVector): $847:constraint=IVector
  Body: Multiply(other, Dot(v, other))
1032. Distance
  Type: (IVector, IVector) => Number
  Sig: IGeometry_18:Library.Distance(a: IVector, b: IVector): Number
  Body: Magnitude(Subtract(b, a))
1033. DistanceSquared
  Type: (IVector, IVector) => Number
  Sig: IGeometry_18:Library.DistanceSquared(a: IVector, b: IVector): Number
  Body: Magnitude(Subtract(b, a))
1034. Angle
  Type: (IVector, IVector) => Angle
  Sig: IGeometry_18:Library.Angle(a: IVector, b: IVector): Angle
  Body: Acos(Divide(Dot(a, b), Multiply(Magnitude(a), Magnitude(b))))
1035. IsParallel
  Type: (Vector3D, Vector3D) => Boolean
  Sig: IGeometry_18:Library.IsParallel(a: Vector3D, b: Vector3D): Boolean
  Body: GreaterThan(Abs(Dot(a, b)), Subtract(1, 1E-06))
1036. Center
  Type: (Bounds3D) => Vector3D
  Sig: IGeometry_18:Library.Center(x: Bounds3D): Vector3D
  Body: Half(Add(Min(x), Max(x)))
1037. Corners
  Type: (Bounds3D) => $848:constraint=(IArray, Vector3D)
  Sig: IGeometry_18:Library.Corners(x: Bounds3D): $848:constraint=(IArray, Vector3D)
  Body: [Tuple3(X(Min(x)), Y(Min(x)), Z(Min(x))), Tuple3(X(Max(x)), Y(Min(x)), Z(Min(x))), Tuple3(X(Min(x)), Y(Max(x)), Z(Min(x))), Tuple3(X(Max(x)), Y(Max(x)), Z(Min(x))), Tuple3(X(Min(x)), Y(Min(x)), Z(Max(x))), Tuple3(X(Max(x)), Y(Min(x)), Z(Max(x))), Tuple3(X(Min(x)), Y(Max(x)), Z(Max(x))), Tuple3(X(Max(x)), Y(Max(x)), Z(Max(x)))]
1038. Empty
  Type: (Bounds3D) => Bounds3D
  Sig: IGeometry_18:Library.Empty(_: Bounds3D): Bounds3D
  Body: Tuple2(MaxValue(Vector3D), MinValue(Vector3D))
1039. Bounds
  Type: ((IArray, Vector3D)) => Bounds3D
  Sig: IGeometry_18:Library.Bounds(xs: (IArray, Vector3D)): Bounds3D
  Body: Reduce(xs, Empty(Bounds3D), (\(ParameterDef=a$14387:Concept:IAny, ParameterDef=b$14389:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
1040. Closed
  Type: (IClosedShape) => Boolean
  Sig: IGeometry_18:Library.Closed(x: IClosedShape): Boolean
  Body: True
1041. Closed
  Type: (IOpenShape) => Boolean
  Sig: IGeometry_18:Library.Closed(x: IOpenShape): Boolean
  Body: False
1042. CirclePoints
  Type: (Integer) => $849:constraint=(IArray, Vector2D)
  Sig: IGeometry_18:Library.CirclePoints(n: Integer): $849:constraint=(IArray, Vector2D)
  Body: Map(Fractions(n), (\(ParameterDef=x$14425:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1043. Points
  Type: (RegularPolygon) => $850:constraint=(IArray, Vector2D)
  Sig: IGeometry_18:Library.Points(x: RegularPolygon): $850:constraint=(IArray, Vector2D)
  Body: CirclePoints(NumPoints(x))
1044. At
  Type: (RegularPolygon, Integer) => Vector2D
  Sig: IGeometry_18:Library.At(x: RegularPolygon, n: Integer): Vector2D
  Body: UnitCircle(Turns(Divide(Number(n), NumPoints(x))))
1045. Count
  Type: (RegularPolygon) => Integer
  Sig: IGeometry_18:Library.Count(x: RegularPolygon): Integer
  Body: NumPoints(x)
1046. Eval
  Type: (Line2D, Number) => Vector2D
  Sig: IGeometry_18:Library.Eval(x: Line2D, t: Number): Vector2D
  Body: Lerp(A(x), B(x), t)
1047. Eval
  Type: (Line3D, Number) => Vector3D
  Sig: IGeometry_18:Library.Eval(x: Line3D, t: Number): Vector3D
  Body: Lerp(A(x), B(x), t)
1048. Faces
  Type: (ITriangleMesh2D) => $851:constraint=(IArray, Triangle2D)
  Sig: IGeometry_18:Library.Faces(g: ITriangleMesh2D): $851:constraint=(IArray, Triangle2D)
  Body: Triangles(g)
1049. Faces
  Type: (ITriangleMesh3D) => $852:constraint=(IArray, Triangle3D)
  Sig: IGeometry_18:Library.Faces(g: ITriangleMesh3D): $852:constraint=(IArray, Triangle3D)
  Body: Triangles(g)
1050. Faces
  Type: (IQuadMesh2D) => $853:constraint=(IArray, Quad2D)
  Sig: IGeometry_18:Library.Faces(g: IQuadMesh2D): $853:constraint=(IArray, Quad2D)
  Body: Quads(g)
1051. Faces
  Type: (IQuadMesh3D) => $854:constraint=(IArray, Quad3D)
  Sig: IGeometry_18:Library.Faces(g: IQuadMesh3D): $854:constraint=(IArray, Quad3D)
  Body: Quads(g)
1052. NumFaces
  Type: (IIndexedGeometry) => Integer
  Sig: IGeometry_18:Library.NumFaces(g: IIndexedGeometry): Integer
  Body: NumPrimitives(g)
1053. FaceIndices
  Type: (IIndexedGeometry, Integer) => $855:constraint=(IArray, Integer)
  Sig: IGeometry_18:Library.FaceIndices(g: IIndexedGeometry, f: Integer): $855:constraint=(IArray, Integer)
  Body: NthSlice(Indices(g), f, PrimitiveSize(g))
1054. FaceVertices
  Type: (IIndexedGeometry2D, Integer) => $856:constraint=(IArray, Vector2D)
  Sig: IGeometry_18:Library.FaceVertices(g: IIndexedGeometry2D, f: Integer): $856:constraint=(IArray, Vector2D)
  Body: Map(FaceIndices(g, f), (\(ParameterDef=i$14588:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1055. FaceVertices
  Type: (IIndexedGeometry3D, Integer) => $857:constraint=(IArray, Vector3D)
  Sig: IGeometry_18:Library.FaceVertices(g: IIndexedGeometry3D, f: Integer): $857:constraint=(IArray, Vector3D)
  Body: Map(FaceIndices(g, f), (\(ParameterDef=i$14618:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1056. AllFaceIndices
  Type: (IIndexedGeometry) => $858:constraint=(IArray, (IArray, Integer))
  Sig: IGeometry_18:Library.AllFaceIndices(g: IIndexedGeometry): $858:constraint=(IArray, (IArray, Integer))
  Body: Slices(Indices(g), PrimitiveSize(g))
1057. Vertex
  Type: (IIndexedGeometry2D, Integer) => Vector2D
  Sig: IGeometry_18:Library.Vertex(g: IIndexedGeometry2D, n: Integer): Vector2D
  Body: At(Points(g), At(Indices(g), n))
1058. Vertex
  Type: (IIndexedGeometry3D, Integer) => Vector3D
  Sig: IGeometry_18:Library.Vertex(g: IIndexedGeometry3D, n: Integer): Vector3D
  Body: At(Points(g), At(Indices(g), n))
1059. Vertices
  Type: (IIndexedGeometry2D, (IArray, Integer)) => $859:constraint=(IArray, Vector2D)
  Sig: IGeometry_18:Library.Vertices(g: IIndexedGeometry2D, xs: (IArray, Integer)): $859:constraint=(IArray, Vector2D)
  Body: Map(xs, (\(ParameterDef=i$14703:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1060. Vertices
  Type: (IIndexedGeometry3D, (IArray, Integer)) => $860:constraint=(IArray, Vector3D)
  Sig: IGeometry_18:Library.Vertices(g: IIndexedGeometry3D, xs: (IArray, Integer)): $860:constraint=(IArray, Vector3D)
  Body: Map(xs, (\(ParameterDef=i$14729:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1061. AllFaceVertices
  Type: (IIndexedGeometry2D) => $861:constraint=(IArray, (IArray, Vector2D))
  Sig: IGeometry_18:Library.AllFaceVertices(g: IIndexedGeometry2D): $861:constraint=(IArray, (IArray, Vector2D))
  Body: Map(Slices(Indices(g), PrimitiveSize(g)), (\(ParameterDef=xs$14763:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1062. AllFaceVertices
  Type: (IIndexedGeometry3D) => $862:constraint=(IArray, (IArray, Vector3D))
  Sig: IGeometry_18:Library.AllFaceVertices(g: IIndexedGeometry3D): $862:constraint=(IArray, (IArray, Vector3D))
  Body: Map(Slices(Indices(g), PrimitiveSize(g)), (\(ParameterDef=xs$14797:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1063. AllVertices
  Type: (IIndexedGeometry2D) => $863:constraint=(IArray, Vector2D)
  Sig: IGeometry_18:Library.AllVertices(g: IIndexedGeometry2D): $863:constraint=(IArray, Vector2D)
  Body: Vertices(g, Indices(g))
1064. AllVertices
  Type: (IIndexedGeometry3D) => $864:constraint=(IArray, Vector3D)
  Sig: IGeometry_18:Library.AllVertices(g: IIndexedGeometry3D): $864:constraint=(IArray, Vector3D)
  Body: Vertices(g, Indices(g))
1065. Lines
  Type: (ILineMesh2D) => $865:constraint=(IArray, Line2D)
  Sig: IGeometry_18:Library.Lines(x: ILineMesh2D): $865:constraint=(IArray, Line2D)
  Body: Map(AllFaceVertices(x), (\(ParameterDef=xs$14847:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1066. Lines
  Type: (ILineMesh3D) => $866:constraint=(IArray, Line3D)
  Sig: IGeometry_18:Library.Lines(x: ILineMesh3D): $866:constraint=(IArray, Line3D)
  Body: Map(AllFaceVertices(x), (\(ParameterDef=xs$14886:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1067. Triangles
  Type: (ITriangleMesh2D) => $867:constraint=(IArray, Triangle2D)
  Sig: IGeometry_18:Library.Triangles(x: ITriangleMesh2D): $867:constraint=(IArray, Triangle2D)
  Body: Map(AllFaceVertices(x), (\(ParameterDef=xs$14925:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1068. Triangles
  Type: (ITriangleMesh3D) => $868:constraint=(IArray, Triangle3D)
  Sig: IGeometry_18:Library.Triangles(x: ITriangleMesh3D): $868:constraint=(IArray, Triangle3D)
  Body: Map(AllFaceVertices(x), (\(ParameterDef=xs$14971:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1069. Quads
  Type: (IQuadMesh2D) => $869:constraint=(IArray, Quad2D)
  Sig: IGeometry_18:Library.Quads(x: IQuadMesh2D): $869:constraint=(IArray, Quad2D)
  Body: Map(AllFaceVertices(x), (\(ParameterDef=xs$15017:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1070. Quads
  Type: (IQuadMesh3D) => $870:constraint=(IArray, Quad3D)
  Sig: IGeometry_18:Library.Quads(x: IQuadMesh3D): $870:constraint=(IArray, Quad3D)
  Body: Map(AllFaceVertices(x), (\(ParameterDef=xs$15070:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1071. NumPrimitives
  Type: (IIndexedGeometry) => Integer
  Sig: IGeometry_18:Library.NumPrimitives(g: IIndexedGeometry): Integer
  Body: Divide(Count(Indices(g)), PrimitiveSize(g))
1072. PrimitiveSize
  Type: (IPointPrimitives) => Integer
  Sig: IGeometry_18:Library.PrimitiveSize(g: IPointPrimitives): Integer
  Body: 1
1073. PrimitiveSize
  Type: (ILinePrimitives) => Integer
  Sig: IGeometry_18:Library.PrimitiveSize(g: ILinePrimitives): Integer
  Body: 2
1074. PrimitiveSize
  Type: (ITrianglePrimitives) => Integer
  Sig: IGeometry_18:Library.PrimitiveSize(g: ITrianglePrimitives): Integer
  Body: 3
1075. PrimitiveSize
  Type: (IQuadPrimitives) => Integer
  Sig: IGeometry_18:Library.PrimitiveSize(g: IQuadPrimitives): Integer
  Body: 4
1076. Indices
  Type: (IPointArray2D) => $871:constraint=(IArray, Integer)
  Sig: IGeometry_18:Library.Indices(x: IPointArray2D): $871:constraint=(IArray, Integer)
  Body: Indices(Points(x))
1077. Indices
  Type: (IPointArray3D) => $872:constraint=(IArray, Integer)
  Sig: IGeometry_18:Library.Indices(x: IPointArray3D): $872:constraint=(IArray, Integer)
  Body: Indices(Points(x))
1078. Indices
  Type: (ILineArray2D) => $873:constraint=(IArray, Integer)
  Sig: IGeometry_18:Library.Indices(x: ILineArray2D): $873:constraint=(IArray, Integer)
  Body: Indices(Points(x))
1079. Indices
  Type: (ILineArray3D) => $874:constraint=(IArray, Integer)
  Sig: IGeometry_18:Library.Indices(x: ILineArray3D): $874:constraint=(IArray, Integer)
  Body: Indices(Points(x))
1080. Indices
  Type: (ITriangleArray2D) => $875:constraint=(IArray, Integer)
  Sig: IGeometry_18:Library.Indices(x: ITriangleArray2D): $875:constraint=(IArray, Integer)
  Body: Indices(Points(x))
1081. Indices
  Type: (ITriangleArray3D) => $876:constraint=(IArray, Integer)
  Sig: IGeometry_18:Library.Indices(x: ITriangleArray3D): $876:constraint=(IArray, Integer)
  Body: Indices(Points(x))
1082. Indices
  Type: (IQuadArray2D) => $877:constraint=(IArray, Integer)
  Sig: IGeometry_18:Library.Indices(x: IQuadArray2D): $877:constraint=(IArray, Integer)
  Body: Indices(Points(x))
1083. Indices
  Type: (IQuadArray3D) => $878:constraint=(IArray, Integer)
  Sig: IGeometry_18:Library.Indices(x: IQuadArray3D): $878:constraint=(IArray, Integer)
  Body: Indices(Points(x))
1084. LineMesh3D
  Type: (ITriangleMesh3D) => LineMesh3D
  Sig: IGeometry_18:Library.LineMesh3D(g: ITriangleMesh3D): LineMesh3D
  Body: Tuple2(Points(g), FlatMap(AllFaceIndices(g), (\(ParameterDef=a$15242:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>))
1085. LineMesh3D
  Type: (IQuadMesh3D) => LineMesh3D
  Sig: IGeometry_18:Library.LineMesh3D(g: IQuadMesh3D): LineMesh3D
  Body: Tuple2(Points(g), FlatMap(AllFaceIndices(g), (\(ParameterDef=a$15295:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>))
1086. LineArray2D
  Type: (Triangle2D) => LineArray2D
  Sig: IGeometry_18:Library.LineArray2D(t: Triangle2D): LineArray2D
  Body: New(LineArray2D, Lines(t))
1087. LineArray2D
  Type: (Quad2D) => LineArray2D
  Sig: IGeometry_18:Library.LineArray2D(q: Quad2D): LineArray2D
  Body: New(LineArray2D, Lines(q))
1088. LineArray3D
  Type: (Triangle3D) => LineArray3D
  Sig: IGeometry_18:Library.LineArray3D(t: Triangle3D): LineArray3D
  Body: New(LineArray3D, Lines(t))
1089. LineArray3D
  Type: (Quad3D) => LineArray3D
  Sig: IGeometry_18:Library.LineArray3D(q: Quad3D): LineArray3D
  Body: New(LineArray3D, Lines(q))
1090. TriangleArray2D
  Type: (Triangle2D) => TriangleArray2D
  Sig: IGeometry_18:Library.TriangleArray2D(t: Triangle2D): TriangleArray2D
  Body: New(TriangleArray2D, [t])
1091. TriangleArray3D
  Type: (Triangle3D) => TriangleArray3D
  Sig: IGeometry_18:Library.TriangleArray3D(t: Triangle3D): TriangleArray3D
  Body: New(TriangleArray3D, [t])
1092. TriangleArray2D
  Type: (Quad2D) => TriangleArray2D
  Sig: IGeometry_18:Library.TriangleArray2D(q: Quad2D): TriangleArray2D
  Body: New(TriangleArray2D, Triangles(q))
1093. TriangleArray3D
  Type: (Quad3D) => TriangleArray3D
  Sig: IGeometry_18:Library.TriangleArray3D(q: Quad3D): TriangleArray3D
  Body: New(TriangleArray3D, Triangles(q))
1094. TriangleArray3D
  Type: (IQuadArray3D) => TriangleArray3D
  Sig: IGeometry_18:Library.TriangleArray3D(q: IQuadArray3D): TriangleArray3D
  Body: New(TriangleArray3D, Triangles(q))
1095. QuadArray3D
  Type: (Quad3D) => QuadArray3D
  Sig: IGeometry_18:Library.QuadArray3D(q: Quad3D): QuadArray3D
  Body: New(QuadArray3D, [q])
1096. QuadMesh3D
  Type: (IQuadArray3D) => QuadMesh3D
  Sig: IGeometry_18:Library.QuadMesh3D(self: IQuadArray3D): QuadMesh3D
  Body: Tuple2(Points(self), Indices(Points(self)))
1097. TriangleMesh3D
  Type: (Triangle3D) => TriangleMesh3D
  Sig: IGeometry_18:Library.TriangleMesh3D(g: Triangle3D): TriangleMesh3D
  Body: TriangleArray3D(g)
1098. TriangleMesh3D
  Type: (Quad3D) => TriangleMesh3D
  Sig: IGeometry_18:Library.TriangleMesh3D(g: Quad3D): TriangleMesh3D
  Body: TriangleArray3D(g)
1099. TriangleMesh3D
  Type: (ITriangleArray3D) => TriangleMesh3D
  Sig: IGeometry_18:Library.TriangleMesh3D(g: ITriangleArray3D): TriangleMesh3D
  Body: Tuple2(Points(g), Indices(Points(g)))
1100. TriangleMesh3D
  Type: (IQuadArray3D) => TriangleMesh3D
  Sig: IGeometry_18:Library.TriangleMesh3D(g: IQuadArray3D): TriangleMesh3D
  Body: TriangleArray3D(g)
1101. TriangleMesh3D
  Type: (IQuadMesh3D) => TriangleMesh3D
  Sig: IGeometry_18:Library.TriangleMesh3D(g: IQuadMesh3D): TriangleMesh3D
  Body: Tuple2(Points(g), FlatMap(AllFaceIndices(g), (\(ParameterDef=a$15535:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>))
1102. To3D
  Type: (Vector2D) => Vector3D
  Sig: IGeometry_18:Library.To3D(x: Vector2D): Vector3D
  Body: x
1103. To3D
  Type: (Line2D) => Line3D
  Sig: IGeometry_18:Library.To3D(x: Line2D): Line3D
  Body: Tuple2(To3D(A(x)), To3D(B(x)))
1104. To3D
  Type: (Triangle2D) => Triangle3D
  Sig: IGeometry_18:Library.To3D(x: Triangle2D): Triangle3D
  Body: Tuple3(To3D(A(x)), To3D(B(x)), To3D(C(x)))
1105. To3D
  Type: (Quad2D) => Quad3D
  Sig: IGeometry_18:Library.To3D(x: Quad2D): Quad3D
  Body: Tuple4(To3D(A(x)), To3D(B(x)), To3D(C(x)), To3D(D(x)))
1106. To3D
  Type: (Bounds2D) => Bounds3D
  Sig: IGeometry_18:Library.To3D(x: Bounds2D): Bounds3D
  Body: Tuple2(To3D(Min(x)), To3D(Max(x)))
1107. To3D
  Type: (Ray2D) => Ray3D
  Sig: IGeometry_18:Library.To3D(x: Ray2D): Ray3D
  Body: Tuple2(To3D(Origin(x)), To3D(Direction(x)))
1108. To3D
  Type: (PolyLine2D) => PolyLine3D
  Sig: IGeometry_18:Library.To3D(x: PolyLine2D): PolyLine3D
  Body: Tuple2(Map(Points(x), (\(ParameterDef=p$15728:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>), Closed(x))
1109. Line3D
  Type: (Line2D) => Line3D
  Sig: IGeometry_18:Library.Line3D(x: Line2D): Line3D
  Body: To3D(x)
1110. Triangle3D
  Type: (Triangle2D) => Triangle3D
  Sig: IGeometry_18:Library.Triangle3D(x: Triangle2D): Triangle3D
  Body: To3D(x)
1111. Quad3D
  Type: (Quad2D) => Quad3D
  Sig: IGeometry_18:Library.Quad3D(x: Quad2D): Quad3D
  Body: To3D(x)
1112. Bounds3D
  Type: (Bounds2D) => Bounds3D
  Sig: IGeometry_18:Library.Bounds3D(x: Bounds2D): Bounds3D
  Body: To3D(x)
1113. Ray3D
  Type: (Ray2D) => Ray3D
  Sig: IGeometry_18:Library.Ray3D(x: Ray2D): Ray3D
  Body: To3D(x)
1114. PolyLine3D
  Type: (PolyLine2D) => PolyLine3D
  Sig: IGeometry_18:Library.PolyLine3D(x: PolyLine2D): PolyLine3D
  Body: To3D(x)
1115. Deform
  Type: (IDeformable3D, ITransform3D) => $879:constraint=IDeformable3D
  Sig: IGeometry_18:Library.Deform(x: IDeformable3D, t: ITransform3D): $879:constraint=IDeformable3D
  Body: Deform(x, (\(ParameterDef=v$15801:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1116. Translate
  Type: (IDeformable3D, Vector3D) => $880:constraint=IDeformable3D
  Sig: IGeometry_18:Library.Translate(x: IDeformable3D, v: Vector3D): $880:constraint=IDeformable3D
  Body: Deform(x, (\(ParameterDef=p$15826:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1117. Rotate
  Type: (IDeformable3D, Quaternion) => $881:constraint=IDeformable3D
  Sig: IGeometry_18:Library.Rotate(x: IDeformable3D, q: Quaternion): $881:constraint=IDeformable3D
  Body: Deform(x, q)
1118. Scale
  Type: (IDeformable3D, Vector3D) => $882:constraint=IDeformable3D
  Sig: IGeometry_18:Library.Scale(x: IDeformable3D, v: Vector3D): $882:constraint=IDeformable3D
  Body: Deform(x, (\(ParameterDef=p$15862:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1119. Scale
  Type: (IDeformable3D, Number) => $883:constraint=IDeformable3D
  Sig: IGeometry_18:Library.Scale(x: IDeformable3D, s: Number): $883:constraint=IDeformable3D
  Body: Deform(x, (\(ParameterDef=p$15887:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1120. RotateX
  Type: (IDeformable3D, Angle) => $884:constraint=IDeformable3D
  Sig: IGeometry_18:Library.RotateX(x: IDeformable3D, a: Angle): $884:constraint=IDeformable3D
  Body: Rotate(x, XRotation(a))
1121. RotateY
  Type: (IDeformable3D, Angle) => $885:constraint=IDeformable3D
  Sig: IGeometry_18:Library.RotateY(x: IDeformable3D, a: Angle): $885:constraint=IDeformable3D
  Body: Rotate(x, YRotation(a))
1122. RotateZ
  Type: (IDeformable3D, Angle) => $886:constraint=IDeformable3D
  Sig: IGeometry_18:Library.RotateZ(x: IDeformable3D, a: Angle): $886:constraint=IDeformable3D
  Body: Rotate(x, ZRotation(a))
1123. TranslateX
  Type: (IDeformable3D, Number) => $887:constraint=IDeformable3D
  Sig: IGeometry_18:Library.TranslateX(x: IDeformable3D, s: Number): $887:constraint=IDeformable3D
  Body: Deform(x, (\(ParameterDef=p$15954:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1124. TranslateY
  Type: (IDeformable3D, Number) => $888:constraint=IDeformable3D
  Sig: IGeometry_18:Library.TranslateY(x: IDeformable3D, s: Number): $888:constraint=IDeformable3D
  Body: Deform(x, (\(ParameterDef=p$15986:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1125. TranslateZ
  Type: (IDeformable3D, Number) => $889:constraint=IDeformable3D
  Sig: IGeometry_18:Library.TranslateZ(x: IDeformable3D, s: Number): $889:constraint=IDeformable3D
  Body: Deform(x, (\(ParameterDef=p$16018:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1126. ScaleX
  Type: (IDeformable3D, Number) => $890:constraint=IDeformable3D
  Sig: IGeometry_18:Library.ScaleX(x: IDeformable3D, s: Number): $890:constraint=IDeformable3D
  Body: Deform(x, (\(ParameterDef=p$16050:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1127. ScaleY
  Type: (IDeformable3D, Number) => $891:constraint=IDeformable3D
  Sig: IGeometry_18:Library.ScaleY(x: IDeformable3D, s: Number): $891:constraint=IDeformable3D
  Body: Deform(x, (\(ParameterDef=p$16082:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1128. ScaleZ
  Type: (IDeformable3D, Number) => $892:constraint=IDeformable3D
  Sig: IGeometry_18:Library.ScaleZ(x: IDeformable3D, s: Number): $892:constraint=IDeformable3D
  Body: Deform(x, (\(ParameterDef=p$16114:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1129. Unit
  Type: (Triangle2D) => Triangle2D
  Sig: IGeometry_18:Library.Unit(_: Triangle2D): Triangle2D
  Body: Tuple3(Tuple2(Negative(0.5), Negative(Half(Sqrt(3)))), Tuple2(Negative(0.5), Half(Sqrt(3))), Tuple2(0, 1))
1130. Unit
  Type: (Quad2D) => Quad2D
  Sig: IGeometry_18:Library.Unit(_: Quad2D): Quad2D
  Body: Tuple4(Tuple2(0, 0), Tuple2(1, 0), Tuple2(1, 1), Tuple2(0, 1))
1131. UnitX
  Type: (Vector2D) => Vector2D
  Sig: IGeometry_18:Library.UnitX(_: Vector2D): Vector2D
  Body: Tuple2(1, 0)
1132. UnitY
  Type: (Vector2D) => Vector2D
  Sig: IGeometry_18:Library.UnitY(_: Vector2D): Vector2D
  Body: Tuple2(0, 1)
1133. UnitX
  Type: (Vector3D) => Vector3D
  Sig: IGeometry_18:Library.UnitX(_: Vector3D): Vector3D
  Body: Tuple3(1, 0, 0)
1134. UnitY
  Type: (Vector3D) => Vector3D
  Sig: IGeometry_18:Library.UnitY(_: Vector3D): Vector3D
  Body: Tuple3(0, 1, 0)
1135. UnitZ
  Type: (Vector3D) => Vector3D
  Sig: IGeometry_18:Library.UnitZ(_: Vector3D): Vector3D
  Body: Tuple3(0, 0, 1)
1136. MinValue
  Type: (Vector3D) => Vector3D
  Sig: IGeometry_18:Library.MinValue(_: Vector3D): Vector3D
  Body: Tuple3(MinNumber, MinNumber, MinNumber)
1137. MaxValue
  Type: (Vector3D) => Vector3D
  Sig: IGeometry_18:Library.MaxValue(_: Vector3D): Vector3D
  Body: Tuple3(MaxNumber, MaxNumber, MaxNumber)
1138. UnitX
  Type: (Vector4D) => Vector4D
  Sig: IGeometry_18:Library.UnitX(_: Vector4D): Vector4D
  Body: Tuple4(1, 0, 0, 0)
1139. UnitY
  Type: (Vector4D) => Vector4D
  Sig: IGeometry_18:Library.UnitY(_: Vector4D): Vector4D
  Body: Tuple4(0, 1, 0, 0)
1140. UnitZ
  Type: (Vector4D) => Vector4D
  Sig: IGeometry_18:Library.UnitZ(_: Vector4D): Vector4D
  Body: Tuple4(0, 0, 1, 0)
1141. UnitW
  Type: (Vector4D) => Vector4D
  Sig: IGeometry_18:Library.UnitW(_: Vector4D): Vector4D
  Body: Tuple4(0, 0, 0, 1)
1142. Identity
  Type: (Matrix3x3) => Matrix3x3
  Sig: IGeometry_18:Library.Identity(_: Matrix3x3): Matrix3x3
  Body: Tuple3(Tuple3(1, 0, 0), Tuple3(0, 1, 0), Tuple3(0, 0, 1))
1143. Identity
  Type: (Matrix4x4) => Matrix4x4
  Sig: IGeometry_18:Library.Identity(_: Matrix4x4): Matrix4x4
  Body: Tuple4(Tuple4(1, 0, 0, 0), Tuple4(0, 1, 0, 0), Tuple4(0, 0, 1, 0), Tuple4(0, 0, 0, 1))
1144. Identity
  Type: (Quaternion) => Quaternion
  Sig: IGeometry_18:Library.Identity(_: Quaternion): Quaternion
  Body: Tuple4(0, 0, 0, 1)
1145. Deform
  Type: (LineMesh3D, (Function1, Vector3D, Vector3D)) => LineMesh3D
  Sig: IGeometry_18:Library.Deform(x: LineMesh3D, f: (Function1, Vector3D, Vector3D)): LineMesh3D
  Body: Tuple2(Map(Points(x), f), Indices(x))
1146. Deform
  Type: (TriangleMesh3D, (Function1, Vector3D, Vector3D)) => TriangleMesh3D
  Sig: IGeometry_18:Library.Deform(x: TriangleMesh3D, f: (Function1, Vector3D, Vector3D)): TriangleMesh3D
  Body: Tuple2(Map(Points(x), f), Indices(x))
1147. Deform
  Type: (QuadMesh3D, (Function1, Vector3D, Vector3D)) => QuadMesh3D
  Sig: IGeometry_18:Library.Deform(x: QuadMesh3D, f: (Function1, Vector3D, Vector3D)): QuadMesh3D
  Body: Tuple2(Map(Points(x), f), Indices(x))
1148. Deform
  Type: (PolyLine3D, (Function1, Vector3D, Vector3D)) => PolyLine3D
  Sig: IGeometry_18:Library.Deform(x: PolyLine3D, f: (Function1, Vector3D, Vector3D)): PolyLine3D
  Body: Tuple2(Map(Points(x), f), Closed(x))
1149. Deform
  Type: (LineArray3D, (Function1, Vector3D, Vector3D)) => LineArray3D
  Sig: IGeometry_18:Library.Deform(x: LineArray3D, f: (Function1, Vector3D, Vector3D)): LineArray3D
  Body: New(LineArray3D, Map(Lines(x), (\(ParameterDef=l$16549:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>))
1150. Deform
  Type: (TriangleArray3D, (Function1, Vector3D, Vector3D)) => TriangleArray3D
  Sig: IGeometry_18:Library.Deform(x: TriangleArray3D, f: (Function1, Vector3D, Vector3D)): TriangleArray3D
  Body: New(TriangleArray3D, Map(Triangles(x), (\(ParameterDef=t$16585:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>))
1151. Deform
  Type: (PointArray3D, (Function1, Vector3D, Vector3D)) => PointArray3D
  Sig: IGeometry_18:Library.Deform(x: PointArray3D, f: (Function1, Vector3D, Vector3D)): PointArray3D
  Body: New(PointArray3D, Map(Points(x), f))
1152. Deform
  Type: (QuadArray3D, (Function1, Vector3D, Vector3D)) => QuadArray3D
  Sig: IGeometry_18:Library.Deform(x: QuadArray3D, f: (Function1, Vector3D, Vector3D)): QuadArray3D
  Body: New(QuadArray3D, Map(Quads(x), (\(ParameterDef=q$16643:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>))
1153. Deform
  Type: (QuadGrid3D, (Function1, Vector3D, Vector3D)) => QuadGrid3D
  Sig: IGeometry_18:Library.Deform(x: QuadGrid3D, f: (Function1, Vector3D, Vector3D)): QuadGrid3D
  Body: New(QuadGrid3D, Map(PointGrid(x), f), ClosedX(x), ClosedY(x))
1154. Deform
  Type: (Bounds3D, (Function1, Vector3D, Vector3D)) => Bounds3D
  Sig: IGeometry_18:Library.Deform(x: Bounds3D, f: (Function1, Vector3D, Vector3D)): Bounds3D
  Body: Bounds(Map(Corners(x), f))
1155. NumColumns
  Type: (QuadGrid3D) => Integer
  Sig: IGeometry_18:Library.NumColumns(x: QuadGrid3D): Integer
  Body: NumColumns(PointGrid(x))
1156. NumRows
  Type: (QuadGrid3D) => Integer
  Sig: IGeometry_18:Library.NumRows(x: QuadGrid3D): Integer
  Body: NumRows(PointGrid(x))
1157. Points
  Type: (QuadGrid3D) => $893:constraint=(IArray, Vector3D)
  Sig: IGeometry_18:Library.Points(x: QuadGrid3D): $893:constraint=(IArray, Vector3D)
  Body: PointGrid(x)
1158. Indices
  Type: (QuadGrid3D) => $894:constraint=(IArray, Integer)
  Sig: IGeometry_18:Library.Indices(x: QuadGrid3D): $894:constraint=(IArray, Integer)
  Body: FlatMap(AllQuadFaceIndices(PointGrid(x), ClosedX(x), ClosedY(x)), (\(ParameterDef=x$16763:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1159. QuadFaceIndices
  Type: (Integer, Integer, Integer, Integer) => Integer4
  Sig: IGeometry_18:Library.QuadFaceIndices(col: Integer, row: Integer, nCols: Integer, nRows: Integer): Integer4
  Body: Plato.Compiler.Symbols.BlockStatement
1160. AllQuadFaceIndices
  Type: ((IArray2D, $895:), Boolean, Boolean) => $896:constraint=(IArray2D, Integer4)
  Sig: IGeometry_18:Library.AllQuadFaceIndices(xs: (IArray2D, $895:), closedX: Boolean, closedY: Boolean): $896:constraint=(IArray2D, Integer4)
  Body: AllQuadFaceIndices(NumColumns(xs), NumRows(xs), closedX, closedY)
1161. AllQuadFaceIndices
  Type: (Integer, Integer, Boolean, Boolean) => $897:constraint=(IArray2D, Integer4)
  Sig: IGeometry_18:Library.AllQuadFaceIndices(nCols: Integer, nRows: Integer, closedX: Boolean, closedY: Boolean): $897:constraint=(IArray2D, Integer4)
  Body: Plato.Compiler.Symbols.BlockStatement
1162. Points
  Type: (Line2D) => $898:constraint=(IArray, Vector2D)
  Sig: IGeometry_18:Library.Points(x: Line2D): $898:constraint=(IArray, Vector2D)
  Body: [A(x), B(x)]
1163. Points
  Type: (Line3D) => $899:constraint=(IArray, Vector3D)
  Sig: IGeometry_18:Library.Points(x: Line3D): $899:constraint=(IArray, Vector3D)
  Body: [A(x), B(x)]
1164. Points
  Type: (Triangle2D) => $900:constraint=(IArray, Vector2D)
  Sig: IGeometry_18:Library.Points(x: Triangle2D): $900:constraint=(IArray, Vector2D)
  Body: [A(x), B(x), C(x)]
1165. Points
  Type: (Triangle3D) => $901:constraint=(IArray, Vector3D)
  Sig: IGeometry_18:Library.Points(x: Triangle3D): $901:constraint=(IArray, Vector3D)
  Body: [A(x), B(x), C(x)]
1166. Points
  Type: (Quad2D) => $902:constraint=(IArray, Vector2D)
  Sig: IGeometry_18:Library.Points(x: Quad2D): $902:constraint=(IArray, Vector2D)
  Body: [A(x), B(x), C(x), D(x)]
1167. Points
  Type: (Quad3D) => $903:constraint=(IArray, Vector3D)
  Sig: IGeometry_18:Library.Points(x: Quad3D): $903:constraint=(IArray, Vector3D)
  Body: [A(x), B(x), C(x), D(x)]
1168. Lines
  Type: (Triangle2D) => $904:constraint=(IArray, Line2D)
  Sig: IGeometry_18:Library.Lines(x: Triangle2D): $904:constraint=(IArray, Line2D)
  Body: [New(Line2D, A(x), B(x)), New(Line2D, B(x), C(x)), New(Line2D, C(x), A(x))]
1169. Lines
  Type: (Triangle3D) => $905:constraint=(IArray, Line3D)
  Sig: IGeometry_18:Library.Lines(x: Triangle3D): $905:constraint=(IArray, Line3D)
  Body: [New(Line3D, A(x), B(x)), New(Line3D, B(x), C(x)), New(Line3D, C(x), A(x))]
1170. Lines
  Type: (Quad2D) => $906:constraint=(IArray, Line2D)
  Sig: IGeometry_18:Library.Lines(x: Quad2D): $906:constraint=(IArray, Line2D)
  Body: [New(Line2D, A(x), B(x)), New(Line2D, B(x), C(x)), New(Line2D, C(x), D(x)), New(Line2D, D(x), A(x))]
1171. Lines
  Type: (Quad3D) => $907:constraint=(IArray, Line3D)
  Sig: IGeometry_18:Library.Lines(x: Quad3D): $907:constraint=(IArray, Line3D)
  Body: [New(Line3D, A(x), B(x)), New(Line3D, B(x), C(x)), New(Line3D, C(x), D(x)), New(Line3D, D(x), A(x))]
1172. Triangles
  Type: (Quad2D) => $908:constraint=(IArray, Triangle2D)
  Sig: IGeometry_18:Library.Triangles(q: Quad2D): $908:constraint=(IArray, Triangle2D)
  Body: [New(Triangle2D, A(q), B(q), C(q)), New(Triangle2D, C(q), D(q), A(q))]
1173. Triangles
  Type: (Quad3D) => $909:constraint=(IArray, Triangle3D)
  Sig: IGeometry_18:Library.Triangles(q: Quad3D): $909:constraint=(IArray, Triangle3D)
  Body: [New(Triangle3D, A(q), B(q), C(q)), New(Triangle3D, C(q), D(q), A(q))]
1174. Points
  Type: ((IArray, Line2D)) => $910:constraint=(IArray, Vector2D)
  Sig: IGeometry_18:Library.Points(xs: (IArray, Line2D)): $910:constraint=(IArray, Vector2D)
  Body: FlatMap(xs, (\(ParameterDef=x$17393:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1175. Points
  Type: ((IArray, Line3D)) => $911:constraint=(IArray, Vector3D)
  Sig: IGeometry_18:Library.Points(xs: (IArray, Line3D)): $911:constraint=(IArray, Vector3D)
  Body: FlatMap(xs, (\(ParameterDef=x$17412:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1176. Points
  Type: ((IArray, Triangle2D)) => $912:constraint=(IArray, Vector2D)
  Sig: IGeometry_18:Library.Points(xs: (IArray, Triangle2D)): $912:constraint=(IArray, Vector2D)
  Body: FlatMap(xs, (\(ParameterDef=x$17431:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1177. Points
  Type: ((IArray, Triangle3D)) => $913:constraint=(IArray, Vector3D)
  Sig: IGeometry_18:Library.Points(xs: (IArray, Triangle3D)): $913:constraint=(IArray, Vector3D)
  Body: FlatMap(xs, (\(ParameterDef=x$17450:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1178. Points
  Type: ((IArray, Quad2D)) => $914:constraint=(IArray, Vector2D)
  Sig: IGeometry_18:Library.Points(xs: (IArray, Quad2D)): $914:constraint=(IArray, Vector2D)
  Body: FlatMap(xs, (\(ParameterDef=x$17469:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1179. Points
  Type: ((IArray, Quad3D)) => $915:constraint=(IArray, Vector3D)
  Sig: IGeometry_18:Library.Points(xs: (IArray, Quad3D)): $915:constraint=(IArray, Vector3D)
  Body: FlatMap(xs, (\(ParameterDef=x$17488:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1180. Lines
  Type: ((IArray, Line2D)) => $916:constraint=(IArray, Line2D)
  Sig: IGeometry_18:Library.Lines(xs: (IArray, Line2D)): $916:constraint=(IArray, Line2D)
  Body: xs
1181. Lines
  Type: ((IArray, Line3D)) => $917:constraint=(IArray, Line3D)
  Sig: IGeometry_18:Library.Lines(xs: (IArray, Line3D)): $917:constraint=(IArray, Line3D)
  Body: xs
1182. Lines
  Type: ((IArray, Triangle2D)) => $918:constraint=(IArray, Line2D)
  Sig: IGeometry_18:Library.Lines(xs: (IArray, Triangle2D)): $918:constraint=(IArray, Line2D)
  Body: FlatMap(xs, (\(ParameterDef=x$17517:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1183. Lines
  Type: ((IArray, Triangle3D)) => $919:constraint=(IArray, Line3D)
  Sig: IGeometry_18:Library.Lines(xs: (IArray, Triangle3D)): $919:constraint=(IArray, Line3D)
  Body: FlatMap(xs, (\(ParameterDef=x$17539:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1184. Lines
  Type: ((IArray, Quad2D)) => $920:constraint=(IArray, Line2D)
  Sig: IGeometry_18:Library.Lines(xs: (IArray, Quad2D)): $920:constraint=(IArray, Line2D)
  Body: FlatMap(xs, (\(ParameterDef=x$17561:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1185. Lines
  Type: ((IArray, Quad3D)) => $921:constraint=(IArray, Line3D)
  Sig: IGeometry_18:Library.Lines(xs: (IArray, Quad3D)): $921:constraint=(IArray, Line3D)
  Body: FlatMap(xs, (\(ParameterDef=x$17583:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1186. Triangles
  Type: ((IArray, Triangle2D)) => $922:constraint=(IArray, Triangle2D)
  Sig: IGeometry_18:Library.Triangles(xs: (IArray, Triangle2D)): $922:constraint=(IArray, Triangle2D)
  Body: xs
1187. Triangles
  Type: ((IArray, Triangle3D)) => $923:constraint=(IArray, Triangle3D)
  Sig: IGeometry_18:Library.Triangles(xs: (IArray, Triangle3D)): $923:constraint=(IArray, Triangle3D)
  Body: xs
1188. Triangles
  Type: ((IArray, Quad2D)) => $924:constraint=(IArray, Triangle2D)
  Sig: IGeometry_18:Library.Triangles(xs: (IArray, Quad2D)): $924:constraint=(IArray, Triangle2D)
  Body: FlatMap(xs, (\(ParameterDef=x$17615:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1189. Triangles
  Type: ((IArray, Quad3D)) => $925:constraint=(IArray, Triangle3D)
  Sig: IGeometry_18:Library.Triangles(xs: (IArray, Quad3D)): $925:constraint=(IArray, Triangle3D)
  Body: FlatMap(xs, (\(ParameterDef=x$17637:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1190. Points
  Type: (ILineArray2D) => $926:constraint=(IArray, Vector2D)
  Sig: IGeometry_18:Library.Points(xs: ILineArray2D): $926:constraint=(IArray, Vector2D)
  Body: FlatMap(Lines(xs), (\(ParameterDef=x$17661:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1191. Points
  Type: (ILineArray3D) => $927:constraint=(IArray, Vector3D)
  Sig: IGeometry_18:Library.Points(xs: ILineArray3D): $927:constraint=(IArray, Vector3D)
  Body: FlatMap(Lines(xs), (\(ParameterDef=x$17685:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1192. Points
  Type: (ITriangleArray2D) => $928:constraint=(IArray, Vector2D)
  Sig: IGeometry_18:Library.Points(xs: ITriangleArray2D): $928:constraint=(IArray, Vector2D)
  Body: FlatMap(Triangles(xs), (\(ParameterDef=x$17709:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1193. Points
  Type: (ITriangleArray3D) => $929:constraint=(IArray, Vector3D)
  Sig: IGeometry_18:Library.Points(xs: ITriangleArray3D): $929:constraint=(IArray, Vector3D)
  Body: FlatMap(Triangles(xs), (\(ParameterDef=x$17733:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1194. Points
  Type: (IQuadArray2D) => $930:constraint=(IArray, Vector2D)
  Sig: IGeometry_18:Library.Points(xs: IQuadArray2D): $930:constraint=(IArray, Vector2D)
  Body: FlatMap(Quads(xs), (\(ParameterDef=x$17757:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1195. Points
  Type: (IQuadArray3D) => $931:constraint=(IArray, Vector3D)
  Sig: IGeometry_18:Library.Points(xs: IQuadArray3D): $931:constraint=(IArray, Vector3D)
  Body: FlatMap(Quads(xs), (\(ParameterDef=x$17781:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1196. Lines
  Type: (ITriangleArray2D) => $932:constraint=(IArray, Line2D)
  Sig: IGeometry_18:Library.Lines(xs: ITriangleArray2D): $932:constraint=(IArray, Line2D)
  Body: FlatMap(Triangles(xs), (\(ParameterDef=x$17805:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1197. Lines
  Type: (ITriangleArray3D) => $933:constraint=(IArray, Line3D)
  Sig: IGeometry_18:Library.Lines(xs: ITriangleArray3D): $933:constraint=(IArray, Line3D)
  Body: FlatMap(Triangles(xs), (\(ParameterDef=x$17829:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1198. Lines
  Type: (IQuadArray2D) => $934:constraint=(IArray, Line2D)
  Sig: IGeometry_18:Library.Lines(xs: IQuadArray2D): $934:constraint=(IArray, Line2D)
  Body: FlatMap(Quads(xs), (\(ParameterDef=x$17853:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1199. Lines
  Type: (IQuadArray3D) => $935:constraint=(IArray, Line3D)
  Sig: IGeometry_18:Library.Lines(xs: IQuadArray3D): $935:constraint=(IArray, Line3D)
  Body: FlatMap(Quads(xs), (\(ParameterDef=x$17877:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1200. Triangles
  Type: (IQuadArray2D) => $936:constraint=(IArray, Triangle2D)
  Sig: IGeometry_18:Library.Triangles(xs: IQuadArray2D): $936:constraint=(IArray, Triangle2D)
  Body: FlatMap(Quads(xs), (\(ParameterDef=x$17901:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1201. Triangles
  Type: (IQuadArray3D) => $937:constraint=(IArray, Triangle3D)
  Sig: IGeometry_18:Library.Triangles(xs: IQuadArray3D): $937:constraint=(IArray, Triangle3D)
  Body: FlatMap(Quads(xs), (\(ParameterDef=x$17925:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1202. Lines
  Type: (IPolyLine2D) => $938:constraint=(IArray, Line2D)
  Sig: IGeometry_18:Library.Lines(xs: IPolyLine2D): $938:constraint=(IArray, Line2D)
  Body: WithNext(Points(xs), (\(ParameterDef=a$17949:Concept:IAny, ParameterDef=b$17951:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>, Closed(xs))
1203. Lines
  Type: (IPolyLine3D) => $939:constraint=(IArray, Line3D)
  Sig: IGeometry_18:Library.Lines(xs: IPolyLine3D): $939:constraint=(IArray, Line3D)
  Body: WithNext(Points(xs), (\(ParameterDef=a$17987:Concept:IAny, ParameterDef=b$17989:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>, Closed(xs))
1204. ToLines
  Type: ((IArray, Vector2D), (IArray, Vector2D)) => $940:constraint=(IArray, Line2D)
  Sig: IGeometry_18:Library.ToLines(xs: (IArray, Vector2D), ys: (IArray, Vector2D)): $940:constraint=(IArray, Line2D)
  Body: Zip(xs, ys, (\(ParameterDef=a$18028:Concept:IAny, ParameterDef=b$18030:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
1205. ToLines
  Type: ((IArray, Vector3D), (IArray, Vector3D)) => $941:constraint=(IArray, Line3D)
  Sig: IGeometry_18:Library.ToLines(xs: (IArray, Vector3D), ys: (IArray, Vector3D)): $941:constraint=(IArray, Line3D)
  Body: Zip(xs, ys, (\(ParameterDef=a$18064:Concept:IAny, ParameterDef=b$18066:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
1206. ClosedX
  Type: (ISolid) => Boolean
  Sig: IGeometry_18:Library.ClosedX(xs: ISolid): Boolean
  Body: True
1207. ClosedY
  Type: (ISolid) => Boolean
  Sig: IGeometry_18:Library.ClosedY(xs: ISolid): Boolean
  Body: True
1208. Size
  Type: ((IInterval, $942:)) => $943:
  Sig: IInterval_20:Library.Size(x: (IInterval, $942:)): $943:
  Body: Subtract(End(x), Start(x))
1209. Lerp
  Type: ((IInterval, $944:), Number) => $945:
  Sig: IInterval_20:Library.Lerp(x: (IInterval, $944:), amount: Number): $945:
  Body: Lerp(Start(x), End(x), amount)
1210. Reverse
  Type: ((IInterval, $946:)) => $948:constraint=(IInterval, $947:)
  Sig: IInterval_20:Library.Reverse(x: (IInterval, $946:)): $948:constraint=(IInterval, $947:)
  Body: Tuple2(End(x), Start(x))
1211. Center
  Type: ((IInterval, $949:)) => $950:
  Sig: IInterval_20:Library.Center(x: (IInterval, $949:)): $950:
  Body: Lerp(x, 0.5)
1212. Contains
  Type: ((IInterval, $951:), $952:) => Boolean
  Sig: IInterval_20:Library.Contains(x: (IInterval, $951:), value: $952:): Boolean
  Body: Between(value, Start(x), End(x))
1213. Contains
  Type: ((IInterval, $953:), (IInterval, $954:)) => Boolean
  Sig: IInterval_20:Library.Contains(x: (IInterval, $953:), y: (IInterval, $954:)): Boolean
  Body: And(Contains(x, Start(y)), Contains(x, End(y)))
1214. Overlaps
  Type: ((IInterval, $955:), (IInterval, $956:)) => Boolean
  Sig: IInterval_20:Library.Overlaps(x: (IInterval, $955:), y: (IInterval, $956:)): Boolean
  Body: Or(Contains(x, Start(y)), Or(Contains(x, End(y)), Or(Contains(y, Start(x)), Contains(y, End(x)))))
1215. SplitAt
  Type: ((IInterval, $957:), Number) => (Tuple2, (IInterval, $958:), (IInterval, $959:))
  Sig: IInterval_20:Library.SplitAt(x: (IInterval, $957:), t: Number): (Tuple2, (IInterval, $958:), (IInterval, $959:))
  Body: Tuple2(Left(x, t), Right(x, t))
1216. Split
  Type: ((IInterval, $960:)) => (Tuple2, (IInterval, $961:), (IInterval, $962:))
  Sig: IInterval_20:Library.Split(x: (IInterval, $960:)): (Tuple2, (IInterval, $961:), (IInterval, $962:))
  Body: SplitAt(x, 0.5)
1217. Left
  Type: ((IInterval, $963:), Number) => $965:constraint=(IInterval, $964:)
  Sig: IInterval_20:Library.Left(x: (IInterval, $963:), t: Number): $965:constraint=(IInterval, $964:)
  Body: Tuple2(Start(x), Lerp(x, t))
1218. Right
  Type: ((IInterval, $966:), Number) => $968:constraint=(IInterval, $967:)
  Sig: IInterval_20:Library.Right(x: (IInterval, $966:), t: Number): $968:constraint=(IInterval, $967:)
  Body: Tuple2(Lerp(x, t), End(x))
1219. MoveTo
  Type: ((IInterval, $969:), $970:) => $972:constraint=(IInterval, $971:)
  Sig: IInterval_20:Library.MoveTo(x: (IInterval, $969:), v: $970:): $972:constraint=(IInterval, $971:)
  Body: Tuple2(v, Add(v, Size(x)))
1220. LeftHalf
  Type: ((IInterval, $973:)) => $975:constraint=(IInterval, $974:)
  Sig: IInterval_20:Library.LeftHalf(x: (IInterval, $973:)): $975:constraint=(IInterval, $974:)
  Body: Left(x, 0.5)
1221. RightHalf
  Type: ((IInterval, $976:)) => $978:constraint=(IInterval, $977:)
  Sig: IInterval_20:Library.RightHalf(x: (IInterval, $976:)): $978:constraint=(IInterval, $977:)
  Body: Right(x, 0.5)
1222. Recenter
  Type: ((IInterval, $979:), $980:) => $982:constraint=(IInterval, $981:)
  Sig: IInterval_20:Library.Recenter(x: (IInterval, $979:), c: $980:): $982:constraint=(IInterval, $981:)
  Body: Tuple2(Subtract(c, Half(Size(x))), Add(c, Half(Size(x))))
1223. Clamp
  Type: ((IInterval, $983:), (IInterval, $984:)) => $986:constraint=(IInterval, $985:)
  Sig: IInterval_20:Library.Clamp(x: (IInterval, $983:), y: (IInterval, $984:)): $986:constraint=(IInterval, $985:)
  Body: Tuple2(Clamp(x, Start(y)), Clamp(x, End(y)))
1224. Clamp
  Type: ((IInterval, $987:), $988:) => $989:
  Sig: IInterval_20:Library.Clamp(x: (IInterval, $987:), value: $988:): $989:
  Body: Clamp(value, Start(x), End(x))
1225. LinearSpace
  Type: (Integer) => $990:constraint=(IArray, Number)
  Sig: IInterval_20:Library.LinearSpace(count: Integer): $990:constraint=(IArray, Number)
  Body: Fractions(count)
1226. LinearSpaceExclusive
  Type: (Integer) => $991:constraint=(IArray, Number)
  Sig: IInterval_20:Library.LinearSpaceExclusive(count: Integer): $991:constraint=(IArray, Number)
  Body: FractionsExclusive(count)
1227. LinearSpace
  Type: ((IInterval, $992:), Integer) => $994:constraint=(IArray, $993:)
  Sig: IInterval_20:Library.LinearSpace(interval: (IInterval, $992:), count: Integer): $994:constraint=(IArray, $993:)
  Body: Map(LinearSpace(count), (\(ParameterDef=x$18508:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1228. LinearSpaceExclusive
  Type: ((IInterval, $995:), Integer) => $997:constraint=(IArray, $996:)
  Sig: IInterval_20:Library.LinearSpaceExclusive(interval: (IInterval, $995:), count: Integer): $997:constraint=(IArray, $996:)
  Body: Map(LinearSpaceExclusive(count), (\(ParameterDef=x$18538:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1229. GeometricSpace
  Type: (Integer) => $998:constraint=(IArray, Number)
  Sig: IInterval_20:Library.GeometricSpace(count: Integer): $998:constraint=(IArray, Number)
  Body: Map(LinearSpace(count), (\(ParameterDef=x$18564:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1230. GeometricSpaceExclusive
  Type: (Integer) => $999:constraint=(IArray, Number)
  Sig: IInterval_20:Library.GeometricSpaceExclusive(count: Integer): $999:constraint=(IArray, Number)
  Body: Map(LinearSpaceExclusive(count), (\(ParameterDef=x$18590:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1231. GeometricSpace
  Type: ((IInterval, $1000:), Integer) => $1002:constraint=(IArray, $1001:)
  Sig: IInterval_20:Library.GeometricSpace(interval: (IInterval, $1000:), count: Integer): $1002:constraint=(IArray, $1001:)
  Body: Map(GeometricSpace(count), (\(ParameterDef=x$18620:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1232. GeometricSpaceExclusive
  Type: ((IInterval, $1003:), Integer) => $1005:constraint=(IArray, $1004:)
  Sig: IInterval_20:Library.GeometricSpaceExclusive(interval: (IInterval, $1003:), count: Integer): $1005:constraint=(IArray, $1004:)
  Body: Map(GeometricSpaceExclusive(count), (\(ParameterDef=x$18650:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1233. Intervals
  Type: (Integer) => $1006:constraint=(IArray, NumberInterval)
  Sig: IInterval_20:Library.Intervals(count: Integer): $1006:constraint=(IArray, NumberInterval)
  Body: WithNext(LinearSpace(Add(count, 1)), (\(ParameterDef=a$18681:Concept:IAny, ParameterDef=b$18683:Concept:IAny) -> ConcreteType:Function2<TypeVariable:$T0,TypeVariable:$T1,TypeVariable:$T2>)
1234. Subdivide
  Type: ((IInterval, $1007:), Number, Number) => $1009:constraint=(IInterval, $1008:)
  Sig: IInterval_20:Library.Subdivide(interval: (IInterval, $1007:), start: Number, end: Number): $1009:constraint=(IInterval, $1008:)
  Body: Tuple2(Lerp(interval, start), Lerp(interval, end))
1235. Subdivide
  Type: ((IInterval, $1010:), NumberInterval) => $1012:constraint=(IInterval, $1011:)
  Sig: IInterval_20:Library.Subdivide(interval: (IInterval, $1010:), subInterval: NumberInterval): $1012:constraint=(IInterval, $1011:)
  Body: Subdivide(interval, Start(subInterval), End(subInterval))
1236. Subdivide
  Type: ((IInterval, $1013:), Integer) => $1015:constraint=(IArray, (IInterval, $1014:))
  Sig: IInterval_20:Library.Subdivide(interval: (IInterval, $1013:), count: Integer): $1015:constraint=(IArray, (IInterval, $1014:))
  Body: Map(Intervals(count), (\(ParameterDef=i$18764:Concept:IAny) -> ConcreteType:Function1<TypeVariable:$T0,TypeVariable:$T1>)
1237. MinNumber
  Type: () => Number
  Sig: Intrinsics_22:Library.MinNumber(): Number
  Body: 
1238. MaxNumber
  Type: () => Number
  Sig: Intrinsics_22:Library.MaxNumber(): Number
  Body: 
1239. Cos
  Type: (Angle) => Number
  Sig: Intrinsics_22:Library.Cos(x: Angle): Number
  Body: 
1240. Sin
  Type: (Angle) => Number
  Sig: Intrinsics_22:Library.Sin(x: Angle): Number
  Body: 
1241. Tan
  Type: (Angle) => Number
  Sig: Intrinsics_22:Library.Tan(x: Angle): Number
  Body: 
1242. Acos
  Type: (Number) => Angle
  Sig: Intrinsics_22:Library.Acos(x: Number): Angle
  Body: 
1243. Asin
  Type: (Number) => Angle
  Sig: Intrinsics_22:Library.Asin(x: Number): Angle
  Body: 
1244. Atan
  Type: (Number) => Angle
  Sig: Intrinsics_22:Library.Atan(x: Number): Angle
  Body: 
1245. Atan2
  Type: (Number, Number) => Angle
  Sig: Intrinsics_22:Library.Atan2(y: Number, x: Number): Angle
  Body: 
1246. Pow
  Type: (Number, Number) => Number
  Sig: Intrinsics_22:Library.Pow(x: Number, y: Number): Number
  Body: 
1247. Log
  Type: (Number, Number) => Number
  Sig: Intrinsics_22:Library.Log(x: Number, y: Number): Number
  Body: 
1248. Ln
  Type: (Number) => Number
  Sig: Intrinsics_22:Library.Ln(x: Number): Number
  Body: 
1249. Exp
  Type: (Number) => Number
  Sig: Intrinsics_22:Library.Exp(x: Number): Number
  Body: 
1250. Floor
  Type: (Number) => Number
  Sig: Intrinsics_22:Library.Floor(x: Number): Number
  Body: 
1251. Ceiling
  Type: (Number) => Number
  Sig: Intrinsics_22:Library.Ceiling(x: Number): Number
  Body: 
1252. Round
  Type: (Number) => Number
  Sig: Intrinsics_22:Library.Round(x: Number): Number
  Body: 
1253. Truncate
  Type: (Number) => Number
  Sig: Intrinsics_22:Library.Truncate(x: Number): Number
  Body: 
1254. Add
  Type: (Number, Number) => Number
  Sig: Intrinsics_22:Library.Add(x: Number, y: Number): Number
  Body: 
1255. Subtract
  Type: (Number, Number) => Number
  Sig: Intrinsics_22:Library.Subtract(x: Number, y: Number): Number
  Body: 
1256. Divide
  Type: (Number, Number) => Number
  Sig: Intrinsics_22:Library.Divide(x: Number, y: Number): Number
  Body: 
1257. Multiply
  Type: (Number, Number) => Number
  Sig: Intrinsics_22:Library.Multiply(x: Number, y: Number): Number
  Body: 
1258. Modulo
  Type: (Number, Number) => Number
  Sig: Intrinsics_22:Library.Modulo(x: Number, y: Number): Number
  Body: 
1259. Negative
  Type: (Number) => Number
  Sig: Intrinsics_22:Library.Negative(x: Number): Number
  Body: 
1260. Add
  Type: (Integer, Integer) => Integer
  Sig: Intrinsics_22:Library.Add(x: Integer, y: Integer): Integer
  Body: 
1261. Subtract
  Type: (Integer, Integer) => Integer
  Sig: Intrinsics_22:Library.Subtract(x: Integer, y: Integer): Integer
  Body: 
1262. Divide
  Type: (Integer, Integer) => Integer
  Sig: Intrinsics_22:Library.Divide(x: Integer, y: Integer): Integer
  Body: 
1263. Multiply
  Type: (Integer, Integer) => Integer
  Sig: Intrinsics_22:Library.Multiply(x: Integer, y: Integer): Integer
  Body: 
1264. Modulo
  Type: (Integer, Integer) => Integer
  Sig: Intrinsics_22:Library.Modulo(x: Integer, y: Integer): Integer
  Body: 
1265. Negative
  Type: (Integer) => Integer
  Sig: Intrinsics_22:Library.Negative(x: Integer): Integer
  Body: 
1266. And
  Type: (Boolean, Boolean) => Boolean
  Sig: Intrinsics_22:Library.And(x: Boolean, y: Boolean): Boolean
  Body: 
1267. Or
  Type: (Boolean, Boolean) => Boolean
  Sig: Intrinsics_22:Library.Or(x: Boolean, y: Boolean): Boolean
  Body: 
1268. Not
  Type: (Boolean) => Boolean
  Sig: Intrinsics_22:Library.Not(x: Boolean): Boolean
  Body: 
1269. Number
  Type: (Integer) => Number
  Sig: Intrinsics_22:Library.Number(x: Integer): Number
  Body: 
1270. Number
  Type: (Character) => Number
  Sig: Intrinsics_22:Library.Number(x: Character): Number
  Body: 
1271. Integer
  Type: (Character) => Integer
  Sig: Intrinsics_22:Library.Integer(x: Character): Integer
  Body: 
1272. Invoke
  Type: ((Function0, $1016:)) => $1017:
  Sig: Intrinsics_22:Library.Invoke(f: (Function0, $1016:)): $1017:
  Body: 
1273. Invoke
  Type: ((Function1, $1018:, $1019:), $1020:) => $1021:
  Sig: Intrinsics_22:Library.Invoke(f: (Function1, $1018:, $1019:), a0: $1020:): $1021:
  Body: 
1274. Invoke
  Type: ((Function2, $1022:, $1023:, $1024:), $1025:, $1026:) => $1027:
  Sig: Intrinsics_22:Library.Invoke(f: (Function2, $1022:, $1023:, $1024:), a0: $1025:, a1: $1026:): $1027:
  Body: 
1275. Invoke
  Type: ((Function3, $1028:, $1029:, $1030:, $1031:), $1032:, $1033:, $1034:) => $1035:
  Sig: Intrinsics_22:Library.Invoke(f: (Function3, $1028:, $1029:, $1030:, $1031:), a0: $1032:, a1: $1033:, a2: $1034:): $1035:
  Body: 
1276. Invoke
  Type: ((Function4, $1036:, $1037:, $1038:, $1039:, $1040:), $1041:, $1042:, $1043:, $1044:) => $1045:
  Sig: Intrinsics_22:Library.Invoke(f: (Function4, $1036:, $1037:, $1038:, $1039:, $1040:), a0: $1041:, a1: $1042:, a2: $1043:, a3: $1044:): $1045:
  Body: 
1277. New
  Type: (Type, (IArray, IAny)) => Dynamic
  Sig: Intrinsics_22:Library.New(t: Type, args: (IArray, IAny)): Dynamic
  Body: 
1278. At
  Type: (String, Integer) => Character
  Sig: Intrinsics_22:Library.At(x: String, y: Integer): Character
  Body: 
1279. Count
  Type: (String) => Integer
  Sig: Intrinsics_22:Library.Count(x: String): Integer
  Body: 
1280. LessThanOrEquals
  Type: (Integer, Integer) => Boolean
  Sig: Intrinsics_22:Library.LessThanOrEquals(x: Integer, y: Integer): Boolean
  Body: 
1281. LessThanOrEquals
  Type: (Number, Number) => Boolean
  Sig: Intrinsics_22:Library.LessThanOrEquals(x: Number, y: Number): Boolean
  Body: 
1282. LessThanOrEquals
  Type: (Character, Character) => Boolean
  Sig: Intrinsics_22:Library.LessThanOrEquals(x: Character, y: Character): Boolean
  Body: 
1283. LessThanOrEquals
  Type: (String, String) => Boolean
  Sig: Intrinsics_22:Library.LessThanOrEquals(x: String, y: String): Boolean
  Body: 
1284. LessThanOrEquals
  Type: (Boolean, Boolean) => Boolean
  Sig: Intrinsics_22:Library.LessThanOrEquals(x: Boolean, y: Boolean): Boolean
  Body: 
1285. Equals
  Type: (Integer, Integer) => Boolean
  Sig: Intrinsics_22:Library.Equals(x: Integer, y: Integer): Boolean
  Body: 
1286. Equals
  Type: (Number, Number) => Boolean
  Sig: Intrinsics_22:Library.Equals(x: Number, y: Number): Boolean
  Body: 
1287. Equals
  Type: (Character, Character) => Boolean
  Sig: Intrinsics_22:Library.Equals(x: Character, y: Character): Boolean
  Body: 
1288. Equals
  Type: (String, String) => Boolean
  Sig: Intrinsics_22:Library.Equals(x: String, y: String): Boolean
  Body: 
1289. Equals
  Type: (Boolean, Boolean) => Boolean
  Sig: Intrinsics_22:Library.Equals(x: Boolean, y: Boolean): Boolean
  Body: 
1290. Count
  Type: ((Array, $1046:)) => Integer
  Sig: Intrinsics_22:Library.Count(xs: (Array, $1046:)): Integer
  Body: 
1291. NumRows
  Type: ((Array2D, $1047:)) => Integer
  Sig: Intrinsics_22:Library.NumRows(xs: (Array2D, $1047:)): Integer
  Body: 
1292. NumColumns
  Type: ((Array2D, $1048:)) => Integer
  Sig: Intrinsics_22:Library.NumColumns(xs: (Array2D, $1048:)): Integer
  Body: 
1293. NumRows
  Type: ((Array3D, $1049:)) => Integer
  Sig: Intrinsics_22:Library.NumRows(xs: (Array3D, $1049:)): Integer
  Body: 
1294. NumColumns
  Type: ((Array3D, $1050:)) => Integer
  Sig: Intrinsics_22:Library.NumColumns(xs: (Array3D, $1050:)): Integer
  Body: 
1295. NumLayers
  Type: ((Array3D, $1051:)) => Integer
  Sig: Intrinsics_22:Library.NumLayers(xs: (Array3D, $1051:)): Integer
  Body: 
1296. At
  Type: ((Array, $1052:), Integer) => $1053:
  Sig: Intrinsics_22:Library.At(xs: (Array, $1052:), n: Integer): $1053:
  Body: 
1297. At
  Type: ((Array2D, $1054:), Integer, Integer) => $1055:
  Sig: Intrinsics_22:Library.At(xs: (Array2D, $1054:), i: Integer, j: Integer): $1055:
  Body: 
1298. At
  Type: ((Array3D, $1056:), Integer, Integer, Integer) => $1057:
  Sig: Intrinsics_22:Library.At(xs: (Array3D, $1056:), i: Integer, j: Integer, k: Integer): $1057:
  Body: 
1299. MapRange
  Type: (Integer, (Function1, Integer, $1058:)) => $1060:constraint=(IArray, $1059:)
  Sig: Intrinsics_22:Library.MapRange(x: Integer, f: (Function1, Integer, $1058:)): $1060:constraint=(IArray, $1059:)
  Body: 
1300. FlatMap
  Type: ((IArray, $1061:), (Function1, $1062:, (IArray, $1063:))) => $1065:constraint=(IArray, $1064:)
  Sig: Intrinsics_22:Library.FlatMap(xs: (IArray, $1061:), f: (Function1, $1062:, (IArray, $1063:))): $1065:constraint=(IArray, $1064:)
  Body: 
1301. MakeArray2D
  Type: (Integer, Integer, (Function2, Integer, Integer, $1066:)) => $1068:constraint=(IArray2D, $1067:)
  Sig: Intrinsics_22:Library.MakeArray2D(columns: Integer, rows: Integer, f: (Function2, Integer, Integer, $1066:)): $1068:constraint=(IArray2D, $1067:)
  Body: 
1302. Matrix
  Type: (Vector3D) => Matrix4x4
  Sig: Transforms_26:Library.Matrix(v: Vector3D): Matrix4x4
  Body: CreateTranslation(Matrix4x4, v)
1303. Matrix
  Type: (Translation3D) => Matrix4x4
  Sig: Transforms_26:Library.Matrix(t: Translation3D): Matrix4x4
  Body: Matrix(Translation(t))
1304. Transform
  Type: (Translation3D, Vector3D) => Vector3D
  Sig: Transforms_26:Library.Transform(t: Translation3D, v: Vector3D): Vector3D
  Body: Add(v, Translation(t))
1305. TransformNormal
  Type: (Translation3D, Vector3D) => Vector3D
  Sig: Transforms_26:Library.TransformNormal(t: Translation3D, v: Vector3D): Vector3D
  Body: v
1306. Matrix4x4
  Type: (ITransform3D) => Matrix4x4
  Sig: Transforms_26:Library.Matrix4x4(t: ITransform3D): Matrix4x4
  Body: Matrix(t)
1307. M11
  Type: (Matrix4x4) => Number
  Sig: Transforms_26:Library.M11(m: Matrix4x4): Number
  Body: X(Column1(m))
1308. M12
  Type: (Matrix4x4) => Number
  Sig: Transforms_26:Library.M12(m: Matrix4x4): Number
  Body: X(Column2(m))
1309. M13
  Type: (Matrix4x4) => Number
  Sig: Transforms_26:Library.M13(m: Matrix4x4): Number
  Body: X(Column3(m))
1310. M14
  Type: (Matrix4x4) => Number
  Sig: Transforms_26:Library.M14(m: Matrix4x4): Number
  Body: X(Column4(m))
1311. M21
  Type: (Matrix4x4) => Number
  Sig: Transforms_26:Library.M21(m: Matrix4x4): Number
  Body: Y(Column1(m))
1312. M22
  Type: (Matrix4x4) => Number
  Sig: Transforms_26:Library.M22(m: Matrix4x4): Number
  Body: Y(Column2(m))
1313. M23
  Type: (Matrix4x4) => Number
  Sig: Transforms_26:Library.M23(m: Matrix4x4): Number
  Body: Y(Column3(m))
1314. M24
  Type: (Matrix4x4) => Number
  Sig: Transforms_26:Library.M24(m: Matrix4x4): Number
  Body: Y(Column4(m))
1315. M31
  Type: (Matrix4x4) => Number
  Sig: Transforms_26:Library.M31(m: Matrix4x4): Number
  Body: Z(Column1(m))
1316. M32
  Type: (Matrix4x4) => Number
  Sig: Transforms_26:Library.M32(m: Matrix4x4): Number
  Body: Z(Column2(m))
1317. M33
  Type: (Matrix4x4) => Number
  Sig: Transforms_26:Library.M33(m: Matrix4x4): Number
  Body: Z(Column3(m))
1318. M34
  Type: (Matrix4x4) => Number
  Sig: Transforms_26:Library.M34(m: Matrix4x4): Number
  Body: Z(Column4(m))
1319. M41
  Type: (Matrix4x4) => Number
  Sig: Transforms_26:Library.M41(m: Matrix4x4): Number
  Body: W(Column1(m))
1320. M42
  Type: (Matrix4x4) => Number
  Sig: Transforms_26:Library.M42(m: Matrix4x4): Number
  Body: W(Column2(m))
1321. M43
  Type: (Matrix4x4) => Number
  Sig: Transforms_26:Library.M43(m: Matrix4x4): Number
  Body: W(Column3(m))
1322. M44
  Type: (Matrix4x4) => Number
  Sig: Transforms_26:Library.M44(m: Matrix4x4): Number
  Body: W(Column4(m))
1323. Row1
  Type: (Matrix4x4) => Vector4D
  Sig: Transforms_26:Library.Row1(m: Matrix4x4): Vector4D
  Body: Tuple4(M11, M12, M13, M14)
1324. Row2
  Type: (Matrix4x4) => Vector4D
  Sig: Transforms_26:Library.Row2(m: Matrix4x4): Vector4D
  Body: Tuple4(M21, M22, M23, M24)
1325. Row3
  Type: (Matrix4x4) => Vector4D
  Sig: Transforms_26:Library.Row3(m: Matrix4x4): Vector4D
  Body: Tuple4(M31, M32, M33, M34)
1326. Row4
  Type: (Matrix4x4) => Vector4D
  Sig: Transforms_26:Library.Row4(m: Matrix4x4): Vector4D
  Body: Tuple4(M41, M42, M43, M44)
1327. GetRow
  Type: (Matrix4x4, Integer) => Vector4D
  Sig: Transforms_26:Library.GetRow(m: Matrix4x4, row: Integer): Vector4D
  Body: (Equals(row, 0)?Row1:(Equals(row, 1)?Row2:(Equals(row, 2)?Row3:Row4)))
1328. Multiply
  Type: (Matrix4x4, Vector3D) => Vector3D
  Sig: Transforms_26:Library.Multiply(m: Matrix4x4, v: Vector3D): Vector3D
  Body: Tuple3(Add(Multiply(X(v), M11(m)), Add(Multiply(Y(v), M21(m)), Add(Multiply(Z(v), M31(m)), M41(m)))), Add(Multiply(X(v), M12(m)), Add(Multiply(Y(v), M22(m)), Add(Multiply(Z(v), M32(m)), M42(m)))), Add(Multiply(X(v), M13(m)), Add(Multiply(Y(v), M23(m)), Add(Multiply(Z(v), M33(m)), M43(m)))))
1329. CreateFromRows
  Type: (Matrix4x4, Vector4D, Vector4D, Vector4D, Vector4D) => Matrix4x4
  Sig: Transforms_26:Library.CreateFromRows(_: Matrix4x4, row1: Vector4D, row2: Vector4D, row3: Vector4D, row4: Vector4D): Matrix4x4
  Body: Tuple4(Tuple4(X(row1), X(row2), X(row3), X(row4)), Tuple4(Y(row1), Y(row2), Y(row3), Y(row4)), Tuple4(Z(row1), Z(row2), Z(row3), Z(row4)), Tuple4(W(row1), W(row2), W(row3), W(row4)))
1330. CreateFromRows
  Type: (Matrix4x4, Vector3D, Vector3D, Vector3D) => Matrix4x4
  Sig: Transforms_26:Library.CreateFromRows(_: Matrix4x4, row1: Vector3D, row2: Vector3D, row3: Vector3D): Matrix4x4
  Body: CreateFromRows(Matrix4x4, row1, row2, row3, Tuple4(0, 0, 0, 1))
1331. WithTranslation
  Type: (Matrix4x4, Vector3D) => Matrix4x4
  Sig: Transforms_26:Library.WithTranslation(m: Matrix4x4, v: Vector3D): Matrix4x4
  Body: CreateFromRows(Matrix4x4, Row1(m), Row2(m), Row3(m), Tuple4(X(v), Y(v), Z(v), 1))
1332. Translation
  Type: (Matrix4x4) => Vector3D
  Sig: Transforms_26:Library.Translation(m: Matrix4x4): Vector3D
  Body: Tuple3(M14(m), M24(m), M34(m))
1333. CreateTranslation
  Type: (Matrix4x4, Vector3D) => Matrix4x4
  Sig: Transforms_26:Library.CreateTranslation(_: Matrix4x4, v: Vector3D): Matrix4x4
  Body: WithTranslation(Identity, v)
1334. CreateScale
  Type: (Matrix4x4, Vector3D) => Matrix4x4
  Sig: Transforms_26:Library.CreateScale(_: Matrix4x4, v: Vector3D): Matrix4x4
  Body: Tuple4(Tuple4(X(v), 0, 0, 0), Tuple4(0, Y(v), 0, 0), Tuple4(0, 0, Z(v), 0), Tuple4(0, 0, 0, 1))
1335. Transform
  Type: (Matrix4x4, Vector3D) => Vector3D
  Sig: Transforms_26:Library.Transform(m: Matrix4x4, v: Vector3D): Vector3D
  Body: Multiply(m, v)
1336. TransformNormal
  Type: (Matrix4x4, Vector3D) => Vector3D
  Sig: Transforms_26:Library.TransformNormal(m: Matrix4x4, v: Vector3D): Vector3D
  Body: Tuple3(Add(Multiply(X(v), M11(m)), Add(Multiply(Y(v), M21(m)), Multiply(Z(v), M31(m)))), Add(Multiply(X(v), M12(m)), Add(Multiply(Y(v), M22(m)), Multiply(Z(v), M32(m)))), Add(Multiply(X(v), M13(m)), Add(Multiply(Y(v), M23(m)), Multiply(Z(v), M33(m)))))
1337. Transpose
  Type: (Matrix4x4) => Matrix4x4
  Sig: Transforms_26:Library.Transpose(m: Matrix4x4): Matrix4x4
  Body: Tuple4(Row1(m), Row2(m), Row3(m), Row4(m))
1338. Multiply
  Type: (Matrix4x4, Number) => Matrix4x4
  Sig: Transforms_26:Library.Multiply(m: Matrix4x4, s: Number): Matrix4x4
  Body: Tuple4(Multiply(Column1(m), s), Multiply(Column2(m), s), Multiply(Column3(m), s), Multiply(Column4(m), s))
1339. Divide
  Type: (Matrix4x4, Number) => Matrix4x4
  Sig: Transforms_26:Library.Divide(m: Matrix4x4, s: Number): Matrix4x4
  Body: Tuple4(Divide(Column1(m), s), Divide(Column2(m), s), Divide(Column3(m), s), Divide(Column4(m), s))
1340. Multiply
  Type: (Matrix4x4, Matrix4x4) => Matrix4x4
  Sig: Transforms_26:Library.Multiply(a: Matrix4x4, b: Matrix4x4): Matrix4x4
  Body: CreateFromRows(Matrix4x4, Tuple4(Add(Multiply(M11(a), M11(b)), Add(Multiply(M12(a), M21(b)), Add(Multiply(M13(a), M31(b)), Multiply(M14(a), M41(b))))), Add(Multiply(M11(a), M12(b)), Add(Multiply(M12(a), M22(b)), Add(Multiply(M13(a), M32(b)), Multiply(M14(a), M42(b))))), Add(Multiply(M11(a), M13(b)), Add(Multiply(M12(a), M23(b)), Add(Multiply(M13(a), M33(b)), Multiply(M14(a), M43(b))))), Add(Multiply(M11(a), M14(b)), Add(Multiply(M12(a), M24(b)), Add(Multiply(M13(a), M34(b)), Multiply(M14(a), M44(b)))))), Tuple4(Add(Multiply(M21(a), M11(b)), Add(Multiply(M22(a), M21(b)), Add(Multiply(M23(a), M31(b)), Multiply(M24(a), M41(b))))), Add(Multiply(M21(a), M12(b)), Add(Multiply(M22(a), M22(b)), Add(Multiply(M23(a), M32(b)), Multiply(M24(a), M42(b))))), Add(Multiply(M21(a), M13(b)), Add(Multiply(M22(a), M23(b)), Add(Multiply(M23(a), M33(b)), Multiply(M24(a), M43(b))))), Add(Multiply(M21(a), M14(b)), Add(Multiply(M22(a), M24(b)), Add(Multiply(M23(a), M34(b)), Multiply(M24(a), M44(b)))))), Tuple4(Add(Multiply(M31(a), M11(b)), Add(Multiply(M32(a), M21(b)), Add(Multiply(M33(a), M31(b)), Multiply(M34(a), M41(b))))), Add(Multiply(M31(a), M12(b)), Add(Multiply(M32(a), M22(b)), Add(Multiply(M33(a), M32(b)), Multiply(M34(a), M42(b))))), Add(Multiply(M31(a), M13(b)), Add(Multiply(M32(a), M23(b)), Add(Multiply(M33(a), M33(b)), Multiply(M34(a), M43(b))))), Add(Multiply(M31(a), M14(b)), Add(Multiply(M32(a), M24(b)), Add(Multiply(M33(a), M34(b)), Multiply(M34(a), M44(b)))))), Tuple4(Add(Multiply(M41(a), M11(b)), Add(Multiply(M42(a), M21(b)), Add(Multiply(M43(a), M31(b)), Multiply(M44(a), M41(b))))), Add(Multiply(M41(a), M12(b)), Add(Multiply(M42(a), M22(b)), Add(Multiply(M43(a), M32(b)), Multiply(M44(a), M42(b))))), Add(Multiply(M41(a), M13(b)), Add(Multiply(M42(a), M23(b)), Add(Multiply(M43(a), M33(b)), Multiply(M44(a), M43(b))))), Add(Multiply(M41(a), M14(b)), Add(Multiply(M42(a), M24(b)), Add(Multiply(M43(a), M34(b)), Multiply(M44(a), M44(b)))))))
1341. Matrix
  Type: (Matrix3x3) => Matrix4x4
  Sig: Transforms_26:Library.Matrix(m: Matrix3x3): Matrix4x4
  Body: CreateFromRows(Matrix4x4, Row1(m), Row2(m), Row3(m), Tuple4(0, 0, 0, 1))
1342. Matrix
  Type: (Matrix4x4) => Matrix4x4
  Sig: Transforms_26:Library.Matrix(m: Matrix4x4): Matrix4x4
  Body: m
1343. Row1
  Type: (Matrix3x3) => Vector3D
  Sig: Transforms_26:Library.Row1(m: Matrix3x3): Vector3D
  Body: Tuple3(X(Column1(m)), X(Column2(m)), X(Column3(m)))
1344. Row2
  Type: (Matrix3x3) => Vector3D
  Sig: Transforms_26:Library.Row2(m: Matrix3x3): Vector3D
  Body: Tuple3(Y(Column1(m)), Y(Column2(m)), Y(Column3(m)))
1345. Row3
  Type: (Matrix3x3) => Vector3D
  Sig: Transforms_26:Library.Row3(m: Matrix3x3): Vector3D
  Body: Tuple3(Z(Column1(m)), Z(Column2(m)), Z(Column3(m)))
1346. M11
  Type: (Matrix3x3) => Number
  Sig: Transforms_26:Library.M11(m: Matrix3x3): Number
  Body: X(Column1)
1347. M12
  Type: (Matrix3x3) => Number
  Sig: Transforms_26:Library.M12(m: Matrix3x3): Number
  Body: X(Column2)
1348. M13
  Type: (Matrix3x3) => Number
  Sig: Transforms_26:Library.M13(m: Matrix3x3): Number
  Body: X(Column3)
1349. M21
  Type: (Matrix3x3) => Number
  Sig: Transforms_26:Library.M21(m: Matrix3x3): Number
  Body: Y(Column1)
1350. M22
  Type: (Matrix3x3) => Number
  Sig: Transforms_26:Library.M22(m: Matrix3x3): Number
  Body: Y(Column2)
1351. M23
  Type: (Matrix3x3) => Number
  Sig: Transforms_26:Library.M23(m: Matrix3x3): Number
  Body: Y(Column3)
1352. M31
  Type: (Matrix3x3) => Number
  Sig: Transforms_26:Library.M31(m: Matrix3x3): Number
  Body: Z(Column1)
1353. M32
  Type: (Matrix3x3) => Number
  Sig: Transforms_26:Library.M32(m: Matrix3x3): Number
  Body: Z(Column2)
1354. M33
  Type: (Matrix3x3) => Number
  Sig: Transforms_26:Library.M33(m: Matrix3x3): Number
  Body: Z(Column3)
1355. Determinant
  Type: (Matrix3x3) => Number
  Sig: Transforms_26:Library.Determinant(m: Matrix3x3): Number
  Body: Subtract(Multiply(M11, Subtract(Multiply(M22, M33), Multiply(M23, M32))), Add(Multiply(M12, Subtract(Multiply(M21, M33), Multiply(M23, M31))), Multiply(M13, Subtract(Multiply(M21, M32), Multiply(M22, M31)))))
1356. Transform
  Type: (IdentityTransform3D, Vector3D) => Vector3D
  Sig: Transforms_26:Library.Transform(t: IdentityTransform3D, v: Vector3D): Vector3D
  Body: v
1357. TransformNormal
  Type: (IdentityTransform3D, Vector3D) => Vector3D
  Sig: Transforms_26:Library.TransformNormal(t: IdentityTransform3D, v: Vector3D): Vector3D
  Body: v
1358. Matrix
  Type: (IdentityTransform3D) => Matrix4x4
  Sig: Transforms_26:Library.Matrix(t: IdentityTransform3D): Matrix4x4
  Body: Identity(Matrix4x4)
1359. Transform
  Type: (Transform3D, Vector3D) => Vector3D
  Sig: Transforms_26:Library.Transform(t: Transform3D, v: Vector3D): Vector3D
  Body: Multiply(Add(Transform(Rotation(t), v), Translation(t)), Scale(t))
1360. TransformNormal
  Type: (Transform3D, Vector3D) => Vector3D
  Sig: Transforms_26:Library.TransformNormal(t: Transform3D, v: Vector3D): Vector3D
  Body: TransformNormal(Rotation(t), v)
1361. Matrix
  Type: (Transform3D) => Matrix4x4
  Sig: Transforms_26:Library.Matrix(t: Transform3D): Matrix4x4
  Body: Multiply(Matrix(Scale(t)), Multiply(Matrix(Rotation(t)), Matrix(Translation(t))))
1362. Transform
  Type: (Pose3D, Vector3D) => Vector3D
  Sig: Transforms_26:Library.Transform(p: Pose3D, v: Vector3D): Vector3D
  Body: Add(Transform(Rotation(p), v), Position(p))
1363. TransformNormal
  Type: (Pose3D, Vector3D) => Vector3D
  Sig: Transforms_26:Library.TransformNormal(p: Pose3D, v: Vector3D): Vector3D
  Body: TransformNormal(Rotation(p), v)
1364. Matrix
  Type: (Pose3D) => Matrix4x4
  Sig: Transforms_26:Library.Matrix(p: Pose3D): Matrix4x4
  Body: Multiply(Matrix(Rotation(p)), Matrix(Position(p)))
1365. Transform
  Type: (AxisAngle, Vector3D) => Vector3D
  Sig: Transforms_26:Library.Transform(aa: AxisAngle, v: Vector3D): Vector3D
  Body: Transform(Quaternion(aa), v)
1366. TransformNormal
  Type: (AxisAngle, Vector3D) => Vector3D
  Sig: Transforms_26:Library.TransformNormal(aa: AxisAngle, v: Vector3D): Vector3D
  Body: Transform(aa, v)
1367. Quaternion
  Type: (AxisAngle) => Quaternion
  Sig: Transforms_26:Library.Quaternion(aa: AxisAngle): Quaternion
  Body: Plato.Compiler.Symbols.BlockStatement
1368. Matrix
  Type: (AxisAngle) => Matrix4x4
  Sig: Transforms_26:Library.Matrix(aa: AxisAngle): Matrix4x4
  Body: Matrix(Quaternion(aa))
1369. Quaternion
  Type: (EulerAngles) => Quaternion
  Sig: Transforms_26:Library.Quaternion(e: EulerAngles): Quaternion
  Body: Plato.Compiler.Symbols.BlockStatement
1370. Transform
  Type: (EulerAngles, Vector3D) => Vector3D
  Sig: Transforms_26:Library.Transform(e: EulerAngles, v: Vector3D): Vector3D
  Body: Transform(Quaternion(e), v)
1371. TransformNormal
  Type: (EulerAngles, Vector3D) => Vector3D
  Sig: Transforms_26:Library.TransformNormal(e: EulerAngles, v: Vector3D): Vector3D
  Body: TransformNormal(Quaternion(e), v)
1372. Matrix
  Type: (EulerAngles) => Matrix4x4
  Sig: Transforms_26:Library.Matrix(e: EulerAngles): Matrix4x4
  Body: Matrix(Quaternion(e))
1373. Pose3D
  Type: (Frame3D) => Pose3D
  Sig: Transforms_26:Library.Pose3D(f: Frame3D): Pose3D
  Body: Tuple2(Position(f), LookRotation(Forward(f), Up(f)))
1374. Transform
  Type: (Frame3D, Vector3D) => Vector3D
  Sig: Transforms_26:Library.Transform(f: Frame3D, v: Vector3D): Vector3D
  Body: Transform(Pose3D(f), v)
1375. TransformNormal
  Type: (Frame3D, Vector3D) => Vector3D
  Sig: Transforms_26:Library.TransformNormal(f: Frame3D, v: Vector3D): Vector3D
  Body: TransformNormal(Pose3D(f), v)
1376. Matrix
  Type: (Frame3D) => Matrix4x4
  Sig: Transforms_26:Library.Matrix(f: Frame3D): Matrix4x4
  Body: Matrix(Pose3D(f))
1377. Transform
  Type: (Rotation3D, Vector3D) => Vector3D
  Sig: Transforms_26:Library.Transform(r: Rotation3D, v: Vector3D): Vector3D
  Body: Transform(Quaternion(r), v)
1378. TransformNormal
  Type: (Rotation3D, Vector3D) => Vector3D
  Sig: Transforms_26:Library.TransformNormal(r: Rotation3D, v: Vector3D): Vector3D
  Body: TransformNormal(Quaternion(r), v)
1379. Matrix
  Type: (Rotation3D) => Matrix4x4
  Sig: Transforms_26:Library.Matrix(r: Rotation3D): Matrix4x4
  Body: Matrix(Quaternion(r))
1380. Quaternion
  Type: (Vector4D) => Quaternion
  Sig: Transforms_26:Library.Quaternion(v: Vector4D): Quaternion
  Body: Tuple4(X(v), Y(v), Z(v), W(v))
1381. Vector4D
  Type: (Quaternion) => Vector4D
  Sig: Transforms_26:Library.Vector4D(q: Quaternion): Vector4D
  Body: Tuple4(X(q), Y(q), Z(q), W(q))
1382. Magnitude
  Type: (Quaternion) => Number
  Sig: Transforms_26:Library.Magnitude(q: Quaternion): Number
  Body: Magnitude(Vector4D(q))
1383. MagnitudeSquared
  Type: (Quaternion) => Number
  Sig: Transforms_26:Library.MagnitudeSquared(q: Quaternion): Number
  Body: MagnitudeSquared(Vector4D(q))
1384. Transform
  Type: (Quaternion, Vector3D) => Vector3D
  Sig: Transforms_26:Library.Transform(q: Quaternion, v: Vector3D): Vector3D
  Body: Plato.Compiler.Symbols.BlockStatement
1385. TransformNormal
  Type: (Quaternion, Vector3D) => Vector3D
  Sig: Transforms_26:Library.TransformNormal(q: Quaternion, v: Vector3D): Vector3D
  Body: Transform(q, v)
1386. Concatenate
  Type: (Quaternion, Quaternion) => Quaternion
  Sig: Transforms_26:Library.Concatenate(q1: Quaternion, q2: Quaternion): Quaternion
  Body: ReverseConcatenate(q1, q2)
1387. Conjugate
  Type: (Quaternion) => Quaternion
  Sig: Transforms_26:Library.Conjugate(q: Quaternion): Quaternion
  Body: Tuple4(Negative(X(q)), Negative(Y(q)), Negative(Z(q)), W(q))
1388. Inverse
  Type: (Quaternion) => Quaternion
  Sig: Transforms_26:Library.Inverse(q: Quaternion): Quaternion
  Body: Multiply(Conjugate(q), Inverse(MagnitudeSquared(q)))
1389. Normalize
  Type: (Quaternion) => Quaternion
  Sig: Transforms_26:Library.Normalize(q: Quaternion): Quaternion
  Body: Normalize(Vector4D(q))
1390. XYZ
  Type: (Quaternion) => Vector3D
  Sig: Transforms_26:Library.XYZ(q: Quaternion): Vector3D
  Body: Tuple3(X, Y, Z)
1391. ReverseConcatenate
  Type: (Quaternion, Quaternion) => Quaternion
  Sig: Transforms_26:Library.ReverseConcatenate(q2: Quaternion, q1: Quaternion): Quaternion
  Body: Plato.Compiler.Symbols.BlockStatement
1392. AxisAngle
  Type: (Vector3D, Angle) => AxisAngle
  Sig: Transforms_26:Library.AxisAngle(v: Vector3D, a: Angle): AxisAngle
  Body: Tuple2(v, a)
1393. QuaternionFromRotationMatrix
  Type: (Matrix4x4) => Quaternion
  Sig: Transforms_26:Library.QuaternionFromRotationMatrix(m: Matrix4x4): Quaternion
  Body: Plato.Compiler.Symbols.BlockStatement
1394. Multiply
  Type: (Quaternion, Number) => Quaternion
  Sig: Transforms_26:Library.Multiply(q: Quaternion, scalar: Number): Quaternion
  Body: Multiply(Vector4D(q), scalar)
1395. Divide
  Type: (Quaternion, Number) => Quaternion
  Sig: Transforms_26:Library.Divide(q: Quaternion, scalar: Number): Quaternion
  Body: Divide(Vector4D(q), scalar)
1396. Rotation
  Type: (Vector3D, Angle) => Quaternion
  Sig: Transforms_26:Library.Rotation(v: Vector3D, theta: Angle): Quaternion
  Body: AxisAngle(v, theta)
1397. XRotation
  Type: (Angle) => Quaternion
  Sig: Transforms_26:Library.XRotation(theta: Angle): Quaternion
  Body: Rotation(XAxis3D, theta)
1398. YRotation
  Type: (Angle) => Quaternion
  Sig: Transforms_26:Library.YRotation(theta: Angle): Quaternion
  Body: Rotation(YAxis3D, theta)
1399. ZRotation
  Type: (Angle) => Quaternion
  Sig: Transforms_26:Library.ZRotation(theta: Angle): Quaternion
  Body: Rotation(ZAxis3D, theta)
1400. Add
  Type: (Quaternion, Quaternion) => Quaternion
  Sig: Transforms_26:Library.Add(q1: Quaternion, q2: Quaternion): Quaternion
  Body: Add(Vector4D(q1), Vector4D(q2))
1401. Negate
  Type: (Quaternion) => Quaternion
  Sig: Transforms_26:Library.Negate(q: Quaternion): Quaternion
  Body: Negative(Vector4D(q))
1402. Subtract
  Type: (Quaternion, Quaternion) => Quaternion
  Sig: Transforms_26:Library.Subtract(q1: Quaternion, q2: Quaternion): Quaternion
  Body: Subtract(Vector4D(q1), Vector4D(q2))
1403. Dot
  Type: (Quaternion, Quaternion) => Number
  Sig: Transforms_26:Library.Dot(q1: Quaternion, q2: Quaternion): Number
  Body: Dot(Vector4D(q1), Vector4D(q2))
1404. Slerp
  Type: (Quaternion, Quaternion, Number) => Quaternion
  Sig: Transforms_26:Library.Slerp(q1: Quaternion, q2: Quaternion, t: Number): Quaternion
  Body: Plato.Compiler.Symbols.BlockStatement
1405. LookRotation
  Type: (Vector3D, Vector3D) => Quaternion
  Sig: Transforms_26:Library.LookRotation(direction: Vector3D, up: Vector3D): Quaternion
  Body: Plato.Compiler.Symbols.BlockStatement
1406. Multiply
  Type: (Quaternion, Quaternion) => Quaternion
  Sig: Transforms_26:Library.Multiply(q1: Quaternion, q2: Quaternion): Quaternion
  Body: Plato.Compiler.Symbols.BlockStatement
1407. Matrix
  Type: (Quaternion) => Matrix4x4
  Sig: Transforms_26:Library.Matrix(q: Quaternion): Matrix4x4
  Body: Plato.Compiler.Symbols.BlockStatement
