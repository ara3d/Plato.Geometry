library Vectors
{
    //==
    // Vector2 functions
    
    Vector2(s: Number): Vector2    
        => (s, s);

    Line(a: Vector2, b: Vector2): Line2D 
        => (a, b);
    
    Ray(a: Vector2, b: Vector2): Ray2D 
        => (a, b);
    
    RayTo(a: Vector2, b: Vector2): Ray2D 
        => (a, b - a);
    
    Vector3(v: Vector2, z: Number): Vector3 
        => (v.X, v.Y, z);      

    UnitX(_: Vector2): Vector2 => (1.0, 0.0);
    UnitY(_: Vector2): Vector2 => (0.0, 1.0);

    //==
    // Vector3 Functions 

    Vector3(s: Number): Vector3 
        => (s, s, s);

    XZY(v: Vector3): Vector3 => (v.X, v.Z, v.Y);    
    YXZ(v: Vector3): Vector3 => (v.Y, v.X, v.Z);    
    YZX(v: Vector3): Vector3 => (v.Y, v.Z, v.X);    
    ZXY(v: Vector3): Vector3 => (v.Z, v.X, v.Y);    
    ZYX(v: Vector3): Vector3 => (v.Z, v.Y, v.X);    

    XY(v: Vector3): Vector2 => (v.X, v.Y);    
    YX(v: Vector3): Vector2 => (v.Y, v.X);
    XZ(v: Vector3): Vector2 => (v.X, v.Z);
    ZX(v: Vector3): Vector2 => (v.Z, v.X);
    YZ(v: Vector3): Vector2 => (v.Y, v.Z);
    ZY(v: Vector3): Vector2 => (v.Z, v.Y);

    Line(a: Vector3, b: Vector3): Line3D 
        => (a, b);
    
    Ray(a: Vector3, b: Vector3): Ray3D 
        => (a, b);
    
    RayTo(a: Vector3, b: Vector3): Ray3D 
        => (a, b - a);
    
    Project(v: Vector3, p: Plane): Vector3 
        => v - p.Normal * p.Normal.Dot(v);
    
    To2D(v: Vector3): Vector2 
        => (v.X, v.Y);
    
    MixedProduct(a: Vector3, b: Vector3, c: Vector3): Number 
        => a.Cross(b).Dot(c);

    Vector4(v: Vector3, w: Number): Vector4 
        => (v.X, v.Y, v.Z, w);
    
    UnitX(_: Vector3): Vector3 
        => (1.0, 0.0, 0.0);
    
    UnitY(_: Vector3): Vector3 
        => (0.0, 1.0, 0.0);
    
    UnitZ(_: Vector3): Vector3 
        => (0.0, 0.0, 1.0);

    //==
    // Vector 4 functions 

    Vector4(s: Number): Vector4   
        => (s, s, s, s);

    Vector3(v: Vector4): Vector3 
        => (v.X, v.Y, v.Z);
    
    XYZ(v: Vector4): Vector3 
        => v.Vector3;
  
    UnitX(_: Vector4): Vector4 
        => (1.0, 0.0, 0.0, 0.0);
    
    UnitY(_: Vector4): Vector4 
        => (0.0, 1.0, 0.0, 0.0);
    
    UnitZ(_: Vector4): Vector4 
        => (0.0, 0.0, 1.0, 0.0);
    
    UnitW(_: Vector4): Vector4 
        => (0.0, 0.0, 0.0, 1.0);

    //==

    Vector8(s: Number): Vector8   
        => (s, s, s, s, s, s, s, s);

    //==
    // Generic vector functions
    
    MidPoint(a: IVector, b: IVector): IVector
        => (a + b).Half;

    Length(a: IVector): Number 
        => a.Magnitude;
    
    LengthSquared(a: IVector): Number 
        => a.MagnitudeSquared;
    
    Sum(v: IVector): Number 
        => v.Reduce(0.0, (a, b) => a + b);
    
    SumSquares(v: IVector): Number 
        => v.Sqr.Sum;   
    
    MagnitudeSquared(v: IVector): Number 
        => v.SumSquares;    
    
    Magnitude(v: IVector): Number 
        => v.MagnitudeSquared.Sqrt;    
    
    Dot(v1: IVector, v2: IVector): Number 
        => (v1 * v2).Sum;  
    
    Normalize(x: IVector): IVector 
        => x.MagnitudeSquared > 0 ? x / x.Magnitude : Zero;
    
    Reflect(v: IVector, normal: IVector): IVector 
        => v - normal * v.Dot(normal) * 2.0;
    
    Project(v: IVector, other: IVector): IVector 
        => other * v.Dot(other);
    
    Distance(a: IVector, b: IVector): Number 
        => (b - a).Magnitude;
    
    DistanceSquared(a: IVector, b: IVector): Number 
        => (b - a).MagnitudeSquared;
    
    Angle(a: IVector, b: IVector): Angle 
        => (a.Dot(b) / (a.Magnitude * b.Magnitude)).Acos;     
    
    IsParallel(a: IVector, b: IVector): Boolean 
        => a.Dot(b).Abs >= (One - Epsilon);

    //==
    // Matrix operations   

    M11(m: Matrix4x4): Number => m.Row1.X;
    M12(m: Matrix4x4): Number => m.Row1.Y;
    M13(m: Matrix4x4): Number => m.Row1.Z;
    M14(m: Matrix4x4): Number => m.Row1.W;

    M21(m: Matrix4x4): Number => m.Row2.X;
    M22(m: Matrix4x4): Number => m.Row2.Y;
    M23(m: Matrix4x4): Number => m.Row2.Z;
    M24(m: Matrix4x4): Number => m.Row2.W;
    
    M31(m: Matrix4x4): Number => m.Row3.X;
    M32(m: Matrix4x4): Number => m.Row3.Y;
    M33(m: Matrix4x4): Number => m.Row3.Z;
    M34(m: Matrix4x4): Number => m.Row3.W;
    
    M41(m: Matrix4x4): Number => m.Row4.X;
    M42(m: Matrix4x4): Number => m.Row4.Y;
    M43(m: Matrix4x4): Number => m.Row4.Z;
    M44(m: Matrix4x4): Number => m.Row4.W;

    Column1(m: Matrix4x4): Vector4 
        => (M11, M21, M31, M41);
    
    Column2(m: Matrix4x4): Vector4 
        => (M12, M22, M32, M42);
    
    Column3(m: Matrix4x4): Vector4 
        => (M13, M23, M33, M43);
    
    Column4(m: Matrix4x4): Vector4 
        => (M14, M24, M34, M44);
 
    WithTranslation(m: Matrix4x4, v: Vector3): Matrix4x4
        => m.WithRow4(v.Vector4(1.0));
                
    Translation(m: Matrix4x4): Vector3
        => (m.M14, m.M24, m.M34);

    Transform(m: Matrix4x4, v: Vector3): Vector3
        => v.Transform(m);
    
    TransformNormal(m: Matrix4x4, v: Vector3): Vector3
        => v.TransformNormal(m);

    Multiply(m: Matrix4x4, v: Vector3): Vector3
        => m.Transform(v);

    Identity(_: Matrix4x4): Matrix4x4 
        => (Vector4.UnitX, Vector4.UnitY, Vector4.UnitZ, Vector4.UnitW);

    //==
    // Quaternion functions

    Transform(q: Quaternion, v: Vector3): Vector3
        => v.Transform(q);
    
    Multiply(q: Quaternion, v: Vector3): Vector3
        => q.Transform(v);

    Matrix(q: Quaternion): Matrix4x4
        => q;

    Matrix4x4(q: Quaternion): Matrix4x4
        => Matrix4x4.CreateFromQuaternion(q);

    Identity(_: Quaternion): Quaternion 
        => (0.0, 0.0, 0.0, 1.0);        
}