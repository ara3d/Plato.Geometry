library MeshPrimitives
{    
    TetrahedronPoints(): Array<Point3D> 
        => [(1, 1, 1), 
           (-1, -1, 1), 
           (-1, 1, -1), 
           (1, -1, -1)];

    TetrahedronFaces(): Array<Integer3>
        => [(2, 1, 0), (0, 3, 2),
            (1, 3, 0), (2, 3, 1)];

    // https://mathworld.wolfram.com/RegularTetrahedron.html
    // https://github.com/mrdoob/three.js/blob/master/src/geometries/TetrahedronGeometry.js
    Tetrahederon(): TriangleMesh3D
        => (TetrahedronPoints, TetrahedronFaces);

    CubePoints(): Array<Point3D> => [
        // Front quad
        (-0.5, -0.5, -0.5),
        (0.5, -0.5, -0.5),
        (0.5, -0.5, 0.5),
        (-0.5, -0.5, 0.5),
            
        // Back quad
        (-0.5, 0.5, -0.5),
        (0.5, 0.5, -0.5),
        (0.5, 0.5, 0.5),
        (-0.5, 0.5, 0.5)];

    CubeFaces(): Array<Integer4> => [ 
        (0, 1, 2, 3), // Front
        (1, 5, 6, 2), // Right-side
        (5, 4, 7, 6), // Back
        (4, 0, 3, 7), // Left-side
        (3, 2, 6, 7), // Top
        (4, 5, 1, 0)]; // Bottom

    Cube(): QuadMesh3D
        => (CubePoints, CubeFaces);

    OctahedronPoints(): Array<Vector3> => [
        (1, 0, 0), (-1, 0, 0), (0, 1, 0),
        (0, -1, 0), (0, 0, 1), (0, 0, -1)];

    OctahedronFaces(): Array<Integer3> => [
        (0, 2, 4), (0, 4, 3), 
        (0, 3, 5), (0, 5, 2), 
        (1, 2, 5), (1, 5, 3),
        (1, 3, 4), (1, 4, 2)];

    // https://mathworld.wolfram.com/RegularOctahedron.html
    // https://github.com/mrdoob/three.js/blob/master/src/geometries/OctahedronGeometry.js
    Octahedron(): TriangleMesh3D
        => (OctahedronPoints, OctahedronFaces);

    DodecahedronPoints(): Array<Vector3> => [ 
        (-1, -1, -1), (-1, -1, 1),
        (-1, 1, -1), (-1, 1, 1),
        (1, -1, -1), (1, -1, 1),
        (1, 1, -1), (1, 1, 1),
        (0, -RPhi, -Phi), (0, -RPhi, Phi),
        (0, RPhi, -Phi), (0, RPhi, Phi),
        (-RPhi, -Phi, 0), (-RPhi, Phi, 0),
        (RPhi, -Phi, 0), (RPhi, Phi, 0),
        (-Phi, 0, -RPhi), (Phi, 0, -RPhi),
        (-Phi, 0, RPhi), (Phi, 0, RPhi)];
        
    DodecahedronFaces(): Array<Integer3> => [
        (3, 11, 7), (3, 7, 15), (3, 15, 13),
        (7, 19, 17), (7, 17, 6), (7, 6, 15),
        (17, 4, 8), (17, 8, 10), (17, 10, 6),
        (8, 0, 16), (8, 16, 2), (8, 2, 10),
        (0, 12, 1), (0, 1, 18), (0, 18, 16),
        (6, 10, 2), (6, 2, 13), (6, 13, 15),
        (2, 16, 18), (2, 18, 3), (2, 3, 13),
        (18, 1, 9), (18, 9, 11), (18, 11, 3),
        (4, 14, 12), (4, 12, 0), (4, 0, 8),
        (11, 9, 5), (11, 5, 19), (11, 19, 7),
        (19, 5, 14), (19, 14, 4), (19, 4, 17),
        (1, 12, 14), (1, 14, 5), (1, 5, 9)];

    // https://mathworld.wolfram.com/RegularDodecahedron.html
    // https://github.com/mrdoob/three.js/blob/master/src/geometries/DodecahedronGeometry.js
    Dodecahedron(): TriangleMesh3D
        => (DodecahedronPoints, DodecahedronFaces);

    IcosahedronPoints(): Array<Point3D> => [
        (-1, Phi, 0), (1, Phi, 0),
        (-1, -Phi, 0), (1, -Phi, 0),
        (0, -1, Phi), (0, 1, Phi),
        (0, -1, -Phi), (0, 1, -Phi),
        (Phi, 0, -1), (Phi, 0, 1),
        (-Phi, 0, -1), (-Phi, 0, 1)];

    IcosahedronFaces(): Array<Integer3> => [
        (0, 11, 5), (0, 5, 1), (0, 1, 7), (0, 7, 10), (0, 10, 11),
        (1, 5, 9), (5, 11, 4), (11, 10, 2), (10, 7, 6), (7, 1, 8),
        (3, 9, 4), (3, 4, 2), (3, 2, 6), (3, 6, 8), (3, 8, 9),
        (4, 9, 5), (2, 4, 11), (6, 2, 10), (8, 6, 7), (9, 8, 1)];
        
    // https://mathworld.wolfram.com/RegularIcosahedron.html
    // https://github.com/mrdoob/three.js/blob/master/src/geometries/IcosahedronGeometry.js
    Icosahedron(): TriangleMesh3D
        => (IcosahedronPoints, IcosahedronFaces);

}