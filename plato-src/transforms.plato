// Used for types that represent transformations in 3D space
interface ITransform3D
{
    // Transforms a point 
    Transform(x: Self, v: Vector3): Vector3;

    // Transforms a normal vector 
    TransformNormal(x: Self, v: Vector3): Vector3;

    // Returns a 4x4 matrix representation of the transformation. 
    Matrix(x: Self): Matrix4x4;
}

// Rigid transforms have only a translation and/or a rotational component.
// Working with rigid transforms only is easier, less error-prone, and more efficient. 
interface IRigidTransform3D 
    inherits ITransform3D
{
    Translation(x: Self): Translation3D;
    Rotation(x: Self): Rotation3D;
}

// Rotational transforms have only a rotational component.
// They can always be converted into a Quaternion.
// They are also rigid transforms because they have no translation
interface IRotationalTransform3D
    inherits IRigidTransform3D
{
    Quaternion(x: Self): Quaternion;
}

// The transform which does not change anything 
type IdentityTransform3D
    implements IValue, IRotationalTransform3D
{
}

// An affine transform expressed by a 4x4 matrix.
// There are no assurances made that the matrix is affine. 
type MatrixTransform3D
    implements ITransform3D
{
    Matrix: Matrix4x4;
}

// A rigid transform with no rotational component. 
type Translation3D
    implements IRigidTransform3D
{
    Direction: Vector3;
}

// A rigid transform wit no translational component
type Rotation3D
    implements IRotationalTransform3D
{
    Quaternion: Quaternion;
}

// A rotational transform expressed by a forward direction and an up. 
type LookRotation
    implements IRotationalTransform3D
{
    Forward: Vector3;
    Up: Vector3;
}

// A scaling transform: non-rigid 
type Scaling3D
    implements ITransform3D
{
    Scale: Vector3;
}

// A transform that applies, translation, rotation, and scale, in that order 
type TRSTransform3D
    implements ITransform3D
{
    Translation: Translation3D;
    Rotation: Rotation3D;
    Scale: Scaling3D;
}

// Translates and rotates, but does not scale. Also known as a Rigid Body Transform. 
type Pose3D
    implements IRigidTransform3D
{
    Translation: Translation3D;
    Rotation: Rotation3D;
}

// A rotational transform expressed by an angle and an axis
type AxisAngle
    implements IRotationalTransform3D
{
    Axis: Vector3;
    Angle: Angle;
}

// A rotational transform expressed by three rotational components: Yaw, pitch, and roll.  
type EulerAngles
    implements IRotationalTransform3D
{
    Yaw: Angle;
    Pitch: Angle;
    Roll: Angle;
}

// A perspective view transform 
type Perspective3D
    implements ITransform3D
{
    FOV: Angle;
    AspectRatio: Number;
    Near: Number;
    Far: Number;
}

// An orthographic view transform 
type Orthographic3D
    implements ITransform3D
{
    Width: Number;
    Height: Number;
    Near: Number;
    Far: Number;
}

// A transform for projecting points onto a plane, e.g., for shadows.  
type PlaneProjection
    implements ITransform3D
{
    Direction: Vector3;
    Plane: Plane;
}    

library Transforms
{            
    //==
    // General ITransform3D helpers

    Matrix4x4(t: ITransform3D): Matrix4x4
		=> t.Matrix;

    Transform(t: ITransform3D, v: Vector3): Vector3
		=> v.Transform(t.Matrix);

    TransformNormal(t: ITransform3D, v: Vector3): Vector3
        => v.TransformNormal(t.Matrix);
  
    // NOTE: ideally, many of these have well-defined inverses which are more efficient ...
    // However, if I include them, then they don't properly override this inverse and return the wrong type. 
    // I need to fix that. 
    Inverse(t: ITransform3D): MatrixTransform3D
        => t.Matrix.Invert;

    //==
    // General IRotationalTransform3D helpers

    Matrix(r: IRotationalTransform3D): Matrix4x4
        => r.Quaternion.Matrix;

    Transform(r: IRotationalTransform3D, v: Vector3): Vector3
		=> v.Transform(r.Quaternion);

    TransformNormal(r: IRotationalTransform3D, v: Vector3): Vector3
        => v.TransformNormal(r.Quaternion);
    
    Rotation(r: IRotationalTransform3D): Rotation3D
        => r.Quaternion;

    Translation(r: IRotationalTransform3D): Translation3D
        => Translation3D.Identity;

    //==
    // IdentityTransform3D

    Matrix(t: IdentityTransform3D): Matrix4x4
		=> Matrix4x4.Identity;

    Quaternion(t: IdentityTransform3D): Quaternion
		=> Quaternion.Identity;

	Transform(t: IdentityTransform3D, v: Vector3): Vector3
		=> v;

	TransformDirection(t: IdentityTransform3D, v: Vector3): Vector3
		=> v;

    //Inverse(t: IdentityTransform3D): IdentityTransform3D
    //    => t;

    IdentityTransform3D(): IdentityTransform3D
        => new IdentityTransform3D();
    
    //==
    // Translation3D functions

    Matrix(t: Translation3D): Matrix4x4
        => Matrix4x4.CreateTranslation(t.Translation);

    Transform(t: Translation3D, v: Vector3): Vector3
        => v + t.Direction;
    
    TransformNormal(t: Translation3D, v: Vector3): Vector3
        => v;
        
    Identity(_: Translation3D): Translation3D
        => new Vector3(Zero);

    Translation(t: Translation3D): Translation3D
        => t;

    Rotation(t: Translation3D): Rotation3D
        => Rotation3D.Identity;

    //Inverse(t: Translation3D): Translation3D
    //    => -t.Direction;

    //==
    // MatrixTransform3D

    Transform(t: MatrixTransform3D, v: Vector3): Vector3
        => v.Transform(t.Matrix);

    TransformNormal(t: MatrixTransform3D, v: Vector3): Vector3
        => v.TransformNormal(t.Matrix);

    Identity(_: MatrixTransform3D): MatrixTransform3D
        => Matrix4x4.Identity;

    //==
    // Rotation3D

    Quaternion(r: Rotation3D): Quaternion
        => r.Quaternion;

    RotateX(a: Angle): Rotation3D
        => Quaternion.CreateFromAxisAngle(Vector3.UnitX, a);

    RotateY(a: Angle): Rotation3D
        => Quaternion.CreateFromAxisAngle(Vector3.UnitY, a);

    RotateZ(a: Angle): Rotation3D
        => Quaternion.CreateFromAxisAngle(Vector3.UnitZ, a);  

    Translation(r: Rotation3D): Translation3D
        => Translation3D.Identity;

    Rotation(r: Rotation3D): Rotation3D
        => r;

    Identity(_: Rotation3D): Rotation3D
        => Quaternion.Identity;

    //==
    // LookRotation

    Matrix(r: LookRotation): Matrix4x4
        => Matrix4x4.CreateWorld(Zero, r.Forward, r.Up);

    Quaternion(r: LookRotation): Quaternion
        => Quaternion.CreateFromRotationMatrix(r.Matrix);

    Identity(_: LookRotation): LookRotation
        => (Vector3.UnitY, Vector3.UnitZ);
        
    //==
    // Scaling3D

    Matrix(s: Scaling3D): Matrix4x4
        => Matrix4x4.CreateScale(s.Scale.X, s.Scale.Y, s.Scale.Z);           

    UniformScaling3D(x: Number): Scaling3D
        => new Vector3(x);

    Identity(_: Scaling3D): Scaling3D
        => new Vector3(One);

    //==
    // TRSTransform3D

	Matrix(t: TRSTransform3D): Matrix4x4
		=> t.Translation.Matrix * t.Rotation.Matrix * t.Scale.Matrix;

    Identity(_: TRSTransform3D): TRSTransform3D
        => (Translation3D.Identity, Rotation3D.Identity, Scaling3D.Identity);

    //==
    // Pose3D

    Matrix(p: Pose3D): Matrix4x4
        => p.Translation.Matrix * p.Rotation.Matrix;

    TRSTransform3D(p: Pose3D): TRSTransform3D
        => (p.Translation, p.Rotation, Scaling3D.Identity);

    Identity(_: Pose3D): Pose3D
        => (Translation3D.Identity, Rotation3D.Identity);
    
    //==
    // AxisAngle

    Quaternion(aa: AxisAngle): Quaternion
	    => Quaternion.CreateFromAxisAngle(aa.Axis, aa.Angle);

    Identity(_: AxisAngle): AxisAngle
        => (Vector3.UnitX, Zero);

    //==
    // EulerAngles

    Quaternion(e: EulerAngles): Quaternion
        => Quaternion.CreateFromYawPitchRoll(e.Yaw, e.Pitch, e.Roll);

    Identity(_: EulerAngles): EulerAngles
        => (Zero, Zero, Zero);

    //==
    // Perspective3D

    Matrix(p: Perspective3D): Matrix4x4
        => Matrix4x4.CreatePerspectiveFieldOfView(p.FOV.Radians, p.AspectRatio, p.Near, p.Far);

    //==
    // Orthographic3D

    Matrix(o: Orthographic3D): Matrix4x4
        => Matrix4x4.CreateOrthographic(o.Width, o.Height, o.Near, o.Far);

    //==
    // Plane projection

    Matrix(pp: PlaneProjection): Matrix4x4
        => Matrix4x4.CreateShadow(pp.Direction, pp.Plane);
}