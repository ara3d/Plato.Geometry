
// Used for types that represent transformations in 3D space
interface ITransform3D
{
    // Transforms a point using the transformation
	Transform(x: Self, v: Vector3D): Vector3D;

    // Transforms a normal vector using the transformation (ignores scale and translation)
	TransformNormal(x: Self, v: Vector3D): Vector3D;

    // Returns a 4x4 matrix representation of the transformation. 
    Matrix(x: Self): Matrix4x4;
}

// A 2-dimensional vector
type Vector2D
    implements IVector
{
    X: Number;
    Y: Number;
}

// A 3-dimensional vector    
type Vector3D
    implements IVector, IDeformable3D
{
    X: Number;
    Y: Number;
    Z: Number;
}

// A 4-dimensional vector
type Vector4D
    implements IVector
{
    X: Number;
    Y: Number;
    Z: Number;
    W: Number;
}

// Affine 2D transformation matrix 
// https://en.wikipedia.org/wiki/Transformation_matrix#Affine_transformations
type Matrix3x3 
    implements IValue, IArray<Vector3D>
{
    Column1: Vector3D;   
    Column2: Vector3D;   
    Column3: Vector3D;   
}

// Affine 3D transformation matrix 
// https://en.wikipedia.org/wiki/Transformation_matrix#Affine_transformations
// https://mindcontrol.org/~hplus/graphics/matrix-layout.html
// Column major layout in memory 
// Translation component is in Column4.XYZ    
type Matrix4x4
    implements IValue, IArray<Vector4D>, ITransform3D
{
    Column1: Vector4D;
    Column2: Vector4D;
    Column3: Vector4D;
    Column4: Vector4D;
}

//==
// 3D Transforms
//==

type IdentityTransform3D
	implements IValue, ITransform3D
{
}

type Transform3D
    implements IValue, ITransform3D
{
    Translation: Vector3D;
    Rotation: Quaternion;
    Scale: Vector3D;
}

// Also known as a Rigid Body Transform
type Pose3D
    implements IValue, ITransform3D
{
    Position: Vector3D;
    Rotation: Rotation3D;
}

type Frame3D
    implements IValue, ITransform3D
{
    Forward: Vector3D;
    Up: Vector3D;
    Position: Vector3D;
}

type Quaternion
    implements IValue, IArray<Number>, ITransform3D 
{
    X: Number;
    Y: Number;
    Z: Number;
    W: Number;
}

type AxisAngle
    implements IValue, ITransform3D
{
    Axis: Vector3D;
    Angle: Angle;
}

type EulerAngles
    implements IValue, ITransform3D
{
    Yaw: Angle;
    Pitch: Angle;
    Roll: Angle;
}

type Rotation3D
    implements IValue, ITransform3D
{
    Quaternion: Quaternion;
}


library Transforms
{
    //==
    // Vector functions

    Matrix(v: Vector3D): Matrix4x4
		=> Matrix4x4.CreateTranslation(v);

    //==
    // General ITransform3D helpers

    // All transforms can be implicitly cast to a matrix 
    Matrix4x4(t: ITransform3D): Matrix4x4
		=> t.Matrix;

    //==
    // Matrix operations   

    M11(m: Matrix4x4): Number => m.Column1.X;
    M12(m: Matrix4x4): Number => m.Column2.X;
    M13(m: Matrix4x4): Number => m.Column3.X;
    M14(m: Matrix4x4): Number => m.Column4.X;
    M21(m: Matrix4x4): Number => m.Column1.Y;
    M22(m: Matrix4x4): Number => m.Column2.Y;
    M23(m: Matrix4x4): Number => m.Column3.Y;
    M24(m: Matrix4x4): Number => m.Column4.Y;
    M31(m: Matrix4x4): Number => m.Column1.Z;
    M32(m: Matrix4x4): Number => m.Column2.Z;
    M33(m: Matrix4x4): Number => m.Column3.Z;
    M34(m: Matrix4x4): Number => m.Column4.Z;
    M41(m: Matrix4x4): Number => m.Column1.W;
    M42(m: Matrix4x4): Number => m.Column2.W;
    M43(m: Matrix4x4): Number => m.Column3.W;
    M44(m: Matrix4x4): Number => m.Column4.W;

    Row1(m: Matrix4x4): Vector4D => (M11, M12, M13, M14);
    Row2(m: Matrix4x4): Vector4D => (M21, M22, M23, M24);
    Row3(m: Matrix4x4): Vector4D => (M31, M32, M33, M34);
    Row4(m: Matrix4x4): Vector4D => (M41, M42, M43, M44);

    // TODO: I need exception throwing
    GetRow(m: Matrix4x4, row: Integer): Vector4D 
        => row == 0 ? Row1 : 
            row == 1 ? Row2 : 
            row == 2 ? Row3 : 
            Row4;

    Multiply(m: Matrix4x4, v: Vector3D): Vector3D
        =>  (v.X * m.M11 + v.Y * m.M21 + v.Z * m.M31 + m.M41,
            v.X * m.M12 + v.Y * m.M22 + v.Z * m.M32 + m.M42,
            v.X * m.M13 + v.Y * m.M23 + v.Z * m.M33 + m.M43);             

    CreateFromRows(_: Matrix4x4, row1: Vector4D, row2: Vector4D, row3: Vector4D, row4: Vector4D): Matrix4x4
        => ((row1.X, row2.X, row3.X, row4.X),
            (row1.Y, row2.Y, row3.Y, row4.Y),
            (row1.Z, row2.Z, row3.Z, row4.Z),
            (row1.W, row2.W, row3.W, row4.W));

    CreateFromRows(_: Matrix4x4, row1: Vector3D, row2: Vector3D, row3: Vector3D): Matrix4x4
        => Matrix4x4.CreateFromRows(row1, row2, row3, (0, 0, 0, 1));

    WithTranslation(m: Matrix4x4, v:  Vector3D): Matrix4x4
        => Matrix4x4.CreateFromRows(m.Row1, m.Row2, m.Row3, (v.X, v.Y, v.Z, 1));  
                
    Translation(m: Matrix4x4): Vector3D
        => (m.M14, m.M24, m.M34);

    CreateTranslation(_: Matrix4x4, v: Vector3D): Matrix4x4
        => Identity.WithTranslation(v);

    CreateScale(_: Matrix4x4, v: Vector3D): Matrix4x4
        => ((v.X, 0, 0, 0), (0, v.Y, 0, 0), (0, 0, v.Z, 0), (0, 0, 0, 1));

    Transform(m: Matrix4x4, v: Vector3D): Vector3D
        => m * v;
        
    TransformNormal(m: Matrix4x4, v: Vector3D): Vector3D
        => (v.X * m.M11 + v.Y * m.M21 + v.Z * m.M31,
            v.X * m.M12 + v.Y * m.M22 + v.Z * m.M32,
            v.X * m.M13 + v.Y * m.M23 + v.Z * m.M33);

    Transpose(m: Matrix4x4): Matrix4x4
        => (m.Row1, m.Row2, m.Row3, m.Row4);

    Multiply(m: Matrix4x4, s: Number): Matrix4x4
        => (m.Column1 * s, m.Column2 * s, m.Column3 * s, m.Column4 * s);

    Divide(m: Matrix4x4, s: Number): Matrix4x4
        => (m.Column1 / s, m.Column2 / s, m.Column3 / s, m.Column4 / s);

    Multiply(a: Matrix4x4, b: Matrix4x4): Matrix4x4
        => Matrix4x4.CreateFromRows(
            (a.M11 * b.M11 + a.M12 * b.M21 + a.M13 * b.M31 + a.M14 * b.M41,
            a.M11 * b.M12 + a.M12 * b.M22 + a.M13 * b.M32 + a.M14 * b.M42,
            a.M11 * b.M13 + a.M12 * b.M23 + a.M13 * b.M33 + a.M14 * b.M43,
            a.M11 * b.M14 + a.M12 * b.M24 + a.M13 * b.M34 + a.M14 * b.M44),

            (a.M21 * b.M11 + a.M22 * b.M21 + a.M23 * b.M31 + a.M24 * b.M41,
            a.M21 * b.M12 + a.M22 * b.M22 + a.M23 * b.M32 + a.M24 * b.M42,
            a.M21 * b.M13 + a.M22 * b.M23 + a.M23 * b.M33 + a.M24 * b.M43,
            a.M21 * b.M14 + a.M22 * b.M24 + a.M23 * b.M34 + a.M24 * b.M44),

            (a.M31 * b.M11 + a.M32 * b.M21 + a.M33 * b.M31 + a.M34 * b.M41,
            a.M31 * b.M12 + a.M32 * b.M22 + a.M33 * b.M32 + a.M34 * b.M42,
            a.M31 * b.M13 + a.M32 * b.M23 + a.M33 * b.M33 + a.M34 * b.M43,
            a.M31 * b.M14 + a.M32 * b.M24 + a.M33 * b.M34 + a.M34 * b.M44),

            (a.M41 * b.M11 + a.M42 * b.M21 + a.M43 * b.M31 + a.M44 * b.M41,
            a.M41 * b.M12 + a.M42 * b.M22 + a.M43 * b.M32 + a.M44 * b.M42,
            a.M41 * b.M13 + a.M42 * b.M23 + a.M43 * b.M33 + a.M44 * b.M43,
            a.M41 * b.M14 + a.M42 * b.M24 + a.M43 * b.M34 + a.M44 * b.M44));

    Matrix(m: Matrix3x3): Matrix4x4
		=> Matrix4x4.CreateFromRows(m.Row1, m.Row2, m.Row3, (0, 0, 0, 1));

    Matrix(m: Matrix4x4): Matrix4x4
		=> m;

    //==
    // Matrix3x3 operations   

    Row1(m: Matrix3x3): Vector3D
        => (m.Column1.X, m.Column2.X, m.Column3.X);

    Row2(m: Matrix3x3): Vector3D
        => (m.Column1.Y, m.Column2.Y, m.Column3.Y);

    Row3(m: Matrix3x3): Vector3D
        => (m.Column1.Z, m.Column2.Z, m.Column3.Z);
    
    M11(m: Matrix3x3): Number => Column1.X;
    M12(m: Matrix3x3): Number => Column2.X;
    M13(m: Matrix3x3): Number => Column3.X;
    M21(m: Matrix3x3): Number => Column1.Y;
    M22(m: Matrix3x3): Number => Column2.Y;
    M23(m: Matrix3x3): Number => Column3.Y;
    M31(m: Matrix3x3): Number => Column1.Z;
    M32(m: Matrix3x3): Number => Column2.Z;
    M33(m: Matrix3x3): Number => Column3.Z;

    Determinant(m: Matrix3x3): Number
        => M11 * (M22 * M33 - M23 * M32)
           - M12 * (M21 * M33 - M23 * M31)
           + M13 * (M21 * M32 - M22 * M31);

    //==
    // IdentityTransform3D

	Transform(t: IdentityTransform3D, v: Vector3D): Vector3D
		=> v;

	TransformNormal(t: IdentityTransform3D, v: Vector3D): Vector3D
		=> v;

    Matrix(t: IdentityTransform3D): Matrix4x4
		=> Matrix4x4.Identity;

    //==
    // Transform3D

	Transform(t: Transform3D, v: Vector3D): Vector3D
		=> (t.Rotation.Transform(v) + t.Translation) * t.Scale;

	TransformNormal(t: Transform3D, v: Vector3D): Vector3D
		=> t.Rotation.TransformNormal(v);

    Matrix(t: Transform3D): Matrix4x4
		=> t.Scale.Matrix * t.Rotation.Matrix * t.Translation.Matrix;

    //==
    // Pose3D

	Transform(p: Pose3D, v: Vector3D): Vector3D
		=> p.Rotation.Transform(v) + p.Position;

	TransformNormal(p: Pose3D, v: Vector3D): Vector3D
		=> p.Rotation.TransformNormal(v);

    Matrix(p: Pose3D): Matrix4x4
        => p.Rotation.Matrix * p.Position.Matrix;

    //==
    // AxisAngle
    
    Transform(aa: AxisAngle, v: Vector3D): Vector3D
		=> aa.Quaternion.Transform(v);

    TransformNormal(aa: AxisAngle, v: Vector3D): Vector3D
        => aa.Transform( v);

    Quaternion(aa: AxisAngle): Quaternion
	{
        var axis = aa.Axis.Normalize;
        var sinHalfAngle = aa.Angle.Half.Sin;
        var cosHalfAngle = aa.Angle.Half.Cos;
        return (
            axis.X * sinHalfAngle,
            axis.Y * sinHalfAngle,
            axis.Z * sinHalfAngle,
            cosHalfAngle);
    }

    Matrix(aa: AxisAngle): Matrix4x4
		=> aa.Quaternion.Matrix;

    //==
    // EulerAngles

    Quaternion(e: EulerAngles): Quaternion
	{
		var cy = e.Yaw.Half.Cos;        
        var sy = e.Yaw.Half.Sin;
        var cp = e.Pitch.Half.Cos;
        var sp = e.Pitch.Half.Sin;
        var cr = e.Roll.Half.Cos;
        var sr = e.Roll.Half.Sin;
        return (
            sr * cp * cy - cr * sp * sy,
            cr * sp * cy + sr * cp * sy,
            cr * cp * sy - sr * sp * cy,
            cr * cp * cy + sr * sp * sy);
	}

    Transform(e: EulerAngles, v: Vector3D): Vector3D
        => e.Quaternion.Transform(v);

    TransformNormal(e: EulerAngles, v: Vector3D): Vector3D
        => e.Quaternion.TransformNormal(v);

    Matrix(e: EulerAngles): Matrix4x4
		=> e.Quaternion.Matrix;

    //==
	// Frame3D

	Pose3D(f: Frame3D): Pose3D
        => (f.Position, f.Forward.LookRotation(f.Up));

    Transform(f: Frame3D, v: Vector3D): Vector3D
		=> f.Pose3D.Transform(v);

	TransformNormal(f: Frame3D, v: Vector3D): Vector3D
		=> f.Pose3D.TransformNormal(v);

    Matrix(f: Frame3D): Matrix4x4
		=> f.Pose3D.Matrix;

    //==
    // Rotation

    Transform(r: Rotation3D, v: Vector3D): Vector3D
    	=> r.Quaternion.Transform(v);

    TransformNormal(r: Rotation3D, v: Vector3D): Vector3D
    	=> r.Quaternion.TransformNormal(v);

    Matrix(r: Rotation3D): Matrix4x4
        => r.Quaternion.Matrix;

    //==
    // Quaternion

    Quaternion(v: Vector4D): Quaternion
        => (v.X, v.Y, v.Z, v.W);

    Vector4D(q: Quaternion): Vector4D
		=> (q.X, q.Y, q.Z, q.W);

    Magnitude(q: Quaternion): Number
        => q.Vector4D.Magnitude;

    MagnitudeSquared(q: Quaternion): Number
        => q.Vector4D.MagnitudeSquared;

	Transform(q: Quaternion, v: Vector3D): Vector3D
    {
        var x2 = q.X + q.X;
        var y2 = q.Y + q.Y;
        var z2 = q.Z + q.Z;

        var wx2 = q.W * x2;
        var wy2 = q.W * y2;
        var wz2 = q.W * z2;
        var xx2 = q.X * x2; 
        var xy2 = q.X * y2;
        var xz2 = q.X * z2;
        var yy2 = q.Y * y2;
        var yz2 = q.Y * z2;
        var zz2 = q.Z * z2;

        return (
            v.X * (1.0 - yy2 - zz2) + v.Y * (xy2 - wz2) + v.Z * (xz2 + wy2),
            v.X * (xy2 + wz2) + v.Y * (1.0 - xx2 - zz2) + v.Z * (yz2 - wx2),
            v.X * (xz2 - wy2) + v.Y * (yz2 + wx2) + v.Z * (1.0 - xx2 - yy2));
    }

	TransformNormal(q: Quaternion, v: Vector3D): Vector3D
		=> q.Transform(v);

	Concatenate(q1: Quaternion, q2: Quaternion): Quaternion
		=> q1.ReverseConcatenate(q2);

    Conjugate(q: Quaternion): Quaternion
		=> (-q.X, -q.Y, -q.Z, q.W);

    Inverse(q: Quaternion): Quaternion
        => q.Conjugate * q.MagnitudeSquared.Inverse;

    Normalize(q: Quaternion): Quaternion
        => q.Vector4D.Normalize;

	XYZ(q: Quaternion): Vector3D
        => (X, Y, Z);

	ReverseConcatenate(q2: Quaternion, q1: Quaternion): Quaternion
    {
        var av = q2.XYZ;
        var bv = q1.XYZ;
        var cv = av.Cross(bv);
        var dot = av.Dot(bv);
        return (
            q2.X * q1.W + q1.X * q2.W + cv.X,
            q2.Y * q1.W + q1.Y * q2.W + cv.Y,
            q2.Z * q1.W + q1.Z * q2.W + cv.Z,
            q2.W * q1.W - dot);
    }
 
    AxisAngle(v: Vector3D, a: Angle): AxisAngle
        => (v, a);

    QuaternionFromRotationMatrix(m: Matrix4x4): Quaternion
    {
        var trace = m.M11 + m.M22 + m.M33;

        if (trace > 0.0)
        {
            var s = (trace + 1.0).Sqrt;
            var w = s * 0.5;
            var s1 = 0.5 / s;
            return (
                (m.M23 - m.M32) * s1,
                (m.M31 - m.M13) * s1,
                (m.M12 - m.M21) * s1,
                w);
        }
        if (m.M11 >= m.M22 && m.M11 >= m.M33)
        {
            var s = (1.0 + m.M11 - m.M22 - m.M33).Sqrt;
            var invS = 0.5 / s;
            return (s.Half,
                (m.M12 + m.M21) * invS,
                (m.M13 + m.M31) * invS,
                (m.M23 - m.M32) * invS);
        }
        if (m.M22 > m.M33)
        {
            var s = (1.0 + m.M22 - m.M11 - m.M33).Sqrt;
            var invS = 0.5 / s;
            return (
               (m.M21 + m.M12) * invS,
               s.Half,
               (m.M32 + m.M23) * invS,
               (m.M31 - m.M13) * invS);
        }
        {
            var s = (1.0 + m.M33 - m.M11 - m.M22).Sqrt;
            var invS = 0.5 / s;
            return (
                (m.M31 + m.M13) * invS,
                (m.M32 + m.M23) * invS,
                s.Half, 
                (m.M12 - m.M21) * invS);
        }
    }

    Multiply(q: Quaternion, scalar: Number): Quaternion
        => q.Vector4D * scalar;

    Divide(q: Quaternion, scalar: Number): Quaternion
        => q.Vector4D / scalar;

    Rotation(v: Vector3D, theta: Angle): Quaternion
		=> v.AxisAngle(theta);

    XRotation(theta: Angle): Quaternion
        => XAxis3D.Rotation(theta);

    YRotation(theta: Angle): Quaternion
        => YAxis3D.Rotation(theta);

    ZRotation(theta: Angle): Quaternion
        => ZAxis3D.Rotation(theta);

    Add(q1: Quaternion, q2: Quaternion): Quaternion
        => q1.Vector4D + q2.Vector4D;

    Negate(q: Quaternion): Quaternion
        => -q.Vector4D;

    Subtract(q1: Quaternion, q2: Quaternion): Quaternion
        => q1.Vector4D - q2.Vector4D;

    Dot(q1: Quaternion, q2: Quaternion): Number
        => q1.Vector4D.Dot(q2.Vector4D);

    Slerp(q1: Quaternion, q2: Quaternion, t: Number): Quaternion
    {
        var cosOmega = q1.Dot(q2);
        var flip = cosOmega < 0.0;

        if (cosOmega.Abs > (1.0 - 1e-6))
        {
            // Too close, do straight linear interpolation.
            var s1 = 1.0 - t;
            var s2 = flip ? -t : t;
            return q1 * s1 + q2 * s2;
        } 
        else
        {
            var omega = cosOmega.Abs.Acos;
            var invSinOmega = omega.Sin.Inverse;
            var s1 = ((1.0 - t) * omega).Sin * invSinOmega;
            var s2 = flip
                ? -(t * omega).Sin * invSinOmega
                : (t * omega).Sin * invSinOmega;

            return q1 * s1 + q2 * s2;
        }
    }
  
    LookRotation(direction: Vector3D, up: Vector3D): Quaternion
    {
        // Normalize the direction vector to get the forward vector
        var forward = direction.Normalize;

        var up2 = up.IsParallel(forward) ? Vector3D.UnitX : up; 

        // Calculate the right vector and normalize it
        var right = up2.Cross(forward).Normalize;

        // Recompute the up vector and normalize it
        var correctedUp = forward.Cross(right).Normalize;

        // Construct the rotation matrix using right, corrected up, and forward vectors
        var rotationMatrix = new Matrix4x4(
            (right.X, correctedUp.X, forward.X, 0),
            (right.Y, correctedUp.Y, forward.Y, 0),
            (right.Z, correctedUp.Z, forward.Z, 0),
            (0, 0, 0, 1));

        return rotationMatrix.QuaternionFromRotationMatrix.Normalize;
    }

    Multiply(q1: Quaternion, q2: Quaternion): Quaternion
    {
        // 9 muls, 27 adds
        var tmp_00 = (q1.Z - q1.Y) * (q2.Y - q2.Z);
        var tmp_01 = (q1.W + q1.X) * (q2.W + q2.X);
        var tmp_02 = (q1.W - q1.X) * (q2.Y + q2.Z);
        var tmp_03 = (q1.Y + q1.Z) * (q2.W - q2.X);
        var tmp_04 = (q1.Z - q1.X) * (q2.X - q2.Y);
        var tmp_05 = (q1.Z + q1.X) * (q2.X + q2.Y);
        var tmp_06 = (q1.W + q1.Y) * (q2.W - q2.Z);
        var tmp_07 = (q1.W - q1.Y) * (q2.W + q2.Z);
        var tmp_08 = tmp_05 + tmp_06 + tmp_07;
        var tmp_09 = (tmp_04 + tmp_08) * 0.5;

        return (
            tmp_01 + tmp_09 - tmp_08,
            tmp_02 + tmp_09 - tmp_07,
            tmp_03 + tmp_09 - tmp_06,
            tmp_00 + tmp_09 - tmp_05);
    }

    Matrix(q: Quaternion): Matrix4x4
    {
        var q1 = q.Normalize;

        var xx = q1.X * q1.X;
        var yy = q1.Y * q1.Y;
        var zz = q1.Z * q1.Z;

        var xy = q1.X * q1.Y;
        var wz = q1.Z * q1.W;
        var xz = q1.Z * q1.X;
        var wy = q1.Y * q1.W;
        var yz = q1.Y * q1.Z;
        var wx = q1.X * q1.W;

        return ((1.0 - 2.0 * (yy + zz), 2.0 * (xy + wz), 2.0 * (xz - wy), 0.0),
            (2.0 * (xy - wz), 1.0 - 2.0 * (zz + xx), 2.0 * (yz + wx), 0.0),
            (2.0 * (xz + wy), 2.0 * (yz - wx), 1.0 - 2.0 * (yy + xx), 0.0),
            (0.0, 0.0, 0.0, 1.0));
    }
}