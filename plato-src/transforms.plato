// Used for types that represent transformations in 3D space
interface ITransform3D
{
    // Transforms a point 
    Transform(x: Self, v: Vector3): Vector3;

    // Transforms a normal vector 
    TransformNormal(x: Self, v: Vector3): Vector3;

    // Returns a 4x4 matrix representation of the transformation. 
    Matrix(x: Self): Matrix4x4;
}

interface IRotationalTransform3D
    inherits ITransform3D
{
    Quaternion(x: Self): Quaternion;
}

type IdentityTransform3D
    implements IValue, ITransform3D
{
}

type MatrixTransform3D
    implements ITransform3D
{
    Matrix: Matrix4x4;
}

type Translation3D
    implements ITransform3D
{
    Translation: Vector3;
}

type Rotation3D
    implements IRotationalTransform3D
{
    Rotation: Quaternion;
}

type LookRotation
    implements IRotationalTransform3D
{
    Direction: Vector3;
    Up: Vector3;
}

type Scaling3D
    implements ITransform3D
{
    Scale: Vector3;
}

type TRSTransform3D
    implements ITransform3D
{
    Translation: Translation3D;
    Rotation: Rotation3D;
    Scale: Scaling3D;
}

// Also known as a Rigid Body Transform.
type Pose3D
    implements ITransform3D
{
    Translation: Translation3D;
    Rotation: Rotation3D;
}

type AxisAngle
    implements IRotationalTransform3D
{
    Axis: Vector3;
    Angle: Angle;
}

type EulerAngles
    implements IRotationalTransform3D
{
    Yaw: Angle;
    Pitch: Angle;
    Roll: Angle;
}

type Perspective3D
    implements ITransform3D
{
    FOV: Angle;
    AspectRatio: Number;
    Near: Number;
    Far: Number;
}

type Orthographic3D
    implements ITransform3D
{
    Width: Number;
    Height: Number;
    Near: Number;
    Far: Number;
}

type PlaneProjection
    implements ITransform3D
{
    Direction: Vector3;
    Plane: Plane;
}    

library Transforms
{            
    //==
    // General ITransform3D helpers

    Matrix4x4(t: ITransform3D): Matrix4x4
		=> t.Matrix;

    Transform(t: ITransform3D, v: Vector3): Vector3
		=> v.Transform(t.Matrix);

    TransformNormal(t: ITransform3D, v: Vector3): Vector3
        => v.TransformNormal(t.Matrix);
  
    Inverse(t: ITransform3D): ITransform3D
        => new MatrixTransform3D(t.Matrix.Invert);

    //==
    // General IRotationalTransform3D helpers

    Matrix(r: IRotationalTransform3D): Matrix4x4
        => r.Quaternion.Matrix;

    Transform(r: IRotationalTransform3D, v: Vector3): Vector3
		=> v.Transform(r.Quaternion);

    TransformNormal(r: IRotationalTransform3D, v: Vector3): Vector3
        => v.TransformNormal(r.Quaternion);
  
    Inverse(r: IRotationalTransform3D): IRotationalTransform3D
        => new Rotation3D(r.Quaternion.Inverse);

    //==
    // Vector2 functions
    
    Line(a: Vector2, b: Vector2): Line2D 
        => (a, b);
    
    Ray(a: Vector2, b: Vector2): Ray2D 
        => (a, b);
    
    RayTo(a: Vector2, b: Vector2): Ray2D 
        => (a, b - a);
    
    Vector3(v: Vector2): Vector3 
        => v.Vector3(0);
    
    Vector3(v: Vector2, z: Number): Vector3 
        => (v.X, v.Y, z);
    
    //==
    // Vector3 Functions 

    XZY(v: Vector3): Vector3 => (v.X, v.Z, v.Y);    
    YXZ(v: Vector3): Vector3 => (v.Y, v.X, v.Z);    
    YZX(v: Vector3): Vector3 => (v.Y, v.Z, v.X);    
    ZXY(v: Vector3): Vector3 => (v.Z, v.X, v.Y);    
    ZYX(v: Vector3): Vector3 => (v.Z, v.Y, v.X);    

    XY(v: Vector3): Vector2 => (v.X, v.Y);    
    YX(v: Vector3): Vector2 => (v.Y, v.X);
    XZ(v: Vector3): Vector2 => (v.X, v.Z);
    ZX(v: Vector3): Vector2 => (v.Z, v.X);
    YZ(v: Vector3): Vector2 => (v.Y, v.Z);
    ZY(v: Vector3): Vector2 => (v.Z, v.Y);

    Line(a: Vector3, b: Vector3): Line3D 
        => (a, b);
    
    Ray(a: Vector3, b: Vector3): Ray3D 
        => (a, b);
    
    RayTo(a: Vector3, b: Vector3): Ray3D 
        => (a, b - a);
    
    Project(v: Vector3, p: Plane): Vector3 
        => v - p.Normal * p.Normal.Dot(v);
    
    To2D(v: Vector3): Vector2 
        => (v.X, v.Y);
    
    MixedProduct(a: Vector3, b: Vector3, c: Vector3): Number 
        => a.Cross(b).Dot(c);
    
    Vector4(v: Vector3): Vector4 
        => v.Vector4(0);

    Vector4(v: Vector3, w: Number): Vector4 
        => (v.X, v.Y, v.Z, w);

    //==
    // Vector 4 functions 

    Vector3(v: Vector4): Vector3 
        => (v.X, v.Y, v.Z);
    
    XYZ(v: Vector4): Vector3 
        => v.Vector3;

    //==
    // Generic vector functions
    
    MidPoint(a: IVector, b: IVector): Vector2 
        => (a + b) / 2.0;

    Length(a: IVector): Number 
        => a.Magnitude;
    
    LengthSquared(a: IVector): Number 
        => a.MagnitudeSquared;
    
    Sum(v: IVector): Number 
        => v.Reduce(0.0, (a, b) => a + b);
    
    SumSquares(v: IVector): Number 
        => v.Square.Sum;   
    
    MagnitudeSquared(v: IVector): Number 
        => v.SumSquares;    
    
    Magnitude(v: IVector): Number 
        => v.MagnitudeSquared.SquareRoot;    
    
    Dot(v1: IVector, v2: IVector): Number 
        => (v1 * v2).Sum;  
    
    Normalize(x: IVector): IVector 
        => x.MagnitudeSquared > 0 ? x / x.Magnitude : x.Zero;
    
    Reflect(v: IVector, normal: IVector): IVector 
        => v - normal * v.Dot(normal) * 2.0;
    
    Project(v: IVector, other: IVector): IVector 
        => other * v.Dot(other);
    
    Distance(a: IVector, b: IVector): Number 
        => (b - a).Magnitude;
    
    DistanceSquared(a: IVector, b: IVector): Number 
        => (b - a).MagnitudeSquared;
    
    Angle(a: IVector, b: IVector): Angle 
        => (a.Dot(b) / (a.Magnitude * b.Magnitude)).Acos;     
    
    IsParallel(a: IVector, b: IVector): Boolean 
        => a.Dot(b).Abs > (1.0 - Epsilon);

    //==
    // Matrix operations   

    M11(m: Matrix4x4): Number => m.Row1.X;
    M12(m: Matrix4x4): Number => m.Row1.Y;
    M13(m: Matrix4x4): Number => m.Row1.Z;
    M14(m: Matrix4x4): Number => m.Row1.W;

    M21(m: Matrix4x4): Number => m.Row2.X;
    M22(m: Matrix4x4): Number => m.Row2.Y;
    M23(m: Matrix4x4): Number => m.Row2.Z;
    M24(m: Matrix4x4): Number => m.Row2.W;
    
    M31(m: Matrix4x4): Number => m.Row3.X;
    M32(m: Matrix4x4): Number => m.Row3.Y;
    M33(m: Matrix4x4): Number => m.Row3.Z;
    M34(m: Matrix4x4): Number => m.Row3.W;
    
    M41(m: Matrix4x4): Number => m.Row4.X;
    M42(m: Matrix4x4): Number => m.Row4.Y;
    M43(m: Matrix4x4): Number => m.Row4.Z;
    M44(m: Matrix4x4): Number => m.Row4.W;

    Column1(m: Matrix4x4): Vector4 => (M11, M21, M31, M41);
    Column2(m: Matrix4x4): Vector4 => (M12, M22, M32, M42);
    Column3(m: Matrix4x4): Vector4 => (M13, M23, M33, M43);
    Column4(m: Matrix4x4): Vector4 => (M14, M24, M34, M44);
 
    WithTranslation(m: Matrix4x4, v: Vector3): Matrix4x4
        => m.WithRow4(v.X, v.Y, v.Z, 1.0);
                
    Translation(m: Matrix4x4): Vector3
        => (m.M14, m.M24, m.M34);

    Transform(m: Matrix4x4, v: Vector3): Vector3
        => v.Transform(m);
    
    TransformNormal(m: Matrix4x4, v: Vector3): Vector3
        => v.TransformNormal(m);

    Multiply(m: Matrix4x4, v: Vector3): Vector3
        => m.Transform(v);

    //==
    // Quaternion functions

    Transform(q: Quaternion, v: Vector3): Vector3
        => v.Transform(q);
    
    Multiply(q: Quaternion, v: Vector3): Vector3
        => q.Transform(v);

    Matrix4x4(q: Quaternion): Matrix4x4
        => Matrix4x4.CreateFromQuaternion(q);

    //==
    // Translation3D functions

    Matrix(t: Translation3D): Matrix4x4
        => Matrix4x4.CreateTranslation(t.Translation);

    Transform(t: Translation3D, v: Vector3): Vector3
        => v + t.Translation;
    
    TransformNormal(t: Translation3D, v: Vector3): Vector3
        => v;
        
    //==
    // IdentityTransform3D

    Matrix(t: IdentityTransform3D): Matrix4x4
		=> Matrix4x4.Identity;

	Transform(t: IdentityTransform3D, v: Vector3): Vector3
		=> v;

	TransformDirection(t: IdentityTransform3D, v: Vector3): Vector3
		=> v;

    IdentityTransform3D(): IdentityTransform3D
        => new IdentityTransform3D();
    
    //==
    // MatrixTransform3D

    Transform(t: MatrixTransform3D, v: Vector3): Vector3
        => v.Transform(t.Matrix);

    TransformNormal(t: MatrixTransform3D, v: Vector3): Vector3
        => v.TransformNormal(t.Matrix);

    //==
    // Rotation3D

    Quaternion(r: Rotation3D): Quaternion
        => r.Rotation;

    RotateX(a: Angle): Rotation3D
        => Quaternion.CreateFromAxisAngle(Vector3.UnitX, a);

    RotateY(a: Angle): Rotation3D
        => Quaternion.CreateFromAxisAngle(Vector3.UnitY, a);

    RotateZ(a: Angle): Rotation3D
        => Quaternion.CreateFromAxisAngle(Vector3.UnitZ, a);  

    //==
    // LookRotation

    Matrix(r: LookRotation): Matrix4x4
        => Matrix4x4.CreateWorld((0.0, 0.0, 0.0), r.Direction, r.Up);

    Quaternion(r: LookRotation): Quaternion
        => Quaternion.CreateFromRotationMatrix(r.Matrix);

    //==
    // Scaling3D

    Matrix(s: Scaling3D): Matrix4x4
        => Matrix4x4.CreateScale(s.Scale.X, s.Scale.Y, s.Scale.Z);           

    UniformScaling3D(x: Number): Scaling3D
        => (x, x, x);

    //==
    // TRSTransform3D

	Matrix(t: TRSTransform3D): Matrix4x4
		=> t.Translation.Matrix * t.Rotation.Matrix * t.Scale.Matrix;

    //==
    // Pose3D

    Matrix(p: Pose3D): Matrix4x4
        => p.Translation.Matrix * p.Rotation.Matrix;

    TRSTransform3D(p: Pose3D): TRSTransform3D
        => (p.Translation, p.Rotation, (1.0, 1.0, 1.0));

    //==
    // AxisAngle

    Quaternion(aa: AxisAngle): Quaternion
	    => Quaternion.CreateFromAxisAngle(aa.Axis, aa.Angle);

    //==
    // EulerAngles

    Quaternion(e: EulerAngles): Quaternion
        => Quaternion.CreateFromYawPitchRoll(e.Yaw, e.Pitch, e.Roll);

    //==
    // Perspective3D

    Matrix(p: Perspective3D): Matrix4x4
        => Matrix4x4.CreatePerspectiveFieldOfView(p.FOV, p.AspectRatio, p.Near, p.Far);

    //==
    // Orthographic3D

    Matrix(o: Orthographic3D): Matrix4x4
        => Matrix4x4.CreateOrthographic(o.Width, o.Height, o.Near, o.Far);

    //==
    // Plane projection

    Matrix(pp: PlaneProjection): Matrix4x4
        => Matrix4x4.CreateShadow(pp.Direction, pp.Plane);
}