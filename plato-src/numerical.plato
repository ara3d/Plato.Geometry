library Numerical
{
    PlusOne(x: IVectorSpace): IVectorSpace 
        => x + One;

    MinusOne(x: IVectorSpace): IVectorSpace 
        => x - One;    

    FromOne(x: IVectorSpace): IVectorSpace 
        => -x + One;

    Component(x: IVectorSpace, n: Integer): Number
        => x.Components[n];

    MaxComponent(x: IVectorSpace): Number
    {
        var r = x.Component(0);
        for (var i = 1; i < NumComponents; i = i + 1)
            r = r.Max(x.Component(i));
        return r;
    }

    MinComponent(x: IVectorSpace): Number
    {
        var r = x.Component(0);
        for (var i = 1; i < NumComponents; i = i + 1)
            r = r.Min(x.Component(i));
        return r;
    }

    MapComponents(x: IVectorSpace, f: Function1<Number, Number>): IVectorSpace
        => Self.CreateFromComponents(x.Components.Map(f));

    ZipComponents(a: IVectorSpace, b: IVectorSpace, f: Function2<Number, Number, Number>): IVectorSpace
        => Self.CreateFromComponents(a.Components.Zip(b.Components, f));

    ZipComponents(a: IVectorSpace, b: IVectorSpace, c: IVectorSpace, f: Function3<Number, Number, Number, Number>): IVectorSpace
        => Self.CreateFromComponents(a.Components.Zip(b.Components, c.Components, f));

    AllZipComponents(a: IVectorSpace, b: IVectorSpace, f: Function2<Number, Number, Boolean>): Boolean
        => a.Components.Zip(b.Components, f).All(x => x);

    AllZipComponents(a: IVectorSpace, b: IVectorSpace, c: IVectorSpace, f: Function3<Number, Number, Number, Boolean>): Boolean
        => a.Components.Zip(b.Components, c.Components, f).All(x => x);

    AnyZipComponents(a: IVectorSpace, b: IVectorSpace, f: Function2<Number, Number, Boolean>): Boolean
        => a.Components.Zip(b.Components, f).Any(x => x);

    AnyZipComponents(a: IVectorSpace, b: IVectorSpace, c: IVectorSpace, f: Function3<Number, Number, Number, Boolean>): Boolean
        => a.Components.Zip(b.Components, c.Components, f).Any(x => x);

    AllComponents(x: IVectorSpace, predicate: Function1<Number, Boolean>): Boolean
		=> x.Components.All(predicate);

    AnyComponent(x: IVectorSpace, predicate: Function1<Number, Boolean>): Boolean
		=> x.Components.Any(predicate);

    Clamp(x: IVectorSpace, a: IVectorSpace, b: IVectorSpace): IVectorSpace
        => x.ZipComponents(a, b, (x0, a0, b0) => x0.Clamp(a0, b0));
    
    InversePow(x: IVectorSpace, n: IVectorSpace): IVectorSpace 
        => x.Pow(n.Reciprocal);
    
    Floor(x: IVectorSpace): IVectorSpace
        => x.MapComponents(x0 => x0.Floor);
    
    Fract(x: IVectorSpace): IVectorSpace 
        => x - x.Floor;

    Pow2(x: INumerical): INumerical
        => x * x;
    
    Pow3(x: INumerical): INumerical 
        => x.Pow2 * x;
    
    Pow4(x: INumerical): INumerical 
        => x.Pow3 * x;
    
    Pow5(x: INumerical): INumerical 
        => x.Pow4 * x;
    
    Sqr(x: INumerical): INumerical
        => x.Pow2;
        
    Cube(x: INumerical): INumerical 
        => x.Pow3;    
    
    ClampZeroOne(x: IVectorSpace): IVectorSpace
        => x.Clamp(Zero, One);

    Between(x: IVectorSpace, a: IVectorSpace, b: IVectorSpace): Boolean
        => x.AllZipComponents(a, b, (x0, a0, b0) => x0.Between(a0, b0));

    BetweenZeroOne(x: IVectorSpace): Boolean
        => x.Between(Zero, One);

    // Mapped functions

    Sqrt(x: IVectorSpace): IVectorSpace 
        => x.MapComponents((n) => n.Sqrt);

    Pow(x: IVectorSpace, y: IVectorSpace): IVectorSpace 
        => x.ZipComponents(y, (a, b) => a.Pow(b));   
        
    Reciprocal(x: IVectorSpace): IVectorSpace
        => x.MapComponents((n) => n.Reciprocal);
}