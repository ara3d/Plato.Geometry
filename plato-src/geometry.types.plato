


//# 2D Shapes

type Transform2D
    implements IValue
{
    Translation: Vector2D;
    Rotation: Angle;
    Scale: Vector2D;
}

type Pose2D
    implements IValue
{
    Position: Vector2D;
    Rotation: Angle;
}

// Axis-Aligned bounding box 
type Bounds2D
    implements IBounds<Vector2D>
{
    Min: Vector2D;
    Max: Vector2D;
}

type Ray2D
    implements IValue
{
    Origin: Vector2D;
    Direction: Vector2D;
}

type Triangle2D
    implements IPolygon2D
{
    A: Vector2D;
    B: Vector2D;
    C: Vector2D;
}

type Quad2D
    implements IPolygon2D
{
    A: Vector2D;
    B: Vector2D;
    C: Vector2D;
    D: Vector2D;
}

// A line segment in 2D.
type Line2D
    implements IPolyLine2D, IOpenShape2D, IArray<Vector2D>, IInterval<Vector2D>
{
    A: Vector2D;
    B: Vector2D;
}

// https://en.wikipedia.org/wiki/Lens_(geometry)
type Lens
    implements IClosedShape2D
{
    A: Circle;
    B: Circle;
}

type Rect2D
    implements IPolygon2D
{
    Center: Vector2D;
    Size: Vector2D;
}

type Ring
    implements IClosedShape2D
{
    Center: Vector2D;
    InnerRadius: Number;
    OuterRadius: Number;
}

type Arc
    implements IOpenShape2D
{
    Angles: AnglePair;
    Circle: Circle;
}

type Sector
    implements IClosedShape2D
{
    Arc: Arc;
}

type Chord
    implements IClosedShape2D
{       
    Arc: Arc;
}

type Segment
    implements IClosedShape2D
{
    Arc: Arc;
}

type RegularPolygon
    implements IPolygon2D
{
    NumPoints: Integer;
}

type Box2D
    implements IShape2D
{
    Center: Vector2D;
    Rotation: Angle;
    Extent: Vector2D;
}

//==
// 3D Types
//==

// An infinite plane. 
type Plane
    implements IValue
{
    Normal: Vector3D;
    D: Number;
}

// Axis-Aligned bounding box 
type Bounds3D
    implements IBounds<Vector3D>, IDeformable3D
{
    Min: Vector3D;
    Max: Vector3D;
}

// A line segment in 3D.
type Line3D 
    implements IPolyLine3D, IOpenShape3D, IDeformable3D, IArray<Vector3D>, IInterval<Vector3D>
{
    A: Vector3D;
    B: Vector3D;
}

type Ray3D
    implements IValue, IDeformable3D
{
    Origin: Vector3D;
    Direction: Vector3D;
}

//==
// 3D Curves 
//== 

type Triangle3D
    implements IPolygon3D, IDeformable3D
{
    A: Vector3D;
    B: Vector3D;
    C: Vector3D;
}

type Quad3D
    implements IPolygon3D, IDeformable3D
{
    A: Vector3D;
    B: Vector3D;
    C: Vector3D;
    D: Vector3D;
}

//==
// 3D Solids 
// These are all assumed to be centered at the origin.
//==

type Sphere
    implements ISolid
{
    Radius: Number;
}

type Cylinder
    implements ISurface
{
    Height: Number;
    Radius: Number;
}

type Capsule
    implements ISolid
{
    Height: Number;
    Radius: Number;
}

type Cone
    implements ISolid
{
    Height: Number;
    Radius: Number;
}

type ConeSegment
    implements ISolid
{
    Height: Number;
    Radius1: Number;
    Radius2: Number;
}

type Box3D
    implements ISolid
{
    Extent: Vector3D; 
}

type Pyramid
    implements ISolid
{
    Height: Number;
    BaseLength: Number;
}

type Torus
    implements ISolid
{
    MajorRadius: Number;
    MinorRadius: Number;
}

type NPrism
    implements ISolid
{
    Height: Number;
    Radius: Number;
    NumSides: Integer;
}

type Tube
    implements ISolid
{
    Height: Number;
    InnerRadius: Number;
    OuterRadius: Number;
}

type NPyramid
    implements ISolid
{
    Height: Number;
    Radius: Number;
    NumSides: Integer;
}

type Ellipsoid
    implements ISolid
{
    Radii: Vector3D;
}



//==
// Meshes and 3D primitive collections
//==

type LineMesh3D
    implements ILineMesh3D
{ 
    Points: IArray<Vector3D>;
    Indices: IArray<Integer>;
}

type TriangleMesh3D
    implements ITriangleMesh3D
{ 
    Points: IArray<Vector3D>;
    Indices: IArray<Integer>;
}

type QuadMesh3D
    implements IQuadMesh3D
{   
    Points: IArray<Vector3D>;
    Indices: IArray<Integer>;
}

type PolyLine2D
    implements IPolyLine2D
{
    Points: IArray<Vector2D>;
    Closed: Boolean;
}

type PolyLine3D
    implements IPolyLine3D
{
    Points: IArray<Vector3D>;
    Closed: Boolean;
}

type PointArray2D
    implements IPointArray2D
{
	Points: IArray<Vector2D>;
}

type PointArray3D
	implements IPointArray3D 
{
	Points: IArray<Vector3D>;
}

type LineArray2D
    implements ILineArray2D
{ 
    Lines: IArray<Line2D>;
}

type LineArray3D
    implements ILineArray3D
{ 
    Lines: IArray<Line3D>;
}

type TriangleArray2D
    implements ITriangleArray2D
{ 
    Triangles: IArray<Triangle2D>;
}

type TriangleArray3D
    implements ITriangleArray3D
{ 
    Triangles: IArray<Triangle3D>;
}

type QuadArray2D
    implements IQuadArray2D
{ 
    Quads: IArray<Quad2D>;
}

type QuadArray3D
    implements IQuadArray3D
{ 
    Quads: IArray<Quad3D>;
}

type QuadGrid3D
	implements IQuadGrid3D
{
	PointGrid: IArray2D<Vector3D>;
	ClosedX: Boolean;
    ClosedY: Boolean;
}
