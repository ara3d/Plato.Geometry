
//# 2D Shapes

type Transform2D
    implements IValue
{
    Translation: Vector2;
    Rotation: Angle;
    Scale: Vector2;
}

type Pose2D
    implements IValue
{
    Position: Vector2;
    Rotation: Angle;
}

// Axis-Aligned bounding box 
type Bounds2D
    implements IBounds<Vector2>
{
    Min: Vector2;
    Max: Vector2;
}

type Ray2D
    implements IValue
{
    Origin: Vector2;
    Direction: Vector2;
}

type Triangle2D
    implements IPolygon2D
{
    A: Vector2;
    B: Vector2;
    C: Vector2;
}

type Quad2D
    implements IPolygon2D
{
    A: Vector2;
    B: Vector2;
    C: Vector2;
    D: Vector2;
}

// A line segment in 2D.
type Line2D
    implements IPolyLine2D, IOpenShape2D, IInterval<Vector2>
{
    A: Vector2;
    B: Vector2;
}

// https://en.wikipedia.org/wiki/Lens_(geometry)
type Lens
    implements IClosedShape2D
{
    A: Circle;
    B: Circle;
}

type Rect2D
    implements IPolygon2D
{
    Center: Vector2;
    Size: Vector2;
}

type Ring
    implements IClosedShape2D
{
    Center: Vector2;
    InnerRadius: Number;
    OuterRadius: Number;
}

type Arc
    implements IOpenShape2D
{
    Angles: AnglePair;
    Circle: Circle;
}

type Sector
    implements IClosedShape2D
{
    Arc: Arc;
}

type Chord
    implements IClosedShape2D
{       
    Arc: Arc;
}

type Segment
    implements IClosedShape2D
{
    Arc: Arc;
}

type RegularPolygon
    implements IPolygon2D
{
    NumPoints: Integer;
}

type Box2D
    implements IShape2D
{
    Center: Vector2;
    Rotation: Angle;
    Extent: Vector2;
}

//==
// 3D Types
//==

// An infinite plane. 
type Plane
    implements IValue
{
    Normal: Vector3;
    D: Number;
}

// Axis-Aligned bounding box 
type Bounds3D
    implements IBounds<Vector3>, IDeformable3D
{
    Min: Vector3;
    Max: Vector3;
}

// A line segment in 3D.
type Line3D 
    implements IPolyLine3D, IOpenShape3D, IDeformable3D, IArray<Vector3>, IInterval<Vector3>
{
    A: Vector3;
    B: Vector3;
}

type Ray3D
    implements IValue, IDeformable3D
{
    Origin: Vector3;
    Direction: Vector3;
}

//==
// 3D Curves 
//== 

type Triangle3D
    implements IPolygon3D, IDeformable3D
{
    A: Vector3;
    B: Vector3;
    C: Vector3;
}

type Quad3D
    implements IPolygon3D, IDeformable3D
{
    A: Vector3;
    B: Vector3;
    C: Vector3;
    D: Vector3;
}
