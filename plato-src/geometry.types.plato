//# 2D Shapes

type Transform2D
    implements IValue
{
    Translation: Vector2D;
    Rotation: Angle;
    Scale: Vector2D;
}

type Pose2D
    implements IValue
{
    Position: Vector2D;
    Orientation: Angle;
}

// Axis-Aligned bounding box 
type Bounds2D
    implements IInterval<Vector2D>
{
    Min: Vector2D;
    Max: Vector2D;
}

type Ray2D
    implements IValue
{
    Direction: Vector2D;
    Origin: Vector2D;
}

type Triangle2D
    implements IValue, IArray<Vector2D>
{
    A: Vector2D;
    B: Vector2D;
    C: Vector2D;
}

type Quad2D
    implements IValue, IArray<Vector2D>
{
    A: Vector2D;
    B: Vector2D;
    C: Vector2D;
    D: Vector2D;
}

type Line2D
    implements IPolyLine2D, IArray<Vector2D>
{
    A: Vector2D;
    B: Vector2D;
}

type Circle
    implements IClosedShape2D
{
    Center: Vector2D;
    Radius: Number;
}

// https://en.wikipedia.org/wiki/Lens_(geometry)
type Lens
    implements IClosedShape2D
{
    A: Circle;
    B: Circle;
}

type Rect2D
    implements IPolygon2D
{
    Center: Vector2D;
    Size: Size2D;
}

type Ellipse
    implements ICurve2D
{
    Center: Vector2D;
    Size: Size2D;
}

type Ring
    implements IClosedShape2D
{
    Center: Vector2D;
    InnerRadius: Number;
    OuterRadius: Number;
}

type Arc
    implements IOpenShape2D
{
    Angles: AnglePair;
    Circle: Circle;
}

type Sector
    implements IClosedShape2D
{
    Arc: Arc;
}

type Chord
    implements IClosedShape2D
{
    Arc: Arc;
}

type Segment
    implements IClosedShape2D
{
    Arc: Arc;
}

type RegularPolygon
    implements IPolygon2D
{
    NumPoints: Integer;
}

type Box2D
    implements IShape2D
{
    Center: Vector2D;
    Rotation: Angle;
    Extent: Size2D;
}

//# 3D Shapes

type Sphere
    implements IValue
{
    Center: Vector3D;
    Radius: Number;
}

type Plane
    implements IValue
{
    Normal: Vector3D;
    D: Number;
}


type Transform3D
    implements IValue
{
    Translation: Vector3D;
    Rotation: Rotation3D;
    Scale: Vector3D;
}

type Pose3D
    implements IValue
{
    Position: Vector3D;
    Orientation: Orientation3D;
}

type Frame3D
{
    Forward: Vector3D;
    Up: Vector3D;
    Right: Vector3D;
}

// Axis-Aligned bounding box 
type Bounds3D
    implements IInterval<Vector3D>
{
    Min: Vector3D;
    Max: Vector3D;
}

type Line3D
    implements IPolyLine3D, IArray<Vector3D>
{
    A: Vector3D;
    B: Vector3D;
}

type Ray3D
    implements IValue
{
    Direction: Vector3D;
    Position: Vector3D;
}

type Triangle3D
    implements IValue, IArray<Vector3D>
{
    A: Vector3D;
    B: Vector3D;
    C: Vector3D;
}

type Quad3D
    implements IValue, IArray<Vector3D>
{
    A: Vector3D;
    B: Vector3D;
    C: Vector3D;
    D: Vector3D;
}

type Capsule
    implements IShape3D
{
    Line: Line3D;
    Radius: Number;
}

type Cylinder
    implements IShape3D
{
    Line: Line3D;
    Radius: Number;
}

type Cone
    implements IShape3D
{
    Line: Line3D;
    Radius: Number;
}

type Tube
    implements IShape3D
{
    Line: Line3D;
    InnerRadius: Number;
    OuterRadius: Number;
}

type ConeSegment
    implements IShape3D
{
    Line: Line3D;
    Radius1: Number;
    Radius2: Number;
}

type Box3D
    implements IShape3D
{
    Center: Vector3D;
    Rotation: Rotation3D;
    Extent: Size3D;
}

// https://en.wikipedia.org/wiki/B%C3%A9zier_curve    
type CubicBezier2D
    implements IArray<Vector2D>
{
    A: Vector2D;
    B: Vector2D;
    C: Vector2D;
    D: Vector2D;
}   

// https://en.wikipedia.org/wiki/B%C3%A9zier_curve
type CubicBezier3D
    implements IArray<Vector3D>
{
    A: Vector3D;
    B: Vector3D;
    C: Vector3D;
    D: Vector3D;
}

// https://en.wikipedia.org/wiki/B%C3%A9zier_curve
type QuadraticBezier2D
    implements IArray<Vector2D>
{
    A: Vector2D;
    B: Vector2D;
    C: Vector2D;
}

// https://en.wikipedia.org/wiki/B%C3%A9zier_curve
type QuadraticBezier3D
    implements IArray<Vector3D>
{
    A: Vector3D;
    B: Vector3D;
    C: Vector3D;
}

//==
// 3D Rotation 
//==

type Quaternion
    implements IValue 
{
    X: Number;
    Y: Number;
    Z: Number;
    W: Number;
}

type AxisAngle
    implements IValue
{
    Axis: Vector3D;
    Angle: Angle;
}

type EulerAngles
    implements IValue
{
    Yaw: Angle;
    Pitch: Angle;
    Roll: Angle;
}

type Rotation3D
    implements IValue
{
    Quaternion: Quaternion;
}

type Orientation3D
    implements IValue
{
    IValue: Rotation3D;
}

//==
// 4D Shapes 
//==

type Line4D
    implements IValue, IArray<Vector4D>
{
    A: Vector4D;
    B: Vector4D;
}
