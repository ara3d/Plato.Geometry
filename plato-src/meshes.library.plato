library Meshes
{
    //==
    // # Primitives

    NumPrimitives(g: IIndexedGeometry): Integer => g.Indices.Count / g.PrimitiveSize;
    PrimitiveSize(g: IPointGeometry): Integer => 1;
    PrimitiveSize(g: ILineGeometry): Integer => 2;
    PrimitiveSize(g: ITriangleGeometry): Integer => 3;
    PrimitiveSize(g: IQuadGeometry): Integer => 4;
        
    //== 
    // # Indices of geometry arrays

    Indices(x: IPointArray2D): IArray<Integer> => x.Points.Indices();
    Indices(x: IPointArray3D): IArray<Integer> => x.Points.Indices();
    Indices(x: ILineArray2D): IArray<Integer> => x.Points.Indices();
    Indices(x: ILineArray3D): IArray<Integer> => x.Points.Indices();
    Indices(x: ITriangleArray2D): IArray<Integer> => x.Points.Indices();
    Indices(x: ITriangleArray3D): IArray<Integer> => x.Points.Indices();
    Indices(x: IQuadArray2D): IArray<Integer> => x.Points.Indices();
    Indices(x: IQuadArray3D): IArray<Integer> => x.Points.Indices();
       
    FaceIndices(x: ILineGeometry): IArray<Integer2> => ArrayHelpers.Integer2Array(x.Indices);
    FaceIndices(x: ITriangleGeometry): IArray<Integer3> => ArrayHelpers.Integer3Array(x.Indices);
    FaceIndices(x: IQuadGeometry): IArray<Integer4> => ArrayHelpers.Integer4Array(x.Indices);

    // # Implicit cast functions for meshes 

    LineMesh3D(g: ITriangleMesh3D): LineMesh3D => (g.Points, g.FaceIndices.FlatMap(a => [a[0], a[1], a[1], a[2], a[2], a[0]]));
    LineMesh3D(g: IQuadMesh3D): LineMesh3D => (g.Points, g.FaceIndices.FlatMap(a => [a[0], a[1], a[1], a[2], a[2], a[3], a[3], a[0]]));

    LineArray2D(t: Triangle2D): LineArray2D => new LineArray2D(t.Lines);
    LineArray2D(q: Quad2D): LineArray2D => new LineArray2D(q.Lines);
    LineArray3D(t: Triangle3D): LineArray3D => new LineArray3D(t.Lines);
    LineArray3D(q: Quad3D): LineArray3D => new LineArray3D(q.Lines);

    TriangleArray2D(t: Triangle2D): TriangleArray2D => new TriangleArray2D([t]);
    TriangleArray3D(t: Triangle3D): TriangleArray3D => new TriangleArray3D([t]);
    TriangleArray2D(q: Quad2D): TriangleArray2D => new TriangleArray2D(q.Triangles);
    TriangleArray3D(q: Quad3D): TriangleArray3D => new TriangleArray3D(q.Triangles);
    TriangleArray3D(q: IQuadArray3D): TriangleArray3D => new TriangleArray3D(q.Triangles);

    QuadArray3D(q: Quad3D): QuadArray3D => new QuadArray3D([q]);
    QuadMesh3D(self: IQuadArray3D): QuadMesh3D => (self.Points, self.Points.Indices()); 

    TriangleMesh3D(g: Triangle3D): TriangleMesh3D => g.TriangleArray3D;
    TriangleMesh3D(g: Quad3D): TriangleMesh3D => g.TriangleArray3D;
    TriangleMesh3D(g: ITriangleArray3D): TriangleMesh3D => (g.Points, g.Points.Indices());
    TriangleMesh3D(g: IQuadArray3D): TriangleMesh3D => g.TriangleArray3D;
    TriangleMesh3D(g: IQuadMesh3D): TriangleMesh3D => (g.Points, g.FaceIndices.FlatMap(a => [a[0], a[1], a[2], a[2], a[3], a[0]]));  

    //==
    // # IndexedGeometry

    Faces(g: ITriangleMesh2D): IArray<Triangle2D> => g.Triangles; 
    Faces(g: ITriangleMesh3D): IArray<Triangle3D> => g.Triangles; 
    Faces(g: IQuadMesh2D): IArray<Quad2D> => g.Quads; 
    Faces(g: IQuadMesh3D): IArray<Quad3D> => g.Quads; 

    NumFaces(g: IIndexedGeometry): Integer => g.NumPrimitives;
    
    Vertex(g: IIndexedGeometry2D, n: Integer): Vector2 => g.Points[g.Indices[n]];
    Vertex(g: IIndexedGeometry3D, n: Integer): Vector3 => g.Points[g.Indices[n]];

    FaceVertices(g: IIndexedGeometry2D, f: Integer): IArray<Vector2> => g.FaceIndices.At(f).Components.Map(i => g.Vertex(i));
    FaceVertices(g: IIndexedGeometry3D, f: Integer): IArray<Vector3> => g.FaceIndices.At(f).Components.Map(i => g.Vertex(i));

    AllFaceIndices(g: IIndexedGeometry): IArray2D<Integer> => g.Indices.Slices(g.PrimitiveSize);

    AllFaceVertices(g: IIndexedGeometry2D): IArray2D<Vector2> => g.AllFaceIndices.Map(x => g.Vertex(x));
    AllFaceVertices(g: IIndexedGeometry3D): IArray2D<Vector3> => g.AllFaceIndices.Map(x => g.Vertex(x));
    
    Vertices(g: IIndexedGeometry2D, xs: IArray<Integer>): IArray<Vector2> => xs.Map(i => g.Vertex(i));
    Vertices(g: IIndexedGeometry3D, xs: IArray<Integer>): IArray<Vector3> => xs.Map(i => g.Vertex(i));
    
    AllVertices(g: IIndexedGeometry2D): IArray<Vector2> => g.Vertices(g.Indices);
    AllVertices(g: IIndexedGeometry3D): IArray<Vector3> => g.Vertices(g.Indices);     

    Lines(x: ILineMesh2D): IArray<Line2D> => x.AllFaceVertices.Map(xs => new Line2D(xs[0], xs[1]));
    Lines(x: ILineMesh3D): IArray<Line3D> => x.AllFaceVertices.Map(xs => new Line3D(xs[0], xs[1]));

    Triangles(x: ITriangleMesh2D): IArray<Triangle2D> => x.AllFaceVertices.Map(xs => new Triangle2D(xs[0], xs[1], xs[2]));
    Triangles(x: ITriangleMesh3D): IArray<Triangle3D> => x.AllFaceVertices.Map(xs => new Triangle3D(xs[0], xs[1], xs[2]));
    
    Quads(x: IQuadMesh2D): IArray<Quad2D> => x.AllFaceVertices.Map(xs => new Quad2D(xs[0], xs[1], xs[2], xs[3]));
    Quads(x: IQuadMesh3D): IArray<Quad3D> => x.AllFaceVertices.Map(xs => new Quad3D(xs[0], xs[1], xs[2], xs[3]));

    //==
    // Points, Lines, Triangles, and Quads implementations 

    Points(x: Line2D): IArray<Vector2> => [x.A, x.B];
    Points(x: Line3D): IArray<Vector3> => [x.A, x.B];
    Points(x: Triangle2D): IArray<Vector2> => [x.A, x.B, x.C];
    Points(x: Triangle3D): IArray<Vector3> => [x.A, x.B, x.C];
    Points(x: Quad2D): IArray<Vector2> => [x.A, x.B, x.C, x.D];
    Points(x: Quad3D): IArray<Vector3> => [x.A, x.B, x.C, x.D];

    Lines(x: Triangle2D): IArray<Line2D> => [new Line2D(x.A, x.B), new Line2D(x.B, x.C), new Line2D(x.C, x.A)];
    Lines(x: Triangle3D): IArray<Line3D> => [new Line3D(x.A, x.B), new Line3D(x.B, x.C), new Line3D(x.C, x.A)];
    Lines(x: Quad2D): IArray<Line2D> => [new Line2D(x.A, x.B), new Line2D(x.B, x.C), new Line2D(x.C, x.D), new Line2D(x.D, x.A)];
    Lines(x: Quad3D): IArray<Line3D> => [new Line3D(x.A, x.B), new Line3D(x.B, x.C), new Line3D(x.C, x.D), new Line3D(x.D, x.A)];

    Triangles(q: Quad2D): IArray<Triangle2D> => [new Triangle2D(q.A, q.B, q.C), new Triangle2D(q.C, q.D, q.A)];
    Triangles(q: Quad3D): IArray<Triangle3D> => [new Triangle3D(q.A, q.B, q.C), new Triangle3D(q.C, q.D, q.A)];

    // TODO: these functions can be combined if I support constrained or covariant generic parameters in functions. 
    Points(xs: IArray<Line2D>): IArray<Vector2> => xs.FlatMap(x => x.Points);
    Points(xs: IArray<Line3D>): IArray<Vector3> => xs.FlatMap(x => x.Points);
    Points(xs: IArray<Triangle2D>): IArray<Vector2> => xs.FlatMap(x => x.Points);
    Points(xs: IArray<Triangle3D>): IArray<Vector3> => xs.FlatMap(x => x.Points);
    Points(xs: IArray<Quad2D>): IArray<Vector2> => xs.FlatMap(x => x.Points);
    Points(xs: IArray<Quad3D>): IArray<Vector3> => xs.FlatMap(x => x.Points);

    Lines(xs: IArray<Line2D>): IArray<Line2D> => xs;
    Lines(xs: IArray<Line3D>): IArray<Line3D> => xs;
    Lines(xs: IArray<Triangle2D>): IArray<Line2D> => xs.FlatMap(x => x.Lines);
    Lines(xs: IArray<Triangle3D>): IArray<Line3D> => xs.FlatMap(x => x.Lines);
    Lines(xs: IArray<Quad2D>): IArray<Line2D> => xs.FlatMap(x => x.Lines);
    Lines(xs: IArray<Quad3D>): IArray<Line3D> => xs.FlatMap(x => x.Lines);

    Triangles(xs: IArray<Triangle2D>): IArray<Triangle2D> => xs;
    Triangles(xs: IArray<Triangle3D>): IArray<Triangle3D> => xs;
    Triangles(xs: IArray<Quad2D>): IArray<Triangle2D> => xs.FlatMap(x => x.Triangles);
    Triangles(xs: IArray<Quad3D>): IArray<Triangle3D> => xs.FlatMap(x => x.Triangles);
    
    Points(xs: ILineArray2D): IArray<Vector2> => xs.Lines.FlatMap(x => x.Points);
    Points(xs: ILineArray3D): IArray<Vector3> => xs.Lines.FlatMap(x => x.Points);
    Points(xs: ITriangleArray2D): IArray<Vector2> => xs.Triangles.FlatMap(x => x.Points);
    Points(xs: ITriangleArray3D): IArray<Vector3> => xs.Triangles.FlatMap(x => x.Points);
    Points(xs: IQuadArray2D): IArray<Vector2> => xs.Quads.FlatMap(x => x.Points);
    Points(xs: IQuadArray3D): IArray<Vector3> => xs.Quads.FlatMap(x => x.Points);

    Lines(xs: ITriangleArray2D): IArray<Line2D> => xs.Triangles.FlatMap(x => x.Lines);
    Lines(xs: ITriangleArray3D): IArray<Line3D> => xs.Triangles.FlatMap(x => x.Lines);
    Lines(xs: IQuadArray2D): IArray<Line2D> => xs.Quads.FlatMap(x => x.Lines);
    Lines(xs: IQuadArray3D): IArray<Line3D> => xs.Quads.FlatMap(x => x.Lines);

    Triangles(xs: IQuadArray2D): IArray<Triangle2D> => xs.Quads.FlatMap(x => x.Triangles);
    Triangles(xs: IQuadArray3D): IArray<Triangle3D> => xs.Quads.FlatMap(x => x.Triangles);

    Lines(xs: IPolyLine2D): IArray<Line2D> => xs.Points.WithNext((a, b) => new Line2D(a, b), xs.Closed); 
    Lines(xs: IPolyLine3D): IArray<Line3D> => xs.Points.WithNext((a, b) => new Line3D(a, b), xs.Closed); 
    
    ToLines(xs: IArray<Vector2>, ys: IArray<Vector2>): IArray<Line2D> => xs.Zip(ys, (a, b) => new Line2D(a, b));
    ToLines(xs: IArray<Vector3>, ys: IArray<Vector3>): IArray<Line3D> => xs.Zip(ys, (a, b) => new Line3D(a, b));     
    
    ClosedX(xs: ISolid): Boolean => true;
    ClosedY(xs: ISolid): Boolean => true;

    //==
    // IDeformable implementations 

    Deform(x: Line3D, f: Function1<Vector3, Vector3>): Line3D => (f(x.A), f(x.B));
    Deform(x: Ray3D, f: Function1<Vector3, Vector3>): Ray3D => (f(x.Origin), f(x.Origin + x.Direction).Normalize);
    Deform(t: Triangle3D, f: Function1<Vector3, Vector3>): Triangle3D => (f(t.A), f(t.B), f(t.C));
    Deform(q: Quad3D, f: Function1<Vector3, Vector3>): Quad3D => (f(q.A), f(q.B), f(q.C), f(q.D));
    Deform(v: Vector3, f: Function1<Vector3, Vector3>): Vector3 => f(v);
    Deform(x: LineMesh3D, f: Function1<Vector3, Vector3>): LineMesh3D => (x.Points.Map(f), x.Indices);
    Deform(x: TriangleMesh3D, f: Function1<Vector3, Vector3>): TriangleMesh3D => (x.Points.Map(f), x.Indices);
    Deform(x: QuadMesh3D, f: Function1<Vector3, Vector3>): QuadMesh3D => (x.Points.Map(f), x.Indices);
    Deform(x: PolyLine3D, f: Function1<Vector3, Vector3>): PolyLine3D => (x.Points.Map(f), x.Closed);
    Deform(x: LineArray3D, f: Function1<Vector3, Vector3>): LineArray3D => new LineArray3D(x.Lines.Map(l => l.Deform(f)));
    Deform(x: TriangleArray3D, f: Function1<Vector3, Vector3>): TriangleArray3D => new TriangleArray3D(x.Triangles.Map(t => t.Deform(f)));
    Deform(x: PointArray3D, f: Function1<Vector3, Vector3>): PointArray3D => new PointArray3D(x.Points.Map(f));
    Deform(x: QuadArray3D, f: Function1<Vector3, Vector3>): QuadArray3D => new QuadArray3D(x.Quads.Map(q => q.Deform(f)));
    Deform(x: QuadGrid3D, f: Function1<Vector3, Vector3>): QuadGrid3D => new QuadGrid3D(x.PointGrid.Map(f), x.ClosedX, x.ClosedY);
    Deform(x: Bounds3D, f: Function1<Vector3, Vector3>): Bounds3D => x.Corners.Map(f).Bounds();

    //==
    // Deformable functions

    Deform(x: IDeformable3D, t: ITransform3D): IDeformable3D => x.Deform(v => t.Transform(v));

    Translate(x: IDeformable3D, v: Vector3): IDeformable3D => x.Deform(p => p + v);
    Rotate(x: IDeformable3D, q: Quaternion): IDeformable3D => x.Deform(v => q.Transform(v));
    Scale(x: IDeformable3D, v: Vector3): IDeformable3D => x.Deform(p => p * v);
    Scale(x: IDeformable3D, s: Number): IDeformable3D => x.Deform(p => p * s);

    RotateX(x: IDeformable3D, a: Angle): IDeformable3D => x.Rotate(a.RotateX);
    RotateY(x: IDeformable3D, a: Angle): IDeformable3D => x.Rotate(a.RotateY);
    RotateZ(x: IDeformable3D, a: Angle): IDeformable3D => x.Rotate(a.RotateZ);

    TranslateX(x: IDeformable3D, s: Number): IDeformable3D => x.Deform(p => p + (s,0,0));   
    TranslateY(x: IDeformable3D, s: Number): IDeformable3D => x.Deform(p => p + (0,s,0));
    TranslateZ(x: IDeformable3D, s: Number): IDeformable3D => x.Deform(p => p + (0,0,s));

    ScaleX(x: IDeformable3D, s: Number): IDeformable3D => x.Deform(p => p * (s,1,1));
    ScaleY(x: IDeformable3D, s: Number): IDeformable3D => x.Deform(p => p * (1,s,1));
    ScaleZ(x: IDeformable3D, s: Number): IDeformable3D => x.Deform(p => p * (1,1,s));
 
    //==
    // QuadGrid3D

    NumColumns(x: QuadGrid3D): Integer => x.PointGrid.NumColumns;
    NumRows(x: QuadGrid3D): Integer => x.PointGrid.NumRows;
    Points(x: QuadGrid3D): IArray<Vector3> => x.PointGrid;
    Indices(x: QuadGrid3D): IArray<Integer> => x.PointGrid.AllQuadFaceIndices(x.ClosedX, x.ClosedY).FlatMap(x => x.Components);

    // d -- c
    // |    |
    // a -- b
    // Where a == (col,row), b == (col+1,row), c == (col+1,row+1), d == (col,row+1)
    QuadFaceIndices(col: Integer, row: Integer, nCols: Integer, nRows: Integer): Integer4
    {
        var a = (row * nCols) + col;
        var b = (row * nCols) + ((col + 1) % nCols);
        var c = (((row + 1) % nRows) * nCols) + ((col + 1) % nCols);
        var d = (((row + 1) % nRows) * nCols) + col;
        return (a, b, c, d);
    }

    AllQuadFaceIndices(xs: IArray2D<$T>, closedX: Boolean, closedY: Boolean): IArray2D<Integer4>
        => AllQuadFaceIndices(xs.NumColumns, xs.NumRows, closedX, closedY);

    AllQuadFaceIndices(nCols: Integer, nRows: Integer, closedX: Boolean, closedY: Boolean): IArray2D<Integer4>
    {
        var nx = nCols - (closedX ? 0 : 1);
        var ny = nRows - (closedY ? 0 : 1);
        return nx.MakeArray2D(ny, (col, row) => QuadFaceIndices(col, row, nCols, nRows));
    }
}