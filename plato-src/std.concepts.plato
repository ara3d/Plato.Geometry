// https://en.wikipedia.org/wiki/Top_type
// This is the Top Type in Plato. All types provide this. 
concept Any
{ 
    FieldNames(x: Self): Array<String>;     
    FieldValues(x: Self): Array<Dynamic>;
    TypeName(x: Self): String;
}

// A value is a read-only type which has the implicit rule that only Values are members
concept Value 
    inherits Any, Equatable
{ 
}

// A numerical type represents things like reals, integers, vectors, complex numbers, and measures.
// It is a generalization of real numbers to multiple dimensions, and with or without units of measure.
// The NumComponents function returns the dimensionality of the numerical type. 
// Individual components are returned via the Component type. 
concept Numerical 
    inherits Value, ScalarArithmetic, Additive
{
    Components(x: Self): Array<Number>;
    FromComponents(x: Self, xs: Array<Number>): Self;
}   

// These are things that can be converted to and from numbers. It includes measures, and reals.
// Whole numbers are not included because converting to/from a number would change the result.
concept NumberLike
    inherits Numerical, Orderable
{
	ToNumber(x: Self): Number;
    FromNumber(x: Self, n: Number): Self;
}

// Represents a continuous one dimensional value.
// https://en.wikipedia.org/wiki/Real_number
// The "Value" or a Real is the number itself, and is equal to the Magnitude  
concept Real
    inherits NumberLike, Algebraic, Arithmetic
{
}

// Used for integer and cardinal types. 
// Somewhat counter intuitively, they are not considered Numerical types.
// They do however support arithmetic operations.
concept WholeNumber 
    inherits Value, Orderable, Arithmetic
{
}

// A measure is a numeric value with an intrinisic unit of measure. 
// It resembles a Real except you cannot multiply or divide two measures without 
// getting a new type. It does however support Additive on itself.
concept Measure
    inherits NumberLike, Additive
{
}

// Vectors are specialization of the Numerical type.
// Unlike reals and measures they cannot be compared in any meaningful way 
// They are also "array-like" in that they have a fixed number of components.
concept Vector
    inherits Numerical, Arithmetic, Array<Number>
{ 
}

// A coordinate is a point in some space (e.g., a cartesian grid). 
// This also includes a time line, so a DateTime is considered a Coordinate. 
// Notice that coordinates do not provide arithmetic operators.  
// We could have defined a Point2D and a Point3D types as kinds of coordinates,  
// however, doing anything interesting with them involved converting them 
// to vectors. This just added a lot of complexity without much benefit. 
concept Coordinate
    inherits Value
{ }

// The less than function return true if the first value is strictly less than the other. 
concept Orderable 
    inherits Equatable
{
	LessThanOrEquals(x: Self, y: Self): Boolean;
}

// Supported for when two values are equal 
concept Equatable
{
    Equals(a: Self, b: Self): Boolean;
}

// The formal term for this is an Abelian group over addition
concept Additive
{
    Add(a: Self, b: Self): Self;    
    Subtract(a: Self, b: Self): Self;    
    Negative(self: Self): Self;
}

// Types implementing this concept can be multiplied or divided by a scalar value
concept ScalarArithmetic
{ 
    Modulo(self: Self, other: Number): Self;    
    Divide(self: Self, other: Number): Self;    
    Multiply(self: Self, other: Number): Self;    
    Multiply(other: Number, self: Self): Self;    
}

// A type which can be multiplied by itself
// Abelian semigroup over multiplication
concept Multiplicative
{
    Multiply(a: Self, b: Self): Self;
}

// Multiplicative inverse
concept Invertible
{
    Inverse(self: Self): Self;  
}

// Represents an Abelian group under multiplication 
concept MultiplicativeWithInverse
    inherits Multiplicative, Invertible
{
}

// A type which can be multiplied and added, and supports scalara arithmetic  
concept Algebraic
    inherits Additive, MultiplicativeWithInverse, ScalarArithmetic
{
}

// A type which can be divided by itself 
concept Divisible
{ 
    Divide(a: Self, b: Self): Self;    
}

// A type which supports modulo arithmetic
concept ModuloOperation
{
    Modulo(a: Self, b: Self): Self;
}

// Basic arithmetic operators 
// Technically this is an arithmetic field + modulo operation
// https://en.wikipedia.org/wiki/Field_(mathematics)
concept Arithmetic 
    inherits Additive, Multiplicative, Divisible, ModuloOperation
{ 
}

// Basic boolean operations, which are also similar to set operations.  
concept BooleanOperations
{
    And(a: Self, b: Self): Self;
    Or(a: Self, b: Self): Self;    
    Not(a: Self): Self;
}

// Represents a range of values. 
concept Interval<T>    
    where T: Numerical, T: Arithmetic
    inherits Equatable, Value, Array<T>
{
    Min(x: Self): T;
    Max(x: Self): T;    
    Size(x: Self): T;
}
