            
// A numerical type that is normally in the range of 0 to 1. 
type Unit
    implements IReal
{
    Value: Number;
}

// A value in the range of 0 to 1 that represents the probability of an occurence
type Probability
    implements IMeasure
{
    Value: Number;
}

// A two dimensional value, have has a real and imaginary component. 
type Complex
    implements IVector
{
    IReal: Number;
    Imaginary: Number;
}

// A pair of integers 
type Integer2
    implements IValue, IArray<Integer>
{
    A: Integer;
    B: Integer;
}

// A tuple of 3 integers 
type Integer3
    implements IValue, IArray<Integer>
{
    A: Integer;
    B: Integer;
    C: Integer;
}

// A tuple of 4 integers 
type Integer4
    implements IValue, IArray<Integer>
{
    A: Integer;
    B: Integer;
    C: Integer;
    D: Integer;
}

// https://en.wikipedia.org/wiki/RGB_color_spaces
type Color
    implements ICoordinate
{
    R: Unit;
    G: Unit;
    B: Unit;
    A: Unit;
}

// https://en.wikipedia.org/wiki/CIELUV
type ColorLUV
    implements ICoordinate
{
    Lightness: Unit;
    U: Unit;
    V: Unit;
}

// https://en.wikipedia.org/wiki/CIELAB_color_space
type ColorLAB
    implements ICoordinate
{
    Lightness: Unit;
    A: Number; 
    B: Number;
}

// https://en.wikipedia.org/wiki/CIELAB_color_space#Cylindrical_model
type ColorLCh
    implements ICoordinate
{
    Lightness: Unit;
    ChromaHue: PolarCoordinate;
}

// https://en.wikipedia.org/wiki/HSL_and_HSV
type ColorHSV
    implements ICoordinate
{
    Hue: Angle;
    S: Unit;
    V: Unit;
}

// https://en.wikipedia.org/wiki/HSL_and_HSV
type ColorHSL
    implements ICoordinate
{
    Hue: Angle;
    Saturation: Unit;
    Luminance: Unit;
}

// https://en.wikipedia.org/wiki/YCbCr   
type ColorYCbCr
    implements ICoordinate
{
    Y: Unit;
    Cb: Unit;
    Cr: Unit;
}

// https://en.wikipedia.org/wiki/Spherical_coordinate_system    
type SphericalCoordinate
    implements ICoordinate
{
    Radius: Number;
    Azimuth: Angle;
    Polar: Angle;
}

// https://en.wikipedia.org/wiki/Polar_coordinate_system   
type PolarCoordinate
    implements ICoordinate
{
    Radius: Number;
    Angle: Angle;
}

// https://en.wikipedia.org/wiki/Log-polar_coordinates    
type LogPolarCoordinate
    implements ICoordinate
{
    Rho: Number;
    Azimuth: Angle;
}

// https://en.wikipedia.org/wiki/Cylindrical_coordinate_system    
type CylindricalCoordinate
    implements ICoordinate
{
    RadialDistance: Number;
    Azimuth: Angle;
    Height: Number;
}

// https://en.wikipedia.org/wiki/Horizontal_coordinate_system    
type HorizontalCoordinate
    implements ICoordinate
{
    Radius: Number;
    Azimuth: Angle;
    Height: Number;
}

// https://en.wikipedia.org/wiki/Geographic_coordinate_system    
type GeoCoordinate
    implements ICoordinate
{
    Latitude: Angle;
    Longitude: Angle;
}

// https://en.wikipedia.org/wiki/Geographic_coordinate_system    
type GeoCoordinateWithAltitude
    implements ICoordinate
{
    ICoordinate: GeoCoordinate;
    Altitude: Number;
}

// A fraction of two integer
type Rational 
	implements IValue
{
	Numerator: Integer;
	Denominator: Integer;
}

// An arbitrary fraction 
type Fraction
    implements IValue
{
    Numerator: Number;
    Denominator: Number;
}

// An angle measurement 
type Angle
    implements IMeasure
{
    Radians: Number;
}

// A length measurement 
type Length
    implements IMeasure
{
    Meters: Number;
}

type Mass
    implements IMeasure
{
    Kilograms: Number;
}

type Temperature
    implements IMeasure
{
    Celsius: Number;
}

type Time
    implements IMeasure
{
    Seconds: Number;
}

// Unix date-time representation: number of non-leap seconds elapsed since January 1st, 1970.
// https://en.wikipedia.org/wiki/Unix_time
type DateTime
    implements ICoordinate
{
    Value: Number; 
}

type AnglePair
    implements IInterval<Angle>
{
    Min: Angle;
    Max: Angle;
}

type NumberInterval
    implements IInterval<Number>
{
    Min: Number;
    Max: Number;
}
