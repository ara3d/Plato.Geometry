// In Plato, the primitive types are assumed to exist, by name, by the compiler.
// This file is used to define the relationships and member data contained in those primitives.   

// A floating point representation of a real Number 
type Number
    implements IRealNumber
{ }


// An angle measurement (internally stored as Radians)
type Angle
    implements IMeasure
{ }

// Generic object 
type Object
    implements IValue
{ }

// A positive or negative whole Number 
type Integer   
    implements IWholeNumber
{ }

// Text
type String
    implements IValue, IOrderable
{ }

// Truth value (true or false)
type Boolean 
    implements IValue, IOrderable, IBoolean
{ }

// A single character of text 
type Character
    implements IValue, IOrderable
{ }

type Tuple2<T0, T1>
{
    X0: T0; X1: T1; 
}

type Tuple3<T0, T1, T2>
{
    X0: T0; X1: T1; X2: T2;  
}

type Tuple4<T0, T1, T2, T3>
{
    X0: T0; X1: T1; X2: T2; X3: T3;  
}

type Tuple5<T0, T1, T2, T3, T4>
{
    X0: T0; X1: T1; X2: T2; X3: T3; X4: T4;  
}

type Tuple6<T0, T1, T2, T3, T4, T5>
{
    X0: T0; X1: T1; X2: T2; X3: T3; X4: T4; X5: T5;  
}

type Tuple7<T0, T1, T2, T3, T4, T5, T6>
{
    X0: T0; X1: T1; X2: T2; X3: T3; X4: T4; X5: T5; X6: T6;  
}

type Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>
{
    X0: T0; X1: T1; X2: T2; X3: T3; X4: T4; X5: T5; X6: T6; X7: T7;  
}

type Function0<TR> 
{ }

type Function1<T0, TR> 
{ }

type Function2<T0, T1, TR> 
{ }

type Function3<T0, T1, T2, TR> 
{ }

type Function4<T0, T1, T2, T3, TR> 
{ }

type Function5<T0, T1, T2, T3, T4, TR> 
{ }

type Function6<T0, T1, T2, T3, T4, T5, TR> 
{ }

type Function7<T0, T1, T2, T3, T4, T5, T6, TR> 
{ }

type Function8<T0, T1, T2, T3, T4, T5, T6, T7, TR> 
{ }

type Function9<T0, T1, T2, T3, T4, T5, T6, T7, T8, TR> 
{ }

type Array<T> 
    implements IArray<T>
{ }

type Array2D<T>
    implements IArray2D<T>
{ }

type Array3D<T>
    implements IArray3D<T>
{ }

// A 2-dimensional vector
// https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Numerics/Vector2.cs
type Vector2
    implements INumerical
{
    X: Number;
    Y: Number;
}

// A 3-dimensional vector    
// https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Numerics/Vector3.cs
type Vector3
    implements INumerical
{
    X: Number;
    Y: Number;
    Z: Number;
}

// A 4-dimensional vector
// https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Numerics/Vector4.cs
type Vector4
    implements INumerical
{
    X: Number;
    Y: Number;  
    Z: Number;
    W: Number;
}

// A 8-dimensional vector, based on Vector256<float>
// https://github.com/dotnet/runtime/blob/c75bba356a06855a628b9fed7b2f903e3f71b6db/src/libraries/System.Private.CoreLib/src/System/Runtime/Intrinsics/Vector256.cs
type Vector8
    implements IVector
{
    X0: Number;
    X1: Number;
    X2: Number;
    X3: Number;
    X4: Number;
    X5: Number;
    X6: Number;
    X7: Number;
}

// Affine 2D transformation matrix 
// https://en.wikipedia.org/wiki/Transformation_matrix#Affine_transformations
// https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Numerics/Matrix3x3.cs
type Matrix3x2 
    implements IValue, IArrayLike<Number>
{
    Row1: Vector2;   
    Row2: Vector2;   
    Row3: Vector2;   
}

// Affine 3D transformation matrix 
// https://en.wikipedia.org/wiki/Transformation_matrix#Affine_transformations
// https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Numerics/Matrix4x4.cs
type Matrix4x4
    implements IValue, IArrayLike<Number>   
{
    Row1: Vector4;
    Row2: Vector4;
    Row3: Vector4;
    Row4: Vector4;
}

// Quaternion, representing a 3D rotation
// https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Numerics/Quaternion.cs
type Quaternion
    implements IValue, IArrayLike<Number>
{
    X: Number;
    Y: Number;
    Z: Number;
    W: Number;
}
