// This type provides a 2D bounding-box
concept IBounded2D
{
    // Returns a 2D axis aligned bounding box.
    Bounds(x: Self): Bounds2D;
}

// This type provides a 3D bounding-box
concept IBounded3D
{
    // Returns a 3D axis aligned bounding box.
    Bounds(x: Self): Bounds3D;
}

// This type can be transformed using a 3x3 matrix
concept ITransformable2D 
{
    // Retruns a new instance of the object transformed by the given matrix.
    Transform(x: Self, matrix: Matrix3x3): Self;
}

concept ITransformable3D 
{
    Transform(x: Self, matrix: Matrix4x4): Self;
}

concept IDeformable2D 
{
    Deform(x: Self, f: Function1<Vector2D, Vector2D>): Self;
}

concept IOpenClosedShape
{ 
    Closed(x: Self): Boolean;
}

concept IDeformable3D 
    inherits ITransformable3D
{
    Deform(x: Self, f: Function1<Vector3D, Vector3D>): Self;
}

// The set of all geometric objects: figures, shapes, points, fields, lines, and meshes. 
concept IGeometry 
{ }

// The set of all 2D geometric objects
concept IGeometry2D
    inherits IGeometry
{ }

// The set of all 3D geometric objects
concept IGeometry3D
    inherits IGeometry
{ }

concept IShape2D 
    inherits IGeometry2D 
{ } 

concept IShape3D
    inherits IGeometry3D
{ }

//=== 
// Open and closed shapes

concept IOpenShape2D 
    inherits IGeometry2D, IOpenClosedShape
{ }

concept IClosedShape2D 
    inherits IGeometry2D, IOpenClosedShape
{ }

concept IOpenShape3D 
    inherits IGeometry3D, IOpenClosedShape
{ }

concept IClosedShape3D 
    inherits IGeometry3D, IOpenClosedShape
{ }

// A parametric geometry in any number of dimensions
concept IProcedural<TDomain, TRange>
{
    Eval(x: Self, amount: TDomain): TRange;
}

// Curves map a single number to a point in 1D, 2D, 3D, or higher space.
// They are effectively functions. 
concept ICurve<TRange> 
    inherits IProcedural<Number, TRange>, IOpenClosedShape
{ }

// A 1 dimensional shape with a topological space of 1 dimensions
// Basically a simple function 
concept ICurve1D 
    inherits ICurve<Number>
{ }

// A 2 dimensional shape with a topological space of 1 dimensions
concept ICurve2D
    inherits IGeometry2D, ICurve<Vector2D>
{ }

// A 3 dimensional shape with a topological space of 1 dimensions
concept ICurve3D
    inherits IGeometry3D, ICurve<Vector3D>
{ }

// Surfaces are 3 dimensional shapes with a topological space of 2 dimensions
concept ISurface
    inherits IGeometry3D 
{ }

// Parametric surfaces are shapes defined from two variables (U and V)
// They may be periodic in 0 (e.g., plane), 1 (e.g., tube), or 2 dimensions (e.g., torus). 
// https://en.wikipedia.org/wiki/Surface_(mathematics)
// They are effectively Bivariate functions. You can also think of them as curves that have 
// two parameters. 
concept IProceduralSurface
    inherits IProcedural<Vector2D, Vector3D>, ISurface 
{
    PeriodicX(x: Self): Boolean;
    PeriodicY(x: Self): Boolean;
}

// Explicit surfaces are defined as functions from UV space to a z value (height)
concept IExplicitSurface 
    inherits IProcedural<Vector2D, Number>, ISurface
{ }

concept IDistanceField<TDomain>
    inherits IProcedural<TDomain, Number>
{ }

// A IVector or Scalar field in 2-Dimensions
// https://en.wikipedia.org/wiki/Vector_field
concept IField2D<T>
    inherits IGeometry2D, IProcedural<Vector2D, T>
{ }

// A IVector or Scalar field in 3-Dimensions
// https://en.wikipedia.org/wiki/Vector_field
// This is effectively a Trivariate function. 
// Given three arguments (x, y, z) it returns a single value. 
// You can think of it as the extension of a curve or surface.
// An example is a 3D-noise function, or a signed distance field 
concept IField3D<T>
    inherits IGeometry3D, IProcedural<Vector3D, T>
{ }

concept IScalarField2D    
    inherits IField2D<Number> 
{ }

concept IScalarField3D
    inherits IField3D<Number>
{ }

concept IVector3Field2D 
    inherits IField2D<Vector3D> 
{ }

concept IVector4Field2D 
    inherits IField2D<Vector4D> 
{ }

// A 3D field of 2D Vectors 
concept IVector2Field3D 
    inherits IField3D<Vector2D> 
{ }
    
// A 3D field of 3D Vectors (e.g., colors without alpha, or force vectors)
concept IVector3Field3D 
    inherits IField3D<Vector3D> 
{ }

// A 3D field of 4D Vectors (e.g., colors with alpha, or rotations)
concept IVector4Field3D 
    inherits IField3D<Vector4D> 
{ }

// An implicit procedural could represent a curve in 2D, a surface, solid, or volume in 3D. 
concept IImplicitProcedural<TDomain>  
    inherits IProcedural<TDomain, Boolean>
{ }

// An implicit surface, where we are either on the surface or not. 
concept IImplicitSurface
    inherits ISurface, IImplicitProcedural<Vector3D>
{ }

// An implicitly defined curve
concept IImplicitCurve2D
    inherits IGeometry2D, IImplicitProcedural<Vector2D>
{ }

// An implicit solid/volume, where we are either inside (true) or outside (false).
concept IImplicitVolume
    inherits IGeometry3D, IImplicitProcedural<Vector3D>
{ }

// Any geometrical concept defined by a finite number of points 
concept IPoints2D
    inherits IGeometry2D
{ 
    Points(x: Self): IArray<Vector2D>;
}

// Any geometrical concept defined by a finite number of points 
concept IPoints3D
    inherits IGeometry3D
{ 
    Points(x: Self): IArray<Vector3D>;
}

concept IGrid2D
    inherits IArray2D<Vector2D>
{ }

// Also known as quad strips. 
concept IQuadGrid
    inherits IArray2D<Vector3D>
{ 
    ClosedX(x: Self): Boolean;
    ClosedY(x: Self): Boolean;
}

// https://en.wikipedia.org/wiki/Polygonal_chain
// Also known as a PolygonalChain
concept IPolyLine2D
    inherits IPoints2D, IOpenClosedShape
{ }

// https://en.wikipedia.org/wiki/Polygonal_chain
// Also known as a PolygonalChain
concept IPolyLine3D
    inherits IPoints3D, IOpenClosedShape
{ }

concept IClosedPolyLine2D
    inherits IPolyLine2D, IClosedShape2D
{ }

concept IClosedPolyLine3D
    inherits IPolyLine3D, IClosedShape3D
{ }

concept IPolygon2D
    inherits IClosedPolyLine2D
{ }

concept IPolygon3D
    inherits IClosedPolyLine3D
{ }

