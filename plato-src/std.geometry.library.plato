library Geometry
{
    //==
	// 2D Lines
	
	Closed(x: Line2D): Boolean
		=> false;

	Points(x: Line2D): Array<Vector2D>
		=> x;

	Length(x: Line2D): Number
		=> (x.B - x.A).Length;

	//== 
	// 3D Lines
	 
	Closed(x: Line3D): Boolean
		=> false;

	Points(x: Line3D): Array<Vector3D>
		=> x;

	Length(x: Line3D): Number
		=> (x.B - x.A).Length;

	//==
	// 3D Rays

	Angle(a: Ray3D, b: Ray3D): Angle
		=> a.Direction.Angle(b.Direction);

	//==

	Closed(x: ClosedShape2D): Boolean
		=> true;

	Closed(x: ClosedShape3D): Boolean
		=> true;

	Closed(x: OpenShape2D): Boolean
		=> false;

	//==
	// Rect2D functions 

	Width(x: Rect2D): Number
		=> x.Size.Width;

	Height(x: Rect2D): Number
		=> x.Size.Height;

	HalfWidth(x: Rect2D): Number
		=> x.Width.Half;

	HalfHeight(x: Rect2D): Number
		=> x.Height.Half;

	Top(x: Rect2D): Number
		=> x.Center.Y + HalfHeight;

	Bottom(x: Rect2D): Number
		=> x.Top + x.Height;

	Left(x: Rect2D): Number
		=> x.Center.X - HalfWidth;

	Right(x: Rect2D): Number
		=> x.Left + x.Width;

	TopLeft(x: Rect2D): Vector2D
		=> (x.Left, x.Top);

	TopRight(x: Rect2D): Vector2D
		=> (x.Right, x.Top);

	BottomRight(x: Rect2D): Vector2D
		=> (x.Right, x.Bottom);

	BottomLeft(x: Rect2D): Vector2D
		=> (x.Left, x.Bottom);

	Points(x: Rect2D): Array<Vector2D>
		=> [x.TopLeft, x.TopRight, x.BottomRight, x.BottomLeft];

	//==

    CirclePoints(n: Integer): Array<Vector2D>
		=> n.Fractions.Map((x) => x.Turns.Circle);

	Points(x: RegularPolygon): Array<Vector2D>
		=> x.NumPoints.CirclePoints;

	Closed(x: Ellipse): Boolean
		=> true;

	Eval(x: Ellipse, t: Number): Vector2D
		=> t.Circle * x.Size + x.Center;

	Closed(x: Polygon2D): Boolean
		=> true;

	Closed(x: Polygon3D): Boolean
		=> true;

	Implicit(a: Size2D): Vector2D
		=> (a.Width, a.Height);

	Points(x: Triangle2D): Array<Vector2D>
		=> CirclePoints(3);

	/* TODO: I really want to have a PairwiseMap function, but it is not working.
 
	Sides(x: Polygon2D): Array<Line2D>
    	=> x.Points.PairwiseMap((a, b) => Line2D(a, b));

	Perimeter(x: Polygon2D): Number
		=> x.Sides.Map(a => a.Length).Sum;
	*/

	Area(tri: Triangle2D): Number  
	    => (tri.A.X * (tri.C.Y - tri.B.Y) 
		    + tri.B.X * (tri.A.Y - tri.C.Y) 
		+ tri.C.X * (tri.B.Y - tri.A.Y)).Half;

	/* TODO: there is a problem in resolving variable names. 
	 *
	// Test if a given point is inside a given triangle in R2.
    Contains(tr: Triangle2D, p: Vector2D): Boolean
    {
        // Point in triangle test using barycentric coordinates
        var v0 = B - A;
        var v1 = C - A;
        var v2 = p - A;

        var dot00 = v0.Dot(v0);
        var dot01 = v0.Dot(v1);
        var dot02 = v0.Dot(v2);
        var dot11 = v1.Dot(v1);
        var dot12 = v1.Dot(v2);

        var invDenom = (dot00 * dot11 - dot01 * dot01);
        dot11 = (dot11 * dot02 - dot01 * dot12) * invDenom;
        dot00 = (dot00 * dot12 - dot01 * dot02) * invDenom;

        var r = ((dot11 > 0) && (dot00 > 0)) && ((dot11 + dot00) < 1);
		return r;
    }
	*/

	Transform(x: Deformable3D, m: Matrix3D): Deformable3D
		=> x.Deform(v => m * v);

}