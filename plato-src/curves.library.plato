library Curves
{
    // https://en.wikipedia.org/wiki/Linear_equation#Equation_of_a_line
    LinearFunction(x: IAlgebraic, m: Number, b: Number): IAlgebraic
        => m * x + b;

    //  https://en.wikipedia.org/wiki/Quadratic_function
    QuadraticFunction(x: IAlgebraic, a: Number, b: Number, c: Number): IAlgebraic
        => a * x.Square + b * x + c;

    //  https://en.wikipedia.org/wiki/Cubic_function
    CubicFunction(x: IAlgebraic, a: Number, b: Number, c: Number, d: Number): IAlgebraic
        => a * x.Cube + b * x.Square + c * x + d;

    // https://en.wikipedia.org/wiki/Parabola
    ParabolaFunction(x: IMultiplicative): IMultiplicative
        => x.Square;

    // https://mathworld.wolfram.com/StaircaseFunction.html
    StaircaseFloorFunction(x: Number, steps: Integer): Number   
        => (x * steps).Floor / steps;

    // https://mathworld.wolfram.com/StaircaseFunction.html
    StaircaseCeilingFunction(x: Number, steps: Integer): Number
        => (x * steps).Ceiling / steps;

    // https://mathworld.wolfram.com/StaircaseFunction.html
    StaircaseRoundFunction(x: Number, steps: Integer): Number
        => (x * steps).Round / steps;

    //==
    // Curves 2D 
    //==

    CircleFunction(t: Number): Vector2D
        => t.Turns.CircleFunction;

    CircleFunction(t: Angle): Vector2D
        => (t.Cos, t.Sin);

    // https://en.wikipedia.org/wiki/Lissajous_curve
    LissajousFunction(t: Angle, kx: Number, ky: Number): Vector2D
        => ((t * kx).Cos, (t * ky).Sin);

    LissajousFunction(t: Number, kx: Number, ky: Number): Vector2D
        => t.Turns.LissajousFunction(kx, ky);

    // https://en.wikipedia.org/wiki/Butterfly_curve_(transcendental)
    ButterflyCurveFunction(t: Number): Vector2D
        => (t.Turns / 6.0).ButterflyCurveFunction;

    ButterflyCurveFunction(t: Angle): Vector2D
        => ((t * (t.Cos.Exp - 2.0 * (t * 4.0).Cos - (t / 12.0).Sin.Pow(5.0))).Sin,
            (t * (t.Cos.Exp - 2.0 * (t * 4.0).Cos - (t / 12.0).Sin.Pow(5.0))).Cos);
    
    //===
    // 2D parametric functions, created from 1D 
    //===

    ParabolaFunction2D(t: Number): Vector2D
        => (t, t.ParabolaFunction);

    LineFunction2D(t: Number, m: Number, b: Number): Vector2D
        => (t, t.LinearFunction(m, b));

    SinFunction2D(t: Number): Vector2D
        => (t, t.Turns.Sin);

    CosFunction2D(t: Number): Vector2D
        => (t, t.Turns.Cos);

    TanFunction2D(t: Number): Vector2D
        => (t, t.Turns.Tan);

    //==
    // 3D IVector
    //== 

    // https://en.wikipedia.org/wiki/Torus_knot
    TorusKnotFunction(t: Angle, p: Number, q: Number): Vector3D
    {
        var r = (t * q).Cos + 2.0;
        var x = r * (t * p).Cos;
        var y = r * (t * p).Sin;    
        var z = -(t * q).Sin;
        return (x, y, z);
    }

    // https://en.wikipedia.org/wiki/Trefoil_knot
    TrefoilKnotFunction(t: Angle): Vector3D
        => (t.Sin + (t * 2.0).Sin * 2.0,
            t.Cos + (t * 2.0).Cos * 2.0,
            -(t * 3.0).Sin);

    // https://en.wikipedia.org/wiki/Figure-eight_knot_(mathematics)
    FigureEightKnotFunction(t: Angle): Vector3D
        => ((2.0 + (t * 2.0).Cos) * (t * 3.0).Cos,
            (2.0 + (t * 2.0).Cos) * (t * 3.0).Sin,
            (t * 4.0).Sin);

    // https://en.wikipedia.org/wiki/Parametric_equation#Helix
    HelixFunction(t: Number, revs: Number): Vector3D
        => ((t * revs).Turns.Sin, 
            (t * revs).Turns.Cos,
            t);

    //==
    // TODO:
    // https://en.wikipedia.org/wiki/Rose_(mathematics)
    // Other polar coordinate based functions
}