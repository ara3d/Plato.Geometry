library Intrinsics
{
    Cos(x: Angle): Number;
    Sin(x: Angle): Number;
    Tan(x: Angle): Number;
    Acos(x: Number): Angle;
    Asin(x: Number): Angle;
    Atan(x: Number): Angle;    

    Pow(x: Number, y: Number): Number;
    Log(x: Number, y: Number): Number;
    Ln(x: Number): Number;
    Exp(x: Number): Number;  

    Floor(x: Number): Number;
    Ceiling(x: Number): Number;
    Round(x: Number): Number;
    Truncate(x: Number): Number;

    Add(x: Number, y: Number): Number;  
    Subtract(x: Number, y: Number): Number;
    Divide(x: Number, y: Number): Number;
    Multiply(x: Number, y: Number): Number;
    Modulo(x: Number, y: Number): Number;
    Negative(x: Number): Number;

    Add(x: Integer, y: Integer): Integer;
    Subtract(x: Integer, y: Integer): Integer;
    Divide(x: Integer, y: Integer): Integer;
    Multiply(x: Integer, y: Integer): Integer;
    Modulo(x: Integer, y: Integer): Integer;
    Negative(x: Integer): Integer;
    Reciprocal(x: Integer): Integer;

    And(x: Boolean, y: Boolean): Boolean;
    Or(x: Boolean, y: Boolean): Boolean;
    Not(x: Boolean): Boolean;

    ToNumber(x: Integer): Number;

    Range(x: Integer): Array<Integer>;
    Reduce(xs: Array<$T>, init: $TAcc, f: Function2<$TAcc, $T, $TAcc>): $TAcc;
    Map(xs: Array<$T>, f: Function1<$T, $U>): Array<$U>;

    Invoke(f: Function0<$TR>): $TR;
    Invoke(f: Function1<$T0, $TR>, a0: $T0): $TR;
    Invoke(f: Function2<$T0, $T1, $TR>, a0: $T0, a1: $T1): $TR;
    Invoke(f: Function3<$T0, $T1, $T2, $TR>, a0: $T0, a1: $T1, a2: $T2): $TR;
    Invoke(f: Function4<$T0, $T1, $T2, $T3, $TR>, a0: $T0, a1: $T1, a2: $T2, a3: $T3): $TR;
}