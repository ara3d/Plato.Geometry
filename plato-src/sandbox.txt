The following was in geometry.concepts.plato 

// https://en.wikipedia.org/wiki/B%C3%A9zier_surface
concept BezierPatch
    inherits IPoints3D, ISurface, IArray2D<Vector3D>    
{ }

concept PolyhederalFace
{
    FaceIndex(x: Self): Integer;
    VertexIndices(x: Self): IArray<Integer>;
    Polyhedron(x: Self): Polyhedron;
}

// https://en.wikipedia.org/wiki/Polyhedron
concept Polyhedron 
    inherits ISurface, IPoints3D
{
    Faces(x: Self): IArray<PolyhederalFace>;
}

concept ConvexPolyhedron
    inherits Polyhedron 
{ }

concept SolidPolyhedron
    inherits Polyhedron 
{ }


type ParametricCurve2D
    implements ICurve2D
{
    Evaluator: Function1<Number, Vector2D>;
}

type ParametricCurve3D
    implements ICurve3D
{
    Evaluator: Function1<Number, Vector3D>;
}

type ParametricSurface
    implements IProceduralSurface
{
    Evaluator: Function1<Number, Vector3D>;
    PeriodicX: Boolean;
    PeriodicY: Boolean;
}

	/* TODO: there is a problem in resolving variable names. 
	 *
	// Test if a given point is inside a given triangle in R2.
    Contains(tr: Triangle2D, p: Vector2D): Boolean
    {
        // Point in triangle test using barycentric coordinates
        var v0 = B - A;
        var v1 = C - A;
        var v2 = p - A;

        var dot00 = v0.Dot(v0);
        var dot01 = v0.Dot(v1);
        var dot02 = v0.Dot(v2);
        var dot11 = v1.Dot(v1);
        var dot12 = v1.Dot(v2);

        var invDenom = (dot00 * dot11 - dot01 * dot01);
        dot11 = (dot11 * dot02 - dot01 * dot12) * invDenom;
        dot00 = (dot00 * dot12 - dot01 * dot02) * invDenom;

        var r = ((dot11 > 0) && (dot00 > 0)) && ((dot11 + dot00) < 1);
		return r;
    }
	*/