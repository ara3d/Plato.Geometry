// https://en.wikipedia.org/wiki/Top_type
// This is the Top Type in Plato. All types implement this. 
interface IAny
{ 
    Equals(a: Self, b: Self): Boolean;
}

// A value is a read-only type which has the implicit rule that only Values are members
interface IValue 
{ 
}

// The formal term for this is an Abelian group over addition
interface IAdditive
{
    Zero(_: Self): Self;
    Add(a: Self, b: Self): Self;    
    Subtract(a: Self, b: Self): Self;    
    Negative(self: Self): Self;
}

// Types implementing this interface can be multiplied or divided by a scalar value
// This includes vectors and measurements
interface IScalarArithmetic
{ 
    Modulo(self: Self, other: Number): Self;    
    Divide(self: Self, other: Number): Self;    
    Multiply(self: Self, other: Number): Self;    
}

// This is a generalization of real number to multiple dimensions, and with or without units of measure.
// A numerical type represents things like reals, vectors, complex numbers, and measures.
// A type which can be added and subtracted, and supports scalar arithmetic  
// If it supports these things then it can also implicitly supports linear interpolatation
// Note that types implementing this interface might not support multiplication or division, 
// such as measurements. In mathematics, this is called a vector space
// https://en.wikipedia.org/wiki/Vector_space
interface INumerical
    inherits IInterpolatable, IScalarArithmetic, IAdditive 
{
    // A static function that returns the dimensionality of the numerical type. 
    NumComponents(_: Self): Integer;

    // Returns the components of the numerical type.
    Components(x: Self): IArray<Number>;
    
    // Creates a new numerical type from the components.
    Create(_: Self, xs: IArray<Number>): Self;
}

// The less than function return true if the first value is strictly less than the other. 
interface IOrderable 
{
	LessThanOrEquals(x: Self, y: Self): Boolean;
}

// A type which can be multiplied by itself
// Monid over multiplication
interface IMultiplicative
{
    One(_: Self): Self;
    Multiply(a: Self, b: Self): Self;
}

// IMultiplicative inverse
interface IInvertible
{
    Inverse(self: Self): Self;  
}

// Represents an Abelian group under multiplication 
interface IMultiplicativeWithInverse
    inherits IMultiplicative, IInvertible
{
}

// A type which supports linear interpolation
interface IInterpolatable   
{ 
    Lerp(a: Self, b: Self, t: Number): Self;
}

// A type which can be divided by itself 
interface IDivisible
{ 
    Divide(a: Self, b: Self): Self;    
}

// A type which supports modulo arithmetic
interface IModulo
{
    Modulo(a: Self, b: Self): Self;
}

// Basic arithmetic operators 
// Technically this is an arithmetic field plus an additional modulo operation
// https://en.wikipedia.org/wiki/Field_(mathematics)
// It includes Numbers and Vectors, but does not include measurements. 
interface IArithmetic 
    inherits IAdditive, IMultiplicativeWithInverse, IDivisible, IModulo
{ 
}

// Represents a continuous one dimensional value.
// https://en.wikipedia.org/wiki/Real_float
// It supports all arithmetic operations.
// The "Number" type is the only example of a IRealNumber
interface IRealNumber
    inherits INumerical, IOrderable, IArithmetic
{
}

// Used for integer and cardinal types. 
// Somewhat counter intuitively, they are not considered INumerical types.
// They do however support arithmetic operations. 
// Lerp is defined for whole numbers. 
interface IWholeNumber 
    inherits IOrderable, IArithmetic, IInterpolatable
{
}

// A measure is a numeric value with an intrinisic unit of measure. 
// It resembles a IReal except you cannot multiply or divide two measures without 
// getting a new type. It does however support IAdditive on itself.
interface IMeasure
    inherits IOrderable, INumerical
{
}

// Vectors are specialization of the INumerical type.
// Unlike reals and measures they cannot be compared in any meaningful way 
// They are also "array-like" in that they have a fixed Number of components.
interface IVector
    inherits IArray<Number>, INumerical, IArithmetic
{ 
}

// A coordinate is a point in some space (e.g., a cartesian grid). 
// This also includes a time line, so a DateTime is considered a ICoordinate. 
interface ICoordinate
{ }

// Basic boolean operations, which are also similar to set operations.  
interface IBoolean
{
    And(a: Self, b: Self): Self;
    Or(a: Self, b: Self): Self;    
    Not(a: Self): Self;
}

// Represents an interval of values. 
interface IInterval<T>    
    where T: INumerical
    inherits IValue, IArray<T>
{
    Start(x: Self): T;
    End(x: Self): T;
}

// Represents a range of values. 
interface IBounds<T>    
    where T: INumerical
    inherits IValue
{
    Min(x: Self): T;
    Max(x: Self): T;
}
