library Core
{
    //==
    // Number 

    Between(x: Number, a: Number, b: Number): Boolean
        => x.ZipComponents(a, b, (x0, a0, b0) => x0.Between(a0, b0)).All(x0 => x0);

    BetweenZeroOne(x: Number): Boolean
        => x.Between(x.Zero, x.One);

    // https://stackoverflow.com/a/2411661
    AlmostEqual(x: Number, y: Number): Boolean 
        => (x-y).Abs <= x.MultiplyEpsilon(y);
    
    AlmostZero(x: Number): Boolean 
        => x.Abs < Epsilon;
    
    AlmostZeroOrOne(x: Number): Boolean 
        => AlmostEqual(x, 0) || AlmostEqual(x, 1);

    Magnitude(x: Number): Number
        => x;

    //==    
    // IScalarArithmetic operations 

    Half(x: IScalarArithmetic): IScalarArithmetic 
        => x / 2.0;        
    
    Quarter(x: IScalarArithmetic): IScalarArithmetic 
        => x / 4.0;    
    
    Eight(x: IScalarArithmetic): IScalarArithmetic 
        => x / 8.0;    
    
    Sixteenth(x: IScalarArithmetic): IScalarArithmetic 
        => x / 16.0;
    
    Tenth(x: IScalarArithmetic): IScalarArithmetic 
        => x / 10.0;    
    
    Twice(x: IScalarArithmetic): IScalarArithmetic 
        => x * 2.0;              
    
    Hundred(x: IScalarArithmetic): IScalarArithmetic 
        => x * 100.0;      
    
    Thousand(x: IScalarArithmetic): IScalarArithmetic 
        => x * 1000.0;
    
    Million(x: IScalarArithmetic): IScalarArithmetic 
        => x.Thousand.Thousand;
    
    Billion(x: IScalarArithmetic): IScalarArithmetic 
        => x.Thousand.Million;
    
    Hundredth(x: IScalarArithmetic): IScalarArithmetic 
        => x / 100.0;      
    
    Thousandth(x: IScalarArithmetic): IScalarArithmetic 
        => x / 1000.0;
    
    Millionth(x: IScalarArithmetic): IScalarArithmetic 
        => x.Thousandth.Thousandth;
    
    Billionth(x: IScalarArithmetic): IScalarArithmetic 
        => x.Thousandth.Millionth;
   
    //==
    // Comparable functions
    
    LessThan(a: IOrderable, b: IOrderable): Boolean 
        => a <= b && a != b;
    
    GreaterThan(a: IOrderable, b: IOrderable): Boolean 
        => b < a;
    
    GreaterThanOrEquals(a: IOrderable, b: IOrderable): Boolean 
        => b <= a;
       
    Lesser(a: IOrderable, b: IOrderable): IOrderable 
        => a <= b ? a : b;
    
    Greater(a: IOrderable, b: IOrderable): IOrderable 
        => a >= b ? a : b;
   
    CompareTo(a: IOrderable, b: IOrderable): Integer
		=> a <= b ? (a == b ? 0 : - 1) : 1;
}