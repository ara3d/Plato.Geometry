// A library of curves, spirals, and equations in 2D and 3D
// TODO: consult the following     
// https://en.wikipedia.org/wiki/List_of_curves
// https://en.wikipedia.org/wiki/List_of_spirals
library Curves
{
    Closed(curve: ICurve2D): Boolean 
        => false;

    Closed(curve: ICurve3D): Boolean 
        => false;

    Sample(curve: ICurve2D, numPoints: Integer): IArray<Vector2>
		=> numPoints.LinearSpace.Map(x => curve.Eval(x));

    Sample(curve: ICurve3D, numPoints: Integer): IArray<Vector3>
		=> numPoints.LinearSpace.Map(x => curve.Eval(x));

    ToPolyLine2D(curve: ICurve2D, numPoints: Integer): PolyLine2D
	    => (curve.Sample(numPoints), curve.Closed);    

    ToPolyLine3D(curve: ICurve3D, numPoints: Integer): PolyLine3D
	    => (curve.Sample(numPoints), curve.Closed);    

    // https://en.wikipedia.org/wiki/Linear_equation#Equation_of_a_line
    Linear(x: Number, m: Number, b: Number): Number
        => m * x + b;

    Eval(f: LinearEquation, x: Number): Number 
        => x.Linear(f.Slope, f.YIntercept);
    
    //  https://en.wikipedia.org/wiki/Quadratic_function
    Quadratic(x: Number, a: Number, b: Number, c: Number): Number
        => a * x.Sqr + b * x + c;

    Eval(f: Quadratic, x: Number): Number 
        => x.Quadratic(f.A, f.B, f.C);

    //  https://en.wikipedia.org/wiki/Cubic_function
    Cubic(x: Number, a: Number, b: Number, c: Number, d: Number): Number
        => a * x.Cube + b * x.Sqr + c * x + d;

    Eval(f: Cubic, x: Number): Number 
        => x.Cubic(f.A, f.B, f.C, f.D);

    //https://en.wikipedia.org/wiki/Sine_wave   
    SineWave(x: Number, amplitude: Number, frequency: Number, phase: Number): Number
		=> amplitude * (frequency * x.Turns.Sin + phase);

    Eval(f: SineWave, x: Number): Number 
        => x.SineWave(f.Amplitude, f.Frequency, f.Phase);

    // https://en.wikipedia.org/wiki/Parabola
    Parabola(x: IMultiplicative): IMultiplicative
        => x.Sqr;
  
    Eval(f: Parabola, x: Number): Number 
        => x.Parabola;

    // https://mathworld.wolfram.com/StaircaseFunction.html
    StaircaseFloor(x: Number, steps: Integer): Number   
        => (x * steps).Floor / steps;

    // https://mathworld.wolfram.com/StaircaseFunction.html
    StaircaseCeiling(x: Number, steps: Integer): Number
        => (x * steps).Ceiling / steps;

    // https://mathworld.wolfram.com/StaircaseFunction.html
    StaircaseRound(x: Number, steps: Integer): Number
        => (x * steps).Round / steps;
 
    //==
    // Bezier functions
    // https://en.wikipedia.org/wiki/B%C3%A9zier_curve    

    CubicBezier(a: IAlgebraic, b: IAlgebraic, c: IAlgebraic, d: IAlgebraic, t: Number): IAlgebraic
		=> a * (1.0 - t).Cube 
           + b * 3.0 * (1.0 - t).Sqr * t 
           + c * 3.0 * (1.0 - t) * t.Sqr 
           + d * t.Cube;	
   
    CubicBezierDerivative(a: IAlgebraic, b: IAlgebraic, c: IAlgebraic, d: IAlgebraic, t: Number): IAlgebraic
       => (b - a) * 3.0 * (1.0 - t).Sqr
          + (c - b) * 6.0 * (1.0 - t) * t
          + (d - c) * 3.0 * t.Sqr;
   
    CubicBezierSecondDerivative(a: IAlgebraic, b: IAlgebraic, c: IAlgebraic, d: IAlgebraic, t: Number): IAlgebraic
       => (c - b * 2.0 + a) * 6.0 * (1.0 - t)
          + (d - c * 2.0 + a) * 6.0 * t;

    QuadraticBezier(a: IAlgebraic, b: IAlgebraic, c: IAlgebraic, t: Number): IAlgebraic
   	   => a * (1.0 - t).Sqr 
   		    + b * 2.0 * (1.0 - t) * t 
   		    + c * t.Sqr;
   
    QuadraticBezierDerivative(a: IAlgebraic, b: IAlgebraic, c: IAlgebraic, t: Number): IAlgebraic
   		=> (b - b) * 2.0 * (1.0 - t)
   		   + (c - b) * 2.0 * t;
   
    QuadraticBezierSecondDerivative(a: IAlgebraic, b: IAlgebraic, c: IAlgebraic, t: Number): IAlgebraic
        => c - b * 2.0 + a;
}

//====
// Real functions

interface IRealFunction
{
    Eval(f: Self, x: Number): Number;
}

// https://en.wikipedia.org/wiki/Linear_equation#Equation_of_a_line
type LinearEquation
    implements IRealFunction
{
    // Also called "M"
    Slope: Number;

    // Also called "B"
    YIntercept: Number; 
}

type Quadratic
    implements IRealFunction
{
    A: Number;
    B: Number;
    C: Number;
}

type Cubic
    implements IRealFunction
{
    A: Number;
    B: Number;
    C: Number;
    D: Number;
}

type Parabola
    implements IRealFunction, IOpenShape
{
}
  
type SineWave
    implements IRealFunction, IOpenShape
{
   	Amplitude: Number;
   	Frequency: Number;
   	Phase: Number;
}

//====
// Standard 2D Curves

library Curves2D
{
    Spiral(t: Number, R: Number, r: Number, numTurns: Number): Vector2
        => new Vector2((t.Turns * numTurns).Cos, (t.Turns * numTurns).Sin) * r.Lerp(R, t);

    Eval(curve: Spiral, t: Number): Vector2
		=> t.Spiral(curve.Radius1, curve.Radius2, curve.NumTurns);

    Eval(curve: QuadraticBezier2D, t: Number): Vector2
		=> curve.A.QuadraticBezier(curve.B, curve.C, t);

    Eval(curve: CubicBezier2D, t: Number): Vector2
		=> curve.A.QuadraticBezier(curve.B, curve.C, t);
}

type Spiral
   	implements IOpenCurve2D
{
   	Radius1: Number;
    Radius2: Number;
    NumTurns: Number;
}
  
// https://en.wikipedia.org/wiki/B%C3%A9zier_curve
type QuadraticBezier2D
    implements IArray<Vector2>, IOpenCurve2D
{
    A: Vector2;
    B: Vector2;
    C: Vector2;
}

// https://en.wikipedia.org/wiki/B%C3%A9zier_curve    
type CubicBezier2D
    implements IArray<Vector2>, IOpenCurve2D
{
    A: Vector2;
    B: Vector2;
    C: Vector2;
    D: Vector2;
}   

//====
// 2D Angular curves

interface IAngularCurve2D inherits ICurve2D
{
    GetPoint(curve: Self, t: Angle): Vector2;
}
    
library AngularCurves2D
{
    // Angular curves are defined in terms of a parameter t that is an angle    
    Eval(curve: IAngularCurve2D, t: Number): Vector2
    	=> curve.GetPoint(t.Turns);

    UnitCircle(t: Angle): Vector2
		=> (t.Cos, t.Sin);

    Circle(t: Angle, center: Vector2, radius: Number): Vector2
		=> t.UnitCircle * radius + center;

    GetPoint(curve: Circle, t: Angle): Vector2
		=> t.Circle(curve.Center, curve.Radius);

    Ellipse(t: Angle, center: Vector2, size: Vector2): Vector2 
        => t.UnitCircle * size + center;

    GetPoint(curve: Ellipse, t: Angle): Vector2 
        => t.UnitCircle * curve.Size + curve.Center;

	// https://en.wikipedia.org/wiki/Epicycloid
	Epicycloid(t: Angle, R: Number, r: Number): Vector2
		=> ((R + r) * t.Cos - r * (R + r) * (t / r).Cos,
			(R + r) * t.Sin - r * (R + r) * (t / r).Sin);

    GetPoint(curve: Epicycloid, t: Angle): Vector2
        => t.Epicycloid(curve.Radius1, curve.Radius2);

	// https://en.wikipedia.org/wiki/Hypocycloid
	Hypocycloid(t: Angle, R: Number, r: Number): Vector2
		=> ((R - r) * t.Cos + r * (R - r) * (t / r).Cos,
			(R - r) * t.Sin - r * (R - r) * (t / r).Sin);

    GetPoint(curve: Hypocycloid, t: Angle): Vector2
		=> t.Hypocycloid(curve.Radius1, curve.Radius2);

	// https://en.wikipedia.org/wiki/Epitrochoid
	Epitrochoid(t: Angle, R: Number, r: Number, d: Number): Vector2
		=> ((R + r) * t.Cos - d * (R + r) * (t / r).Cos,
			(R + r) * t.Sin - d * (R + r) * (t / r).Sin);

    GetPoint(curve: Epitrochoid, t: Angle): Vector2
        => t.Epitrochoid(curve.Radius1, curve.Radius2, curve.Dist);

	// https://en.wikipedia.org/wiki/Hypotrochoid
	Hypotrochoid(t: Angle, R: Number, r: Number, d: Number): Vector2
		=> ((R - r) * t.Cos + d * (R - r) * (t / r).Cos,
			(R - r) * t.Sin - d * (R - r) * (t / r).Sin);

    GetPoint(curve: Hypotrochoid, t: Angle): Vector2
		=> t.Hypotrochoid(curve.Radius1, curve.Radius2, curve.Dist);

    // https://en.wikipedia.org/wiki/Butterfly_curve_(transcendental)
    ButterflyCurve(t: Angle): Vector2
        => (t / 6.0).ButterflyCurveSection;

    ButterflyCurveSection(t: Angle): Vector2
        => ((t * (t.Cos.Exp - 2.0 * (t * 4.0).Cos - (t / 12.0).Sin.Pow(5.0))).Sin,
            (t * (t.Cos.Exp - 2.0 * (t * 4.0).Cos - (t / 12.0).Sin.Pow(5.0))).Cos);

    GetPoint(curve: ButterflyCurve, t: Angle): Vector2
        => t.ButterflyCurve;

    // https://en.wikipedia.org/wiki/Lissajous_curve
    Lissajous(t: Angle, a: Number, b: Number, d: Angle): Vector2
        => ((t + d).Sin, b.Sin);

    GetPoint(curve: Lissajous, t: Angle): Vector2
		=> t.Lissajous(curve.A, curve.B, curve.Delta);
}

type Circle
   implements IAngularCurve2D, IClosedCurve2D
{ 
    Center: Vector2;
    Radius: Number;
}

type Ellipse
   implements IAngularCurve2D, IClosedCurve2D
{ 
    Center: Vector2;
    Size: Vector2;
}

// https://en.wikipedia.org/wiki/Epicycloid
type Epicycloid
	implements IAngularCurve2D, IOpenShape
{
	Radius1: Number;
	Radius2: Number;
}

// https://en.wikipedia.org/wiki/Hypocycloid
type Hypocycloid
    implements IAngularCurve2D, IOpenShape
{
	Radius1: Number;
	Radius2: Number;
}
	
// https://en.wikipedia.org/wiki/Epitrochoid
type Epitrochoid
	implements IAngularCurve2D, IOpenShape
{
	Radius1: Number;
	Radius2: Number;
	Dist: Number;
}

// https://en.wikipedia.org/wiki/Hypotrochoid
type Hypotrochoid
	implements IAngularCurve2D, IOpenShape
{
	Radius1: Number;
	Radius2: Number;
	Dist: Number;
}

// https://en.wikipedia.org/wiki/Butterfly_curve_(transcendental)
type ButterflyCurve
	implements IAngularCurve2D, IOpenShape
{
}

// https://en.wikipedia.org/wiki/Lissajous_curve
type Lissajous
    implements IAngularCurve2D, IOpenShape
{
    Delta: Angle;
    A: Number;
    B: Number;
}

//====
// Polar curves

// https://en.wikipedia.org/wiki/Polar_curve
interface IPolarCurve 
    inherits IAngularCurve2D 
{
    GetRadius(curve: Self, t: Angle): Number;
}

library PolarCurves
{
    // Get the polar coordinates of a point on a polar curve. 
    EvalPolar(curve: IPolarCurve, t: Angle): PolarCoordinate
        => (curve.GetRadius(t), t);

    // Convert polar coordinates to Cartesian
    // https://en.wikipedia.org/wiki/Polar_coordinate_system
    Vector2(coord: PolarCoordinate): Vector2 
        => new Vector2(coord.Angle.Cos, coord.Angle.Sin) * coord.Radius;

    // Get the cartesian coordinates of a point on a polar curve. 
    GetPoint(curve: IPolarCurve, t: Angle): Vector2
        => curve.EvalPolar(t);

    // https://en.wikipedia.org/wiki/Tommaso_Ceva#The_Cycloid_of_Ceva
    CycloidOfCeva(t: Angle): Number
        => 1.0 + (t * 2.0).Cos * 2.0;

    GetRadius(curve: CycloidOfCeva, t: Angle): Number
        => t.CycloidOfCeva;

    // https://en.wikipedia.org/wiki/Lima%C3%A7on
    Limacon(t: Angle, a: Number, b: Number): Number
        => a * t.Cos + b;

    GetRadius(curve: Limacon, t: Angle): Number
		=> t.Limacon(curve.A, curve.B);

    // https://en.wikipedia.org/wiki/Cardioid
    Cardoid(t: Angle): Number
	    => 1.0 + t.Cos;

    GetRadius(curve: Cardoid, t: Angle): Number
	    => t.Cardoid;

    // https://en.wikipedia.org/wiki/Tschirnhausen_cubic
    TschirnhausenCubic(t: Angle, a: Number): Number
        => a * (t / 3.0).Sec.Cube;
        
    GetRadius(curve: TschirnhausenCubic, t: Angle): Number
        => t.TschirnhausenCubic(curve.A);

    // https://en.wikipedia.org/wiki/Rose_(mathematics)
    Rose(t: Angle, k: Number): Number
        => k * t.Cos;

    GetRadius(curve: Rose, t: Angle): Number
        => t.Rose(curve.K);

    // https://en.wikipedia.org/wiki/Archimedean_spiral
    ArchimedeanSpiral(t: Angle, a: Number, b: Number): Number
        => a + b * t.Turns;

    GetRadius(curve: ArchimedeanSpiral, t: Angle): Number  
        => t.ArchimedeanSpiral(curve.A, curve.B);

    // https://en.wikipedia.org/wiki/Conic_section
    ConicSection(t: Angle, semiLatusRectum: Number, eccentricity: Number): Number
        => semiLatusRectum / (1.0 - eccentricity * t.Cos);

    GetRadius(curve: ConicSection, t: Angle): Number 
        => t.ConicSection(curve.SemiLatusRectum, curve.Eccentricity);

    // https://en.wikipedia.org/wiki/Lemniscate_of_Bernoulli
    LemniscateOfBernoulli(t: Angle, a: Number): Number
        => (a.Sqr * (t * 2.0).Cos).Sqrt;

    GetRadius(curve: LemniscateOfBernoulli, t: Angle): Number
        => t.LemniscateOfBernoulli(curve.A);

    // https://en.wikipedia.org/wiki/Trisectrix_of_Maclaurin
    TrisectrixOfMaclaurin(t: Angle, a: Number): Number
        => (2.0 * a) / (t / 3.0).Cos;

    GetRadius(curve: TrisectrixOfMaclaurin, t: Angle): Number
        => t.TrisectrixOfMaclaurin(curve.A);

    // https://en.wikipedia.org/wiki/Conchoid_of_de_Sluze
    ConchoidOfDeSluze(t: Angle, a: Number): Number
        => t.Sec + a * t.Cos;

    GetRadius(curve: ConchoidOfDeSluze, t: Angle): Number
        => t.ConchoidOfDeSluze(curve.A);

    // https://en.wikipedia.org/wiki/Sinusoidal_spiral
    SinusoidalSpiral(t: Angle, a: Number, n: Number): Number
        => (a.Pow(n) * (t * n).Cos).InversePow(a);

    GetRadius(curve: SinusoidalSpiral, t: Angle): Number
        => t.SinusoidalSpiral(curve.A, curve.N);

    // https://en.wikipedia.org/wiki/Fermat%27s_spiral
    FermatsSpiral(t: Angle, a: Number): Number
		=> (a * t.Turns.Sqr).Sqrt;

    GetRadius(curve: FermatsSpiral, t: Angle): Number
        => t.FermatsSpiral(curve.A);
    
	// https://en.wikipedia.org/wiki/Logarithmic_spiral
	LogarithmicSpiral(t: Angle, a: Number, k: Number): Number
		=> a * (t.Radians * k).Exp;

    GetRadius(curve: LogarithmicSpiral, t: Angle): Number
		=> t.LogarithmicSpiral(curve.A, curve.K);
}

type CycloidOfCeva
    implements IPolarCurve, IOpenShape
{ }

type Limacon 
    implements IPolarCurve, IOpenShape
{
    A: Number;
    B: Number;  
}

type Cardoid 
    implements IPolarCurve, IClosedShape
{
}

type Rose 
    implements IPolarCurve, IClosedShape
{
    K: Integer;
}

type ArchimedeanSpiral 
    implements IPolarCurve, IOpenShape
{
    A: Number;
    B: Number;
}

type ConicSection 
    implements IPolarCurve, IOpenShape
{
    Eccentricity: Number;
    SemiLatusRectum: Number;
}

type LemniscateOfBernoulli
    implements IPolarCurve, IOpenShape
{
    A: Number;
}

type TrisectrixOfMaclaurin
    implements IPolarCurve, IOpenShape
{
    A: Number;
}

type ConchoidOfDeSluze
	implements IPolarCurve, IOpenShape
{
	A: Number;
}

type TschirnhausenCubic
    implements IPolarCurve, IOpenShape
{
    A: Number;
}

type SinusoidalSpiral
    implements IPolarCurve, IOpenShape
{
    A: Number;
    N: Number;
}

// https://en.wikipedia.org/wiki/Fermat%27s_spiral
type FermatsSpiral
    implements IPolarCurve, IOpenShape
{
	A: Number;
}

// https://en.wikipedia.org/wiki/Logarithmic_spiral
type LogarithmicSpiral
    implements IPolarCurve, IOpenShape
{
	A: Number;
	K: Number;
}

//====
// Standard 3D Curves

library Curves3D
{
    Eval(curve: QuadraticBezier3D, t: Number): Vector3
		=> curve.A.QuadraticBezier(curve.B, curve.C, t);

    Eval(curve: CubicBezier3D, t: Number): Vector3
		=> curve.A.QuadraticBezier(curve.B, curve.C, t);
}

// https://en.wikipedia.org/wiki/B%C3%A9zier_curve
type CubicBezier3D
    implements IArray<Vector3>, IOpenShape
{
    A: Vector3;
    B: Vector3;
    C: Vector3;
    D: Vector3;
}

// https://en.wikipedia.org/wiki/B%C3%A9zier_curve
type QuadraticBezier3D
    implements IArray<Vector3>, IOpenShape
{
    A: Vector3;
    B: Vector3;
    C: Vector3;
}

//====
// 3D Angular curves

interface IAngularCurve3D 
    inherits ICurve3D
{
	GetPoint(curve: Self, t: Angle): Vector3;
}

library AngularCurves3D
{
    Eval(curve: IAngularCurve3D, t: Number): Vector3
		=> curve.GetPoint(t.Turns);

    // https://en.wikipedia.org/wiki/Torus_knot
    TorusKnot(t: Angle, p: Number, q: Number): Vector3
    {
        var r = (t * q).Cos + 2.0;
        var x = r * (t * p).Cos;
        var y = r * (t * p).Sin;    
        var z = -(t * q).Sin;
        return (x, y, z);
    }

    GetPoint(curve: TorusKnot, t: Angle): Vector3
        => t.TorusKnot(curve.P, curve.Q) * curve.Radius;

    // https://en.wikipedia.org/wiki/Trefoil_knot
    TrefoilKnot(t: Angle): Vector3
        => (t.Sin + (t * 2.0).Sin * 2.0,
            t.Cos + (t * 2.0).Cos * 2.0,
            -(t * 3.0).Sin);

    GetPoint(curve: TrefoilKnot, t: Angle): Vector3
        => t.TrefoilKnot;

    // https://en.wikipedia.org/wiki/Figure-eight_knot_(mathematics)
    FigureEightKnot(t: Angle): Vector3
        => ((2.0 + (t * 2.0).Cos) * (t * 3.0).Cos,
            (2.0 + (t * 2.0).Cos) * (t * 3.0).Sin,
            (t * 4.0).Sin);

    GetPoint(curve: FigureEightKnot, t: Angle): Vector3
        => t.FigureEightKnot;

    // https://en.wikipedia.org/wiki/Parametric_equation#Helix
    Helix(t: Angle, revs: Number): Vector3
        => ((t * revs).Sin, 
            (t * revs).Cos,
            t.Turns);

    GetPoint(curve: Helix, t: Angle): Vector3
        => t.Helix(curve.NumTurns) * (curve.Radius, curve.Radius, curve.Height);
}

type TorusKnot
    implements IAngularCurve3D, IClosedShape
{
    P: Integer;
	Q: Integer;
	Radius: Number;
}

type TrefoilKnot
    implements IAngularCurve3D, IClosedShape
{
}

type FigureEightKnot
	implements IAngularCurve3D, IClosedShape
{
}

type Helix
	implements IAngularCurve3D, IOpenShape
{
	Radius: Number;
	Height: Number;
	NumTurns: Number;
}

