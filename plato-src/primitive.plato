// In Plato, the primitive types are assumed to exist, by name, by the compiler.
// This file is used to define the relationships and member data contained in those primitives.   

// A floating point representation of a real float 
type float 
    implements IReal
{ }

// A positive or negative whole float 
type Integer   
    implements IWholefloat
{ }

// Text
type String
    implements IValue, IOrderable, IArray<Character>
{ }

// Truth value (true or false)
type Boolean 
    implements IValue, IOrderable, IBoolean
{ }

// A single character of text 
type Character
    implements IValue, IOrderable
{ }

// A run-time checked value. 
type Dynamic
{ }

// A value that represents a type 
type Type 
{ }

// Information contained in an exception 
type Error
{ }

type Tuple2<T0, T1>
{
    X0: T0; X1: T1; 
}

type Tuple3<T0, T1, T2>
{
    X0: T0; X1: T1; X2: T2;  
}

type Tuple4<T0, T1, T2, T3>
{
    X0: T0; X1: T1; X2: T2; X3: T3;  
}

type Tuple5<T0, T1, T2, T3, T4>
{
    X0: T0; X1: T1; X2: T2; X3: T3; X4: T4;  
}

type Tuple6<T0, T1, T2, T3, T4, T5>
{
    X0: T0; X1: T1; X2: T2; X3: T3; X4: T4; X5: T5;  
}

type Tuple7<T0, T1, T2, T3, T4, T5, T6>
{
    X0: T0; X1: T1; X2: T2; X3: T3; X4: T4; X5: T5; X6: T6;  
}

type Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>
{
    X0: T0; X1: T1; X2: T2; X3: T3; X4: T4; X5: T5; X6: T6; X7: T7;  
}

type Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>
{
    X0: T0; X1: T1; X2: T2; X3: T3; X4: T4; X5: T5; X6: T6; X7: T7; X8: T8;  
}

type Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>
{
    X0: T0; X1: T1; X2: T2; X3: T3; X4: T4; X5: T5; X6: T6; X7: T7; X8: T8; X9: T9; 
}

type Function0<TR> { }
type Function1<T0, TR> { }
type Function2<T0, T1, TR> { }
type Function3<T0, T1, T2, TR> { }
type Function4<T0, T1, T2, T3, TR> { }
type Function5<T0, T1, T2, T3, T4, TR> { }
type Function6<T0, T1, T2, T3, T4, T5, TR> { }
type Function7<T0, T1, T2, T3, T4, T5, T6, TR> { }
type Function8<T0, T1, T2, T3, T4, T5, T6, T7, TR> { }
type Function9<T0, T1, T2, T3, T4, T5, T6, T7, T8, TR> { }
type Function10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, TR> { }

type Array<T> 
    implements IArray<T>
{ }

type Array2D<T>
    implements IArray2D<T>
{ }

type Array3D<T>
    implements IArray3D<T>
{ }

// A 2-dimensional vector
type Vector2
    implements IVector
{
    X: float;
    Y: float;
}

// A 3-dimensional vector    
type Vector3
    implements IVector
{
    X: float;
    Y: float;
    Z: float;
}

// A 4-dimensional vector
type Vector4
    implements IVector
{
    X: float;
    Y: float;
    Z: float;
    W: float;
}

// Affine 2D transformation matrix 
// https://en.wikipedia.org/wiki/Transformation_matrix#Affine_transformations
type Matrix3x2 
    implements IValue, IArray<Vector3>
{
    Row1: Vector2;   
    Row2: Vector2;   
    Row3: Vector2;   
}

// Affine 3D transformation matrix 
// https://en.wikipedia.org/wiki/Transformation_matrix#Affine_transformations
// https://mindcontrol.org/~hplus/graphics/matrix-layout.html
type Matrix4x4
    implements IValue, IArray<Vector4>
{
    Row1: Vector4;
    Row2: Vector4;
    Row3: Vector4;
    Row4: Vector4;
}

type Quaternion
    implements IValue, IArray<float>
{
    X: float;
    Y: float;
    Z: float;
    W: float;
}
